; 
; PureBasic 5.70 LTS beta 3 (Windows - x64) generated code
; 
; (c) 2018 Fantaisie Software
; 
; The header must remain intact for Re-Assembly
; 
; Xml
; Thread
; StatusBar
; Sort
; Scintilla
; Requester
; Process
; Preference
; PackerBriefLZ
; Packer
; Menu
; Math
; Library
; ImagePluginPNG
; FileSystem
; File
; DragDrop
; Gadget
; System
; Window
; Event
; Map
; ClipboardImage
; Desktop
; Date
; Console
; Clipboard
; CipherMD5
; Cipher
; Array
; 2DDrawing
; Image
; LinkedList
; AlphaImage
; ImagePluginBMP
; ImagePlugin
; VectorDrawing
; String
; Memory
; Font
; Object
; SimpleList
; :System
; gdi32.lib
; kernel32.lib
; shell32.lib
; user32.lib
; :Import
; wsock32.lib
; C:\PureBasic\svn\v5.70\Build\x64\ide\NetworkSupport.obj
; 
format MS64 COFF
; 
; 
extrn PB_NewList
extrn PB_NewMap
extrn PB_AddElement
extrn PB_AddGadgetColumn
extrn PB_AddGadgetItem
extrn PB_AddGadgetItem2
extrn PB_AddGadgetItem3
extrn PB_AddKeyboardShortcut
extrn PB_AddStatusBarField
extrn PB_AllocateMemory
extrn PB_Asc
extrn PB_Blue
extrn PB_Box2
extrn PB_ButtonGadget
extrn PB_ButtonGadget2
extrn PB_ButtonImageGadget
extrn PB_ButtonImageGadget2
extrn PB_CatchImage
extrn PB_CatchXML
extrn PB_ChangeCurrentElement
extrn PB_ChildXMLNode
extrn PB_Chr
extrn PB_ClearGadgetItems
extrn PB_ClearList
extrn PB_ClearStructure
extrn PB_CloseFile
extrn PB_CloseGadgetList
extrn PB_CloseLibrary
extrn PB_ClosePreferences
extrn PB_CloseProgram
extrn PB_CloseSubMenu
extrn PB_CloseWindow
extrn PB_ColorRequester2
extrn PB_ComboBoxGadget
extrn PB_ComboBoxGadget2
extrn PB_CompareMemoryString
extrn PB_CompareMemoryString2
extrn PB_CompareMemoryString3
extrn PB_CompareMemoryString4
extrn PB_ContainerGadget
extrn PB_ContainerGadget2
extrn PB_CopyMemory
extrn PB_CopyMemoryString
extrn PB_CopyMemoryString2
extrn PB_CountGadgetItems
extrn PB_CountString
extrn PB_CreateDirectory
extrn PB_CreateFile
extrn PB_CreateImage
extrn PB_CreateImage2
extrn PB_CreateMutex
extrn PB_CreatePopupMenu
extrn PB_CreateStatusBar
extrn PB_CreateThread
extrn PB_Date
extrn PB_Delay
extrn PB_DeleteElement
extrn PB_DeleteFile
extrn PB_DesktopHeight
extrn PB_DesktopScaledX
extrn PB_DesktopScaledY
extrn PB_DesktopWidth
extrn PB_DesktopX
extrn PB_DesktopY
extrn PB_DirectoryEntryName
extrn PB_DirectoryEntryType
extrn PB_DisableGadget
extrn PB_DisableMenuItem
extrn PB_DisableWindow
extrn PB_DisplayPopupMenu
extrn PB_DragPrivate2
extrn PB_DragText2
extrn PB_DrawImage
extrn PB_DrawingBuffer
extrn PB_DrawingBufferPitch
extrn PB_DrawingBufferPixelFormat
extrn PB_DrawingMode
extrn PB_DrawText3
extrn PB_EditorGadget
extrn PB_EditorGadget2
extrn PB_ElapsedMilliseconds
extrn PB_EnableGadgetDrop2
extrn PB_EndAlphaImage
extrn PB_EndDragDrop
extrn PB_EndThread
extrn PB_EndVectorDrawing
extrn PB_EndXML
extrn PB_Eof
extrn PB_Event_Free
extrn PB_Event_Init
extrn PB_EventGadget
extrn PB_EventMenu
extrn PB_EventType
extrn PB_EventWindow
extrn PB_ExamineDesktops
extrn PB_ExamineDirectory
extrn PB_ExamineXMLAttributes
extrn PB_FileSeek
extrn PB_FileSize
extrn PB_FindString2
extrn PB_Fingerprint
extrn PB_FinishDirectory
extrn PB_FirstElement
extrn PB_FontID
extrn PB_FormatDate
extrn PB_FrameGadget
extrn PB_FreeDesktops
extrn PB_FreeFiles
extrn PB_FreeFileSystem
extrn PB_FreeFonts
extrn PB_FreeGadget
extrn PB_FreeGadgets
extrn PB_FreeImage
extrn PB_FreeImages
extrn PB_FreeLibraries
extrn PB_FreeList
extrn PB_FreeMap
extrn PB_FreeMemory
extrn PB_FreeMemorys
extrn PB_FreeMutex
extrn PB_FreeObjects
extrn PB_FreePackers
extrn PB_FreePreferences
extrn PB_FreeWindows
extrn PB_FreeXML
extrn PB_GadgetHeight
extrn PB_GadgetHeight2
extrn PB_GadgetID
extrn PB_GadgetType
extrn PB_GadgetWidth
extrn PB_GadgetWidth2
extrn PB_GetActiveGadget
extrn PB_GetEnvironmentVariable
extrn PB_GetExtensionPart
extrn PB_GetFilePart
extrn PB_GetFunction
extrn PB_GetGadgetAttribute
extrn PB_GetGadgetData
extrn PB_GetGadgetFont
extrn PB_GetGadgetItemData
extrn PB_GetGadgetItemState
extrn PB_GetGadgetItemText
extrn PB_GetGadgetItemText2
extrn PB_GetGadgetState
extrn PB_GetGadgetText
extrn PB_GetHomeDirectory
extrn PB_GetPathPart
extrn PB_GetWindowState
extrn PB_GetXMLNodeName
extrn PB_GetXMLNodeOffset
extrn PB_GetXMLNodeText
extrn PB_Green
extrn PB_Hex
extrn PB_Hex2
extrn PB_HideGadget
extrn PB_HideWindow
extrn PB_HideWindow2
extrn PB_ImageGadget
extrn PB_ImageHeight
extrn PB_ImageID
extrn PB_ImageOutput
extrn PB_ImageWidth
extrn PB_Init2DDrawing
extrn PB_InitAlphaImage
extrn PB_InitArray
extrn PB_InitBMPImagePlugin
extrn PB_InitDesktop
extrn PB_InitDragDrop
extrn PB_InitFile
extrn PB_InitFont
extrn PB_InitGadget
extrn PB_InitImage
extrn PB_InitImageDecoder
extrn PB_InitLibrary
extrn PB_InitList
extrn PB_InitMap
extrn PB_InitMemory
extrn PB_InitMenu
extrn PB_InitPacker
extrn PB_InitPreferences
extrn PB_InitProcess
extrn PB_InitRequester
extrn PB_InitScintilla2
extrn PB_InitStatusBar
extrn PB_InitThread
extrn PB_InitVectorDrawing
extrn PB_InitWindow
extrn PB_InitXML
extrn PB_InputRequester
extrn PB_Int
extrn PB_IsGadget
extrn PB_IsImage
extrn PB_IsWindow
extrn PB_KillProgram
extrn PB_LastElement
extrn PB_LCase
extrn PB_Left
extrn PB_Len
extrn PB_Line2
extrn PB_ListIconGadget2
extrn PB_ListIndex
extrn PB_ListSize
extrn PB_ListViewGadget
extrn PB_LoadFont2
extrn PB_Loc
extrn PB_LockMutex
extrn PB_Lof
extrn PB_LSet2
extrn PB_LTrim
extrn PB_MemoryStringLength
extrn PB_MemoryStringLength2
extrn PB_MenuBar
extrn PB_MenuItem
extrn PB_MessageRequester
extrn PB_MessageRequester2
extrn PB_Mid2
extrn PB_MoveMemory
extrn PB_NextDirectoryEntry
extrn PB_NextElement
extrn PB_NextXMLAttribute
extrn PB_NextXMLNode
extrn PB_OpenFile
extrn PB_OpenGadgetList
extrn PB_OpenLibrary
extrn PB_OpenPreferences
extrn PB_OpenSubMenu
extrn PB_OpenWindow2
extrn PB_OpenWindow3
extrn PB_OptionGadget
extrn PB_OSVersion
extrn PB_OutputHeight
extrn PB_OutputWidth
extrn PB_PanelGadget
extrn PB_PeekA
extrn PB_PeekB
extrn PB_PeekC
extrn PB_PeekD
extrn PB_PeekF
extrn PB_PeekL
extrn PB_PeekQ
extrn PB_PeekS
extrn PB_PeekS2
extrn PB_PeekS3
extrn PB_PeekW
extrn PB_Plot2
extrn PB_PokeB
extrn PB_PokeC
extrn PB_PokeI
extrn PB_PokeL
extrn PB_PokeS
extrn PB_PokeS3
extrn PB_PreferenceGroup
extrn PB_PrintN
extrn PB_ProgramParameter
extrn PB_ProgressBarGadget
extrn PB_Random
extrn PB_ReadData
extrn PB_ReadFile
extrn PB_ReadPreferenceLong
extrn PB_ReadPreferenceString
extrn PB_ReadString
extrn PB_ReadString2
extrn PB_ReadStringFormat
extrn PB_ReAllocateMemory
extrn PB_Red
extrn PB_RemoveEnvironmentVariable
extrn PB_RemoveGadgetColumn
extrn PB_RemoveGadgetItem
extrn PB_RemoveString
extrn PB_ReplaceString
extrn PB_ReplaceString2
extrn PB_ResetList
extrn PB_ResizeGadget
extrn PB_ResizeWindow
extrn PB_RGB
extrn PB_Right
extrn PB_RootXMLNode
extrn PB_Round_DOUBLE
extrn PB_RSet2
extrn PB_RTrim
extrn PB_RunProgram3
extrn PB_SaveFileRequester
extrn PB_ScintillaGadget
extrn PB_ScintillaSendMessage
extrn PB_ScintillaSendMessage2
extrn PB_ScintillaSendMessage3
extrn PB_ScrollAreaGadget2
extrn PB_ScrollAreaGadget3
extrn PB_ScrollBarGadget
extrn PB_ScrollBarGadget2
extrn PB_SelectedFilePattern
extrn PB_SelectElement
extrn PB_SetActiveGadget
extrn PB_SetActiveWindow
extrn PB_SetClipboardText
extrn PB_SetEnvironmentVariable
extrn PB_SetGadgetAttribute
extrn PB_SetGadgetData
extrn PB_SetGadgetFont
extrn PB_SetGadgetItemAttribute2
extrn PB_SetGadgetItemColor2
extrn PB_SetGadgetItemData
extrn PB_SetGadgetItemState
extrn PB_SetGadgetItemText2
extrn PB_SetGadgetState
extrn PB_SetGadgetText
extrn PB_SetWindowCallback2
extrn PB_SetWindowTitle
extrn PB_SortArray2
extrn PB_SortList
extrn PB_SortStructuredArray2
extrn PB_Space
extrn PB_SplitterGadget
extrn PB_SplitterGadget2
extrn PB_StartDrawing
extrn PB_StatusBarHeight
extrn PB_StatusBarText
extrn PB_StopDrawing
extrn PB_Str
extrn PB_StrD
extrn PB_StrD2
extrn PB_StrF
extrn PB_StrF2
extrn PB_StringByteLength
extrn PB_StringByteLength2
extrn PB_StringField
extrn PB_StringGadget
extrn PB_StringGadget2
extrn PB_StrU2
extrn PB_TextGadget
extrn PB_TextGadget2
extrn PB_TrackBarGadget2
extrn PB_TreeGadget2
extrn PB_Trim
extrn PB_UCase
extrn PB_UncompressMemory2
extrn PB_UnlockMutex
extrn PB_UseBriefLZPacker
extrn PB_UseGadgetList
extrn PB_UseMD5Fingerprint
extrn PB_UsePNGImageDecoder
extrn PB_Val
extrn PB_ValD
extrn PB_WaitProgram2
extrn PB_WindowEvent
extrn PB_WindowHeight
extrn PB_WindowID
extrn PB_WindowWidth
extrn PB_WindowX
extrn PB_WindowY
extrn PB_WriteData
extrn PB_WritePreferenceLong
extrn PB_WriteString
extrn PB_WriteString2
extrn PB_WriteStringFormat
extrn PB_WriteStringN
extrn PB_XMLAttributeName
extrn PB_XMLAttributeValue
extrn PB_XMLChildCount
extrn PB_XMLNodeType
extrn AttachThreadInput
extrn BringWindowToTop
extrn CallWindowProcW
extrn CloseHandle
extrn CreateMutexW
extrn CreateNamedPipeW
extrn CreatePipe
extrn DefWindowProcW
extrn ExitProcess
extrn GetAsyncKeyState
extrn GetCurrentDirectoryW
extrn GetCurrentProcessId
extrn GetCurrentThreadId
extrn GetDC
extrn GetForegroundWindow
extrn GetLastError
extrn GetLocaleInfoW
extrn GetModuleFileNameW
extrn GetModuleHandleW
extrn GetParent
extrn GetPropW
extrn GetStockObject
extrn GetSysColor
extrn GetSystemDefaultLCID
extrn GetTextExtentPoint32W
extrn GetWindowLongPtrW
extrn GetWindowThreadProcessId
extrn HeapCreate
extrn HeapDestroy
extrn InvalidateRect
extrn IsIconic
extrn IsZoomed
extrn LockWindowUpdate
extrn MD5Final
extrn MD5Init
extrn MD5Update
extrn MultiByteToWideChar
extrn Network_CheckAccept
extrn Network_CheckData
extrn Network_CloseSocket
extrn Network_ConnectSocketCheck
extrn Network_ConnectSocketStart
extrn Network_CreateSocket
extrn Network_Initialize
extrn Network_Listen
extrn Network_ReceiveData
extrn Network_SendData
extrn Network_SendString
extrn PeekNamedPipe
extrn ReadFile
extrn RedrawWindow
extrn ReleaseCapture
extrn ReleaseDC
extrn ReleaseMutex
extrn RemovePropW
extrn RtlZeroMemory
extrn SHGetPathFromIDListW
extrn SHGetSpecialFolderLocation
extrn SelectObject
extrn SendMessageW
extrn SetCapture
extrn SetFocus
extrn SetForegroundWindow
extrn SetPropW
extrn SetWindowLongPtrW
extrn SetWindowPos
extrn ShellExecuteW
extrn ShowWindow
extrn WriteFile
extrn memset
extrn rijndael_cbc_decrypt
extrn rijndael_cbc_encrypt
extrn rijndael_ecb_decrypt
extrn rijndael_ecb_encrypt
extrn rijndael_set_key
extrn SYS_CopyString
extrn SYS_InitDynamicStructure
extrn SYS_ToAscii
extrn SYS_FreeStructureStrings
extrn SYS_FreeArray
extrn SYS_StringEqual
extrn SYS_StringSuperior
extrn SYS_AllocateString4
extrn SYS_FastAllocateString4
extrn SYS_FastAllocateStringFree4
extrn SYS_FreeString
extrn SYS_FreeStringNoCheck
extrn SYS_AllocateArray
extrn SYS_AllocateMultiArray
extrn SYS_ReAllocateArray
extrn PB_CreateMapElement
extrn PB_GetMapElement
extrn PB_StringBase
extrn SYS_InitString
extrn SYS_FreeStrings
; 
extrn PB_StringBasePosition
public _PB_Instance
public PB_ExecutableType
public PB_OpenGLSubsystem
public _PB_MemoryBase
public PB_Instance
public PB_MemoryBase
public PB_EndFunctions

macro pb_public symbol
{
  public  _#symbol
  public symbol
_#symbol:
symbol:
}

macro    pb_align value { rb (value-1) - ($-_PB_DataSection + value-1) mod value }
macro pb_bssalign value { rb (value-1) - ($-_PB_BSSSection  + value-1) mod value }

define ll_setsortarrow_notheme_sortarrowimage l_sortarrowimage
define ll_setsortarrow_notheme_sortarrowimage l_sortarrowimage
define ll_loadlanguage_language l_language
define ll_loadlanguage_language l_language
define ll_initsyntaxcheckarrays_basickeywords l_basickeywords
define ll_initsyntaxcheckarrays_asmkeywords l_asmkeywords
define ll_variablegadget_create_variablegadget_byte l_variablegadget_byte
define ll_variablegadget_create_variablegadget_byte l_variablegadget_byte
define ll_variablegadget_create_variablegadget_word l_variablegadget_word
define ll_variablegadget_create_variablegadget_word l_variablegadget_word
define ll_variablegadget_create_variablegadget_long l_variablegadget_long
define ll_variablegadget_create_variablegadget_long l_variablegadget_long
define ll_variablegadget_create_variablegadget_struct l_variablegadget_struct
define ll_variablegadget_create_variablegadget_struct l_variablegadget_struct
define ll_variablegadget_create_variablegadget_string l_variablegadget_string
define ll_variablegadget_create_variablegadget_string l_variablegadget_string
define ll_variablegadget_create_variablegadget_float l_variablegadget_float
define ll_variablegadget_create_variablegadget_float l_variablegadget_float
define ll_variablegadget_create_variablegadget_fixed l_variablegadget_fixed
define ll_variablegadget_create_variablegadget_fixed l_variablegadget_fixed
define ll_variablegadget_create_variablegadget_char l_variablegadget_char
define ll_variablegadget_create_variablegadget_char l_variablegadget_char
define ll_variablegadget_create_variablegadget_double l_variablegadget_double
define ll_variablegadget_create_variablegadget_double l_variablegadget_double
define ll_variablegadget_create_variablegadget_quad l_variablegadget_quad
define ll_variablegadget_create_variablegadget_quad l_variablegadget_quad
define ll_variablegadget_create_variablegadget_integer l_variablegadget_integer
define ll_variablegadget_create_variablegadget_integer l_variablegadget_integer
define ll_variablegadget_create_variablegadget_ascii l_variablegadget_ascii
define ll_variablegadget_create_variablegadget_ascii l_variablegadget_ascii
define ll_variablegadget_create_variablegadget_unicode l_variablegadget_unicode
define ll_variablegadget_create_variablegadget_unicode l_variablegadget_unicode
define ll_variablegadget_create_variablegadget_nodeopen l_variablegadget_nodeopen
define ll_variablegadget_create_variablegadget_nodeopen l_variablegadget_nodeopen
define ll_variablegadget_create_variablegadget_nodeclose l_variablegadget_nodeclose
define ll_variablegadget_create_variablegadget_nodeclose l_variablegadget_nodeclose
define ll_createpipecommunication_winpipe_vtbl l_winpipe_vtbl
define ll_createpipecommunication_winpipe_vtbl l_winpipe_vtbl
define ll_network_setupencryption_cipherinitializer l_cipherinitializer
define ll_network_setupencryption_cipherinitializer l_cipherinitializer
define ll_network_setupencryption_cipherinitializer l_cipherinitializer
define ll_network_setupencryption_cipherinitializer l_cipherinitializer
define ll_network_setupencryption_cipherinitializer l_cipherinitializer
define ll_network_setupencryption_cipherinitializer l_cipherinitializer
define ll_network_setupencryption_cipherinitializer l_cipherinitializer
define ll_network_setupencryption_ciperinitializer l_ciperinitializer
define ll_createnetworkcommunication_networkclient_vtbl l_networkclient_vtbl
define ll_createnetworkcommunication_networkserver_vtbl l_networkserver_vtbl
define ll_openmemoryviewerwindow_memoryviewer_specialchars l_memoryviewer_specialchars
define ll_profiler_drawnumber_profiler_numbers l_profiler_numbers
define ll_openprofilerwindow_profiler_arrow l_profiler_arrow
define ll_openprofilerwindow_profiler_arrow l_profiler_arrow
define ll_openprofilerwindow_profiler_arrow l_profiler_arrow
define ll_openprofilerwindow_profiler_select l_profiler_select
define ll_openprofilerwindow_profiler_select l_profiler_select
define ll_openprofilerwindow_profiler_select l_profiler_select
define ll_openprofilerwindow_profiler_cross l_profiler_cross
define ll_openprofilerwindow_profiler_cross l_profiler_cross
define ll_openprofilerwindow_profiler_cross l_profiler_cross
define ll_openprofilerwindow_profiler_zoomin l_profiler_zoomin
define ll_openprofilerwindow_profiler_zoomin l_profiler_zoomin
define ll_openprofilerwindow_profiler_zoomin l_profiler_zoomin
define ll_openprofilerwindow_profiler_zoomout l_profiler_zoomout
define ll_openprofilerwindow_profiler_zoomout l_profiler_zoomout
define ll_openprofilerwindow_profiler_zoomout l_profiler_zoomout
define ll_openprofilerwindow_profiler_zoomall l_profiler_zoomall
define ll_openprofilerwindow_profiler_zoomall l_profiler_zoomall
define ll_openprofilerwindow_profiler_zoomall l_profiler_zoomall
define ll_profiler_debuggerevent_profiler_colors l_profiler_colors
define ll_profiler_debuggerevent_profiler_colors l_profiler_colors
define ll_profiler_debuggerevent_profiler_colors l_profiler_colors
define ll_standalone_creategui_minimizeimagedata l_minimizeimagedata
define ll_standalone_creategui_minimizeimagedata l_minimizeimagedata
define ll_standalone_creategui_minimizeimagedata l_minimizeimagedata
define ll_standalone_creategui_maximizeimagedata l_maximizeimagedata
define ll_standalone_creategui_maximizeimagedata l_maximizeimagedata
define ll_standalone_creategui_maximizeimagedata l_maximizeimagedata
public PureBasicStart
; 
section '.code' code readable executable align 4096
; 
; 
PureBasicStart:
; 
  SUB    rsp,40
  MOV    r8,I_BSSEnd-I_BSSStart
  XOR    rdx,rdx
  MOV    rcx,I_BSSStart
  CALL   memset
  XOR    rcx,rcx
  CALL   GetModuleHandleW
  MOV    [PB_Instance],rax
  XOR    r8,r8
  MOV    rdx,4096
  XOR    rcx,rcx
  CALL   HeapCreate
  MOV    [PB_MemoryBase],rax
  MOV    rax,PB_DataSectionStart
  MOV    qword [PB_DataPointer],rax
  CALL   SYS_InitString
  CALL   PB_InitFont
  CALL   PB_InitMemory
  CALL   PB_InitVectorDrawing
  CALL   PB_InitImageDecoder
  CALL   PB_InitBMPImagePlugin
  CALL   PB_InitAlphaImage
  CALL   PB_InitList
  CALL   PB_InitImage
  CALL   PB_Init2DDrawing
  CALL   PB_InitArray
  CALL   PB_InitDesktop
  CALL   PB_InitMap
  CALL   PB_Event_Init
  CALL   PB_InitWindow
  CALL   PB_InitGadget
  CALL   PB_InitDragDrop
  CALL   PB_InitFile
  CALL   PB_InitLibrary
  CALL   PB_InitMenu
  CALL   PB_InitPacker
  CALL   PB_InitPreferences
  CALL   PB_InitProcess
  CALL   PB_InitRequester
  CALL   PB_InitStatusBar
  CALL   PB_InitThread
  CALL   PB_InitXML
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerSelect #PB_Compiler_OS
; CompilerCase #PB_OS_Windows 
; XIncludeFile "..\PureBasicIDE\CompilerFlags.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf Defined(DEMO, #PB_Constant) = 0
; #DEMO = 0
; CompilerEndIf
; 
; 
; CompilerIf Defined(GTKVersion, #PB_Constant) = 0
; #GTKVersion = 2 
; CompilerEndIf
; 
; 
; 
; 
; CompilerIf Defined(Debug, #PB_Constant) = 0
; #DEBUG = 0
; CompilerEndIf
; 
; 
; CompilerIf Not Defined(SpiderBasic, #PB_Constant)
; #SpiderBasic = 0
; CompilerEndIf
; 
; CompilerIf #SpiderBasic
; #ProductName$ = "PureBasic"
; #ProductWebSite$ = "https://www.purebasic.com"
; 
; #SourceFileExtension  = ".pb"
; #IncludeFileExtension = ".pbi"
; #ProjectFileExtension = ".pbp"
; #FormFileExtension    = ".pbf"
; 
; #CatalogFileIDE = "PB_IDE"
; CompilerEndIf
; 
; 
; 
; 
; #MAX_AddTools           = 100  
; #MAX_RecentFiles        = 100  
; #MAX_AddHelp            = 100  
; #MAX_FindHistory        = 100  
; #MAX_MarkersPerFile     = 100  
; 
; #MAX_ToolbarButtons     = 50   
; #MAX_FoldWords          = 100  
; 
; #MAX_ErrorLog           = 256  
; #MAX_LineHistory        = 20   
; #MAX_Constants          = 32   
; #MAX_EpressionHistory   = 30   
; #MAX_ThemePreview       = 17   
; #MAX_ConfigLines        = 300  
; #MAX_ResourceFiles      = 20   
; #MAX_MenuTargets        = 100  
; 
; 
; 
; CompilerSelect #PB_Compiler_Processor
; CompilerCase #PB_Processor_x86
; #CompileX86 = 0
; #CompileX64 = 1
; #CompilePPC = 0
; 
; CompilerCase #PB_Processor_PowerPC
; 
; 
; Global DefaultEditorFontName$
; 
; 
; 
; 
; CompilerSelect #PB_Compiler_OS 
; CompilerCase #PB_OS_Windows 
; #CompileWindows   = 1  
; #CompileLinux     = 0
; #CompileMac       = 0
; #CompileMacCocoa  = 0
; #CompileMacCarbon = 0
; #CompileLinuxGtk1 = 0  
; #CompileLinuxGtk2 = 0
; 
; #OS_PureBasic = "Windows"
; 
; #Separator = "\"
; #NewLine   = Chr(13) + Chr(10)
; #NewLineLength = 2
; #PATH_CaseInSensitive = 1  
; 
; 
; 
; 
; #DEFAULT_BigButtons         = 0   
; #DEFAULT_SplitterWidth      = 4
; 
; #DEFAULT_DebuggerSource     = "..\PureBasicDebugger\"
; #DEFAULT_DebuggerStayOnTop  = 1  
; #DEFAULT_DebuggerBringToTop = 0
; 
; #DEFAULT_ListIconImageSize  = 16 
; #DEFAULT_ListIconImageOffset= 2  
; 
; #DEFAULT_VisualDesigner     = "Visual Designer.exe" 
; #DEFAULT_CatalogPath        = "Catalogs\"
; #DEFAILT_LibraryViewerPlugin= "Debugger\"
; #DEFAULT_ThemePath          = "Themes\"
; 
; #DEFAULT_HelpPath           = "Help\"
; 
; If OSVersion() < #PB_OS_Windows_Vista
  CALL   PB_OSVersion
  MOV    r15,rax
  CMP    r15,70
  JGE   _EndIf2
; DefaultEditorFontName$     = "Courier"
  MOV    rdx,_S1
  LEA    rcx,[v_DefaultEditorFontName$]
  CALL   SYS_FastAllocateStringFree4
; Else
  JMP   _EndIf1
_EndIf2:
; DefaultEditorFontName$     = "Consolas" 
  MOV    rdx,_S2
  LEA    rcx,[v_DefaultEditorFontName$]
  CALL   SYS_FastAllocateStringFree4
; EndIf
_EndIf1:
; 
; #DEFAULT_EditorFontSize     = 10
; 
; #DEFAULT_FunctionFile       = "PBFunctionListing.txt"  
; #DEFAULT_ApiFile            = "Compilers\APIFunctionListing.txt" 
; #DEFAULT_NewLineType        = 0 
; #DEFAULT_DLLExtension       = "dll"
; 
; #DEFAULT_ImageBorder        = 0 
; 
; #DEFAULT_CanWindowStayOnTop = 1 
; 
; #DEFAULT_PreferencesTreeWidth = 180 
; 
; #FLAG_Warning               = #MB_ICONWARNING
; #FLAG_Error                 = #MB_ICONERROR
; #FLAG_Question              = #MB_ICONQUESTION
; #FLAG_Info                  = #MB_ICONINFORMATION
; 
; 
; #PB_MessageRequester_ResultOk = 1
; 
; CompilerCase #PB_OS_Linux 
; 
; 
; 
; CompilerIf #SpiderBasic
; 
; CompilerIf #CompileWindows
; #PreferenceFileName$ = "PureBasic.prefs"
; CompilerElse
; 
; CompilerEndIf
; 
; 
; CompilerIf #PB_Compiler_Unicode
; #CharSize = 2
; CompilerElse
; CompilerCase #PB_OS_Linux
; 
; 
; XIncludeFile "DebuggerCommon.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; #NOTHREAD = 0
; 
; 
; 
; 
; 
; #PRINT_DEBUGGER_COMMANDS = 0
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; #LOG_DEBUGGER_COMMANDS = 0
; #LOG_DEBUGGER_FILE     = "debug.log"
; 
; 
; 
; #PUREBASIC_DEBUGGER = 1
; 
; 
; 
; CompilerIf #PB_Compiler_Processor = #PB_Processor_PowerPC
; #DEBUGGER_BigEndian = #False
; CompilerEndIf
; 
; #DEBUGGER_DefaultPort = 10101
; 
; 
; 
; 
; 
; 
; Structure CommandInfo
; Command.l
; Datasize.l
; Value1.l
; Value2.l
; TimeStamp.l
; EndStructure
; 
; Structure CommandStackStruct
; Command.CommandInfo
; CommandData.i
; EndStructure
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; #COMMAND_FatalError = -1
; 
; #ERROR_None    = 0
; #ERROR_Memory  = 1
; #ERROR_Pipe    = 2
; #ERROR_ExeQuit = 3
; #ERROR_Timeout = 4
; #ERROR_Version = 5
; #ERROR_NetworkFail = 6
; 
; 
; 
; 
; 
; 
; Enumeration 
; #COMMAND_Stop
; #COMMAND_Step
; #COMMAND_Run
; #COMMAND_BreakPoint
; #COMMAND_GetRegisterLayout
; #COMMAND_GetRegister
; #COMMAND_SetRegister
; #COMMAND_GetStack
; #COMMAND_GetMemory
; #COMMAND_GetGlobalNames
; #COMMAND_GetGlobals
; #COMMAND_GetLocals
; #COMMAND_GetArrayInfo
; #COMMAND_GetListInfo
; #COMMAND_GetMapInfo
; #COMMAND_GetArrayListData
; #COMMAND_GetHistory
; #COMMAND_GetHistoryLocals
; #COMMAND_GetProcedures
; #COMMAND_GetProcedureStats
; #COMMAND_ResetProcedureStats
; #COMMAND_WatchlistAdd
; #COMMAND_WatchlistRemove
; #COMMAND_GetWatchlist
; #COMMAND_GetLibraries
; #COMMAND_GetLibraryInfo
; #COMMAND_GetObjectText
; #COMMAND_GetObjectData
; #COMMAND_StartProfiler
; #COMMAND_StopProfiler
; #COMMAND_ResetProfiler
; #COMMAND_GetProfilerOffsets
; #COMMAND_GetProfilerData
; #COMMAND_EvaluateExpression
; #COMMAND_EvaluateExpressionWithStruct
; #COMMAND_SetVariable
; #COMMAND_WarningMode
; #COMMAND_Kill
; #COMMAND_GetFile
; #COMMAND_SetPurifier
; #COMMAND_GetModules
; 
; #COMMAND_LastOutgoing
; EndEnumeration
; 
; 
; 
; Enumeration 
; #COMMAND_Init
; #COMMAND_End
; #COMMAND_ExeMode
; #COMMAND_Stopped
; #COMMAND_Continued
; #COMMAND_Debug
; #COMMAND_DebugDouble
; #COMMAND_DebugQuad
; #COMMAND_Error
; #COMMAND_RegisterLayout
; #COMMAND_Register
; #COMMAND_Stack
; #COMMAND_Memory
; #COMMAND_GlobalNames
; #COMMAND_Globals
; #COMMAND_Locals
; #COMMAND_ArrayInfo
; #COMMAND_ArrayData
; #COMMAND_ListInfo
; #COMMAND_ListData
; #COMMAND_MapInfo
; #COMMAND_MapData
; #COMMAND_History
; #COMMAND_HistoryLocals
; #COMMAND_Procedures
; #COMMAND_ProcedureStats
; #COMMAND_WatchlistError
; #COMMAND_Watchlist
; #COMMAND_WatchlistEvent
; #COMMAND_Libraries
; #COMMAND_LibraryInfo
; #COMMAND_ObjectID
; #COMMAND_ObjectText
; #COMMAND_ObjectData
; #COMMAND_ProfilerOffsets
; #COMMAND_ProfilerData
; #COMMAND_Expression
; #COMMAND_SetVariableResult
; #COMMAND_Warning
; #COMMAND_DataBreakPoint
; #COMMAND_File
; #COMMAND_ControlDebugOutput
; #COMMAND_ControlProfiler
; #COMMAND_ControlMemoryViewer
; #COMMAND_ControlLibraryViewer
; #COMMAND_ControlWatchlist
; #COMMAND_ControlVariableViewer
; #COMMAND_ControlCallstack
; #COMMAND_ControlAssemblyViewer
; #COMMAND_ControlPurifier
; #COMMAND_Modules  
; 
; #COMMAND_LastIncoming
; EndEnumeration
; 
; 
; 
; 
; CompilerIf #PRINT_DEBUGGER_COMMANDS | #LOG_DEBUGGER_COMMANDS
; 
; 
; 
; 
; 
; 
; #SCOPE_MAIN     = 0
; #SCOPE_GLOBAL   = 1
; #SCOPE_THREADED = 2
; #SCOPE_LOCAL    = 3
; #SCOPE_STATIC   = 4
; #SCOPE_SHARED   = 5
; 
; #SCOPE_PARAMETER = 6  
; 
; 
; #POINTERMASK    = 1 << 7
; #PARAMMASK      = 1 << 6
; #TYPEMASK       = $3F 
; #IGNORE_POINTER = $7F 
; #IGNORE_PARAM   = $BF 
; 
; Macro IS_POINTER(type)  : ((type) & #POINTERMASK): EndMacro
; Macro IS_PARAMETER(type): ((type) & #PARAMMASK):   EndMacro
; 
; #TYPE_BYTE        =  1
; #TYPE_WORD        =  3
; #TYPE_LONG        =  5
; #TYPE_STRUCTURE   =  7
; #TYPE_STRING      =  8
; #TYPE_FLOAT       =  9
; #TYPE_FIXEDSTRING = 10
; #TYPE_CHARACTER   = 11
; #TYPE_DOUBLE      = 12
; #TYPE_QUAD        = 13
; #TYPE_INTEGER     = 21
; #TYPE_LINKEDLIST  = 14
; #TYPE_ARRAY       = 15
; #TYPE_MAP         = 22
; #TYPE_ASCII       = 24
; #TYPE_UNICODE     = 25
; 
; #TYPE_MAX         = 25  
; 
; 
; 
; Macro IS_BYTE(type)       : (((type) & #TYPEMASK) = #TYPE_BYTE):        EndMacro
; Macro IS_WORD(type)       : (((type) & #TYPEMASK) = #TYPE_WORD):        EndMacro
; Macro IS_LONG(type)       : (((type) & #TYPEMASK) = #TYPE_LONG):        EndMacro
; Macro IS_STRUCTURE(type)  : (((type) & #TYPEMASK) = #TYPE_STRUCTURE):   EndMacro
; Macro IS_STRING(type)     : (((type) & #TYPEMASK) = #TYPE_STRING):      EndMacro
; Macro IS_FLOAT(type)      : (((type) & #TYPEMASK) = #TYPE_FLOAT):       EndMacro
; Macro IS_FIXEDSTRING(type): (((type) & #TYPEMASK) = #TYPE_FIXEDSTRING): EndMacro
; Macro IS_CHARACTER(type)  : (((type) & #TYPEMASK) = #TYPE_CHARACTER):   EndMacro
; Macro IS_DOUBLE(type)     : (((type) & #TYPEMASK) = #TYPE_DOUBLE):      EndMacro
; Macro IS_QUAD(type)       : (((type) & #TYPEMASK) = #TYPE_QUAD):        EndMacro
; Macro IS_INTEGER(type)    : (((type) & #TYPEMASK) = #TYPE_INTEGER):     EndMacro
; Macro IS_LINKEDLIST(type) : (((type) & #TYPEMASK) = #TYPE_LINKEDLIST):  EndMacro
; Macro IS_ARRAY(type)      : (((type) & #TYPEMASK) = #TYPE_ARRAY):       EndMacro
; Macro IS_MAP(type)        : (((type) & #TYPEMASK) = #TYPE_MAP):         EndMacro
; Macro IS_ASCII(type)      : (((type) & #TYPEMASK) = #TYPE_ASCII):       EndMacro
; Macro IS_UNICODE(type)    : (((type) & #TYPEMASK) = #TYPE_UNICODE):     EndMacro
; 
; 
; 
; 
; #LIBRARYINFO_InfoOnly = $00000000 
; #LIBRARYINFO_Objects  = $00000001 
; #LIBRARYINFO_Text     = $00000002 
; #LIBRARYINFO_Data     = $00000004 
; #LIBRARYINFO_SwapData = $00000008 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; #DEBUGGER_Version  = 11
; 
; 
; 
; 
; 
; #MAX_COMMANDSTACK = 800  
; 
; 
; 
; 
; #MAX_REGISTERS = 36
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Interface Communication
; GetInfo.s()  
; Connect()    
; Disconnect() 
; Send(*Command.CommandInfo, *CommandData) 
; Receive(*Command.CommandInfo, *pCommandData.INTEGER) 
; CheckErrors(*Command.CommandInfo, ProcessObject) 
; Close()      
; EndInterface
; 
; Structure CommunicationVtbl
; GetInfo.i
; Connect.i
; Disconnect.i
; Send.i
; Receive.i
; CheckErrors.i
; Close.i
; EndStructure
; 
; 
; 
; 
; 
; Enumeration
; #DEBUGGER_MENU_Return
; #DEBUGGER_MENU_Escape
; #DEBUGGER_MENU_WatchlistAdd
; #DEBUGGER_MENU_CopyVariable
; 
; #DEBUGGER_MENU_ViewAll
; #DEBUGGER_MENU_ViewNonZero
; #DEBUGGER_MENU_ViewRange
; 
; #DEBUGGER_MENU_Zoomin
; #DEBUGGER_MENU_Zoomout
; #DEBUGGER_MENU_File0
; #DEBUGGER_MENU_File255 = #DEBUGGER_MENU_File0+255
; 
; #DEBUGGER_MENU_LAST 
; EndEnumeration
; 
; #POPUPMENU_VariableViewer = 3  
; #POPUPMENU_ArrayViewer = 4     
; #POPUPMENU_Profiler = 7        
; 
; 
; 
; 
; Enumeration
; #DEBUGGER_WINDOW_Network
; #DEBUGGER_WINDOW_Debug
; #DEBUGGER_WINDOW_Asm
; #DEBUGGER_WINDOW_Memory
; #DEBUGGER_WINDOW_Variable
; #DEBUGGER_WINDOW_History
; #DEBUGGER_WINDOW_WatchList
; #DEBUGGER_WINDOW_Library
; #DEBUGGER_WINDOW_Profiler  
; #DEBUGGER_WINDOW_DataBreakPoints
; #DEBUGGER_WINDOW_Purifier
; 
; #DEBUGGER_WINDOW_LAST 
; EndEnumeration
; 
; 
; 
; Enumeration
; #DEBUGGER_GADGET_Network_Log
; #DEBUGGER_GADGET_Network_Abort
; #DEBUGGER_GADGET_Network_Password
; #DEBUGGER_GADGET_Network_Ok
; 
; #DEBUGGER_GADGET_Debug_List
; #DEBUGGER_GADGET_Debug_Copy
; #DEBUGGER_GADGET_Debug_Clear
; #DEBUGGER_GADGET_Debug_Save
; #DEBUGGER_Gadget_Debug_Text
; #DEBUGGER_GADGET_Debug_Entry
; #DEBUGGER_GADGET_Debug_Display  
; 
; #DEBUGGER_GADGET_Asm_Panel
; #DEBUGGER_GADGET_Asm_Stack
; #DEBUGGER_GADGET_Asm_UpdateStack  
; #DEBUGGER_GADGET_Asm_ScrollArea
; #DEBUGGER_GADGET_Asm_Message
; #DEBUGGER_GADGET_Asm_Text0
; #DEBUGGER_GADGET_Asm_TextMax = #DEBUGGER_GADGET_Asm_Text0 + #MAX_REGISTERS 
; #DEBUGGER_GADGET_Asm_Value0
; #DEBUGGER_GADGET_Asm_ValueMax = #DEBUGGER_GADGET_Asm_Value0 + #MAX_REGISTERS
; #DEBUGGER_GADGET_Asm_Set0
; #DEBUGGER_GADGET_Asm_SetMax = #DEBUGGER_GADGET_Asm_Set0 + #MAX_REGISTERS
; #DEBUGGER_GADGET_Asm_TextValue0
; #DEBUGGER_GADGET_Asm_TextValueMax = #DEBUGGER_GADGET_Asm_TextValue0 + #MAX_REGISTERS
; 
; #DEBUGGER_GADGET_Memory_Text  
; #DEBUGGER_GADGET_Memory_To  
; #DEBUGGER_GADGET_Memory_Start
; #DEBUGGER_GADGET_Memory_End
; #DEBUGGER_GADGET_Memory_Display
; #DEBUGGER_GADGET_Memory_Editor
; #DEBUGGER_GADGET_Memory_Container
; #DEBUGGER_GADGET_Memory_List
; #DEBUGGER_GADGET_Memory_ViewType
; #DEBUGGER_GADGET_Memory_CopyText
; #DEBUGGER_GADGET_Memory_SaveText
; #DEBUGGER_GADGET_Memory_SaveRaw
; 
; #DEBUGGER_GADGET_Variable_Panel
; #DEBUGGER_GADGET_Variable_Splitter
; #DEBUGGER_GADGET_Variable_ProgressContainer
; #DEBUGGER_GADGET_Variable_Progress
; #DEBUGGER_GADGET_Variable_Global
; #DEBUGGER_GADGET_Variable_Local
; #DEBUGGER_GADGET_Variable_Update
; 
; #DEBUGGER_GADGET_Variable_ArrayInfo
; #DEBUGGER_GADGET_Variable_LocalArrayInfo
; #DEBUGGER_GADGET_Variable_UpdateArray
; #DEBUGGER_GADGET_Variable_ArraySplitter
; 
; #DEBUGGER_GADGET_Variable_ListInfo
; #DEBUGGER_GADGET_Variable_LocalListInfo   
; #DEBUGGER_GADGET_Variable_UpdateList
; #DEBUGGER_GADGET_Variable_ListSplitter 
; 
; #DEBUGGER_GADGET_Variable_MapInfo
; #DEBUGGER_GADGET_Variable_LocalMapInfo   
; #DEBUGGER_GADGET_Variable_UpdateMap
; #DEBUGGER_GADGET_Variable_MapSplitter 
; 
; #DEBUGGER_GADGET_Variable_Viewer
; #DEBUGGER_GADGET_Variable_AllItems
; #DEBUGGER_GADGET_Variable_NonZeroItems
; #DEBUGGER_GADGET_Variable_ItemRange
; #DEBUGGER_GADGET_Variable_InputRange
; #DEBUGGER_GADGET_Variable_InputName  
; #DEBUGGER_GADGET_Variable_Container  
; #DEBUGGER_GADGET_Variable_Text
; #DEBUGGER_GADGET_Variable_Display
; #DEBUGGER_GADGET_Variable_Copy
; #DEBUGGER_GADGET_Variable_Save
; #DEBUGGER_GADGET_Variable_ViewerProgress
; #DEBUGGER_GADGET_Variable_ViewerContainer
; 
; #DEBUGGER_GADGET_History_Panel
; #DEBUGGER_GADGET_History_ScrollArea
; #DEBUGGER_GADGET_History_Update
; #DEBUGGER_GADGET_History_CurrentLine
; #DEBUGGER_GADGET_History_CurrentFile
; #DEBUGGER_GADGET_History_CurrentText
; #DEBUGGER_GADGET_History_CurrentContainer
; #DEBUGGER_GADGET_History_Updating
; #DEBUGGER_GADGET_History_Stats
; #DEBUGGER_GADGET_History_Reset
; #DEBUGGER_GADGET_History_ResetAll
; #DEBUGGER_GADGET_History_UpdateStats
; 
; #DEBUGGER_GADGET_WatchList_List  
; #DEBUGGER_GADGET_WatchList_Add
; #DEBUGGER_GADGET_WatchList_Remove
; #DEBUGGER_GADGET_WatchList_Clear
; #DEBUGGER_GADGET_WatchList_Procedure
; #DEBUGGER_GADGET_WatchList_Variable
; #DEBUGGER_GADGET_WatchList_Frame
; #DEBUGGER_GADGET_WatchList_Text1
; #DEBUGGER_GADGET_WatchList_Text2    
; 
; #DEBUGGER_GADGET_Breakpoint_List
; #DEBUGGER_GADGET_Breakpoint_Add
; #DEBUGGER_GADGET_Breakpoint_Remove
; #DEBUGGER_GADGET_Breakpoint_Clear
; #DEBUGGER_GADGET_Breakpoint_Procedure
; #DEBUGGER_GADGET_Breakpoint_Condition
; #DEBUGGER_GADGET_Breakpoint_Frame
; #DEBUGGER_GADGET_Breakpoint_Text1
; #DEBUGGER_GADGET_Breakpoint_Text2  
; 
; #DEBUGGER_GADGET_Library_Text1    
; #DEBUGGER_GADGET_Library_LibraryList
; #DEBUGGER_GADGET_Library_ObjectList
; #DEBUGGER_GADGET_Library_ObjectText
; #DEBUGGER_GADGET_Library_ObjectData
; #DEBUGGER_GADGET_Library_ObjectData2
; #DEBUGGER_GADGET_Library_Container  
; #DEBUGGER_GADGET_Library_Update  
; #DEBUGGER_GADGET_Library_Splitter1
; #DEBUGGER_GADGET_Library_Splitter2  
; 
; #DEBUGGER_GADGET_Profiler_Start
; #DEBUGGER_GADGET_Profiler_Stop
; #DEBUGGER_GADGET_Profiler_Reset
; #DEBUGGER_GADGET_Profiler_Update
; #DEBUGGER_GADGET_Profiler_Container
; #DEBUGGER_GADGET_Profiler_Splitter
; #DEBUGGER_GADGET_Profiler_Files
; #DEBUGGER_GADGET_Profiler_Image
; 
; #DEBUGGER_GADGET_Profiler_ScrollX
; #DEBUGGER_GADGET_Profiler_ScrollY
; #DEBUGGER_GADGET_Profiler_Zoomin
; #DEBUGGER_GADGET_Profiler_Zoomout
; #DEBUGGER_GADGET_Profiler_Zoomall
; #DEBUGGER_GADGET_Profiler_Drag
; #DEBUGGER_GADGET_Profiler_Select
; #DEBUGGER_GADGET_Profiler_Cross
; 
; #DEBUGGER_GADGET_Purifier_Frame
; #DEBUGGER_GADGET_Purifier_TextGlobal
; #DEBUGGER_GADGET_Purifier_TrackbarGlobal
; #DEBUGGER_GADGET_Purifier_LinesGlobal
; #DEBUGGER_GADGET_Purifier_TextLocal
; #DEBUGGER_GADGET_Purifier_TrackbarLocal
; #DEBUGGER_GADGET_Purifier_LinesLocal
; #DEBUGGER_GADGET_Purifier_TextString
; #DEBUGGER_GADGET_Purifier_TrackbarString
; #DEBUGGER_GADGET_Purifier_LinesString
; #DEBUGGER_GADGET_Purifier_TextDynamic  
; #DEBUGGER_GADGET_Purifier_TrackbarDynamic
; #DEBUGGER_GADGET_Purifier_LinesDynamic
; #DEBUGGER_GADGET_Purifier_Ok
; #DEBUGGER_GADGET_Purifier_Cancel
; #DEBUGGER_GADGET_Purifier_Apply
; 
; #DEBUGGER_GADGET_LAST
; EndEnumeration
; 
; 
; 
; #DRAG_Profiler = 0 
; 
; 
; 
; 
; Structure Local_Array
; StructureUnion
; l.l[0]
; w.w[0]
; b.b[0]
; f.f[0]
; d.d[0]
; q.q[0]
; i.i[0]
; *p.Local_Array[0]
; EndStructureUnion
; EndStructure
; 
; 
; Structure DataBreakPoint
; *Next.DataBreakPoint
; *Previous.DataBreakPoint
; 
; Condition$
; ProcedureName$
; ConditionTrue.l 
; ID.l
; EndStructure
; 
; 
; 
; 
; 
; Structure DebuggerData
; ID.i               
; 
; ProcessObject.i    
; 
; CompilerIf #CompileWindows
; TerminationMutex.i 
; CompilerEndIf
; 
; IsUnicode.l   
; IsThread.l    
; Is64bit.l     
; IsPurifier.l  
; 
; IsNetwork.l   
; Communication.Communication 
; Command.CommandInfo 
; *CommandData       
; 
; FileName$           
; NbIncludedFiles.l   
; *IncludedFiles     
; 
; NbProcedures.l      
; *Procedures         
; 
; ProgramState.l     
; LastProgramState.l 
; ProgramEnded.l     
; 
; CanDestroy.l       
; 
; IsDebugOutputVisible.l 
; IsWatchlistVisible.l   
; DataBreakpointsVisible.l 
; 
; *FirstDataBreakPoint.DataBreakPoint
; 
; ArraySortColumn.b      
; ArraySortDirection.b
; LocalArraySortColumn.b
; LocalArraySortDirection.b
; ListSortColumn.b
; ListSortDirection.b
; LocalListSortColumn.b
; LocalListSortDirection.b
; MapSortColumn.b
; MapSortDirection.b
; LocalMapSortColumn.b
; LocalMapSortDirection.b
; 
; RegisterCount.l                  
; RegisterIndex.l[#MAX_REGISTERS]  
; RegisterName$[#MAX_REGISTERS]    
; 
; *MemoryDump        
; MemoryDumpSize.i   
; MemoryDumpStart.q  
; 
; HistorySize.l      
; *History           
; 
; NbLibraries.l      
; *LibraryList       
; NbLibColumns.l     
; NbObjects.l        
; *ObjectList        
; CurrentLibrary.l   
; CurrentObject.l    
; CurrentObjectID.q  
; CommandObjectID.q  
; *CurrentObjectData 
; 
; ProfilerRunning.l  
; *ProfilerFiles     
; *ProfilerData      
; ProfilerImage.i    
; 
; ProfilerNumberLength.l 
; ProfilerRatioX.d   
; ProfilerRatioY.d   
; 
; CompilerIf #CompileWindows
; ProfilerScrollCallback.i
; ProfilerImageCallback.i
; CompilerEndIf
; 
; PurifierGlobal.l   
; PurifierLocal.l
; PurifierString.l
; PurifierDynamic.l
; 
; OutputStatusbar.i    
; OutputFirstVisible.l 
; 
; IsDebugMessage.l     
; DebugMessage$        
; 
; NbModules.l          
; Array ModuleNames.s(0)
; 
; 
; 
; 
; 
; SourceID.i         
; TriggerTargetID.i  
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Windows.i[#DEBUGGER_WINDOW_LAST]  
; Gadgets.i[#DEBUGGER_GADGET_LAST]  
; 
; EndStructure
; 
; 
; 
; 
; 
; Structure Debugger_HistoryData
; Container.i  
; Line.i       
; File.i       
; Show.i       
; Call.i       
; Variables.i  
; EndStructure
; 
; Structure Debugger_History
; item.Debugger_HistoryData[0]
; EndStructure
; 
; Structure Debugger_LibraryData
; LibraryID$
; Name$
; TitleString$
; FunctionMask.l
; EndStructure
; 
; Structure Debugger_LibraryList
; library.Debugger_LibraryData[0]
; EndStructure
; 
; 
; Structure Debugger_ProfilerData
; Offset.l     
; Size.l       
; Color.l      
; ColorImage.i 
; EndStructure
; 
; Structure Debugger_ProfilerList
; file.Debugger_ProfilerData[0]
; EndStructure
; 
; 
; 
; Structure ProcedureStats_List
; callcount.l[0]
; EndStructure
; 
; 
; 
; 
; Global PureBasicPath$, DebuggerOutputFile$, MemoryViewerFile$
; 
; 
; 
; Global DebuggerUseFIFO
; 
; 
; 
; Global LogTimeStamp
; Global CallDebuggerOnStart, CallDebuggerOnEnd
; Global DebuggerMemorizeWindows, DebuggerOnTop, DebuggerBringToTop
; Global EditorFontID 
; 
; 
; Global DebuggerTimeout
; 
; Global DebuggerMainWindow 
; 
; 
; Global DebuggerMainWindowX, DebuggerMainWindowY, DebuggerMainWindowWidth, DebuggerMainWindowHeight
; Global IsDebuggerMaximized, IsMiniDebugger
; 
; 
; Global DebugIsHex, DebugTimeStamp
; Global DebugWindowX, DebugWindowY, DebugWindowWidth, DebugWindowHeight, DebugWindowMaximize
; Global DebugSystemMessages 
; Global DebugOutputToErrorLog
; 
; 
; Global RegisterIsHex, StackIsHex, AutoStackUpdate
; Global AsmWindowX, AsmWindowY, AsmWindowWidth, AsmWindowHeight, AsmWindowMaximize
; 
; 
; Global MemoryDisplayType, MemoryIsHex, MemoryOneColumnOnly
; Global MemoryViewerX, MemoryViewerY, MemoryViewerWidth, MemoryViewerHeight
; Global MemoryViewerMaximize
; 
; 
; Global VariableIsHex
; Global VariableWindowX, VariableWindowY, VariableWindowWidth, VariableWindowHeight
; Global VariableViewerMaximize
; 
; 
; Global HistoryWindowX, HistoryWindowY, HistoryWindowWidth, HistoryWindowHeight
; Global HistoryMaximize
; 
; 
; Global WatchListWindowX, WatchListWindowY, WatchListWindowWidth, WatchListWindowHeight, WatchListWindowMaximize
; 
; 
; Global LibraryViewerX, LibraryViewerY, LibraryViewerWidth, LibraryViewerHeight
; Global LibraryViewerSplitter1, LibraryViewerSplitter2
; Global LibraryViewerMaximize
; 
; 
; Global ProfilerX, ProfilerY, ProfilerWidth, ProfilerHeight, ProfilerSplitter
; Global ProfilerRunAtStart, ProfilerMaximize
; 
; 
; Global DataBreakpointWindowX, DataBreakpointWindowY, DataBreakpointWindowWidth, DataBreakpointWindowHeight
; Global DataBreakpointWindowMaximize
; 
; 
; Global PurifierWindowX, PurifierWindowY
; 
; Global AutoOpenDebugOutput, AutoOpenAsmWindow, AutoOpenMemoryViewer, AutoOpenVariableViewer
; Global AutoOpenHistory, AutoOpenWatchlist, AutoOpenLibraryViewer, AutoOpenProfiler, AutoOpenDataBreakpoints
; Global AutoOpenPurifier
; 
; Global EnableMenuIcons 
; 
; 
; 
; Global NewList RunningDebuggers.DebuggerData()
  MOV    rcx,qword [t_RunningDebuggers]
  CALL   PB_FreeList
  MOV    r9,7
  MOV    r8,s_debuggerdata
  LEA    rdx,[t_RunningDebuggers]
  MOV    rcx,3152
  CALL   PB_NewList
; 
; 
; 
; 
; 
; Declare DebuggerCallback(*Debugger.DebuggerData)
; 
; 
; 
; 
; Declare Debugger_ShowLine(*Debugger.DebuggerData, Line)
; 
; 
; 
; Declare FlushEvents()
; 
; 
; 
; Declare Debugger_AddShortcuts(Window)  
; 
; Declare SendDebuggerCommandWithData(*Debugger.DebuggerData, *Command.CommandInfo, *CommandData)
; Declare SendDebuggerCommand(*Debugger.DebuggerData, *Command.CommandInfo)
; 
; 
; Declare Debugger_UpdateWindowStates(*Debugger.DebuggerData)
; Declare Debugger_ProcessEvents(EventWindowID, EventID)
; 
; Declare DebugOutput_DebuggerEvent(*Debugger.DebuggerData)
; Declare AsmDebug_DebuggerEvent(*Debugger.DebuggerData)
; Declare MemoryViewer_DebuggerEvent(*Debugger.DebuggerData)
; Declare VariableDebug_DebuggerEvent(*Debugger.DebuggerData)
; Declare History_DebuggerEvent(*Debugger.DebuggerData)
; Declare WatchList_DebuggerEvent(*Debugger.DebuggerData)
; Declare LibraryViewer_DebuggerEvent(*Debugger.DebuggerData)
; Declare Profiler_DebuggerEvent(*Debugger.DebuggerData)
; Declare DataBreakpoint_DebuggerEvent(*Debugger.DebuggerData)
; Declare Purifier_DebuggerEvent(*Debugger.DebuggerData)
; 
; Declare OpenDebugWindow(*Debugger.DebuggerData, ActivateWindow)
; Declare OpenAsmWindow(*Debugger.DebuggerData)
; Declare OpenMemoryViewerWindow(*Debugger.DebuggerData)
; Declare OpenVariableWindow(*Debugger.DebuggerData)
; Declare OpenHistoryWindow(*Debugger.DebuggerData)
; Declare OpenWatchListWindow(*Debugger.DebuggerData)
; Declare OpenLibraryViewerWindow(*Debugger.DebuggerData)
; Declare OpenProfilerWindow(*Debugger.DebuggerData)
; Declare OpenDataBreakpointWindow(*Debugger.DebuggerData)
; Declare OpenPurifierWindow(*Debugger.DebuggerData)
; 
; Declare UpdateDebugOutputWindow(*Debugger.DebuggerData)
; 
; Declare CreateWatchlistWindow(*Debugger.DebuggerData)
; Declare CreateDebugWindow(*Debugger.DebuggerData)
; Declare CreateDataBreakpointWindow(*Debugger.DebuggerData)
; Declare LibraryViewer_Init()
; Declare.s ScopeName(scope, type = 0)
; Declare.s ModuleName(Name$, ModuleName$)
; 
; Declare ApplyDefaultPurifierOptions(*Debugger.DebuggerData, OptionString$)
; Declare.s GetPurifierOptions(*Debugger.DebuggerData)
; 
; 
; 
; 
; 
; 
; 
; CompilerIf Defined(PUREBASIC_IDE, #PB_Constant) = 0 
; 
; Structure SourceFileParser
; Encoding.l
; EndStructure
; 
; Structure SourceFile
; EnableASM.l
; DebuggerData.i
; Parser.SourceFileParser
; EndStructure
; 
; 
; 
; 
; #FILE_LoadFunctions = 0
; #FILE_LoadAPI = 1
; CompilerEndIf
; XIncludeFile "Standalone_Common.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; #WINDOW_Main = 1
; #WINDOW_Preferences = 2
; 
; #STATUSBAR = 0
; 
; 
; Enumeration 1
; #GADGET_Run
; #GADGET_Stop
; #GADGET_Step
; #GADGET_StepCount
; #GADGET_StepOver
; #GADGET_StepOut
; #GADGET_Quit
; #GADGET_Log 
; 
; #GADGET_Debug
; #GADGET_Watchlist
; #GADGET_Variables
; #GADGET_Profiler
; #GADGET_History
; #GADGET_Memory
; #GADGET_Assembly
; #GADGET_Library
; #GADGET_Purifier
; 
; #GADGET_Waiting
; 
; #GADGET_BreakSet
; #GADGET_BreakClear
; #GADGET_DataBreak
; #GADGET_SelectSource  
; 
; #GADGET_Minimize
; #GADGET_Maximize
; EndEnumeration
; 
; Enumeration #DEBUGGER_MENU_LAST 
; #MENU_Stop
; #MENU_Run  
; #MENU_Step
; #MENU_StepOver
; #MENU_StepOut
; EndEnumeration
; 
; Enumeration
; #IMAGE_LinuxWindowIcon
; EndEnumeration
; 
; 
; 
; Enumeration
; #ACTION_MarkCurrentLine
; #ACTION_MarkError
; #ACTION_MarkWarning
; EndEnumeration
; 
; 
; 
; 
; Structure DelayedAction
; FileIndex.l
; Line.l
; Action.l
; EndStructure
; 
; Global NewList DelayedActions.DelayedAction()
  MOV    rcx,qword [t_DelayedActions]
  CALL   PB_FreeList
  MOV    r9,7
  XOR    r8,r8
  LEA    rdx,[t_DelayedActions]
  MOV    rcx,12
  CALL   PB_NewList
; 
; 
; 
; Structure DisplayedSource  
; FileName$
; IsLoaded.l
; IsRequested.l 
; Gadget.i 
; EndStructure
; 
; Global NbSourceFiles, CurrentSource
; 
; 
; Global Dim SourceFiles.DisplayedSource(1)  
  SUB    rsp,24
  MOV    rdx,2
  MOV    rax,a_SourceFiles
  PUSH   rax
  MOV    r9,s_displayedsource
  MOV    r8,7
  MOV    rcx,24
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_SourceFiles],rax
; 
; Global PreferenceFile$
; Global StatusbarHeight
; Global MainFileName$
; Global Standalone_Quit 
; 
; Global NewList Watchlist.s()
  MOV    rcx,qword [t_Watchlist]
  CALL   PB_FreeList
  MOV    r9,8
  MOV    r8,s_s
  LEA    rdx,[t_Watchlist]
  MOV    rcx,8
  CALL   PB_NewList
; Global NewList BreakpointStrings.s() 
  MOV    rcx,qword [t_BreakpointStrings]
  CALL   PB_FreeList
  MOV    r9,8
  MOV    r8,s_s
  LEA    rdx,[t_BreakpointStrings]
  MOV    rcx,8
  CALL   PB_NewList
; Global NewList Breakpoints.l()
  MOV    rcx,qword [t_Breakpoints]
  CALL   PB_FreeList
  MOV    r9,5
  XOR    r8,r8
  LEA    rdx,[t_Breakpoints]
  MOV    rcx,4
  CALL   PB_NewList
; 
; 
; 
; 
; 
; Global *DebuggerData.DebuggerData
; 
; 
; Global CurrentLanguage$
; Global EnableKeywordBolding, TabLength, WarningMode
; 
; Global ASMKeywordColor, BackgroundColor, BasicKeywordColor, CommentColor
; Global ConstantColor, LabelColor, NormalTextColor, NumberColor, OperatorColor
; Global PointerColor, PureKeywordColor, SeparatorColor, StringColor, StructureColor
; Global LineNumberColor, LineNumberBackColor, CurrentLineColor, CursorColor
; Global SelectionColor, SelectionFrontColor, CustomKeywordColor, DisplayFullPath
; Global WhitespaceColor, ModuleColor, BadBraceColor
; 
; Global DebuggerWarningColor, DebuggerWarningSymbolColor
; Global DebuggerLineColor, DebuggerErrorColor, DebuggerBreakPointColor
; Global DebuggerLineSymbolColor, DebuggerErrorSymbolColor, DebuggerBreakpointSymbolColor
; Global DebugOutUseFont, DebugOutFont$, DebugOutFontSize, DebugOutFontStyle, DebugOutFontID
; 
; Global EditorFontName$, EditorFontSize, EditorFontStyle, EditorBoldFontName$
; Global Shortcut_Run, Shortcut_Stop, Shortcut_Step, Shortcut_StepOut, Shortcut_StepOver 
; Global LanguageFile$, CustomKeywordFile$
; Global ShowWhitespace, ShowIndentGuides
; 
; 
; Global IsMouseDwelling, MouseDwellPosition, IsVariableExpression
; Global Standalone_Quit
; Global PurifierSettings$
; 
; Global NewList CustomKeywordList.s()
  MOV    rcx,qword [t_CustomKeywordList]
  CALL   PB_FreeList
  MOV    r9,8
  MOV    r8,s_s
  LEA    rdx,[t_CustomKeywordList]
  MOV    rcx,8
  CALL   PB_NewList
; 
; 
; 
; 
; 
; XIncludeFile ".."+#Separator+"PureBasicConfigPath.pb" 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf Not Defined(SpiderBasic, #PB_Constant)
; 
; 
; 
; 
; 
; 
; XIncludeFile ".."+#Separator+"PureBasicIDE"+#Separator+"LinuxWindowIcon.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #CompileLinux
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; XIncludeFile ".." + #Separator + "DialogManager" + #Separator + "GetRequiredSize.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf Defined(Max, #PB_Procedure) = 0
; CompilerEndIf
; 
; CompilerIf #PB_Compiler_OS = #PB_OS_Linux
; 
; CompilerIf #PB_Compiler_OS = #PB_OS_MacOS
; 
; CompilerIf #CompileMacCocoa
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; XIncludeFile ".."+#Separator+"PureBasicIDE"+#Separator+"Macro.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #PB_Compiler_Unicode = 0
; 
; 
; 
; 
; Macro PeekAscii(Memory)
; 
; Macro PeekUnicode(Memory)
; 
; Macro PeekAsciiLength(Memory, Length)
; 
; Macro PokeAscii(Memory, Text)
; 
; Macro PokeUnicode(Memory, Text)
; 
; Macro ReadAsciiString(File)
; 
; Macro MemoryAsciiLength(Memory)
; 
; CompilerEndIf
; 
; 
; Macro AsciiConst(a, b, c, d)
; 
; Macro AsciiConst3(a, b, c)
; 
; Macro MemoryStringLengthBytes(Memory)
; 
; 
; Macro MemoryUTF8LengthBytes(Memory)
; 
; 
; 
; Macro DebugPointer(Ptr)
; XIncludeFile ".."+#Separator+"PureBasicIDE"+#Separator+"LinuxExtensions.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #CompileLinux
; 
; XIncludeFile ".."+#Separator+"PureBasicIDE"+#Separator+"WindowsExtensions.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #CompileWindows
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Structure AdditionalStreamInfo_2 
; Action.i  
; Buffer.i
; Length.i
; EndStructure
; 
; 
; 
; 
; 
; 
; #HDF_BITMAP_ON_RIGHT = $1000
; #HDI_IMAGE           = $0020
; 
; #HDF_SORTUP   = $0400 
; #HDF_SORTDOWN = $0200
; 
; 
; DataSection
; 
; SortArrowImage:
; Data.b 0,0,0,0,0,0,0,0,0,0
; Data.b 0,0,0,0,0,0,0,0,0,0
; Data.b 0,0,0,0,0,0,0,0,0,0
; Data.b 1,1,1,1,1,1,1,1,1,1
; Data.b 0,1,1,1,1,1,1,1,1,0
; Data.b 0,0,1,1,1,1,1,1,0,0
; Data.b 0,0,0,1,1,1,1,0,0,0
; Data.b 0,0,0,0,1,1,0,0,0,0
; Data.b 0,0,0,0,0,0,0,0,0,0
; Data.b 0,0,0,0,0,0,0,0,0,0
; 
; EndDataSection
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerEndIf
; XIncludeFile ".."+#Separator+"PureBasicIDE"+#Separator+"MacExtensions.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #CompileMacCocoa
; 
; 
; XIncludeFile ".."+#Separator+"PureBasicIDE"+#Separator+"WindowsDebugging.pb" 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #CompileWindows
; 
; CompilerIf #DEBUG
; 
; CompilerEndIf
; XIncludeFile ".."+#Separator+"PureBasicIDE"+#Separator+"LinuxDebugging.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #DEBUG
; 
; 
; 
; XIncludeFile ".."+#Separator+"PureBasicIDE"+#Separator+"FileSystem.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf Defined(Separator, #PB_Constant) = 0
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; XIncludeFile ".."+#Separator+"PureBasicIDE"+#Separator+"Misc.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; #DesktopMargin = 50 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Global Dim *ParseString_Tokens(300) 
  SUB    rsp,24
  MOV    rdx,301
  MOV    rax,ap_ParseString_Tokens
  PUSH   rax
  XOR    r9,r9
  MOV    r8,21
  MOV    rcx,8
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [ap_ParseString_Tokens],rax
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; XIncludeFile ".."+#Separator+"PureBasicIDE"+#Separator+"Language.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Global NbLanguageGroups, NbLanguageStrings
; 
; Structure LanguageInfo
; Name$
; FileName$
; Date$
; Creator$
; CreatorEmail$
; EndStructure
; 
; Global NewList AvailableLanguages.LanguageInfo()
  MOV    rcx,qword [t_AvailableLanguages]
  CALL   PB_FreeList
  MOV    r9,7
  MOV    r8,s_languageinfo
  LEA    rdx,[t_AvailableLanguages]
  MOV    rcx,40
  CALL   PB_NewList
; 
; Structure LanguageGroup
; Name$
; GroupStart.l
; GroupEnd.l
; IndexTable.l[256]
; EndStructure
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; DataSection
; 
; Language:
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Data$ "_GROUP_",            "MenuTitle"
; 
; 
; Data$ "File",             "&File"
; Data$ "Edit",             "&Edit"
; Data$ "Project",          "&Project"
; Data$ "Form",          "F&orm"
; Data$ "Compiler",         "&Compiler"
; Data$ "Debugger",         "&Debugger"
; Data$ "Tools",            "&Tools"
; Data$ "Help",             "&Help"                         
; 
; 
; 
; Data$ "_GROUP_",            "MenuItem"
; 
; 
; Data$ "New",              "&New"
; Data$ "Open",             "&Open..."
; Data$ "Save",             "&Save"
; Data$ "SaveAs",           "Save &As..."
; Data$ "SaveAll",          "Sa&ve All"
; Data$ "Reload",           "R&eload"
; Data$ "Close",            "&Close"      
; Data$ "CloseAll",         "C&lose All"
; Data$ "DiffCurrent",      "View chan&ges"               
; Data$ "FileFormat",       "F&ile format"
; Data$ "EncodingPlain",    "Encoding: &Plain Text"
; Data$ "EncodingUtf8",     "Encoding: &Utf8"
; Data$ "NewlineWindows",   "Newline: &Windows (CRLF)"
; Data$ "NewlineLinux",     "Newline: &Linux (LF)"
; Data$ "NewlineMacOS",     "Newline: &MacOS (CR)"
; Data$ "SortSources",      "Sor&t Sources..."
; Data$ "Preferences",      "&Preferences..."
; Data$ "RecentFiles",      "&Recent Files"
; Data$ "EditHistory",      "Session &History"
; Data$ "Quit",             "&Quit"
; 
; Data$ "Undo",             "&Undo"  
; Data$ "Redo",             "&Redo"
; Data$ "Cut",              "Cu&t"
; Data$ "Copy",             "&Copy"
; Data$ "Paste",            "&Paste" 
; Data$ "InsertComment",    "I&nsert comments"
; Data$ "RemoveComment",    "Re&move comments"
; Data$ "AutoIndent",       "Format indentation"
; Data$ "SelectAll",        "Select &All"
; Data$ "Goto",             "&Goto..."   
; Data$ "JumpToKeyword",    "Goto matching &Keyword"
; Data$ "LastViewedLine",   "Goto recent &Line"
; Data$ "ToggleThisFold",   "Toggle current fol&d"
; Data$ "ToggleFolds",      "T&oggle all folds"                      
; Data$ "AddMarker",        "Add/Remove &Marker"
; Data$ "JumpToMarker",     "&Jump to Marker"
; Data$ "ClearMarkers",     "Cl&ear Markers"
; Data$ "Find",             "&Find/Replace..."
; Data$ "FindNext",         "Find &Next"  
; Data$ "FindPrevious",     "Find &Previous"  
; Data$ "FindInFiles",      "Find &in Files..."
; 
; Data$ "NewProject",       "&New Project..."
; Data$ "OpenProject",      "&Open Project..."
; Data$ "RecentProjects",   "Recent &Projects"
; Data$ "CloseProject",     "&Close Project"
; Data$ "ProjectOptions",   "Project &Options..."
; Data$ "AddProjectFile",   "&Add File to Project"
; Data$ "RemoveProjectFile","&Remove File from Project"
; Data$ "BackupManager",    "&Manage Backups..."
; Data$ "MakeBackup",       "Make &Backup..."
; Data$ "TodoList",         "&Tasks..."  
; Data$ "OpenProjectFolder","Open Project &Folder"
; 
; Data$ "NewForm",          "&New Form"  
; Data$ "FormSwitch",       "&Switch Code/Design View"  
; Data$ "FormDuplicate",    "&Duplicate Object"  
; Data$ "FormImageManager", "&Image Manager..."  
; 
; Data$ "Compile",          "&Compile/Run"
; Data$ "RunExe",           "&Run"       
; Data$ "SyntaxCheck",      "&Syntax check"
; Data$ "DebuggerCompile",  "Compile with Debugger"
; Data$ "NoDebuggerCompile","Compile without Debugger"  
; Data$ "RestartCompiler",  "Re&start Compiler"
; Data$ "CompilerOptions",  "Compiler &Options..."
; CompilerIf #SpiderBasic
; Data$ "CreateEXE",        "Create &Executable..."
; CompilerEndIf
; Data$ "SetDefaultTarget", "Set &default Target"
; Data$ "BuildTarget",      "Build &Target"
; Data$ "BuildAllTargets",  "&Build all Targets" 
; 
; Data$ "Debugger",         "Use &Debugger"
; Data$ "Stop",             "&Stop"
; Data$ "Run",              "&Continue"
; Data$ "Kill",             "&Kill Program"
; Data$ "Step",             "S&tep"
; Data$ "StepX",            "Step <&n>"
; Data$ "StepOver",         "Ste&p Over"
; Data$ "StepOut",          "Step O&ut"
; Data$ "BreakPoint",       "&Breakpoint"
; Data$ "BreakClear",       "Clear B&reakpoints"
; Data$ "DataBreakPoints",  "Data Breakpo&ints"
; Data$ "ErrorLog",         "&Error Log"
; Data$ "ShowLog",          "&Show Error Log"
; Data$ "ClearLog",         "&Clear Log"
; Data$ "CopyLog",          "C&opy Log"
; Data$ "ClearErrorMarks",  "Clear &Error Marks"      
; Data$ "DebugOutput",      "Debug &Output"
; Data$ "WatchList",        "&Watchlist"
; Data$ "VariableList",     "&Variable Viewer"
; Data$ "Profiler",         "Pro&filer"
; Data$ "History",          "Ca&llstack"
; Data$ "Memory",           "&Memory Viewer"
; Data$ "LibraryViewer",    "&Library Viewer"
; Data$ "Purifier",         "Purifier"
; Data$ "DebugAsm",         "&Assembly"
; 
; Data$ "VisualDesigner",   "&Form Designer" 
; Data$ "StructureViewer",  "&Structure Viewer"
; Data$ "FileViewer",       "&File Viewer"
; Data$ "VariableViewer",   "&Variable Viewer"
; Data$ "ColorPicker",      "&Color Picker"
; Data$ "AsciiTable",       "&Character Table"
; Data$ "Explorer",         "&Explorer"
; Data$ "ProcedureBrowser", "&Procedure Browser"     
; Data$ "Issues",           "&Issue Browser"
; Data$ "Templates",        "&Templates"     
; Data$ "ProjectPanel",     "P&roject Panel"
; Data$ "Diff",             "C&ompare Files/Folders" 
; Data$ "AddTools",         "Configure &Tools..."
; 
; Data$ "Help",             "&Help..."   
; Data$ "UpdateCheck",      "&Check for updates" 
; Data$ "ExternalHelp",     "&External Help"
; Data$ "About",            "&About"           
; 
; 
; 
; 
; Data$ "_GROUP_",            "ToolsPanel"
; 
; 
; Data$ "ProcedureBrowserShort", "Procedures"
; Data$ "ProcedureBrowserLong",  "Procedure Browser"      
; Data$ "Explorer",         "Explorer"
; Data$ "AsciiTable",       "Character Table"   
; Data$ "VariableViewerShort", "Variables"
; Data$ "VariableViewerLong",  "Variable Viewer"
; Data$ "ProjectPanelShort","Project"
; Data$ "ProjectPanelLong", "Project Panel"
; Data$ "FormShort",        "Form"
; Data$ "FormLong",         "Form Panel"
; Data$ "HelpToolShort",    "Help"
; Data$ "HelpToolLong",     "Help Tool"
; 
; Data$ "ColorPicker",      "Color Picker"
; Data$ "Mode_RGB",         "RGB"
; Data$ "Mode_HSL",         "HSL"
; Data$ "Mode_HSV",         "HSV"
; Data$ "Mode_Wheel",       "Wheel"
; Data$ "Mode_Palette",     "Palette"
; Data$ "Mode_Name",        "Name"
; Data$ "NoMatch",          "No matches found."
; Data$ "UseAlpha",         "Include alpha channel"
; Data$ "Color_Insert",     "Insert Color"
; Data$ "Color_RGB",        "Insert RGB"
; Data$ "Color_Save",       "Save Color"
; Data$ "Color_Filter",     "Filter"
; 
; Data$ "Variables",        "Variables"
; Data$ "Arrays",           "Arrays"
; Data$ "LinkedLists",      "LinkedLists"      
; Data$ "Structures",       "Structures"
; Data$ "Interfaces",       "Interfaces"      
; Data$ "Constants",        "Constants"
; Data$ "AllSources",       "Display Elements from all open sources"
; Data$ "ScanFor",          "Scan for"
; 
; Data$ "TemplatesLong",    "Code Templates"
; Data$ "TemplatesShort",   "Templates"      
; 
; Data$ "Favorites",       "Favorites"
; Data$ "AddFavorite",     "Add to Favorites"
; Data$ "RemoveFavorite",  "Remove from Favorites"
; 
; Data$ "IssuesShort",      "Issues"
; Data$ "IssuesLong",       "Issue Browser"
; 
; Data$ "Priority",         "Priority"
; Data$ "IssueName",        "Issue"
; Data$ "IssueText",        "Text"
; Data$ "Prio0",            "Blocker"     
; Data$ "Prio1",            "High"     
; Data$ "Prio2",            "Normal"     
; Data$ "Prio3",            "Low"     
; Data$ "Prio4",            "Info"    
; Data$ "AllIssues",        "All issues"
; 
; Data$ "SingleFile",       "Show issues of current source only"
; Data$ "MultiFile",        "Show issues of all open files/project files"
; Data$ "Export",           "Export issue list" 
; 
; 
; 
; Data$ "_GROUP_",            "FileStuff"
; 
; 
; Data$ "NewSource",        "<New>"
; Data$ "NewForm",          "<New Form>"
; Data$ "OpenFileTitle",    "Choose a file to open..."
; Data$ "SaveFileTitle",    "Save source code as..."
; CompilerIf #SpiderBasic
; Data$ "Pattern",          "PureBasic Files (*.pb, *.pbi, *.pbp, *.pbf)|*.pb;*.pbi;*.pbp;*.pbf|PureBasic Sourcecodes (*.pb)|*.pb|PureBasic Includefiles (*.pbi)|*.pbi|PureBasic Projects (*.pbp)|*.pbp|Purebasic Forms (*.pbf)|*.pbf|All Files (*.*)|*.*"
; CompilerEndIf
; 
; Data$ "StatusLoading",    "Loading source code..."
; Data$ "StatusLoaded",     "Source code loaded."
; Data$ "LoadError",        "Cannot load Source code!"
; Data$ "MiscLoadError",    "Cannot load file!"
; 
; Data$ "StatusSaving",     "Saving source code..."
; Data$ "StatusSaved",      "Source code saved."
; Data$ "SaveError",        "Cannot save Source code!"
; Data$ "FileExists",       "The file you specified already exists!"
; Data$ "OverWrite",        "Do you want to overwrite it?"
; Data$ "CreateError",      "The file cannot be created!"
; 
; Data$ "SaveConfigError",  "Cannot save Compiler options to file"
; Data$ "Modified",         "The file '%filename%'has been modified.%newline%Do you want to save the changes?"
; Data$ "ModifiedNew",      "This new file has not been saved yet. Do you want to save it now?"
; Data$ "ReloadModified",   "This file has been modified.%newline%Should the changes be discarded by reloading it?"
; Data$ "DeletedOnDisk",    "The file '%filename%' has been deleted from the disk.%newline%Do you want to save it now?"
; Data$ "ModifiedOnDisk1",  "The file '%filename%' has been modified on disk.%newline%Do you want to reload it to reflect these changes?"
; Data$ "ModifiedOnDisk2",  "The file '%filename%' has been modified on disk.%newline%Do you want to discard your current changes and reload it from disk?"
; Data$ "ViewDiff",         "View Differences"
; Data$ "Reload",           "Reload"
; Data$ "AddNewFileTitle"   , "Adding a new project file..."
; Data$ "AddNewFileQuestion", "The file '%filename%' doesn't exists on disk.%newline%Do you want to create it ?"
; Data$ "AddNewFileError"   , "The file '%filename%' can't be created on disk."
; 
; Data$ "ExportIssueTitle",  "Export issues to..."
; Data$ "ExportIssuePattern","Comma separated values (*.csv)|*.csv|All files (*.*)|*.*"
; 
; 
; 
; Data$ "_GROUP_",            "Project"
; 
; 
; Data$ "Title",            "Project Options"
; Data$ "TitleNew",         "Create new Project"
; Data$ "TitleSave",        "Save project as..."
; Data$ "TitleOpen",        "Open project..."
; Data$ "TitleShort",       "Project"
; Data$ "CompilerOptions",  "Compiler Options"
; Data$ "ProjectOptions",   "Project Options"
; Data$ "CreateProject",    "Create"   
; Data$ "DefaultName",      "New Project"   
; Data$ "TabTitle",         "Project"
; 
; Data$ "OptionTab",        "Project Options"
; Data$ "ProjectInfo",      "Project Info"
; Data$ "ProjectFile",      "Project File"
; Data$ "ProjectName",      "Project Name"
; Data$ "ProjectTargets",   "Project Targets"
; Data$ "Comments",         "Comments"
; 
; Data$ "LoadOptions",      "Loading Options"
; Data$ "SetDefault",       "Set as default project (always open when the IDE starts)"
; Data$ "CloseAllFiles",    "Close all sources when closing the project"
; Data$ "WhenOpening",      "When opening the project..."
; Data$ "OpenLoadLast",     "load all sources that were open last time"
; Data$ "OpenLoadAll",      "load all sources of the project"
; Data$ "OpenLoadDefault",  "load only sources marked in 'Project Files'"
; Data$ "OpenLoadMain",     "load only the main file of the default target"
; Data$ "OpenLoadNone",     "load no files"
; 
; Data$ "FilesChanged",     "The following files were modified while the project was closed"
; Data$ "FileMissing",      "The file '%filename%' cannot be found.%newline%Do you want to search for it?"
; Data$ "RemoveMany",       "Do you really want to remove these %count% files from the project?"
; 
; Data$ "FileTab",          "Project Files"
; Data$ "View",             "View"
; Data$ "FileScan",         "Scan file for Autocomplete"
; Data$ "FileLoad",         "Load file when opening the project"
; Data$ "FilePanel",        "Show file in the Project panel"
; Data$ "FileWarn",         "Display a warning if file changed"     
; 
; Data$ "Filename",         "Filename"
; Data$ "FileScanShort",    "Scan"
; Data$ "FileLoadShort",    "Load"
; Data$ "FilePanelShort",   "Panel"
; Data$ "FileWarnShort",    "Warn"
; Data$ "FileSize",         "Size"
; Data$ "FileModified",     "Last Modified"      
; Data$ "FileDateFormat",   "%mm/%dd/%yyyy - %hh:%ii"
; Data$ "LastOpen",         "Last open"
; Data$ "LastOpenText",     "%date% by %user% on %host%"
; Data$ "LastOpenEditor",   "Editor"
; 
; Data$ "TargetShort",      "Target"
; Data$ "DebugShort",       "Debug"
; Data$ "ThreadShort",      "Thread"
; Data$ "AsmShort",         "Asm"
; Data$ "OnErrorShort",     "OnError"
; Data$ "CompileCountShort","Compile"
; Data$ "BuildCountShort",  "Build"
; Data$ "FormatShort",      "Format"
; Data$ "InputFile",        "Input File"      
; 
; Data$ "AddDirectory",     "Should the content of the following directory be added to the project ?"
; Data$ "AddManyFiles",     "Do you really want to add %filecount% files to the project?" 
; CompilerIf #SpiderBasic
; Data$ "Pattern",          "PureBasic Projects (*.pbp)|*.pbp|All files (*.*)|*.*"
; CompilerEndIf
; 
; Data$ "NeedName",         "A name must be specified for the project."
; Data$ "NeedFile",         "A filename must be specified for the project."
; Data$ "SaveError",        "The project file cannot be saved to disk."
; Data$ "LoadError",        "The project file cannot be loaded."
; Data$ "VersionLow",       "The version number of the project file is lower than the current version.%newline%If loaded, it will be converted to the current version."
; Data$ "VersionHigh",      "The version number of the project file is higher than the current one. %newline%If loaded, some data of the project may be lost."
; Data$ "VersionTooHigh",   "Project files with this version cannot be loaded."
; Data$ "LoadAnyway",       "Do you want to load it anyway?"
; Data$ "ProjectFile",      "Project file"
; Data$ "ProjectVersion",   "Project version"
; Data$ "CurrentVersion",   "Current version"
; Data$ "LastWrittenBy",    "Last written by"
; 
; Data$ "InternalFiles",    "Project Folder"
; Data$ "ExternalFiles",    "External Files"
; Data$ "PanelOpen",        "Open"
; Data$ "PanelOpenViewer",  "Open in FileViewer"
; Data$ "PanelOpenIn",      "Open in %name%"
; Data$ "PanelAdd",         "Add file to Project..."
; Data$ "PanelRemove",      "Remove from Project"
; Data$ "PanelRescan",      "Refresh AutoComplete data"
; 
; Data$ "OpenExplorerWindows", "Open in Explorer"
; Data$ "OpenExplorerLinux",   "Open in Filemanager"
; Data$ "OpenExplorerMac",     "Open in Finder"
; Data$ "ReallyClose",         "Really close the project?" 
; 
; 
; 
; Data$ "_GROUP_",            "Preferences"
; 
; 
; Data$ "Title",            "Preferences"
; Data$ "Apply",            "Apply"
; 
; Data$ "General",          "General"
; Data$ "MemorizeWindow",   "Memorize Window positions"
; Data$ "RunOnce",          "Run only one Instance"
; Data$ "ShowMainToolbar",  "Show main Toolbar"
; Data$ "VisualDesigner",   "VisualDesigner"
; Data$ "AutoReload",       "Auto-reload last open sources"      
; Data$ "FileHistorySize",  "RecentFiles list size"
; Data$ "FindHistorySize",  "Search History size"
; Data$ "Language",         "Language"
; Data$ "LanguageInfo",     "Language Information"
; Data$ "FileName",         "Filename"
; Data$ "LastUpdated",      "Last Updated"
; Data$ "Creator",          "Creator"
; Data$ "Email",            "Email"     
; Data$ "EnableMenuIcons",  "Display Icons in the Menu"   
; Data$ "DisplayFullPath",  "Display full Source Path in TitleBar"    
; Data$ "NoSplashScreen",   "Disable Splash Screen"   
; 
; Data$ "Updates",          "Updates"
; Data$ "CheckInterval",    "Check for updates"
; Data$ "CheckVersions",    "Check for releases"
; Data$ "IntervalAlways",   "At every start"
; Data$ "IntervalWeekly",   "Once a week"
; Data$ "IntervalMonthly",  "Once a month"
; Data$ "IntervalNever",    "Never"
; Data$ "VersionsAll",      "All releases (including beta releases)"
; Data$ "VersionsFinal",    "Final releases"
; Data$ "VersionsLTS",      "Long term support releases"
; 
; Data$ "Editor",           "Editor"
; Data$ "AutoSave",         "Auto-save before compiling"
; Data$ "AutoSaveAll",      "Save all sources with Auto-save"
; Data$ "TabLength",        "Tab Length"
; Data$ "RealTab",          "Use real Tab (ASCII 9)"
; Data$ "SourcePath",       "Source Directory"
; Data$ "MemorizeCursor",   "Memorize Cursor position"  
; Data$ "MemorizeMarkers",  "Memorize Marker positions"            
; Data$ "Defaults",         "Default Settings for new Files"
; Data$ "DefaultsShort",    "Defaults"
; Data$ "CPU",              "CPU Optimisation"
; Data$ "SubSystem",        "Library Subsystem"
; Data$ "SaveSettings",     "Save Settings to"
; Data$ "SaveSettings0",    "The end of the Source file"
; CompilerIf #SpiderBasic
; Data$ "SaveSettings1",    "The file <filename>.pb.cfg"
; CompilerEndIf
; Data$ "SaveSettings2",    "A common file project.cfg for every directory" 
; Data$ "SaveSettings3",    "Don't save anything"    
; Data$ "AlwaysHideLog",    "Always hide the error log (ignore the per-source setting)"
; Data$ "MonitorFileChanges","Monitor open files for changes on disk"      
; Data$ "FilesPanel",             "File selection"
; Data$ "FilesPanelMultiline",    "Display multiple rows"
; Data$ "FilesPanelCloseButtons", "Display close buttons in each tab"
; Data$ "FilesPanelNewButton",    "Add a tab to create a new source"
; Data$ "CodeFileExtensions","Code file extensions"
; 
; Data$ "Editing",          "Editing"
; Data$ "Colors",           "Coloring"
; Data$ "Settings",         "Settings"
; 
; Data$ "EnableBolding",    "Enable bolding of Keywords"
; Data$ "EnableCase",       "Enable Case correction"
; Data$ "EnableBraceMatch", "Enable marking of matching Braces"
; Data$ "EnableKeywordMatch","Enable marking of matching Keywords"
; Data$ "EnableLineNumbers","Display Line numbers"
; Data$ "EnableMarkers",    "Enable Line Markers"
; Data$ "SelectFont",       "Select Font"
; Data$ "DefaultColors",    "Default Color Schemes" 
; Data$ "ShowWhiteSpace",   "Show whitespace characters"
; Data$ "ShowIndentGuides", "Show indentation guides"
; 
; 
; Data$ "Color0",           "ASM Keywords"
; Data$ "Color1",           "Background"
; Data$ "Color2",           "Basic Keywords"
; Data$ "Color3",           "Comments"
; Data$ "Color4",           "Constants"
; Data$ "Color5",           "Labels"
; Data$ "Color6",           "Normal Text"
; Data$ "Color7",           "Numbers"
; Data$ "Color8",           "Operators (* /+ -)"
; Data$ "Color9",           "Pointers"
; Data$ "Color10",          "Functions"
; Data$ "Color11",          "Separators (; , [ ])"
; Data$ "Color12",          "Strings"
; Data$ "Color13",          "Structures"
; Data$ "Color14",          "LineNumbers"
; Data$ "Color15",          "LineNumbers Background"
; Data$ "Color16",          "Line Markers"
; Data$ "Color17",          "Currentline Background"
; Data$ "Color18",          "Selection Background"
; Data$ "Color19",          "Selection Text"
; Data$ "Color20",          "Cursor"      
; Data$ "Color21",          "Current Line Background (Debugger)"
; Data$ "Color22",          "Current Line Symbol (Debugger)"
; Data$ "Color23",          "Error Background (Debugger)"
; Data$ "Color24",          "Error Symbol (Debugger)"
; Data$ "Color25",          "Breakpoint Background (Debugger)"
; Data$ "Color26",          "Breakpoint Symbol (Debugger)"
; Data$ "Color27",          "Background for non-editable files (Debugger)"
; Data$ "Color28",          "Mark matching Braces and Keywords"
; Data$ "Color29",          "Mark mismatched Braces and Keywords"
; Data$ "Color30",          "Background for Procedures"
; Data$ "Color31",          "Custom Keywords"
; Data$ "Color32",          "Warning Background (Debugger)"
; Data$ "Color33",          "Warning Symbol (Debugger)"
; Data$ "Color34",          "Whitespace and indentation guides"
; Data$ "Color35",          "Module Names"
; Data$ "Color36",          "Repeated Selections Background"
; Data$ "Color37",          "Background for plain text files"
; 
; Data$ "Keywords",         "Custom keywords"
; Data$ "KeywordsFile",     "Load keywords from file"
; Data$ "OpenKeywordFile",  "Choose keyword list file..."
; 
; Data$ "Folding",          "Folding"
; Data$ "EnableFolding",    "Enable Source Line folding"
; Data$ "FoldStartWords",   "Folding start Keywords"
; Data$ "FoldEndWords",     "Folding end Keywords"       
; 
; Data$ "Themes",           "Themes"
; Data$ "Toolbar",          "Toolbar"
; Data$ "ToolbarLayout",    "Toolbar Layout"
; Data$ "Icon",             "Icon"
; Data$ "Action",           "Action"
; Data$ "ItemSettings",     "Item Settings"
; Data$ "ItemPosition",     "Position"
; Data$ "Set",              "Set"
; Data$ "ToolbarSets",      "Default Sets"
; Data$ "ToolbarDefault",   "Default Toolbar"
; Data$ "ToolbarClassic",   "Classic Toolbar"
; Data$ "Separator",        "Separator"
; Data$ "Space",            "Space"
; Data$ "StandardButton",   "Standard Icon"
; Data$ "ThemeIcon",        "Theme Icon"
; Data$ "ExternalIcon",     "Icon File"
; Data$ "ActionMenu",       "Menu Item"
; Data$ "ActionTool",       "Run Tool"
; Data$ "OpenIcon",         "Choose Icon File"
; Data$ "IconPattern",      "Icon Files (*.ico, *.png)|*.ico;*.png|All Files (*.*)|*.*"
; Data$ "MaxItems",         "Maximum number of toolbar items reached"
; 
; Data$ "Tools",            "ToolsPanel"  
; Data$ "Options",          "Options"   
; Data$ "ToolsPanelOptions","ToolsPanel Options"
; Data$ "ToolsPanelLeft",   "Panel on the left side"
; Data$ "ToolsPanelRight",  "Panel on the right side"
; Data$ "ToolsFrontColor",  "Front Color"
; Data$ "ToolsBackColor",   "Background Color"
; Data$ "NoIndependandColors", "Do not use colors/fonts for tools in external windows."
; Data$ "AutoHidePanel",    "Automatically hide the Panel"
; Data$ "AutoHideDelay",    "Milliseconds delay before hiding the Panel"
; Data$ "ToolsPanelItems",  "Tools in the ToolsPanel"
; Data$ "AvailableTools",   "Available Tools"
; Data$ "UsedTools",        "Displayed Tools"
; Data$ "Add",              "Add"
; Data$ "Remove",           "Remove"
; Data$ "Up",               "Up"
; Data$ "Down",             "Down"
; Data$ "Configuration",    "Configuration"      
; Data$ "ExplorerMode",     "Displaymode of the Explorer"
; Data$ "ExplorerTree",     "Explorer Tree"
; Data$ "ExplorerList",     "Explorer List"
; Data$ "ExplorerSavePath", "Remember last displayed Directory"           
; Data$ "ProcedureSort",    "Sort Procedures by name"
; Data$ "ProcedureGroup",   "Group Markers"
; Data$ "ProcedurePrototype", "Display Procedure Arguments"
; 
; Data$ "Indent",           "Indentation"
; Data$ "IndentTitle",      "Code Indentation"
; Data$ "IndentNo",         "No indentation"
; Data$ "IndentBlock",      "Block mode"
; Data$ "IndentSensitive",  "Keyword sensitive"
; Data$ "BackspaceUnindent","Backspace unindents"
; Data$ "AddSet",           "Add/Set"
; Data$ "Keyword",          "Keyword"
; Data$ "Before",           "Before"
; Data$ "After",            "After"
; 
; Data$ "AutoComplete",     "AutoComplete"
; Data$ "AutoCompleteList", "Displayed Items"
; Data$ "DisplayFullList",  "Display the full AutoComplete list"
; Data$ "FirstCharMatch",   "Display all words that match the first character"
; Data$ "AllWordMatch",     "Display only words that begin with the typed word"
; Data$ "BoxWidth",         "Box width"
; Data$ "BoxHeight",        "Box height"
; Data$ "AddBrackets",      "Add opening Brackets to Functions/Arrays/Lists"
; Data$ "AddSpaces",        "Add a Space after PB Keywords followed by an expression"
; Data$ "AddEndKeywords",   "Add matching 'End' keyword if insert is pressed twice"
; Data$ "ListOptions",      "Items to display in the AutoComplete List"            
; Data$ "NoComments",       "Disable automatic popup inside Comments"      
; Data$ "NoStrings",        "Disable automatic popup inside Strings"
; Data$ "PopupLength",      "Characters needed before opening the list"
; 
; Data$ "AutoPopupNormal",  "Automatically popup AutoComplete otherwise"
; Data$ "AutoPopupStructures","Automatically popup AutoComplete for Structure items"
; Data$ "AutoPopupModules", "Automatically popup AutoComplete after a Module prefix"
; Data$ "PBItems",          "Predefined Items"
; Data$ "SourceItems",      "Sourcecode Items"
; Data$ "SourceOnly",       "the current source only"
; Data$ "ProjectOnly",      "the current project (if any)"
; Data$ "ProjectAllFiles",  "the current project or all files (if none)"
; Data$ "AllFiles",         "all open files"
; Data$ "AddFrom",          "Add Items from"
; 
; Data$ "Option_Variable",  "Variables"
; Data$ "Option_Array",     "Arrays"
; Data$ "Option_List",      "LinkedLists"
; Data$ "Option_Map",       "Maps"
; Data$ "Option_Procedure", "Procedures"
; Data$ "Option_Macro",     "Macros"
; Data$ "Option_Import",    "Imported Functions"
; Data$ "Option_Prototype", "Prototypes"
; Data$ "Option_Constant",  "Constants"
; Data$ "Option_Structure", "Structures"
; Data$ "Option_Interface", "Interfaces"
; Data$ "Option_Label",     "Labels"
; Data$ "Option_Module",    "Modules"
; 
; Data$ "Option_PBKeywords",  "Keywords"
; Data$ "Option_ASMKeywords", "ASM Keywords"
; Data$ "Option_PBFunctions", "Library Functions"
; Data$ "Option_APIFunctions","API Functions"
; Data$ "Option_PBConstants", "Constants"
; Data$ "Option_PBStructures","Structures"
; Data$ "Option_PBInterfaces","Interfaces"
; Data$ "Debugger",         "Debugger"
; Data$ "IndividualSettings", "Individual Settings"
; Data$ "DefaultWindows",   "Default Windows"
; 
; Data$ "Compiler",         "Compiler"
; Data$ "DefaultCompiler",  "Default Compiler"
; Data$ "MoreCompilers",    "Additional Compilers"
; Data$ "CompilerVersion",  "Version"
; Data$ "CompilerPath",     "Path"      
; Data$ "SelectCompiler",   "Select PureBasic compiler..."
; 
; Data$ "EditHistory",     "Session History"
; Data$ "EnableHistory",   "Enable recording of history (change requires a restart)"
; Data$ "HistoryTimer1",   "Record unsaved changes every"
; Data$ "HistoryTimer2",   "minutes"
; Data$ "HistoryMaxSize1", "Record only changes to files smaller than"
; Data$ "HistoryMaxSize2", "kilobytes"
; Data$ "PurgeSessions",   "Purge old sessions from history"
; Data$ "PurgeNever",      "Keep all history"
; Data$ "PurgeByDays1",    "Keep sessions for"
; Data$ "PurgeByDays2",    "days"
; Data$ "PurgeByCount1",   "Keep maximum"
; Data$ "PurgeByCount2",   "sessions"
; Data$ "HistoryFile",     "Database location"
; Data$ "HistoryFileSize", "Database size"
; 
; Data$ "AutoClearLog",     "Clear Errorlog on each run"
; Data$ "DisplayErrorWindow", "Display compilation errors in a window"
; Data$ "DebuggerMode",     "Choose Debugger Type"      
; Data$ "IDEDebugger",      "Integrated IDE Debugger"
; Data$ "GUIDebugger",      "Standalone GUI Debugger"
; Data$ "ConsoleDebugger",  "Console only Debugger"
; Data$ "WarningMode",      "Choose Warning level"
; Data$ "WarningsIgnore",   "Ignore Warnings"
; Data$ "WarningsDisplay",  "Display Warnings"
; Data$ "WarningsError",    "Treat Warnings as Errors"
; Data$ "DebuggerGeneral",  "General Options"
; Data$ "StopAtStart",      "Stop execution at program start"
; Data$ "StopAtEnd",        "Stop execution before program end"
; Data$ "DebuggerMemorize", "Memorize debugger window positions"
; Data$ "DebuggerOnTop",    "Keep all debugger windows on top"
; Data$ "AutoSetOnTop",     "Bring debugger windows to front when one is focused"
; Data$ "LogTimeStamp",     "Display Timestamp in Error log"
; Data$ "Purifier",         "Purifier"
; Data$ "DataBreakpoints",  "Data Breakpoints"
; Data$ "DebugOutput",      "Debug Output"
; Data$ "AsmDebug",         "Asm Debugger"
; Data$ "MemoryViewer",     "Memory Viewer"
; Data$ "VariableViewer",   "Variable Viewer"      
; Data$ "LibraryViewer",    "Library Viewer"
; Data$ "IsHex",            "Display Hex values"
; Data$ "RegisterIsHex",    "Display Registers as hex"
; Data$ "StackIsHex",       "Display Stack as hex"
; Data$ "DebugTimeStamp",   "Add Timestamp"
; Data$ "AutoStackUpdate",  "Update Stack trace automatically"
; Data$ "MemoryOneColumn",  "Array view in one column only"
; Data$ "AutoOpenWindows",  "Open Windows on debugger start"
; Data$ "Watchlist",        "Watchlist"
; Data$ "CallStack",        "Procedure Callstack"
; Data$ "KillOnError",      "Kill Program after an Error"
; Data$ "KeepErrorMarks",   "Keep Error marks after program end"
; Data$ "SystemMessages",   "Display System messages"
; Data$ "DebugToLog",       "Display debug output in the error log"
; Data$ "Profiler",         "Profiler"
; Data$ "ProfilerStartup",  "Start Profiler on program startup"
; Data$ "DebuggerTimeout",  "Timeout for Debugger startup (ms)"
; 
; 
; Data$ "ImportExport",     "Import/Export" 
; Data$ "Import",           "Import Settings"
; Data$ "Export",           "Export Settings"
; Data$ "IncludeShortcut",  "Include Shortcut settings"
; Data$ "IncludeToolbar",   "Include Toolbar layout"
; Data$ "IncludeColors",    "Include Color settings"
; Data$ "IncludeFolding",   "Include Folding keywords"
; Data$ "SaveTo",           "Save to"
; Data$ "LoadFrom",         "Load from"
; Data$ "Open",             "Open"
; Data$ "PrefExportPattern","Preference settings (*.prefs)|*.prefs|Text Files (*.txt)|*.txt|All Files (*.*)|*.*"
; Data$ "ImportComplete",   "Importing Preferences complete."
; Data$ "ExportComplete",   "Exporting Preferences complete."  
; Data$ "UnknownPrefFormat","This Preference file format is unknown."    
; 
; Data$ "Accessibility",    "Accessibility"
; Data$ "ShowHiddenFiles",  "Show hidden files/directories."
; 
; Data$ "CustomFont",       "Use a custom font"
; Data$ "CustomColors",     "Use custom colors"
; 
; Data$ "Form",             "Form"
; Data$ "FormVariable",     "New gadgets use #PB_Any by default"
; Data$ "FormVariableCaption","New gadgets use a variable as caption"
; Data$ "FormGrid",         "Grid Visible"
; Data$ "FormEventProcedure","Generate event procedure"
; Data$ "FormGridSize",     "Grid Size"
; Data$ "FormSkin",         "OS Skin"
; 
; Data$ "Issues",           "Issues"
; Data$ "IssueNameShort",   "Name"
; Data$ "IssueExprShort",   "Expression"
; Data$ "IssueName",        "Issue name"
; Data$ "IssueExpr",        "Regular expression"
; Data$ "IssueCodeNoColor", "No code color"
; Data$ "IssueCodeBack",    "Change issue background"
; Data$ "IssueCodeLine",    "Change line background"
; Data$ "IssueCodeLineLimit","Only up to %limit% issues that change the line background can be defined."
; Data$ "IssueInTool",      "Show in issue tool"
; Data$ "IssueInBrowser",   "Show in procedure browser"
; Data$ "InvalidExpr",      "Invalid regular expression"      
; 
; CompilerIf #SpiderBasic
; 
; 
; 
; Data$ "_GROUP_",            "Find"
; 
; 
; Data$ "FindTitle",        "Find/Replace"
; Data$ "SearchFor",        "Search for"
; Data$ "ReplaceWith",      "Replace with"
; Data$ "CaseSensitive",    "Case Sensitive"
; Data$ "WholeWord",        "Whole Words only"
; Data$ "SelectionOnly",    "Search inside Selection only"
; Data$ "NoComments",       "Don't search in Comments"
; Data$ "NoStrings",        "Don't search in Strings"
; Data$ "FindNext",         "Find Next"
; Data$ "FindPrevious",     "Find previous"
; Data$ "Replace",          "Replace"
; Data$ "ReplaceAll",       "Replace All"
; 
; Data$ "NoMoreMatches",    "No more matches found"
; Data$ "ContinueSearch",   "Do you want to search from the start of the file?"
; Data$ "ContinueSearchReverse", "Do you want to search from the end of the file?"
; Data$ "SearchComplete",   "Search/Replace complete"
; Data$ "MatchesFound",     "matches found"      
; 
; Data$ "GrepTitle",        "Find in files"
; Data$ "OutputTitle",      "Find in files - Results"
; Data$ "RootDirectory",    "Root directory"
; Data$ "Extensions",       "Extension filters"
; Data$ "IncludeSubdirs",   "Include sub-directories"
; Data$ "Start",            "Start"
; Data$ "Stop",             "Stop"
; 
; Data$ "Started",          "Search started"
; Data$ "Aborted",          "Search aborted"
; Data$ "Finished",         "Search finished"
; Data$ "LinesFound",       "Line(s) found"
; Data$ "Info",             "Info"
; Data$ "NeedString",       "You have to enter a string to find"
; Data$ "NeedPath",         "You have to choose a root path"
; Data$ "Clear",            "Clear"   
; Data$ "BinaryFile",       "Binary file"   
; 
; 
; 
; Data$ "_GROUP_",            "Diff"
; 
; 
; Data$ "Title",            "Compare Files"   
; Data$ "Busy",             "Comparing, please wait..."
; Data$ "RequesterTitle",   "Choose a file to compare..."
; Data$ "CurrentEdit",      "currently edited version"
; Data$ "FileError",        "The file '%file%' could not be opened."      
; Data$ "FileBinary",       "The file '%file%' is a binary file.%newline%Only text files can be compared."
; 
; Data$ "Open1",            "Open left file for editing"
; Data$ "Open2",            "Open right file for editing"
; Data$ "Refresh",          "Refresh differences"
; Data$ "Swap",             "Swap file positions"
; Data$ "Colors",           "Enable Syntax coloring"
; Data$ "Vertical",         "Split View vertically"
; Data$ "ShowTool",         "Open 'Compare' tool"
; Data$ "HideFiles",        "Hide file differences"      
; Data$ "Down",             "Go to next difference"
; Data$ "Up",               "Go to previous difference"
; 
; Data$ "DialogTitle",      "Compare"
; Data$ "FilesTab",         "Files"
; Data$ "DirectoriesTab",   "Directories"
; Data$ "OptionsTab",       "Options"
; Data$ "File1",            "File 1"
; Data$ "File2",            "File 2"
; Data$ "Directory1",       "Directory 1"
; Data$ "Directory2",       "Directory 2"
; Data$ "IgnoreCase",       "Ignore case changes"
; Data$ "IgnoreSpaceAll",   "Ignore all space changes"
; Data$ "IgnoreSpaceLeft",  "Ignore space changes on the left side of a line"
; Data$ "IgnoreSpaceRight", "Ignore space changes on the right side of a line"      
; Data$ "EmptyField",       "All fields must be filled out."
; Data$ "Compare",          "Compare"
; 
; Data$ "Filename",         "Filename"
; Data$ "State",            "Status"
; Data$ "Date1",            "Date in (1)"
; Data$ "Date2",            "Date in (2)"
; Data$ "FileEqual",        "Unchanged"
; Data$ "FileAdd",          "Only in (2)"
; Data$ "FileDelete",       "Only in (1)"
; Data$ "FileModify",       "Modified"
; Data$ "DateFormat",       "%mm/%dd/%yyyy %hh:%ii"
; 
; 
; 
; Data$ "_GROUP_",            "History"
; 
; 
; Data$ "Title",            "Session History"   
; Data$ "ViewFile",         "File"
; Data$ "ViewSession",      "Session"
; 
; Data$ "Time",             "Time"
; Data$ "File",             "File"
; Data$ "Session",          "Session"
; Data$ "TimeFormat",       "%hh:%ii:%ss"
; Data$ "DateTimeFormat",   "%mm/%dd/%yyyy %hh:%ii:%ss"
; Data$ "DurationMinutes",  "minutes"
; Data$ "DurationHours",    "hours"
; Data$ "SessionRunning",   "running"
; Data$ "SessionCrashed",   "ended unexpectedly"
; Data$ "CurrentSession",   "Current Session"
; Data$ "UnsavedSource",    "Unsaved source"
; Data$ "CrashedInfo",      "A previous IDE session seems to have ended improperly.%newline%Do you want to open the session history to recover unsaved changes?"
; Data$ "FileError",        "Could not open history database: %newline%%filename%%newline%%newline%No history will be recorded for this session."
; Data$ "VersionError",     "The history database is from an incompatible newer version of PureBasic.%newline%No history will be recorded in this session to prevent corruption.%newline%A different database file can be specified via commandline options.%newline%%newline%Database file: %filename%"
; 
; Data$ "ShutdownTitle",    #ProductName$ + ": Please wait"
; Data$ "ShutdownMessage",  "Saving session history to disk..."
; 
; 
; 
; Data$ "_GROUP_",            "StructureViewer"
; 
; 
; Data$ "Title",            "Structure Viewer"
; Data$ "Structures",       "Structures"
; Data$ "Interfaces",       "Interfaces"
; Data$ "Constants",        "Constants"
; Data$ "Parent",           "Back"
; Data$ "StayOnTop",        "Stay on top"
; Data$ "IncludeTypes",     "Include types"
; Data$ "InsertName",       "Insert name"
; Data$ "Insert",           "Insert"
; Data$ "InsertCopy",       "Insert copy"
; Data$ "GetVarName",       "Get variable name"
; Data$ "InputVarName",     "Please input variable name"
; Data$ "DefaultVar",       "var"
; 
; 
; 
; 
; Data$ "_GROUP_",            "Compiler"
; 
; 
; Data$ "OptionsTitle",     "Compiler Options"	  
; Data$ "InputFile",        "Input source file"
; Data$ "OutputFile",       "Output executable"
; Data$ "MainFile",         "Main source file"
; Data$ "UseIcon",          "Use Icon"
; Data$ "UseCompiler",      "Use Compiler"
; Data$ "EnableDebugger",   "Enable Debugger"
; Data$ "EnablePurifier",   "Enable Purifier"
; Data$ "EnableASM",        "Enable inline ASM syntax coloring"      
; Data$ "EnableXP",         "Enable modern theme support (for Windows XP and above)"
; Data$ "EnableAdmin",      "Request Administrator mode for Windows Vista and above"
; Data$ "EnableUser",       "Request User mode for Windows Vista and above (no virtualisation)"
; Data$ "DPIAware",         "Enable DPI aware executable (Windows)"
; Data$ "EnableOnError",    "Enable OnError lines support"
; Data$ "EnableThread",     "Create threadsafe executable"
; Data$ "ExeFormat",        "Executable format"
; Data$ "SubSystem",        "Library Subsystem"
; Data$ "CommandLine",      "Executable Commandline"
; Data$ "NewLineType",      "Sourcefile Newline format" 
; Data$ "TextEncoding",     "Sourcefile Text encoding"    
; Data$ "UnknownVersion",   "Cannot read version"  
; 
; Data$ "EncodingPlain",    "Plain Text"
; Data$ "EncodingUtf8",     "UTF-8"
; 
; Data$ "OpenMainFile",     "Choose a new Main Source file..."
; Data$ "SetOutputFile",    "Specify output Executable..."
; Data$ "OpenIcon",         "Choose an Icon for the Executable..."
; Data$ "CreateExe",        "Create Executable..."
; Data$ "OpenLinkerFile",   "Choose a file with linker options..."
; 
; CompilerIf #SpiderBasic
; Data$ "SourcePattern",   "PureBasic Files (*.pb, *.pbi)|*.pb;*.pbi|PureBasic Sourcecodes (*.pb)|*.pb|PureBasic Includefiles (*.pbi)|*.pbi|All Files (*.*)|*.*"  
; CompilerEndIf
; 
; Data$ "IconPattern",      "Icon files (*.ico)|*.ico|All Files (*.*)|*.*" 
; Data$ "DllPattern",       "Shared DLL (*.dll)|*.DLL|All Files (*.*)|*.*"
; Data$ "ExePattern",       "Executable (*.exe)|*.EXE|All Files (*.*)|*.*"
; Data$ "AllFilesPattern",  "All Files (*.*)|*.*"
; 
; Data$ "Compiling",        "Compilation in progress..."
; Data$ "Lines",            "lines"
; Data$ "Including",        "Including"
; Data$ "Details",          "Details"
; Data$ "Finishing",        "Creating executable file..."
; Data$ "Aborting",         "Aborting compilation..."
; Data$ "LinesCompiled",    "%count% lines compiled."
; 
; Data$ "SaveTempError",    "Can't save Sourcecode to temporary file!"
; Data$ "ReadMainError",    "Can't read main Sourcecode!"
; 
; Data$ "Busy",             "The compiler can't be restarted. It is busy."
; Data$ "NotReady",         "The compiler isn't loaded yet... please try again."
; Data$ "ResponseError",    "Wrong compiler response. Probably not the correct compiler version.%newline%Please reinstall %product%."
; Data$ "CompilerCrash",    "The compiler appears to have crashed or quit unexpectedly. %newline%It will be restarted.%newline%%newline%Please report the conditions that caused this as a bug."
; Data$ "SubsystemError",   "The following subsystem cannot be found"
; 
; Data$ "ErrorLine",        "Line"
; Data$ "ErrorMainFile",    "Error in the MainFile"
; Data$ "ErrorIncludeFile", "Error in included File"      
; Data$ "FileError",        "Cannot read Compiler output!"    
; Data$ "Warning",          "Warning"
; Data$ "WarningTotals",    "Compilation succeeded with %warnings% warning(s)."  
; Data$ "LogCompiler",      "[COMPILER]"
; 
; Data$ "ProgramEnded",     "The execution of the Program has finished."
; Data$ "DebuggerWait",     "Press Enter to close the Debugger window."
; Data$ "DebuggerOn",       "On"
; Data$ "DebuggerOff",      "Off"
; 
; Data$ "ExeNameError",     "Cannot execute the compiled File!"
; Data$ "RestartError",     "Compiler restart failed!"
; Data$ "StartError",       "Cannot start compiler"
; Data$ "CompilerNotFound", "The required compiler cannot be found"
; 
; Data$ "AllCPU",           "All CPU"
; Data$ "DynamicCPU",       "Dynamic CPU"
; Data$ "MMX",              "CPU with MMX"
; Data$ "3DNOW",            "CPU with 3DNOW"
; Data$ "SSE",              "CPU with SSE"
; Data$ "SSE2",             "CPU with SSE2"
; 
; Data$ "LinkerOptions",    "Linker options file"
; Data$ "SelectDebugger",   "Use selected Debugger"
; Data$ "SelectWarning",   "Use Warning mode"
; Data$ "ExecuteOptions",   "Run executable with"
; Data$ "CurrentDirectory", "Current directory"
; Data$ "TemporaryExe",     "Create temporary executable in the source directory"
; Data$ "ExecuteTools",     "Execute tools"
; Data$ "GlobalSetting",    "Global setting"
; 
; Data$ "EditorConstants",  "Editor constants"
; Data$ "CustomConstants",  "Custom constants"    
; 
; Data$ "TargetList",       "Compile targets"
; Data$ "AddTarget",        "Add new target"
; Data$ "CopyTarget",       "Copy target"
; Data$ "RenameTarget",     "Rename target"
; Data$ "EditTarget",       "Edit target"
; Data$ "RemoveTarget",     "Remove target"
; Data$ "TargetUp",         "Move target up"
; Data$ "TargetDown",       "Move target down"
; Data$ "DefaultTarget",    "Set as default target"
; Data$ "EnableTarget",     "Enable in 'Build all Targets'"
; 
; Data$ "DefaultTargetName","Default Target"   
; Data$ "NewTargetName",    "New Target"
; Data$ "EnterTargetName",  "Enter target name"
; Data$ "TargetCopySuffix", "(Copy)"
; Data$ "NameExists",       "This name is already used by another target."
; Data$ "ConfirmTargetDelete", "Do you really want to delete this target?"
; Data$ "NoInputFile",      "The target '%target%' for this Project has no main sourcefile (to set in 'Compiler options')."
; Data$ "NoOutputFile",     "The target '%target%' for this Project has no output executable file."
; Data$ "SaveAnyway",       "Should it be saved anyway ?"
; 
; Data$ "BuildWindowTitle", "Building..."
; Data$ "BuildProgress",    "Progress"
; Data$ "BuildLog",         "Log"
; Data$ "CloseWhenDone",    "Close window if completed successful"     
; Data$ "StatusOk",         "Ok"
; Data$ "StatusError",      "Error"
; Data$ "StatusWarning",    "Warnings: %count%"
; Data$ "NoBuildTargets",   "No targets have been set in the compiler options for 'Build all Targets'."
; Data$ "BuildStart",       "Building '%target%'..."
; Data$ "BuildSuccess",     "Compilation successful."
; Data$ "BuildStatsNoError","%count% targets compiled successfully."
; Data$ "BuildStatsError",  "%count% targets compiled with errors."
; Data$ "BuildStatsWarning","%count% warnings total."
; Data$ "BuildStatsAborted","The build sequence was aborted."
; Data$ "BuildRunTool",     "Executing external tool"
; Data$ "BuildUseCompiler", "Using compiler"
; 
; Data$ "TargetNotFound",   "Build target not found"
; Data$ "NoTargets",        "There are no targets to compile."
; Data$ "TargetBuildError", "Error building '%target%'"
; 
; 
; CompilerIf #SpiderBasic
; 
; 
; 
; Data$ "_GROUP_",            "Resources"
; 
; 
; Data$ "CompilerOptions",  "Compiler Options"
; Data$ "CompileRun",       "Compile/Run"
; Data$ "Constants",        "Constants"
; Data$ "VersionInfo",      "Version Info"
; Data$ "Resources",        "Resources"
; 
; Data$ "OpenResource",     "Select resource script to add..."      
; Data$ "ResourcePattern",  "PORC resource scripts (*.rc)|*.rc|All Files (*.*)|*.*"
; 
; Data$ "IncludeVersion",   "Include Version Information"
; 
; Data$ "VersionField0",    "File Version (n,n,n,n)"
; Data$ "VersionField1",    "Product Version (n,n,n,n)"
; Data$ "VersionField2",    "Company Name"
; Data$ "VersionField3",    "Product Name"
; Data$ "VersionField4",    "Product Version"
; Data$ "VersionField5",    "File Version"
; Data$ "VersionField6",    "File Description"
; Data$ "VersionField7",    "Internal Name"
; Data$ "VersionField8",    "Original FileName"
; Data$ "VersionField9",    "Legal Copyright"
; Data$ "VersionField10",   "Legal Trademarks"
; Data$ "VersionField11",   "Private Build"
; Data$ "VersionField12",   "Special Build"
; Data$ "VersionField13",   "Email"
; Data$ "VersionField14",   "Website"            
; Data$ "VersionField15",   "File OS"
; Data$ "VersionField16",   "File Type"
; Data$ "VersionField17",   "Language"
; 
; Data$ "RequiredFields",   "Fields marked with a * are required."
; 
; Data$ "Tokens",           "Tokens"
; Data$ "Token0",           "%OS : OS used for compilation."
; Data$ "Token1",           "%SOURCE : Source filename."
; Data$ "Token2",           "%EXECUTABLE : Executable name."      
; Data$ "Token3",           "%COMPILECOUNT : The #PB_Editor_CompileCount value."      
; Data$ "Token4",           "%BUILDCOUNT : The #PB_Editor_BuildCount value."      
; Data$ "DateTokens",       "Furthermore, all Tokens of the FormatDate() command can be used."
; 
; 
; 
; 
; Data$ "_GROUP_",            "AddTools"
; 
; 
; Data$ "Title",            "Configure Tools" 
; Data$ "Name",             "Name"
; Data$ "Commandline",      "Commandline"
; Data$ "Trigger",          "Trigger"         
; Data$ "New",              "New"
; Data$ "Edit",             "Edit"
; Data$ "Delete",           "Delete"
; Data$ "Up",               "Move up"
; Data$ "Down",             "Move Down"   
; 
; Data$ "EditTitle",        "Edit Tool Settings"
; Data$ "Arguments",        "Arguments"
; Data$ "Info",             "Info"
; Data$ "WorkingDir",       "Working Directory"
; Data$ "Options",          "Options"
; Data$ "TriggerEvent",     "Event to trigger the tool"
; Data$ "Shortcut",         "Shortcut"
; Data$ "RunHidden",        "Run Hidden"
; Data$ "HideEditor",       "Hide Editor"
; Data$ "WaitForQuit",      "Wait until tool quits"
; Data$ "Reload",           "Reload Source after tool has quit"
; Data$ "ReloadNew",        "into new source"
; Data$ "ReloadOld",        "into current source"
; Data$ "CompileTemp",      "Use the temp file for compilation"  
; Data$ "HideFromMenu",     "Hide Tool from the Main menu"
; Data$ "SourceSpecific",   "Enable Tool on a per-source basis"
; Data$ "None",             "None"
; Data$ "ChooseExe",        "Choose Executable to run"
; Data$ "ChooseDir",        "Choose Working Directory"
; Data$ "ConfigLine",       "Supported File extensions (ext1,ext2,...)"
; 
; Data$ "NoCommandLine",    "You have to specify a command to execute."
; Data$ "NoName",           "You have to specify a name for your tool."
; Data$ "NameExists",       "The name you specified is already used."
; 
; Data$ "Trigger0",         "Menu Or Shortcut"
; Data$ "Trigger1",         "Editor Startup"
; Data$ "Trigger2",         "Editor Closing"
; Data$ "Trigger3",         "Before Compile/Run"
; Data$ "Trigger4",         "After Compile/Run"
; Data$ "Trigger5",         "Run compiled Program"
; Data$ "Trigger6",         "Before Create Executable"
; Data$ "Trigger7",         "After Create Executable"      
; Data$ "Trigger8",         "Sourcecode loaded"
; Data$ "Trigger9",         "Sourcecode saved"             
; Data$ "Trigger10",        "Replace Fileviewer - All files"
; Data$ "Trigger11",        "Replace FileViewer - Unknown files"
; Data$ "Trigger12",        "Replace FileViewer - Special file"
; Data$ "Trigger13",        "Sourcecode closed"
; Data$ "Trigger14",        "New Sourcecode created"
; 
; Data$ "Argument1",        "%PATH : Path of the current source. Empty if the source wasn't saved yet."
; Data$ "Argument2",        "%FILE : Filename and Path of the current source. Empty if it wasn't saved yet."
; Data$ "Argument3",        "%TEMPFILE : A temporary copy of the source file. You may modify or delete this at will."
; Data$ "Argument4",        "%COMPILEFILE : The temporary file that is sent to the compiler. You can modify it to change the actual compiled source."
; Data$ "Argument5",        "%EXECUTABLE : Before and after Compilation the name of the created executable"
; Data$ "Argument6",        "%CURSOR : The current cursor position given as 'LINExCOLUMN' (ie '15x10')"
; Data$ "Argument7",        "%SELECTION : The current selection given as 'LINESTARTxCOLUMNSTARTxLINEENDxCOLUMNEND' (ie '15x1x16x5')"
; Data$ "Argument8",        "%WORD : The word that is under the current cursor position."
; Data$ "Argument9",        "%HOME : The " + #ProductName$ + " directory."
; Data$ "Argument10",       "%PROJECT : The directory where the project file resides if there is an open project."
; 
; 
; 
; 
; Data$ "_GROUP_",            "Shortcuts"
; 
; 
; Data$ "Shortcuts",        "Shortcuts"
; Data$ "Shortcut",         "Shortcut"
; Data$ "Action",           "Action"
; Data$ "Set",              "Set"
; 
; Data$ "Alt",              "Alt"
; Data$ "Shift",            "Shift"
; Data$ "Control",          "Ctrl"
; Data$ "Command",          "Cmd"
; Data$ "Numpad",           "Numpad"  
; 
; Data$ "NextOpenFile",     "Jump to next open File"
; Data$ "PreviousOpenFile", "Jump to previous open File"
; Data$ "ShiftCommentRight","Shift comments to the right"
; Data$ "ShiftCommentLeft", "Shift comments to the left"
; Data$ "SelectBlock",      "Select surrounding code block"
; Data$ "DeselectBlock",    "Revert to previous code block selection"
; Data$ "AutoComplete",     "Display the AutoComplete Window"
; Data$ "AutoCompleteConfirm","Insert the selected AutoComplete word"
; Data$ "AutoCompleteAbort",  "Close the AutoComplete Window"
; Data$ "ProceduresUpdate", "Trigger Update of Procedure & Variable Viewer"
; 
; Data$ "AllreadyUsed",     "The shortcut you specified is already used by" ; DO NOT FIX TYPO: AllreadyUsed
; Data$ "ExternalTool",     "External Tool"
; Data$ "Menu",             "Menu"
; Data$ "TabIntend",        "Indent/Unindent code Selection"
; Data$ "SystemShortcut",   "Reserved Shortcut for the System"         
; Data$ "SelectShortcut",   "Select shortcut"
; 
; Data$ "Key71",            "Backspace"
; Data$ "Key72",            "Tab"
; Data$ "Key73",            "Clear"
; Data$ "Key74",            "Return"
; Data$ "Key75",            "Alt" 
; Data$ "Key76",            "Pause"
; Data$ "Key77",            "Print"
; Data$ "Key78",            "Caps Lock"
; Data$ "Key79",            "Escape"
; Data$ "Key80",            "Space"
; Data$ "Key81",            "Page Up"
; Data$ "Key82",            "Page Down"
; Data$ "Key83",            "End"
; Data$ "Key84",            "Home"
; Data$ "Key85",            "Left"
; Data$ "Key86",            "Up"
; Data$ "Key87",            "Right"
; Data$ "Key88",            "Down"
; Data$ "Key89",            "Select"
; Data$ "Key90",            "Execute"
; Data$ "Key91",            "Print Screen"
; Data$ "Key92",            "Insert"
; Data$ "Key93",            "Delete"
; Data$ "Key94",            "Help"
; Data$ "Key95",            "Left Windows Key"
; Data$ "Key96",            "Right Windows Key"
; Data$ "Key97",            "Applications"
; Data$ "Key98",            "Multiply"
; Data$ "Key99",            "Add"
; Data$ "Key100",           "Separator"
; Data$ "Key101",           "Subtract"
; Data$ "Key102",           "Decimal"
; Data$ "Key103",           "Divide"
; Data$ "Key104",           "Num Lock"
; Data$ "Key105",           "Scroll Lock"
; 
; 
; 
; 
; Data$ "_GROUP_",            "Help"
; 
; 
; Data$ "Title",            "Help"
; Data$ "Contents",         "Contents"
; Data$ "Index",            "Index"
; Data$ "Search",           "Search"
; Data$ "StartSearch",      "Search"   
; Data$ "Back",             "Go back"
; Data$ "Forward",          "Go forward"
; Data$ "Home",             "Reference"
; Data$ "Next",             "Next Topic"
; Data$ "Previous",         "Previous Topic"
; Data$ "OpenHelp",         "Open Help"
; Data$ "OpenF1",           "Open sidebar help on F1"
; Data$ "NoResults",        "No results found."
; 
; 
; Data$ "Parent",           "Up"
; Data$ "Back",             "Back"
; 
; 
; 
; 
; Data$ "_GROUP_",            "FileViewer"
; 
; 
; Data$ "Title",            "File Viewer"      
; Data$ "Pattern",          "Image Files (*.bmp, *.png, *.jpg, *.jpeg, *.tga, *.ico)|*.bmp;*.png;*.jpg;*.jpeg;*.tga;*.ico|HTML Documents (*.html, *.htm)|*.html;*.htm|Text Documents (*.txt)|*.txt|All Files (*.*)|*.*"      
; Data$ "Open",             "Open File"
; Data$ "Close",            "Close File"
; Data$ "Next",             "Show next File"
; Data$ "Previous",         "Show previous File"
; Data$ "SizeWarning",      "Warning! This file is very large."
; Data$ "SizeError",        "This file is too large (> 10 MB)."
; Data$ "SizeQuestion",     "Do you still want to load it?"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Data$ "_GROUP_",            "Templates"
; 
; 
; Data$ "Title",           "Templates"
; Data$ "EnterName",       "Enter Template Name"
; Data$ "EnterDirName",    "Enter Directory Name" 
; 
; Data$ "Code",            "Code"
; Data$ "Comment",         "Comment"
; 
; Data$ "New",             "New Template"
; Data$ "Edit",            "Edit Template"
; Data$ "Delete",          "Delete Template"
; Data$ "NewDir",          "New Directory"
; Data$ "DeleteDir",       "Delete Directory"
; Data$ "Up",              "Move Up"
; Data$ "Down",            "Move Down"
; 
; Data$ "DeleteNonEmpty",  "The Directory is not empty.%newline%Do you still want to delete it?"
; Data$ "DeleteQuestion",  "Do you really want to delete this Template?"
; Data$ "DeletePreference","Ask before deleting any Template"
; 
; Data$ "MenuUse",         "Insert into Code"
; Data$ "MenuNew",         "New"
; Data$ "MenuEdit",        "Edit"
; Data$ "MenuDelete",      "Delete"
; Data$ "MenuNewDir",      "New Directory"
; Data$ "MenuDeleteDir",   "Delete Directory"
; Data$ "MenuRename",      "Rename"
; Data$ "MenuUp",          "Up"
; Data$ "MenuDown",        "Down"
; 
; Data$ "MenuCut",         "Cut"
; Data$ "MenuCopy",        "Copy"
; Data$ "MenuPaste",       "Paste"
; Data$ "MenuSelectAll",   "Select All"
; 
; 
; 
; 
; Data$ "_GROUP_",            "Debugger"
; 
; 
; Data$ "ShowErrorLog",     "Show Error Log"
; Data$ "LogEmpty",         "The Error Log is empty."
; 
; Data$ "IsRunning",        "This Source file or Project is already being debugged by the IDE."
; Data$ "IsRunning2",       "Do you want to use the standalone debugger?"
; Data$ "ExecuteError",     "Cannot execute the file with the internal debugger. Please try the standalone one."      
; Data$ "ExecutableType",   "Executable type"
; 
; Data$ "TimeStamp",        "%hh:%ii:%ss"
; Data$ "ChooseStep",       "Select Number of Steps to execute:"
; 
; Data$ "Waiting",          "Waiting for executable to start..."
; Data$ "ExeStarted",       "Executable started."
; Data$ "ExeEnded",         "The Program execution has finished."
; Data$ "Stopped",          "Execution stopped."
; Data$ "Continued",        "Execution continued."
; Data$ "OneStep",          "Executing one Step."
; Data$ "StepX",            "Executing %x% Steps."
; Data$ "StepOver",         "Executing procedure."
; Data$ "StepOut",          "Executing rest of the procedure."      
; Data$ "ExeKilled",        "The Program was killed."
; 
; Data$ "Breakpoint",       "Breakpoint"
; Data$ "BeforeEnd",        "Program about to end"
; Data$ "UserRequest",      "User request"    
; Data$ "DataBreakpoint",   "Data Breakpoint"
; 
; Data$ "LogError",         "[ERROR]"
; Data$ "LogWarning",       "[WARNING]"      
; Data$ "EditError",        "Cannot edit sourcecode. It is being debugged."
; Data$ "MemoryError",      "Cannot allocate memory for Debugger communication!%newline%Debugger quitting..."
; Data$ "PipeError",        "Connection to debugged executable broken!%newline%Debugger quitting..."
; Data$ "VersionError",     "The Version of debugger and executable do not match!%newline%Try recompiling the executable.%newline%If the problem persists, reinstall PureBasic."     
; Data$ "ExeQuitError",     "The debugged executable quit unexpectedly."
; Data$ "TimeoutError",     "The debugged executable did not respond to communication for %timeout% seconds. Disconnecting."
; Data$ "NetworkError",     "The network connection to the executable was lost."
; 
; Data$ "DebugWindowTitle", "Debug Output"
; Data$ "Debug",            "Debug"
; Data$ "Clear",            "Clear"
; Data$ "Copy",             "Copy all"
; Data$ "Save",             "Save"  
; 
; Data$ "AsmWindowTitle",   "Asm Debugger"
; Data$ "Registers",        "Processor Registers"
; Data$ "Stack",            "Stack Trace"            
; Data$ "Set",              "Set" 
; Data$ "Update",           "Update"  
; 
; Data$ "MemoryWindowTitle","Memory Viewer"
; Data$ "Range",            "Range"
; Data$ "Display",          "Display"
; Data$ "ViewHex",          "Hex View"
; Data$ "ViewString",       "String View"
; Data$ "ViewByte",         "Byte Table"
; Data$ "ViewWord",         "Word Table"
; Data$ "ViewLong",         "Long Table"
; Data$ "ViewFloat",        "Float Table"
; Data$ "ViewChar",         "Character Table"
; Data$ "ViewDouble",       "Double Table"
; Data$ "ViewQuad",         "Quad Table"
; Data$ "CopyText",         "Copy (Text)"
; Data$ "SaveText",         "Save (Text)"
; Data$ "SaveRaw",          "Save (Raw)"
; Data$ "InvalidMemory",    "The specified memory location is not valid for reading."
; 
; Data$ "VariableWindowTitle","Variable Viewer"
; Data$ "Variables",        "Variables"
; Data$ "Arrays",           "Arrays"
; Data$ "LinkedLists",      "LinkedLists"   
; Data$ "Maps",             "Maps"   
; Data$ "Name",             "Name"
; Data$ "Scope",            "Scope"
; Data$ "Value",            "Value" 
; Data$ "Size",             "Size"
; Data$ "Current",          "Current"
; Data$ "Index",            "Index"
; Data$ "WatchlistAdd",     "Add to Watchlist"
; Data$ "ViewArrayList",    "View Array/List/Map"  
; Data$ "ArrayListName",    "Array/List/Map Name"    
; Data$ "ItemRange",        "Display Range"
; Data$ "NonZeroItems",     "Display Non-zero items only"
; Data$ "AllItems",         "Display all items"  
; Data$ "EnterRange",       "Enter range to display"
; 
; Data$ "HistoryWindowTitle", "Procedure Callstack"
; Data$ "History",          "Callstack"
; Data$ "Statistics",       "Statistics"
; Data$ "Line",             "Line"
; Data$ "File",             "File"
; Data$ "CurrentPosition",  "Current Code position"
; Data$ "ShowVariables",    "Variables"
; Data$ "Updating",         "Updating data, please wait."
; Data$ "CallCount",        "Call count"      
; Data$ "Reset",            "Reset"
; Data$ "ResetAll",         "Reset All"
; 
; Data$ "WatchListTitle",   "Watch List"      
; Data$ "Add",              "Add"      
; Data$ "Remove",           "Remove"
; Data$ "Procedure",        "Procedure"
; Data$ "Variable",         "Variable"
; Data$ "AddVariable",      "Add Variable to List"
; Data$ "NoProcedure",      "--- Main ---"    
; Data$ "AllProcedures",    "--- All ---"  
; Data$ "VariableError",    "Cannot add variable!"
; 
; Data$ "DataBreakpoints",  "Data Breakpoints"
; Data$ "Condition",        "Condition"
; Data$ "ConditionStatus",  "Status"
; Data$ "AddBreakPoint",    "Add Data Breakpoint"
; Data$ "BreakPointError",  "Cannot add Breakpoint!"
; 
; Data$ "LibraryViewerTitle","Library Viewer"
; Data$ "SelectLibrary",    "Select Library"
; Data$ "NoLibraryInfo",    "No Information"
; 
; Data$ "PurifierTitle",    "Purifier Settings"
; Data$ "PurifierIntervall","Integrity check interval" ; DO NOT FIX TYPO: PurifierIntervall
; Data$ "GlobalIntervall",  "Global variable space"    ; DO NOT FIX TYPO: GlobalIntervall
; Data$ "LocalIntervall",   "Local variable space"     ; DO NOT FIX TYPO: LocalIntervall
; Data$ "StringIntervall",  "String variables"         ; DO NOT FIX TYPO: StringIntervall
; Data$ "DynamicIntervall", "Allocated memory"         ; DO NOT FIX TYPO: DynamicIntervall
; Data$ "CheckAlways",      "Every line"
; Data$ "CheckLines",       "Every %lines% lines"     
; Data$ "CheckNever",       "Never" 
; 
; Data$ "ProfilerTitle",    "Profiler"
; Data$ "ProfilerNoData",   "No Profiler data available."      
; Data$ "CalledLines",      "Called Lines"
; Data$ "CallsPerLine",     "Calls / Line"
; Data$ "Zoomin",           "Zoom in"
; Data$ "Zoomout",          "Zoom out"
; Data$ "ViewLine",         "Show code line"
; 
; Data$ "NoData",           "This Data is currently not available." 
; 
; Data$ "SaveFileTitle",    "Save File as..."
; Data$ "SaveFilePattern",  "Text Files (*.txt)|*.txt|All Files (*.*)|*.*"  
; Data$ "SaveError",        "Cannot create File: '%filename%'" 
; 
; Data$ "BigArray",         "The Array has more than 50000 elements.%newline%Do you really want to view them all?"
; Data$ "BigList",          "The LinkedList has more than 50000 elements.%newline%Do you really want to view them all?"
; 
; 
; 
; Data$ "_GROUP_",            "NetworkDebugger"
; 
; 
; Data$ "Waiting",         "Waiting for the network connection to be established..."
; Data$ "Unavailable",     "Network access could not be established."
; Data$ "Port",            "Port"
; Data$ "ExeVersion",      "Executable Version"
; Data$ "DebuggerVersion", "Debugger Version"
; 
; Data$ "ServerTitle",      "Waiting for connections on port %port% ..."
; Data$ "ServerTitleNamed", "Waiting for connection on %host% (port %port%) ..."
; Data$ "Listen",           "Waiting for incoming connection..."
; Data$ "ServerFailed",     "Could not create server on port"
; Data$ "ConnectionDenied", "Connection denied."
; 
; Data$ "ConnectTitle",     "Connecting to"
; Data$ "Connect",          "Connecting to server..."      
; Data$ "QueryStatus",      "Querying status..."
; Data$ "ConnectionSuccess","Connection established successfully."
; Data$ "ConnectionFailed", "Connection failed."
; Data$ "ConnectionLost",   "Connection lost."    
; Data$ "ConnectFailed",    "Could not connect to server"
; Data$ "NeedPassword",     "A password is required."
; Data$ "WrongPassword",    "Password incorrect."
; 
; Data$ "Error_InvalidRequest", "Invalid request."
; Data$ "Error_InvalidResponse","Invalid response."
; Data$ "Error_WrongVersion",   "The PureBasic Versions do not match."
; Data$ "Error_NoExecutable",   "The server is not a debugger enabled executable."
; Data$ "Error_NoDebugger",     "The server is not a PureBasic debugger."
; Data$ "Error_NoService",      "The server cannot provide the requested service."            
; Data$ "Error_FatalError",     "Fatal error."
; 
; 
; 
; 
; Data$ "_GROUP_",            "StandaloneDebugger"
; 
; 
; Data$ "CommandLine",      "Invalid commandline!%newline%You have to specify the executable name or one of the network options on the commandline."
; Data$ "CommandFile",      "Cannot read command file '%filename%'."
; Data$ "ExecuteError",     "Cannot execute file '%filename%'."
; Data$ "Run",              "Run"
; Data$ "Stop",             "Stop"
; Data$ "Step",             "Step"
; Data$ "StepOver",         "Step Over"
; Data$ "StepOut",          "Step Out"
; Data$ "Quit",             "Quit"
; Data$ "BreakSetRemove",   "Set/Remove Breakpoint"
; Data$ "BreakClear",       "Clear Breakpoints"
; Data$ "DataBreak",        "Data Breakpoints"
; Data$ "NoFile",           "Sourcefile not available."
; 
; Data$ "VariableList",     "Variables"
; Data$ "Memory",           "Memory"
; Data$ "DebugOutput",      "Output"
; Data$ "Library",          "Library"
; Data$ "Profiler",         "Profiler" 
; Data$ "Purifier",         "Purifier"     
; 
; 
; 
; Data$ "_GROUP_",            "Misc"
; 
; 
; Data$ "Line",             "Line"
; Data$ "Column",           "Column"
; Data$ "Selection",        "Selection"
; Data$ "File",             "File"
; 
; Data$ "Ok",               "Ok"
; Data$ "Cancel",           "Cancel"   
; Data$ "Close",            "Close" 
; Data$ "Save",             "Save"  
; Data$ "Abort",            "Abort"
; Data$ "Open",             "Open"
; Data$ "New",              "New"     
; Data$ "Copy",             "Copy" 
; Data$ "Update",           "Update"
; Data$ "Delete",           "Delete"
; Data$ "Color",            "Color"
; 
; Data$ "Up",               "Up"
; Data$ "Down",             "Down"
; Data$ "Set",              "Set"
; Data$ "Add",              "Add"
; Data$ "Remove",           "Remove"
; Data$ "Clear",            "Clear"
; Data$ "Enabled",          "Enabled"
; Data$ "Disabled",         "Disabled"
; Data$ "Status",           "Status"
; Data$ "Error",            "Error"
; 
; Data$ "Start",            "Start"
; Data$ "Stop",             "Stop"
; Data$ "Yes",              "Yes"
; Data$ "No",               "No"
; 
; Data$ "Weekday0",         "Sunday"
; Data$ "Weekday1",         "Monday"
; Data$ "Weekday2",         "Tuesday"
; Data$ "Weekday3",         "Wednesday"
; Data$ "Weekday4",         "Thursday"
; Data$ "Weekday5",         "Friday"
; Data$ "Weekday6",         "Saturday"
; 
; Data$ "StayOnTop",        "Stay on Top"
; 
; Data$ "NoQuickHelp",      "No QuickHelp available."
; Data$ "PreferenceError",  "Your settings can't be saved!%newline%The file '%filename%' cannot be created."
; Data$ "ReadError",        "Cannot open the file"
; 
; Data$ "OpenFile",         "Choose File to open..."
; Data$ "SaveFile",         "Choose File to save..."
; 
; Data$ "AboutWindowTitle", "About..."      
; Data$ "GotoWindowTitle",  "Goto..."
; Data$ "SortSourcesTitle", "Sort Sources..."  
; Data$ "MacroErrorTitle",  "Macro Error"
; Data$ "WarningsTitle",    "Compiler Warnings"
; 
; Data$ "ToolbarError",     "Could not find Toolbar Icon"
; Data$ "AutomationTimeout","An Automation client failed to respond to communication.%newline%The connection will be terminated."
; Data$ "Welcome",          "Welcome aboard !"
; 
; 
; 
; 
; Data$ "_GROUP_",            "Form"
; 
; 
; Data$ "Form",               "Form"
; Data$ "FormShort",          "Form"
; Data$ "FormLong",           "Form Panel"
; Data$ "Item",               "Item"
; Data$ "Level",              "Level"
; Data$ "Constant",           "Constant"
; Data$ "Name",               "Name"
; Data$ "Title",              "Title"
; Data$ "Separator",          "Separator"
; Data$ "Shortcut",           "Shortcut"
; Data$ "OutOfMemoryError",   "Can't render gadget of %size% pixels (out of memory)."
; 
; 
; 
; Data$ "Width",       "Width"
; Data$ "Text",        "Text"
; Data$ "Image",       "Image"
; Data$ "Alignment",   "Alignment"
; Data$ "Flag",        "Flag"
; Data$ "ProgressBar", "ProgressBar?"
; Data$ "Left",        "Left"
; Data$ "Center",      "Center"
; Data$ "Right",       "Right"
; Data$ "Normal",      "Normal"
; Data$ "Raised",      "Raised"
; Data$ "Borderless",  "Borderless"
; 
; 
; 
; Data$ "Constant",     "Constant"
; Data$ "Tooltip",      "Tooltip"
; Data$ "ToggleButton", "Toggle Button"
; Data$ "Separator",    "Separator?"
; 
; 
; 
; Data$ "Variable",     "Variable"
; Data$ "Caption",      "Caption"
; 
; 
; 
; Data$ "FirstGadget",      "First gadget:"
; Data$ "SecondGadget",     "Second gadget:"
; Data$ "StartDrawing",     "Start drawing"
; Data$ "Cancel",           "Cancel"
; Data$ "OK",               "OK"
; Data$ "SelectError",      "You need to select two different gadgets."
; Data$ "GadgetListError",  "The two gadgets need to belong to the same gadget list."
; 
; 
; 
; Data$ "Select",             "Select..."
; Data$ "SetRelativePath",    "Set Relative Path"
; 
; 
; 
; Data$ "ImageURL",           "Image URL"
; Data$ "SelectImage",        "Select Image"
; Data$ "RelativePath",       "Relative Path"
; 
; 
; 
; Data$ "Checked",            "Checked"
; Data$ "Font",               "Font"
; Data$ "Color",              "Color"
; Data$ "FrontColor",         "FrontColor"
; Data$ "BackColor",          "BackColor"
; Data$ "SelectGadget",       "Select gadget"
; Data$ "InitCode",           "Init code"
; Data$ "CreateCode",         "Create code"
; Data$ "Help",               "Help"
; Data$ "Min",                "Min"
; Data$ "Max",                "Max"
; Data$ "InnerWidth",         "Inner width"
; Data$ "InnerHeight",        "Inner height"
; Data$ "CurrentImage",       "Current Image"
; Data$ "ChangeImage",        "Change Image"
; Data$ "Variable",           "Variable"
; Data$ "CaptionIsVariable",  "Caption is a variable?"
; Data$ "Caption",            "Caption"
; Data$ "TooltipIsVariable",  "ToolTip is a variable?"
; Data$ "Tooltip",            "ToolTip"
; Data$ "WrongVarName",       "Invalid character in variable name."
; Data$ "Mask",               "Mask"
; Data$ "Width",              "Width"
; Data$ "Height",             "Height"
; Data$ "Hidden",             "Hidden"
; Data$ "Disabled",           "Disabled"
; Data$ "Objects",            "Objects"
; Data$ "Properties",         "Properties"
; Data$ "GenEventProc",       "Generate events procedure?"
; Data$ "SelectFile",         "Event file"
; Data$ "SelectProc",         "Event procedure"
; Data$ "SplitterPosition",   "Splitter position"
; Data$ "LockLeft",           "Lock Left"
; Data$ "LockRight",          "Lock Right"
; Data$ "LockTop",            "Lock Top"
; Data$ "LockBottom",         "Lock Bottom"
; Data$ "Toolbox",            "Toolbox"
; 
; 
; 
; Data$ "SelectEventFileFirst", "You need to select an event file first."
; Data$ "CreateEventFile",      "The file doesn't exist - do you want to create it?"
; Data$ "FileAlreadyOpened",    "This file is already opened."
; Data$ "DeleteItemConfirm",    "Do you really want to delete this item?"
; Data$ "MoveGadgetWarning",    "This gadget cannot be moved before its parent gadget or item."
; Data$ "DeleteGadgetWarning",  "You are going to delete a gadget (and all its child items). Do you want to continue?"
; Data$ "SaveRequiredWarning",  "You need to save your project first."
; Data$ "ResizeGadgetImg",      "Do you want to resize the gadget to the image size?"
; Data$ "SelectImage",          "Select Image..."
; Data$ "MaskAllFiles",         "All files (*.*)|*.*"
; CompilerIf #SpiderBasic
; Data$ "MaskPBF",              "PureBasic Form (*.pbf)|*.pbf"
; Data$ "MaskPB",               "PureBasic File (*.pb)|*.pb;*.pbi"
; CompilerEndIf    
; Data$ "OpenProject",          "Open Project..."
; Data$ "SaveProject",          "Save Project..."
; Data$ "NoGadgetSelected",     "No gadget selected (or gadget items not applicable)."
; Data$ "ChooseItemName",       "Choose the name of the item"
; Data$ "AddItemWarning",       "Cannot add an item to the selected gadget."
; Data$ "QuitMessage",          "The file <%filename%> has not been saved yet. Do you want to save it now?"
; Data$ "ChangesWarning",       "Changes will not be saved. Do you want to continue?"
; Data$ "NewTabName",           "Input the new name of the tab:"
; Data$ "Help",                 "Help"
; Data$ "File",                 "File"
; Data$ "Home",                 "Home"
; Data$ "Quit",                 "Quit"
; Data$ "New",                  "New"
; Data$ "Open",                 "Open"
; Data$ "Save",                 "Save"
; Data$ "SaveAs",               "Save As..."
; Data$ "Rename",               "Rename"
; Data$ "Delete",               "Delete"
; Data$ "SelectAll",            "Select All"
; Data$ "RemoveColour",         "Remove Colour"
; Data$ "RemoveFont",           "Remove Font"
; Data$ "Edit",                 "Edit"
; Data$ "Undo",                 "Undo"
; Data$ "Redo",                 "Redo"
; Data$ "Cut",                  "Cut"
; Data$ "Copy",                 "Copy"
; Data$ "Paste",                "Paste"
; Data$ "Duplicate",            "Duplicate"
; Data$ "AddItem",              "Add Item"
; Data$ "EditItems",            "Edit Items"
; Data$ "EditColumns",          "Edit Columns"
; Data$ "AllForms",             "All Forms"
; Data$ "CommonControls",       "Common Controls"
; Data$ "Containers",           "Containers"
; Data$ "MenusToolbars",        "Menus & Toolbars"
; Data$ "Cursor",               "Cursor"
; Data$ "ZOrder",               "Order"
; Data$ "Menu",                 "Menu"
; Data$ "Toolbar",              "Toolbar"
; Data$ "Statusbar",            "Status Bar"
; Data$ "Images",               "Images"
; Data$ "Window",               "Window"
; Data$ "Gadgets",              "Gadgets"
; Data$ "View",                 "View"
; Data$ "Clipboard",            "Clipboard"
; Data$ "DesignView",           "Design View"
; Data$ "CodeView",             "Code View"
; Data$ "Data",                 "Data"
; Data$ "DataInput",            "Data Input"
; Data$ "DataList",             "Data List"
; Data$ "Action",               "Action"
; Data$ "DecorationContainers", "Decoration/Containers"
; Data$ "Decoration",           "Decoration"
; Data$ "Containers",           "Containers"
; Data$ "AlignLeft",            "Align selected gadgets to the left"
; Data$ "AlignTop",             "Align selected gadgets to the top"
; Data$ "AlignWidth",           "Align selected gadgets width"
; Data$ "AlignHeight",          "Align selected gadgets height"
; Data$ "Remove",               "Remove"
; Data$ "Parent",               "Parent"
; Data$ "ParentItem",           "Parent Item"
; 
; 
; 
; Data$ "_GROUP_",            "Updates"
; 
; 
; Data$ "Title",            "PureBasic Updates"
; Data$ "MessageSingle",    "A new version of PureBasic is available for download on%newline%your personal account"
; Data$ "MessageMulti",     "The following new versions of PureBasic are available%newline%for download on your personal account"
; Data$ "MessageDemo",      "A new version of PureBasic is available for download"
; Data$ "VisitWebSite",     "Visit the download site"
; Data$ "ChangeSetting",    "Change settings"
; Data$ "NoUpdates",        "No new release versions available.%newline%(Versions check filtering can be changed in preferences)."
; Data$ "NoUpdatesLTS",     "No new LTS versions available.%newline%(Versions check filtering can be changed in preferences)."
; Data$ "NoUpdatesBeta",    "No new versions available (including beta).%newline%(Versions check filtering can be changed in preferences)."
; Data$ "Error",            "Could not retrieve information about new updates"
; 
; 
; 
; Data$ "_END_",              ""
; 
; 
; EndDataSection
; 
; XIncludeFile ".."+#Separator+"PureBasicIDE"+#Separator+"HighlightingEngine.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf Not Defined(SpiderBasic, #PB_Constant)
; 
; 
; 
; CompilerIf Not Defined(MaxSizeHT, #PB_Constant)
; CompilerIf #PB_Compiler_Unicode
; #MaxSizeHT = 65535
; CompilerElse
; CompilerEndIf
; 
; 
; CompilerIf Not Defined(StringToAscii, #PB_Procedure)
; 
; 
; 
; 
; 
; 
; Global Dim ValidCharacters.b(#MaxSizeHT)  
  SUB    rsp,24
  MOV    rdx,65536
  MOV    rax,a_ValidCharacters
  PUSH   rax
  XOR    r9,r9
  MOV    r8,1
  MOV    rcx,1
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_ValidCharacters],rax
; 
; 
; 
; 
; 
; CompilerIf Defined(PUREBASIC_DEBUGGER, #PB_Constant) = 0 
; 
; 
; 
; 
; Global *ASMKeywordColor, *BackgroundColor, *BasicKeywordColor, *CommentColor, *ConstantColor, *LabelColor
; Global *NormalTextColor, *NumberColor, *OperatorColor, *PointerColor, *PureKeywordColor, *SeparatorColor, *CustomKeywordColor
; Global *StringColor, *StructureColor, *LineNumberColor, *LineNumberBackColor, *MarkerColor, *CurrentLineColor, *CursorColor, *SelectionColor
; Global *ModuleColor, *BadEscapeColor
; 
; Global *ActiveSource.SourceFile
; Global EnableColoring
; Global EnableCaseCorrection 
; Global EnableKeywordBolding
; Global SourceStringFormat
; 
; Global NbASMKeywords.l 
; 
; CompilerIf #SpiderBasic
; #NbBasicKeywords = 111
; CompilerEndIf
; 
; #BasicTypeChars = "ABCUWLSFDQI" 
; 
; Global Dim BasicKeywordsHT.l(#MaxSizeHT)
  SUB    rsp,24
  MOV    rdx,65536
  MOV    rax,a_BasicKeywordsHT
  PUSH   rax
  XOR    r9,r9
  MOV    r8,5
  MOV    rcx,4
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_BasicKeywordsHT],rax
; Global Dim BasicKeywords.s(#NbBasicKeywords)
  SUB    rsp,24
  MOV    rdx,112
  MOV    rax,a_BasicKeywords
  PUSH   rax
  MOV    r9,s_s
  MOV    r8,8
  MOV    rcx,8
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_BasicKeywords],rax
; Global Dim BasicKeywordsReal.s(#NbBasicKeywords)
  SUB    rsp,24
  MOV    rdx,112
  MOV    rax,a_BasicKeywordsReal
  PUSH   rax
  MOV    r9,s_s
  MOV    r8,8
  MOV    rcx,8
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_BasicKeywordsReal],rax
; Global Dim BasicKeywordsEndKeywords.s(#NbBasicKeywords)
  SUB    rsp,24
  MOV    rdx,112
  MOV    rax,a_BasicKeywordsEndKeywords
  PUSH   rax
  MOV    r9,s_s
  MOV    r8,8
  MOV    rcx,8
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_BasicKeywordsEndKeywords],rax
; Global Dim BasicKeywordsSpaces.s(#NbBasicKeywords)
  SUB    rsp,24
  MOV    rdx,112
  MOV    rax,a_BasicKeywordsSpaces
  PUSH   rax
  MOV    r9,s_s
  MOV    r8,8
  MOV    rcx,8
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_BasicKeywordsSpaces],rax
; 
; Global Dim CustomKeywords.s(0) 
  SUB    rsp,24
  MOV    rdx,1
  MOV    rax,a_CustomKeywords
  PUSH   rax
  MOV    r9,s_s
  MOV    r8,8
  MOV    rcx,8
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_CustomKeywords],rax
; Global Dim CustomKeywordsHT.l(#MaxSizeHT)
  SUB    rsp,24
  MOV    rdx,65536
  MOV    rax,a_CustomKeywordsHT
  PUSH   rax
  XOR    r9,r9
  MOV    r8,5
  MOV    rcx,4
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_CustomKeywordsHT],rax
; Global NbCustomKeywords
; 
; 
; Global Dim ConstantList.S(0)   
  SUB    rsp,24
  MOV    rdx,1
  MOV    rax,a_ConstantList
  PUSH   rax
  MOV    r9,s_s
  MOV    r8,8
  MOV    rcx,8
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_ConstantList],rax
; Global Dim ConstantHT.L(27, 1)
  MOV    qword [a_ConstantHT+8],28
  MOV    qword [a_ConstantHT+16],2
  SUB    rsp,24
  MOV    rax,a_ConstantHT
  PUSH   rax
  XOR    r9,r9
  MOV    r8,5
  MOV    rdx,4
  MOV    rcx,2
  SUB    rsp,32
  CALL   SYS_AllocateMultiArray
  ADD    rsp,64
  MOV    qword [a_ConstantHT],rax
; Global ConstantListSize
; 
; 
; Global Dim ASMKeywordsHT.l(#MaxSizeHT)
  SUB    rsp,24
  MOV    rdx,65536
  MOV    rax,a_ASMKeywordsHT
  PUSH   rax
  XOR    r9,r9
  MOV    r8,5
  MOV    rcx,4
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_ASMKeywordsHT],rax
; 
; Global Dim APIFunctionsHT.l(#MaxSizeHT)
  SUB    rsp,24
  MOV    rdx,65536
  MOV    rax,a_APIFunctionsHT
  PUSH   rax
  XOR    r9,r9
  MOV    r8,5
  MOV    rcx,4
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_APIFunctionsHT],rax
; Global NewMap BasicFunctionMap.l(4096)
  MOV    rcx,qword 4096
  SUB    rsp,8
  PUSH   rcx
  LEA    r9,[m_BasicFunctionMap]
  XOR    r8,r8
  MOV    rdx,5
  MOV    rcx,4
  SUB    rsp,32
  CALL   PB_NewMap
  ADD    rsp,40
  ADD    rsp,8
; 
; Global BasicKeyword$, ASMKeyword$, KnownConstant$, CustomKeyword$
; Global NbBasicFunctions, NbApiFunctions
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Enumeration 1
; #KEYWORD_Align
; #KEYWORD_And
; #KEYWORD_Array
; #KEYWORD_As
; 
; #KEYWORD_Break
; 
; #KEYWORD_CallDebugger
; #KEYWORD_Case
; #KEYWORD_CompilerCase
; #KEYWORD_CompilerDefault
; #KEYWORD_CompilerElse
; #KEYWORD_CompilerElseIf
; #KEYWORD_CompilerEndIf
; #KEYWORD_CompilerEndSelect
; #KEYWORD_CompilerError
; #KEYWORD_CompilerIf
; #KEYWORD_CompilerSelect
; #KEYWORD_CompilerWarning
; #KEYWORD_Continue
; 
; #KEYWORD_Data
; #KEYWORD_DataSection
; #KEYWORD_Debug
; #KEYWORD_DebugLevel
; #KEYWORD_Declare
; CompilerIf Not #SpiderBasic
; #KEYWORD_DeclareC
; #KEYWORD_DeclareCDLL
; #KEYWORD_DeclareDLL
; CompilerEndIf
; #KEYWORD_DeclareModule
; #KEYWORD_Default
; #KEYWORD_Define
; #KEYWORD_Dim
; CompilerIf Not #SpiderBasic
; #KEYWORD_DisableASM
; CompilerEndIf
; #KEYWORD_DisableDebugger
; #KEYWORD_DisableExplicit
; CompilerIf #SpiderBasic
; 
; #KEYWORD_Else
; #KEYWORD_ElseIf
; CompilerIf Not #SpiderBasic
; #KEYWORD_EnableASM
; CompilerEndIf
; #KEYWORD_EnableDebugger
; #KEYWORD_EnableExplicit
; CompilerIf #SpiderBasic
; #KEYWORD_End
; #KEYWORD_EndDataSection
; #KEYWORD_EndDeclareModule
; #KEYWORD_EndEnumeration
; #KEYWORD_EndIf
; #KEYWORD_EndImport
; #KEYWORD_EndInterface
; #KEYWORD_EndMacro
; #KEYWORD_EndModule
; #KEYWORD_EndProcedure
; #KEYWORD_EndSelect
; #KEYWORD_EndStructure
; CompilerIf Not #SpiderBasic
; #KEYWORD_EndStructureUnion
; CompilerEndIf
; #KEYWORD_EndWith
; #KEYWORD_Enumeration
; #KEYWORD_EnumerationBinary
; #KEYWORD_Extends
; 
; CompilerIf Not #SpiderBasic
; #KEYWORD_FakeReturn
; CompilerEndIf
; #KEYWORD_For
; #KEYWORD_ForEach
; #KEYWORD_ForEver
; 
; #KEYWORD_Global
; CompilerIf Not #SpiderBasic
; #KEYWORD_Gosub
; #KEYWORD_Goto
; CompilerEndIf
; 
; #KEYWORD_If
; #KEYWORD_Import
; CompilerIf Not #SpiderBasic
; #KEYWORD_ImportC
; #KEYWORD_IncludeBinary
; CompilerEndIf
; #KEYWORD_IncludeFile
; #KEYWORD_IncludePath
; #KEYWORD_Interface
; 
; #KEYWORD_List
; 
; #KEYWORD_Macro
; #KEYWORD_MacroExpandedCount
; #KEYWORD_Map
; #KEYWORD_Module
; 
; #KEYWORD_NewList
; #KEYWORD_NewMap
; #KEYWORD_Next
; #KEYWORD_Not
; 
; #KEYWORD_Or
; 
; 
; #KEYWORD_Procedure
; CompilerIf Not #SpiderBasic
; #KEYWORD_ProcedureC
; #KEYWORD_ProcedureCDLL
; #KEYWORD_ProcedureDLL
; CompilerEndIf
; #KEYWORD_ProcedureReturn
; #KEYWORD_Protected
; #KEYWORD_Prototype
; CompilerIf Not #SpiderBasic
; #KEYWORD_PrototypeC
; CompilerEndIf
; 
; #KEYWORD_Read
; #KEYWORD_ReDim
; #KEYWORD_Repeat
; #KEYWORD_Restore
; CompilerIf Not #SpiderBasic
; #KEYWORD_Return
; CompilerEndIf
; #KEYWORD_Runtime
; 
; #KEYWORD_Select
; #KEYWORD_Shared
; #KEYWORD_Static
; #KEYWORD_Step
; #KEYWORD_Structure
; CompilerIf Not #SpiderBasic
; #KEYWORD_StructureUnion
; CompilerEndIf
; #KEYWORD_Swap
; 
; CompilerIf Not #SpiderBasic
; #KEYWORD_Threaded
; CompilerEndIf
; #KEYWORD_To
; 
; #KEYWORD_UndefineMacro
; #KEYWORD_Until
; #KEYWORD_UnuseModule
; #KEYWORD_UseModule
; 
; #KEYWORD_Wend
; #KEYWORD_While
; #KEYWORD_With
; 
; #KEYWORD_XIncludeFile
; #KEYWORD_XOr
; EndEnumeration
; 
; 
; 
; 
; CompilerIf #SpiderBasic
; 
; 
; CompilerIf #PB_Compiler_EnumerationValue <> #NbBasicKeywords+1
; 
; 
; 
; Prototype HighlightCallback(*StringStart.BYTE, Length, *Color, IsBold, TextChanged)
; 
; 
; Structure FunctionEntry
; Name$        
; Proto$       
; *Ascii       
; AsciiBuffer.a[256] 
; EndStructure
; 
; Structure HighlightPTR
; StructureUnion
; a.a[0]
; b.b[0] 
; c.c[0] 
; w.w[0] 
; u.u[0]
; l.l[0]
; f.f[0]
; q.q[0]
; d.d[0]
; i.i[0]
; EndStructureUnion
; EndStructure
; 
; 
; 
; CompilerIf Defined(PUREBASIC_IDE, #PB_Constant)
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf Defined(PUREBASIC_DEBUGGER, #PB_Constant) 
; 
; 
; CompilerEndIf
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Global *KeywordStructure = StringToAscii("Structure") 
  MOV    rax,_S65
  MOV    rcx,rax
  CALL  _Procedure190
  MOV    qword [p_KeywordStructure],rax
; Global *KeywordInterface = StringToAscii("Interface")
  MOV    rax,_S66
  MOV    rcx,rax
  CALL  _Procedure190
  MOV    qword [p_KeywordInterface],rax
; Global *KeywordExtends   = StringToAscii("Extends")
  MOV    rax,_S67
  MOV    rcx,rax
  CALL  _Procedure190
  MOV    qword [p_KeywordExtends],rax
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; #EndSeparator  = -1
; #SkipSeparator = -2
; #ModuleSeparator = -2
; 
; 
; DataSection
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; BasicKeywords:
; Data$ "Align", "", " "
; Data$ "And", "", " "
; Data$ "Array", "", " "
; Data$ "As", "", " "    
; 
; Data$ "Break", "", ""
; 
; Data$ "CallDebugger"     , "", ""
; Data$ "Case"             , "", " "
; Data$ "CompilerCase"     , "", " "
; Data$ "CompilerDefault"  , "", ""
; Data$ "CompilerElse"     , "", ""
; Data$ "CompilerElseIf"   , "", " "
; Data$ "CompilerEndIf"    , "", ""
; Data$ "CompilerEndSelect", "", ""
; Data$ "CompilerError"    , "", " "
; Data$ "CompilerIf"       , "CompilerEndIf"    , " "
; Data$ "CompilerSelect"   , "CompilerEndSelect", " "
; Data$ "CompilerWarning"  , "", " "
; Data$ "Continue"         , "", ""
; 
; Data$ "Data"           , "", " "
; Data$ "DataSection"    , "EndDataSection", ""
; Data$ "Debug"          , "", " "
; Data$ "DebugLevel"     , "", " "
; Data$ "Declare"        , "", ""
; CompilerIf Not #SpiderBasic
; Data$ "DeclareC"       , "", ""
; Data$ "DeclareCDLL"    , "", ""
; Data$ "DeclareDLL"     , "", ""
; CompilerEndIf
; Data$ "DeclareModule"  , "EndDeclareModule", " "
; Data$ "Default"        , "", ""
; Data$ "Define"         , "", " "
; Data$ "Dim"            , "", " "
; CompilerIf Not #SpiderBasic
; Data$ "DisableASM"     , "", ""
; CompilerEndIf
; Data$ "DisableDebugger", "", ""
; Data$ "DisableExplicit", "", ""
; CompilerIf #SpiderBasic
; 
; Data$ "Else"              , "", ""
; Data$ "ElseIf"            , "", " "
; CompilerIf Not #SpiderBasic
; Data$ "EnableASM"         , "", ""
; CompilerEndIf
; Data$ "EnableDebugger"    , "", ""
; Data$ "EnableExplicit"    , "", ""
; CompilerIf #SpiderBasic
; Data$ "End"               , "", ""
; Data$ "EndDataSection"    , "", ""
; Data$ "EndDeclareModule"  , "", ""
; Data$ "EndEnumeration"    , "", ""
; Data$ "EndIf"             , "", ""
; Data$ "EndImport"         , "", ""
; Data$ "EndInterface"      , "", ""
; Data$ "EndMacro"          , "", ""
; Data$ "EndModule"         , "", ""
; Data$ "EndProcedure"      , "", ""
; Data$ "EndSelect"         , "", ""
; Data$ "EndStructure"      , "", ""
; CompilerIf Not #SpiderBasic
; Data$ "EndStructureUnion" , "", ""
; CompilerEndIf
; Data$ "EndWith"           , "", ""
; Data$ "Enumeration"       , "EndEnumeration", " "
; Data$ "EnumerationBinary" , "EndEnumeration", " "
; Data$ "Extends"           , "", " "
; 
; CompilerIf Not #SpiderBasic
; Data$ "FakeReturn"   , "", ""
; CompilerEndIf
; Data$ "For"          , "Next", " "
; Data$ "ForEach"      , "Next", " "
; Data$ "ForEver"      , "", ""
; 
; Data$ "Global", "", " "
; CompilerIf Not #SpiderBasic
; Data$ "Gosub" , "", " "
; Data$ "Goto"  , "", " "
; CompilerEndIf
; 
; Data$ "If"            , "EndIf", " "
; Data$ "Import"        , "EndImport", " "
; CompilerIf Not #SpiderBasic
; Data$ "ImportC"       , "EndImport", " "
; CompilerEndIf
; CompilerIf Not #SpiderBasic
; Data$ "IncludeBinary" , "", " "
; CompilerEndIf
; Data$ "IncludeFile"   , "", " "
; Data$ "IncludePath"   , "", " "
; Data$ "Interface"     , "EndInterface", " "
; 
; Data$ "List", "", " "
; 
; Data$ "Macro", "EndMacro", " "
; Data$ "MacroExpandedCount", "", ""
; Data$ "Map", "", " "
; Data$ "Module"  , "EndModule", " "
; 
; Data$ "NewList", "", " "
; Data$ "NewMap",  "", " "
; Data$ "Next"   , "", ""
; Data$ "Not"    , "", " "
; 
; Data$ "Or", "", " "
; 
; 
; Data$ "Procedure"      , "EndProcedure", " "
; CompilerIf Not #SpiderBasic
; Data$ "ProcedureC"     , "EndProcedure", " "
; Data$ "ProcedureCDLL"  , "EndProcedure", " "
; Data$ "ProcedureDLL"   , "EndProcedure", " "
; CompilerEndIf
; Data$ "ProcedureReturn", "", " "
; Data$ "Protected"      , "", " "
; Data$ "Prototype"      , "", " "
; CompilerIf Not #SpiderBasic
; Data$ "PrototypeC"     , "", " "
; CompilerEndIf
; 
; Data$ "Read"   , "", " "
; Data$ "ReDim"  , "", " "
; Data$ "Repeat" , "Until ", ""
; Data$ "Restore", "", " "
; CompilerIf Not #SpiderBasic
; Data$ "Return" , "", ""
; CompilerEndIf
; Data$ "Runtime" , "", ""
; 
; Data$ "Select"        , "EndSelect", " "
; Data$ "Shared"        , "", " "
; Data$ "Static"        , "", " "
; Data$ "Step"          , "", " "
; Data$ "Structure"     , "EndStructure", " "
; CompilerIf Not #SpiderBasic
; Data$ "StructureUnion", "EndStructureUnion", ""
; CompilerEndIf
; Data$ "Swap"          , "", " "
; 
; CompilerIf Not #SpiderBasic
; Data$ "Threaded", "", " "
; CompilerEndIf
; Data$ "To", "", " "
; 
; Data$ "UndefineMacro", "", " "
; Data$ "Until", "", " "
; Data$ "UnuseModule", "", " "
; Data$ "UseModule", "", " "
; 
; Data$ "Wend" , "", ""
; Data$ "While", "Wend", " "
; Data$ "With" , "EndWith", " "
; 
; Data$ "XIncludeFile", "", " "
; Data$ "XOr"         , "", " "
; 
; 
; 
; ASMKeywords:
; IncludeFile #PB_Compiler_FilePath+"AssemblyOperandsX86.pb" 
; 
; 
; 
; Data.l 393
; Data$ "AAA"
; Data$ "AAD"
; Data$ "AAM"
; Data$ "AAS"
; Data$ "ADC"
; Data$ "ADD"
; Data$ "AND"
; Data$ "ARPL"
; Data$ "BOUND"
; Data$ "BSF"
; Data$ "BSR"
; Data$ "BSWAP"
; Data$ "BT"
; Data$ "BTC"
; Data$ "BTR"
; Data$ "BTS"
; Data$ "CALL"
; Data$ "CBW"
; Data$ "CDQ"
; Data$ "CLC"
; Data$ "CLD"
; Data$ "CLI"
; Data$ "CLTS"
; Data$ "CMC"
; Data$ "CMOVA"
; Data$ "CMOVAE"
; Data$ "CMOVB"
; Data$ "CMOVBE"
; Data$ "CMOVC"
; Data$ "CMOVE"
; Data$ "CMOVG"
; Data$ "CMOVGE"
; Data$ "CMOVL"
; Data$ "CMOVLE"
; Data$ "CMOVNA"
; Data$ "CMOVNAE"
; Data$ "CMOVNB"
; Data$ "CMOVNBE"
; Data$ "CMOVNC"
; Data$ "CMOVNE"
; Data$ "CMOVNG"
; Data$ "CMOVNGE"
; Data$ "CMOVNL"
; Data$ "CMOVNLE"
; Data$ "CMOVNO"
; Data$ "CMOVNP"
; Data$ "CMOVNS"
; Data$ "CMOVNZ"
; Data$ "CMOVO"
; Data$ "CMOVP"
; Data$ "CMOVPE"
; Data$ "CMOVPO"
; Data$ "CMOVS"
; Data$ "CMOVZ"
; Data$ "CMP"
; Data$ "CMPS"
; Data$ "CMPSB"
; Data$ "CMPSD"
; Data$ "CMPSW"
; Data$ "CMPXCHG"
; Data$ "CMPXCHG8B"
; Data$ "CWD"
; Data$ "CWDE"
; Data$ "DAA"
; Data$ "DAS"
; Data$ "DB"
; Data$ "DD"
; Data$ "DEC"
; Data$ "DIV"
; Data$ "DW"
; Data$ "EMMS"
; Data$ "ENTER"
; Data$ "ESC"
; Data$ "F2XM1"
; Data$ "FABS"
; Data$ "FADD"
; Data$ "FADDP"
; Data$ "FBLD"
; Data$ "FBSTP"
; Data$ "FCHS"
; Data$ "FCLEX"
; Data$ "FCMOVB"
; Data$ "FCMOVBE"
; Data$ "FCMOVE"
; Data$ "FCMOVNB"
; Data$ "FCMOVNBE"
; Data$ "FCMOVNE"
; Data$ "FCMOVNU"
; Data$ "FCMOVU"
; Data$ "FCOM"
; Data$ "FCOMI"
; Data$ "FCOMIP"
; Data$ "FCOMP"
; Data$ "FCOMPP"
; Data$ "FCOS"
; Data$ "FDECSTP"
; Data$ "FDIV"
; Data$ "FDIVP"
; Data$ "FDIVR"
; Data$ "FDIVRP"
; Data$ "FFREE"
; Data$ "FIADD"
; Data$ "FICOM"
; Data$ "FICOMP"
; Data$ "FIDIV"
; Data$ "FIDIVR"
; Data$ "FILD"
; Data$ "FIMUL"
; Data$ "FINCSTP"
; Data$ "FINIT"
; Data$ "FIST"
; Data$ "FISTP"
; Data$ "FISUB"
; Data$ "FISUBR"
; Data$ "FLD"
; Data$ "FLD1"
; Data$ "FLDCW"
; Data$ "FLDENV"
; Data$ "FLDL2E"
; Data$ "FLDL2T"
; Data$ "FLDLG2"
; Data$ "FLDLN2"
; Data$ "FLDPI"
; Data$ "FLDZ"
; Data$ "FMUL"
; Data$ "FMULP"
; Data$ "FNCLEX"
; Data$ "FNINIT"
; Data$ "FNOP"
; Data$ "FNSAVE"
; Data$ "FNSTCW"
; Data$ "FNSTENV"
; Data$ "FNSTSW"
; Data$ "FPATAN"
; Data$ "FPREM"
; Data$ "FPREM1"
; Data$ "FPTAN"
; Data$ "FRNDINT"
; Data$ "FRSTOR"
; Data$ "FSAVE"
; Data$ "FSCALE"
; Data$ "FSETPM"
; Data$ "FSIN"
; Data$ "FSINCOS"
; Data$ "FSQRT"
; Data$ "FST"
; Data$ "FSTCW"
; Data$ "FSTENV"
; Data$ "FSTP"
; Data$ "FSTSW"
; Data$ "FSUB"
; Data$ "FSUBP"
; Data$ "FSUBR"
; Data$ "FSUBRP"
; Data$ "FTST"
; Data$ "FUCOM"
; Data$ "FUCOMI"
; Data$ "FUCOMIP"
; Data$ "FUCOMP"
; Data$ "FUCOMPP"
; Data$ "FWAIT"
; Data$ "FXAM"
; Data$ "FXCH"
; Data$ "FXTRACT"
; Data$ "FYL2X"
; Data$ "FYL2XP1"
; Data$ "HLT"
; Data$ "IDIV"
; Data$ "IMUL"
; Data$ "IN"
; Data$ "INC"
; Data$ "INS"
; Data$ "INSB"
; Data$ "INSD"
; Data$ "INSW"
; Data$ "INT"
; Data$ "INTO"
; Data$ "INVD"
; Data$ "INVLPG"
; Data$ "IRET"
; Data$ "IRETD"
; Data$ "JA"
; Data$ "JAE"
; Data$ "JB"
; Data$ "JBE"
; Data$ "JC"
; Data$ "JCXZ"
; Data$ "JE"
; Data$ "JECXZ"
; Data$ "JG"
; Data$ "JGE"
; Data$ "JL"
; Data$ "JLE"
; Data$ "JMP"
; Data$ "JNA"
; Data$ "JNAE"
; Data$ "JNB"
; Data$ "JNBE"
; Data$ "JNC"
; Data$ "JNE"
; Data$ "JNG"
; Data$ "JNGE"
; Data$ "JNL"
; Data$ "JNLE"
; Data$ "JNO"
; Data$ "JNP"
; Data$ "JNS"
; Data$ "JNZ"
; Data$ "JO"
; Data$ "JP"
; Data$ "JPE"
; Data$ "JPO"
; Data$ "JS"
; Data$ "JZ"
; Data$ "LAHF"
; Data$ "LAR"
; Data$ "LDS"
; Data$ "LEA"
; Data$ "LEAVE"
; Data$ "LES"
; Data$ "LFS"
; Data$ "LGDT"
; Data$ "LGS"
; Data$ "LIDT"
; Data$ "LLDT"
; Data$ "LMSW"
; Data$ "LOCK"
; Data$ "LODS"
; Data$ "LODSB"
; Data$ "LODSD"
; Data$ "LODSW"
; Data$ "LOOP"
; Data$ "LOOPE"
; Data$ "LOOPNE"
; Data$ "LOOPNZ"
; Data$ "LOOPZ"
; Data$ "LSL"
; Data$ "LSS"
; Data$ "LTR"
; Data$ "MOV"
; Data$ "MOVD"
; Data$ "MOVQ"
; Data$ "MOVS"
; Data$ "MOVSB"
; Data$ "MOVSD"
; Data$ "MOVSW"
; Data$ "MOVSX"
; Data$ "MOVZX"
; Data$ "MUL"
; Data$ "NEG"
; Data$ "NOP"
; Data$ "NOT"
; Data$ "OR"
; Data$ "OUT"
; Data$ "OUTS"
; Data$ "OUTSB"
; Data$ "OUTSD"
; Data$ "OUTSW"
; Data$ "PACKSSDW"
; Data$ "PACKSSWB"
; Data$ "PACKUSWB"
; Data$ "PADDB"
; Data$ "PADDD"
; Data$ "PADDSB"
; Data$ "PADDSW"
; Data$ "PADDUSB"
; Data$ "PADDUSW"
; Data$ "PADDW"
; Data$ "PAND"
; Data$ "PANDN"
; Data$ "PCMPEQB"
; Data$ "PCMPEQD"
; Data$ "PCMPEQW"
; Data$ "PCMPGTB"
; Data$ "PCMPGTD"
; Data$ "PCMPGTW"
; Data$ "PMADDWD"
; Data$ "PMULHW"
; Data$ "POP"
; Data$ "POPA"
; Data$ "POPAD"
; Data$ "POPF"
; Data$ "POPFD"
; Data$ "POR"
; Data$ "PSLLD"
; Data$ "PSLLQ"
; Data$ "PSLLW"
; Data$ "PSRAD"
; Data$ "PSRAW"
; Data$ "PSRLD"
; Data$ "PSRLQ"
; Data$ "PSRLW"
; Data$ "PSUBB"
; Data$ "PSUBD"
; Data$ "PSUBSB"
; Data$ "PSUBSW"
; Data$ "PSUBUSB"
; Data$ "PSUBUSW"
; Data$ "PSUBW"
; Data$ "PUNPCKHBW"
; Data$ "PUNPCKHDQ"
; Data$ "PUNPCKHWD"
; Data$ "PUNPCKLBW"
; Data$ "PUNPCKLDQ"
; Data$ "PUNPCKLWD"
; Data$ "PUSH"
; Data$ "PUSHA"
; Data$ "PUSHAD"
; Data$ "PUSHF"
; Data$ "PUSHFD"
; Data$ "PXOR"
; Data$ "RCL"
; Data$ "RCR"
; Data$ "RDMSR"
; Data$ "RDPMC"
; Data$ "RDTSC"
; Data$ "REP"
; Data$ "REPE"
; Data$ "REPNE"
; Data$ "REPNZ"
; Data$ "REPZ"
; Data$ "RET"
; Data$ "RETF"
; Data$ "ROL"
; Data$ "ROR"
; Data$ "RSM"
; Data$ "SAHF"
; Data$ "SAL"
; Data$ "SAR"
; Data$ "SBB"
; Data$ "SCAS"
; Data$ "SCASB"
; Data$ "SCASD"
; Data$ "SCASW"
; Data$ "SETA"
; Data$ "SETAE"
; Data$ "SETB"
; Data$ "SETBE"
; Data$ "SETC"
; Data$ "SETE"
; Data$ "SETG"
; Data$ "SETGE"
; Data$ "SETL"
; Data$ "SETLE"
; Data$ "SETNA"
; Data$ "SETNAE"
; Data$ "SETNB"
; Data$ "SETNBE"
; Data$ "SETNC"
; Data$ "SETNE"
; Data$ "SETNG"
; Data$ "SETNGE"
; Data$ "SETNL"
; Data$ "SETNLE"
; Data$ "SETNO"
; Data$ "SETNP"
; Data$ "SETNS"
; Data$ "SETNZ"
; Data$ "SETO"
; Data$ "SETP"
; Data$ "SETPE"
; Data$ "SETPO"
; Data$ "SETS"
; Data$ "SETZ"
; Data$ "SGDT"
; Data$ "SHL"
; Data$ "SHLD"
; Data$ "SHR"
; Data$ "SHRD"
; Data$ "SIDT"
; Data$ "SLDT"
; Data$ "SMSW"
; Data$ "STC"
; Data$ "STD"
; Data$ "STI"
; Data$ "STOS"
; Data$ "STOSB"
; Data$ "STOSD"
; Data$ "STOSW"
; Data$ "STR"
; Data$ "SUB"
; Data$ "TEST"
; Data$ "UD2"
; Data$ "VERR"
; Data$ "VERW"
; Data$ "WAIT"
; Data$ "WBINVD"
; Data$ "WRMSR"
; Data$ "XADD"
; Data$ "XCHG"
; Data$ "XLAT"
; Data$ "XLATB"
; Data$ "XOR"
; 
; 
; EndDataSection
; 
; 
; 
; XIncludeFile "Misc.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; XIncludeFile "VariableGadget.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Structure VariableGadget_Entry
; Kind.b      
; Type.b      
; Node.w      
; Sublevel.w  
; Parent.l    
; Name$       
; Value$      
; Extra$      
; EndStructure
; 
; 
; 
; Enumeration
; #SORTTYPE_Unknown
; #SORTTYPE_Byte
; #SORTTYPE_Ascii
; #SORTTYPE_Character    
; #SORTTYPE_Unicode
; #SORTTYPE_Word
; #SORTTYPE_Long
; #SORTTYPE_Integer
; #SORTTYPE_Quad
; #SORTTYPE_Pointer
; #SORTTYPE_Float
; #SORTTYPE_Double
; #SORTTYPE_String
; #SORTTYPE_FixedString
; #SORTTYPE_Structure
; EndEnumeration
; 
; 
; 
; 
; Structure VariableGadget_ItemList
; item.VariableGadget_Entry[0]
; EndStructure
; 
; 
; 
; 
; 
; 
; Structure VariableGadget
; Gadget.i       
; ExtraColumns.l 
; ItemCount.l    
; Items.i        
; CustomData.i   
; IsLocked.l     
; CurrentParent.l   
; CurrentSublevel.l 
; 
; SortColumn.l    
; SortDirection.l 
; IndexSort.l     
; 
; CompilerIf #CompileLinuxGtk2
; EndStructure
; 
; Global NewList VariableGadget_List.VariableGadget() 
  MOV    rcx,qword [t_VariableGadget_List]
  CALL   PB_FreeList
  MOV    r9,7
  XOR    r8,r8
  LEA    rdx,[t_VariableGadget_List]
  MOV    rcx,56
  CALL   PB_NewList
; 
; Global Dim VariableGadget_Icons(#TYPE_MAX) 
  SUB    rsp,24
  MOV    rdx,26
  MOV    rax,a_VariableGadget_Icons
  PUSH   rax
  XOR    r9,r9
  MOV    r8,21
  MOV    rcx,8
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_VariableGadget_Icons],rax
; Global VariableGadget_NodeOpen, VariableGadget_NodeClose
; 
; 
; 
; 
; UsePNGImageDecoder()
  CALL   PB_UsePNGImageDecoder
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #CompileWindows
; Structure ListIconData 
; UserData.i
; EndStructure
; 
; 
; CompilerEndIf
; 
; CompilerIf 0
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; DataSection
; 
; VariableGadget_Byte:      : IncludeBinary #DEFAULT_DebuggerSource + "Data" + #Separator + "byte.png"
; VariableGadget_Word:      : IncludeBinary #DEFAULT_DebuggerSource + "Data" + #Separator + "word.png"
; VariableGadget_Long:      : IncludeBinary #DEFAULT_DebuggerSource + "Data" + #Separator + "long.png"
; VariableGadget_Struct:    : IncludeBinary #DEFAULT_DebuggerSource + "Data" + #Separator + "struct.png"
; VariableGadget_String:    : IncludeBinary #DEFAULT_DebuggerSource + "Data" + #Separator + "string.png"
; VariableGadget_Float:     : IncludeBinary #DEFAULT_DebuggerSource + "Data" + #Separator + "float.png"
; VariableGadget_NodeOpen:  : IncludeBinary #DEFAULT_DebuggerSource + "Data" + #Separator + "struct1.png"
; VariableGadget_NodeClose: : IncludeBinary #DEFAULT_DebuggerSource + "Data" + #Separator + "struct2.png"  
; VariableGadget_Char:      : IncludeBinary #DEFAULT_DebuggerSource + "Data" + #Separator + "char.png"  
; VariableGadget_Fixed:     : IncludeBinary #DEFAULT_DebuggerSource + "Data" + #Separator + "fixed.png"  
; VariableGadget_Double:    : IncludeBinary #DEFAULT_DebuggerSource + "Data" + #Separator + "double.png"  
; VariableGadget_Quad:      : IncludeBinary #DEFAULT_DebuggerSource + "Data" + #Separator + "quad.png"  
; VariableGadget_Integer:   : IncludeBinary #DEFAULT_DebuggerSource + "Data" + #Separator + "integer.png"
; VariableGadget_Ascii:     : IncludeBinary #DEFAULT_DebuggerSource + "Data" + #Separator + "ascii.png"  
; VariableGadget_Unicode:   : IncludeBinary #DEFAULT_DebuggerSource + "Data" + #Separator + "unicode.png"  
; 
; EndDataSection
; XIncludeFile "Communication_PipeWindows.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #CompileWindows
; 
; 
; Structure WinPipe_Communication
; *Vtbl.CommunicationVtbl   
; 
; 
; 
; 
; 
; 
; 
; InPipeName$
; OutPipeName$
; 
; 
; InPipeHandle.i  
; OutPipeHandle.i
; 
; 
; 
; 
; IsNamedPipe.l 
; DebuggerInPipeHandle.i  
; DebuggerOutPipeHandle.i  
; 
; IsFatalError.l  
; CommandReceived.l   
; CommandTimeout.l    
; EndReceived.l       
; EndTimeout.l        
; 
; 
; 
; 
; StackMutex.i 
; 
; 
; StackCount.l
; Stack.CommandStackStruct[#MAX_COMMANDSTACK]  
; EndStructure
; 
; 
; 
; 
; Global NewList WinPipe_Data.WinPipe_Communication()
  MOV    rcx,qword [t_WinPipe_Data]
  CALL   PB_FreeList
  MOV    r9,7
  MOV    r8,s_winpipe_communication
  LEA    rdx,[t_WinPipe_Data]
  MOV    rcx,22492
  CALL   PB_NewList
; Global WinPipe_Mutex.i = CreateMutex()
  CALL   PB_CreateMutex
  MOV    qword [v_WinPipe_Mutex],rax
; Global WinPipe_Thread  = 0
  MOV    qword [v_WinPipe_Thread],0
; 
; CompilerIf #NOTHREAD = 0
; 
; 
; DisableDebugger
; CompilerEndIf
; 
; 
; 
; 
; CompilerIf #NOTHREAD = 0
; 
; 
; CompilerEndIf
; 
; CompilerIf #NOTHREAD = 0
; EnableDebugger
; CompilerEndIf
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; DataSection
; 
; WinPipe_Vtbl:
; Data.i @WinPipe_GetInfo()
; Data.i @WinPipe_Connect()
; Data.i @WinPipe_Disconnect()
; Data.i @WinPipe_Send()
; Data.i @WinPipe_Receive()
; Data.i @WinPipe_CheckErrors()
; Data.i @WinPipe_Close()
; 
; EndDataSection
; 
; CompilerEndIf
; 
; 
; XIncludeFile "Communication_PipeUnix.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #CompileWindows = 0
; 
; 
; XIncludeFile "Communication_Network.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; UseMD5Fingerprint()
  CALL   PB_UseMD5Fingerprint
; 
; 
; 
; CompilerIf #CompileWindows
; Import "wsock32.lib"
; EndImport
; 
; ImportC #BUILD_DIRECTORY + "NetworkSupport.obj"
; CompilerElse
; 
; 
; 
; Network_Initialize()
; Network_CreateSocket()
; Network_CloseSocket(Socket)
; 
; 
; 
; 
; 
; Network_ConnectSocketStart(Socket, Hostname.p-ascii, Port)
; 
; 
; 
; 
; 
; 
; 
; 
; Network_ConnectSocketCheck(Socket)
; 
; 
; 
; 
; Network_Listen(Socket, InterfaceName.p-ascii, Port)
; 
; 
; 
; 
; Network_CheckAccept(Socket)
; 
; 
; 
; 
; 
; 
; 
; Network_CheckData(Socket)
; 
; 
; 
; 
; Network_ReceiveData(Socket, *Buffer, Size) 
; 
; 
; 
; 
; Network_SendData(Socket, *Buffer, Size)
; 
; 
; 
; 
; Network_SendString(Socket, String.p-ascii)
; 
; EndImport
; 
; ImportC ""
; 
; 
; 
; 
; rijndael_set_key.l(*context, *key, bits)
; 
; rijndael_ecb_decrypt.l(*context, *input, *output, length)
; rijndael_ecb_encrypt.l(*context, *input, *output, length)
; rijndael_cbc_decrypt.l(*context, *input, *output, length, *iv)
; rijndael_cbc_encrypt.l(*context, *input, *output, length, *iv)
; 
; 
; MD5Init(*Context)
; MD5Update(*Context, *Buffer, Size)
; MD5Final(*Output, *Context)
; 
; EndImport
; 
; #SizeOf_rijndael_ctx = 488 
; #SizeOf_MD5_ctx      = 88
; 
; DataSection
; 
; CipherInitializer:
; Data.b $D7, $2F, $E7, $B8, $AA, $9F, $E9, $01, $A5, $A5, $09, $58, $C9, $85, $A9, $CC
; 
; EndDataSection
; 
; 
; #EncryptionHandshakeSize = 32  
; 
; 
; Structure Network_Communication
; *Vtbl.CommunicationVtbl
; 
; Host$
; Password$
; Port.l  
; 
; Connected.l         
; IsFatalError.l  
; CommandReceived.l   
; CommandTimeout.q    
; EndReceived.l       
; EndTimeout.q        
; 
; Socket.i  
; 
; 
; 
; 
; StackMutex.i  
; 
; 
; Window.i
; LogGadget.i
; PasswordGadget.i
; AbortGadget.i
; OkGadget.i
; 
; 
; PasswordSet.l
; AbortPressed.l
; InvisibleTimeout.q
; 
; 
; EncryptionHash$
; EncryptStream.l
; EncryptionDataSent.l
; CryptContext.b[#SizeOf_rijndael_ctx]
; HashContext.b[#SizeOf_MD5_ctx]
; InitializerEncrypt.b[16]
; InitializerDecrypt.b[16]
; 
; 
; StackCount.l
; Stack.CommandStackStruct[#MAX_COMMANDSTACK]  
; EndStructure
; 
; 
; 
; 
; 
; 
; Global NewList Network_Data.Network_Communication()
  MOV    rcx,qword [t_Network_Data]
  CALL   PB_FreeList
  MOV    r9,7
  MOV    r8,s_network_communication
  LEA    rdx,[t_Network_Data]
  MOV    rcx,23160
  CALL   PB_NewList
; Global Network_Mutex.i = CreateMutex()
  CALL   PB_CreateMutex
  MOV    qword [v_Network_Mutex],rax
; Global Network_Thread  = 0
  MOV    qword [v_Network_Thread],0
; Global Network_Initialized = 0
  MOV    qword [v_Network_Initialized],0
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; DisableDebugger
; 
; 
; 
; 
; CompilerIf #NOTHREAD = 0
; 
; 
; 
; 
; CompilerEndIf
; 
; EnableDebugger
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; DataSection
; 
; NetworkClient_Vtbl:
; Data.i @Network_GetInfo()
; Data.i @Network_ConnectClient()
; Data.i @Network_Disconnect()
; Data.i @Network_Send()
; Data.i @Network_Receive()
; Data.i @Network_CheckErrors()
; Data.i @Network_Close()
; 
; NetworkServer_Vtbl:
; Data.i @Network_GetInfo()
; Data.i @Network_ConnectServer()
; Data.i @Network_Disconnect()
; Data.i @Network_Send()
; Data.i @Network_Receive()
; Data.i @Network_CheckErrors()
; Data.i @Network_Close()
; 
; 
; EndDataSection
; 
; 
; 
; XIncludeFile "Communication.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #PRINT_DEBUGGER_COMMANDS
; 
; 
; Declare Debugger_ForceDestroy(*Debugger.DebuggerData)
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #LOG_DEBUGGER_COMMANDS
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; XIncludeFile "DebugOutput.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; XIncludeFile "AsmDebug.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; #RegisterHasString = 1<<15
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; XIncludeFile "MemoryViewer.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Global Dim MemoryViewer_Chars.s(31)
  SUB    rsp,24
  MOV    rdx,32
  MOV    rax,a_MemoryViewer_Chars
  PUSH   rax
  MOV    r9,s_s
  MOV    r8,8
  MOV    rcx,8
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_MemoryViewer_Chars],rax
; 
; 
; 
; Prototype.s MemoryViewer_PeekVal(*Pointer)
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; DataSection
; 
; MemoryViewer_SpecialChars:  
; Data$ "[NULL]","[SOH]", "[STX]", "[ETX]", "[EOT]", "[ENQ]", "[ACK]", "[BEL]"
; Data$ "[BS]" , "[TAB]", "[LF]" , "[VT]" , "[FF]" , "[CR]" , "[SO]" , "[SI]"
; Data$ "[DLE]", "[DC1]", "[DC2]", "[DC3]", "[DC4]", "[NAK]", "[SYN]", "[ETB]"
; Data$ "[CAN]", "[EM]" , "[SUB]", "[ESC]", "[FS]" , "[GS]" , "[RS]" , "[US]"
; 
; EndDataSection
; XIncludeFile "VariableDebug.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Declare VariableWindowSort(*Debugger.DebuggerData, Gadget)
; 
; Structure Variable_SortData
; Type.l
; Direction.l
; *Values.Local_Array
; EndStructure
; 
; 
; 
; CompilerIf #CompileWindows
; 
; 
; 
; 
; 
; CompilerEndIf
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; XIncludeFile "History.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; XIncludeFile "DataBreakPoints.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Global NextDataBreakPointID = 1
  MOV    qword [v_NextDataBreakPointID],1
; Global RemoveDataBreakpoints = #False 
  MOV    qword [v_RemoveDataBreakpoints],0
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; XIncludeFile "WatchList.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; XIncludeFile "LibraryViewer.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Prototype PLUGIN_InitLibraryPlugin(*buffer) 
; Prototype PLUGIN_EndViewer()                
; Prototype PLUGIN_DisplayObject(WindowID, *ObjectData, Size)  
; Prototype PLUGIN_RemoveObject(*Object)      
; Prototype PLUGIN_GetObjectWidth(*Object)    
; Prototype PLUGIN_GetObjectHeight(*Object)   
; Prototype PLUGIN_SetObjectSize(*Object, Width, Height) 
; Prototype PLUGIN_ProcessEvents(*Object, EventGadgetID, EventType)   
; 
; Structure LibraryViewerPLUGIN
; 
; 
; 
; LibraryID$        
; DllNumber.l       
; 
; 
; 
; EndViewer.PLUGIN_EndViewer
; DisplayObject.PLUGIN_DisplayObject
; RemoveObject.PLUGIN_RemoveObject
; GetObjectWidth.PLUGIN_GetObjectWidth
; GetObjectHeight.PLUGIN_GetObjectHeight
; SetObjectSize.PLUGIN_SetObjectSize
; ProcessEvents.PLUGIN_ProcessEvents
; 
; EndStructure
; 
; Global NewList LibraryPlugins.LibraryViewerPLUGIN()
  MOV    rcx,qword [t_LibraryPlugins]
  CALL   PB_FreeList
  MOV    r9,7
  MOV    r8,s_libraryviewerplugin
  LEA    rdx,[t_LibraryPlugins]
  MOV    rcx,68
  CALL   PB_NewList
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; XIncludeFile "Profiler.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; #Profiler_Colors = 18 
; 
; #ContainerBorder = 4 
; 
; CompilerIf #CompileLinux
; #Profiler_ScrollbarWidth = 15
; CompilerEndIf
; 
; 
; 
; Structure ProfilerDrawing
; x.l           
; y.l
; w.l
; h.l
; linestart.l   
; lines.l
; countstart.l
; counts.l
; EndStructure
; 
; Global Profiler_Arrow, Profiler_Select, Profiler_Cross, Profiler_Zoomin, Profiler_Zoomout, Profiler_Zoomall
; Global Profiler_CurrentLine 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #CompileWindows
; 
; 
; 
; 
; CompilerEndIf
; 
; 
; 
; 
; CompilerIf #CompileWindows
; Macro Profiler_GrabMouse(GrabWindow): SetCapture_(GrabWindow): EndMacro
; Macro Profiler_ReleaseMouse(): ReleaseCapture_(): EndMacro
; CompilerEndIf
; 
; CompilerIf #CompileLinux
; 
; CompilerIf #CompileMac
; 
; Global Profiler_CaptureMode, Profiler_DownX, Profiler_DownY, Profiler_OldX, Profiler_OldY
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #CompileWindows
; 
; 
; CompilerEndIf
; 
; 
; 
; CompilerIf #CompileLinux
; 
; 
; 
; 
; CompilerIf #CompileMacCarbon
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; DataSection
; 
; CompilerIf #CompileWindows
; Profiler_Arrow:   : IncludeBinary #BUILD_DIRECTORY + "arrow.ico"
; Profiler_Select:  : IncludeBinary #BUILD_DIRECTORY + "select.ico"
; Profiler_Cross:   : IncludeBinary #BUILD_DIRECTORY + "cross.ico"
; Profiler_Zoomin:  : IncludeBinary #BUILD_DIRECTORY + "zoomin.ico"
; Profiler_Zoomout: : IncludeBinary #BUILD_DIRECTORY + "zoomout.ico"
; Profiler_Zoomall: : IncludeBinary #BUILD_DIRECTORY + "zoomall.ico"
; CompilerElse
; 
; 
; Profiler_Colors:
; Data.l $FF0000
; Data.l $0000FF
; Data.l $008000
; Data.l $0080FF
; Data.l $00FFFF
; Data.l $800080
; Data.l $808000
; Data.l $8000FF
; Data.l $FF8000
; Data.l $004000
; Data.l $808080
; Data.l $400080
; Data.l $800000
; Data.l $FF00FF
; Data.l $FF8080
; Data.l $00FF00
; Data.l $000080
; Data.l $008080
; 
; 
; Profiler_Numbers:
; Data.b %0111000
; Data.b %1000100
; Data.b %1000100
; Data.b %1000100
; Data.b %1000100
; Data.b %1000100
; Data.b %1000100
; Data.b %1000100
; Data.b %0111000
; 
; Data.b %0001000
; Data.b %0011000
; Data.b %0101000
; Data.b %0001000
; Data.b %0001000
; Data.b %0001000
; Data.b %0001000
; Data.b %0001000
; Data.b %0011100
; 
; Data.b %0111000
; Data.b %1000100
; Data.b %0000100
; Data.b %0000100
; Data.b %0001000
; Data.b %0010000
; Data.b %0100000
; Data.b %1000000
; Data.b %1111100
; 
; Data.b %0111000
; Data.b %1000100
; Data.b %0000100
; Data.b %0000100
; Data.b %0011000
; Data.b %0000100
; Data.b %0000100
; Data.b %1000100
; Data.b %0111000
; 
; Data.b %0000100
; Data.b %0001100
; Data.b %0010100
; Data.b %0100100
; Data.b %1000100
; Data.b %1111100
; Data.b %0000100
; Data.b %0000100
; Data.b %0000100
; 
; Data.b %1111100
; Data.b %1000000
; Data.b %1000000
; Data.b %1000000
; Data.b %1111000
; Data.b %0000100
; Data.b %0000100
; Data.b %1000100
; Data.b %0111000
; 
; Data.b %0111000
; Data.b %1000100
; Data.b %1000000
; Data.b %1000000
; Data.b %1111000
; Data.b %1000100
; Data.b %1000100
; Data.b %1000100
; Data.b %0111000
; 
; Data.b %1111100
; Data.b %0000100
; Data.b %0000100
; Data.b %0001000
; Data.b %0001000
; Data.b %0010000
; Data.b %0010000
; Data.b %0100000
; Data.b %0100000
; 
; Data.b %0111000
; Data.b %1000100
; Data.b %1000100
; Data.b %1000100
; Data.b %0111000
; Data.b %1000100
; Data.b %1000100
; Data.b %1000100
; Data.b %0111000
; 
; Data.b %0111000
; Data.b %1000100
; Data.b %1000100
; Data.b %1000100
; Data.b %0111100
; Data.b %0000100
; Data.b %0000100
; Data.b %1000100
; Data.b %0111000
; 
; EndDataSection
; XIncludeFile "Purifier.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; #MAX_PurifierState = 14
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #CompileWindows
; 
; 
; CompilerEndIf
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; XIncludeFile "DebuggerGUI.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; XIncludeFile "Plugin_Image.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Structure PB_LibraryViewer_Image  
; Format.l         
; BytesPerPixel.l  
; Pitch.l
; Width.l
; Height.l         
; EndStructure
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; AddElement(LibraryPlugins())
  MOV    rcx,qword [t_LibraryPlugins]
  CALL   PB_AddElement
; LibraryPlugins()\LibraryID$      = "PB_LIBRARY_Image"
  MOV    rbp,qword [t_LibraryPlugins+8]
  MOV    rdx,_S340
  LEA    rcx,[rbp+16]
  CALL   SYS_FastAllocateStringFree4
; LibraryPlugins()\DisplayObject   = @Plugin_Image_DisplayObject()
  LEA    rax,[_Procedure626]
  PUSH   rax
  POP    qword [rbp+36]
; LibraryPlugins()\RemoveObject    = @Plugin_Image_RemoveObject()
  LEA    rax,[_Procedure628]
  PUSH   rax
  POP    qword [rbp+44]
; LibraryPlugins()\GetObjectWidth  = @Plugin_Image_GetObjectWidth()
  LEA    rax,[_Procedure630]
  PUSH   rax
  POP    qword [rbp+52]
; LibraryPlugins()\GetObjectHeight = @Plugin_Image_GetObjectHeight()
  LEA    rax,[_Procedure632]
  PUSH   rax
  POP    qword [rbp+60]
; 
; 
; 
; AddElement(LibraryPlugins())
  MOV    rcx,qword [t_LibraryPlugins]
  CALL   PB_AddElement
; LibraryPlugins()\LibraryID$      = "PB_LIBRARY_Sprite"
  MOV    rbp,qword [t_LibraryPlugins+8]
  MOV    rdx,_S341
  LEA    rcx,[rbp+16]
  CALL   SYS_FastAllocateStringFree4
; LibraryPlugins()\DisplayObject   = @Plugin_Image_DisplayObject()
  LEA    rax,[_Procedure626]
  PUSH   rax
  POP    qword [rbp+36]
; LibraryPlugins()\RemoveObject    = @Plugin_Image_RemoveObject()
  LEA    rax,[_Procedure628]
  PUSH   rax
  POP    qword [rbp+44]
; LibraryPlugins()\GetObjectWidth  = @Plugin_Image_GetObjectWidth()
  LEA    rax,[_Procedure630]
  PUSH   rax
  POP    qword [rbp+52]
; LibraryPlugins()\GetObjectHeight = @Plugin_Image_GetObjectHeight()
  LEA    rax,[_Procedure632]
  PUSH   rax
  POP    qword [rbp+60]
; 
; AddElement(LibraryPlugins())
  MOV    rcx,qword [t_LibraryPlugins]
  CALL   PB_AddElement
; LibraryPlugins()\LibraryID$      = "PB_LIBRARY_Sprite3D"
  MOV    rbp,qword [t_LibraryPlugins+8]
  MOV    rdx,_S342
  LEA    rcx,[rbp+16]
  CALL   SYS_FastAllocateStringFree4
; LibraryPlugins()\DisplayObject   = @Plugin_Image_DisplayObject()
  LEA    rax,[_Procedure626]
  PUSH   rax
  POP    qword [rbp+36]
; LibraryPlugins()\RemoveObject    = @Plugin_Image_RemoveObject()
  LEA    rax,[_Procedure628]
  PUSH   rax
  POP    qword [rbp+44]
; LibraryPlugins()\GetObjectWidth  = @Plugin_Image_GetObjectWidth()
  LEA    rax,[_Procedure630]
  PUSH   rax
  POP    qword [rbp+52]
; LibraryPlugins()\GetObjectHeight = @Plugin_Image_GetObjectHeight()
  LEA    rax,[_Procedure632]
  PUSH   rax
  POP    qword [rbp+60]
; 
; 
; XIncludeFile "Plugin_Xml.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Structure Plugin_Xml
; 
; XmlID.l
; 
; 
; Tree.l 
; Panel.l
; Splitter.l
; Info.l
; Attributes.l
; Text.l
; EndStructure
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; AddElement(LibraryPlugins())
  MOV    rcx,qword [t_LibraryPlugins]
  CALL   PB_AddElement
; LibraryPlugins()\LibraryID$      = "PB_LIBRARY_Xml"
  MOV    rbp,qword [t_LibraryPlugins+8]
  MOV    rdx,_S363
  LEA    rcx,[rbp+16]
  CALL   SYS_FastAllocateStringFree4
; LibraryPlugins()\DisplayObject   = @Plugin_Xml_DisplayObject()
  LEA    rax,[_Procedure638]
  PUSH   rax
  POP    qword [rbp+36]
; LibraryPlugins()\RemoveObject    = @Plugin_Xml_RemoveObject()
  LEA    rax,[_Procedure640]
  PUSH   rax
  POP    qword [rbp+44]
; LibraryPlugins()\SetObjectSize   = @Plugin_Xml_SetObjectSize()
  LEA    rax,[_Procedure642]
  PUSH   rax
  POP    qword [rbp+68]
; LibraryPlugins()\ProcessEvents   = @Plugin_Xml_ProcessEvents()
  LEA    rax,[_Procedure644]
  PUSH   rax
  POP    qword [rbp+76]
; 
; 
; 
; 
; XIncludeFile "Standalone_Preferences.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; XIncludeFile "Standalone_ScintillaStuff.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #CompileWindows | #CompileLinux | #CompileMac
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Declare Standalone_ResizeGUI()
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerEndIf
; XIncludeFile "Standalone_GUI.pb"
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Global Image_Minimize, Image_Maximize
; 
; 
; 
; 
; 
; 
; 
; 
; 
; DataSection
; 
; CompilerIf #CompileWindows
; 
; MinimizeImageData:
; IncludeBinary #BUILD_DIRECTORY + "TemplateUp.ico"    
; MaximizeImageData:
; IncludeBinary #BUILD_DIRECTORY + "TemplateDown.ico"  
; 
; CompilerElse
; 
; EndDataSection
; 
; 
; 
; 
; CompilerSelect #PB_Compiler_OS
; 
; CompilerCase #PB_OS_Windows
; 
; 
; 
; CreateMutex_(#Null, #False, "PureBasic_Running")
  MOV    rax,_S556
  MOV    r8,rax
  MOV    rdx,qword 0
  MOV    rcx,qword 0
  CALL   CreateMutexW
; 
; PureBasicPath$ = Space(#MAX_PATH)
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rcx,qword 260
  POP    rdx
  SUB    rsp,32
  CALL   PB_Space
  ADD    rsp,40
  LEA    rcx,[v_PureBasicPath$]
  POP    rdx
  CALL   SYS_AllocateString4
; GetModuleFileName_(GetModuleHandle_(#Null$), @PureBasicPath$, #MAX_PATH)
  PUSH   qword 260
  MOV    rax,qword [v_PureBasicPath$]
  PUSH   rax
  XOR    rax,rax
  MOV    rcx,rax
  SUB    rsp,32
  CALL   GetModuleHandleW
  ADD    rsp,32
  MOV    rcx,rax
  POP    rdx
  POP    r8
  CALL   GetModuleFileNameW
; PureBasicPath$ = GetPathPart(PureBasicPath$)
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rcx,qword [v_PureBasicPath$]
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetPathPart
  ADD    rsp,40
  LEA    rcx,[v_PureBasicPath$]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; 
; 
; If UCase(Right(PureBasicPath$, 10)) = "COMPILERS\"
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rdx,[PB_StringBasePosition]
  PUSH   rdx
  PUSH   rdx
  MOV    rdx,qword 10
  MOV    rcx,qword [v_PureBasicPath$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S558
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf3621
; PureBasicPath$ = Left(PureBasicPath$, Len(PureBasicPath$)-10)
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  SUB    rsp,8
  MOV    rcx,qword [v_PureBasicPath$]
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,-10
  MOV    rax,r15
  MOV    rdx,rax
  MOV    rcx,qword [v_PureBasicPath$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  LEA    rcx,[v_PureBasicPath$]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf3621:
; 
; CurrentDirectory$ = Space(2000)
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rcx,qword 2000
  POP    rdx
  SUB    rsp,32
  CALL   PB_Space
  ADD    rsp,40
  LEA    rcx,[v_CurrentDirectory$]
  POP    rdx
  CALL   SYS_AllocateString4
; GetCurrentDirectory_(2000, @CurrentDirectory$)
  MOV    rax,qword [v_CurrentDirectory$]
  MOV    rdx,rax
  MOV    rcx,qword 2000
  CALL   GetCurrentDirectoryW
; If Trim(CurrentDirectory$) = ""
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rcx,qword [v_CurrentDirectory$]
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S3
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf3623
; CurrentDirectory$ = ""
  MOV    rdx,_S3
  LEA    rcx,[v_CurrentDirectory$]
  CALL   SYS_FastAllocateStringFree4
; EndIf
_EndIf3623:
; 
; 
; InitScintilla(PureBasicPath$+"Compilers\Scintilla.dll")    
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rcx,qword [v_PureBasicPath$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S559
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_InitScintilla2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; CompilerDefault
; 
; 
; 
; 
; 
; CompilerIf #CompileWindows
; PreviousPath$ = GetEnvironmentVariable("PATH")
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rax,_S560
  MOV    rcx,rax
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetEnvironmentVariable
  ADD    rsp,40
  LEA    rcx,[v_PreviousPath$]
  POP    rdx
  CALL   SYS_AllocateString4
; SetEnvironmentVariable("PATH", PureBasicPath$+"Compilers\;"+PreviousPath$)    
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rcx,qword [v_PureBasicPath$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S561
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [v_PreviousPath$]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S560
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetEnvironmentVariable
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; CompilerEndIf
; 
; CompilerIf #CompileLinux
; 
; CompilerIf #CompileMac
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; NetworkMode   = 0
  MOV    qword [v_NetworkMode],0
; NetworkHost$  = ""
  MOV    rdx,_S3
  LEA    rcx,[v_NetworkHost$]
  CALL   SYS_FastAllocateStringFree4
; NetworkPort   = #DEBUGGER_DefaultPort 
  MOV    qword [v_NetworkPort],10101
; NetworkPass$  = ""
  MOV    rdx,_S3
  LEA    rcx,[v_NetworkPass$]
  CALL   SYS_FastAllocateStringFree4
; 
; ExeName$  = ProgramParameter()
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_ProgramParameter
  ADD    rsp,40
  LEA    rcx,[v_ExeName$]
  POP    rdx
  CALL   SYS_AllocateString4
; ExeNameU$ = UCase(ExeName$)
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rcx,qword [v_ExeName$]
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  LEA    rcx,[v_ExeNameU$]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; PurifierSettings$ = ""
  MOV    rdx,_S3
  LEA    rcx,[v_PurifierSettings$]
  CALL   SYS_FastAllocateStringFree4
; 
; 
; 
; If Left(ExeNameU$, 9) = "/CONNECT=" Or Left(ExeNameU$, 10) = "--CONNECT="
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rdx,qword 9
  MOV    rcx,qword [v_ExeNameU$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S562
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    Ok360
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rdx,qword 10
  MOV    rcx,qword [v_ExeNameU$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S563
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    Ok360
  JMP    No360
Ok360:
  MOV    rax,1
  JMP    End360
No360:
  XOR    rax,rax
End360:
  AND    rax,rax
  JE    _EndIf3625
; NetworkMode = 1 
  MOV    qword [v_NetworkMode],1
; NetworkHost$ = Right(ExeName$, Len(ExeName$)-FindString(ExeName$, "=", 1))
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  SUB    rsp,8
  MOV    rcx,qword [v_ExeName$]
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  SUB    rsp,8
  PUSH   qword 1
  MOV    rax,_S194
  MOV    rdx,rax
  MOV    rcx,qword [v_ExeName$]
  POP    r8
  SUB    rsp,32
  CALL   PB_FindString2
  ADD    rsp,40
  SUB    r15,rax
  MOV    rax,r15
  MOV    rdx,rax
  MOV    rcx,qword [v_ExeName$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,40
  LEA    rcx,[v_NetworkHost$]
  POP    rdx
  CALL   SYS_AllocateString4
; ExeName$ = ""
  MOV    rdx,_S3
  LEA    rcx,[v_ExeName$]
  CALL   SYS_FastAllocateStringFree4
; 
; PortSep = FindString(NetworkHost$, ":", 1)
  PUSH   qword 1
  MOV    rax,_S13
  MOV    rdx,rax
  MOV    rcx,qword [v_NetworkHost$]
  POP    r8
  CALL   PB_FindString2
  MOV    qword [v_PortSep],rax
; If PortSep
  CMP    qword [v_PortSep],0
  JE    _EndIf3627
; NetworkPort  = Val(Right(NetworkHost$, Len(NetworkHost$)-PortSep))
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rcx,qword [v_NetworkHost$]
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  SUB    r15,qword [v_PortSep]
  MOV    rax,r15
  MOV    rdx,rax
  MOV    rcx,qword [v_NetworkHost$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    qword [v_NetworkPort],rax
; NetworkHost$ = Left(NetworkHost$, PortSep-1)
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    r15,qword [v_PortSep]
  DEC    r15
  MOV    rax,r15
  MOV    rdx,rax
  MOV    rcx,qword [v_NetworkHost$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  LEA    rcx,[v_NetworkHost$]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf  
_EndIf3627:
; 
; Pass$ = ProgramParameter()
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_ProgramParameter
  ADD    rsp,40
  LEA    rcx,[v_Pass$]
  POP    rdx
  CALL   SYS_AllocateString4
; If UCase(Left(Pass$, 10)) = "/PASSWORD=" Or UCase(Left(Pass$, 11)) = "--PASSWORD="
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rdx,[PB_StringBasePosition]
  PUSH   rdx
  PUSH   rdx
  MOV    rdx,qword 10
  MOV    rcx,qword [v_Pass$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S564
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    Ok361
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rdx,[PB_StringBasePosition]
  PUSH   rdx
  PUSH   rdx
  MOV    rdx,qword 11
  MOV    rcx,qword [v_Pass$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S565
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    Ok361
  JMP    No361
Ok361:
  MOV    rax,1
  JMP    End361
No361:
  XOR    rax,rax
End361:
  AND    rax,rax
  JE    _EndIf3629
; NetworkPass$ = Right(Pass$, Len(Pass$)-FindString(Pass$, "=", 1))
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  SUB    rsp,8
  MOV    rcx,qword [v_Pass$]
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  SUB    rsp,8
  PUSH   qword 1
  MOV    rax,_S194
  MOV    rdx,rax
  MOV    rcx,qword [v_Pass$]
  POP    r8
  SUB    rsp,32
  CALL   PB_FindString2
  ADD    rsp,40
  SUB    r15,rax
  MOV    rax,r15
  MOV    rdx,rax
  MOV    rcx,qword [v_Pass$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,40
  LEA    rcx,[v_NetworkPass$]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf3629:
; 
; ElseIf ExeNameU$ = "/LISTEN" Or ExeNameU$ = "--LISTEN" Or Left(ExeNameU$, 8) = "/LISTEN=" Or Left(ExeNameU$, 9) = "--LISTEN="  
  JMP   _EndIf3624
_EndIf3625:
  PUSH   qword [v_ExeNameU$]
  MOV    rcx,_S566
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    Ok362
  PUSH   qword [v_ExeNameU$]
  MOV    rcx,_S567
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    Ok362
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rdx,qword 8
  MOV    rcx,qword [v_ExeNameU$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S568
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    Ok362
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rdx,qword 9
  MOV    rcx,qword [v_ExeNameU$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S569
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    Ok362
  JMP    No362
Ok362:
  MOV    rax,1
  JMP    End362
No362:
  XOR    rax,rax
End362:
  AND    rax,rax
  JE    _EndIf3630
; NetworkMode = 2 
  MOV    qword [v_NetworkMode],2
; 
; 
; 
; OptionSep = FindString(ExeName$, "=", 1)
  PUSH   qword 1
  MOV    rax,_S194
  MOV    rdx,rax
  MOV    rcx,qword [v_ExeName$]
  POP    r8
  CALL   PB_FindString2
  MOV    qword [v_OptionSep],rax
; If OptionSep
  CMP    qword [v_OptionSep],0
  JE    _EndIf3632
; Option$ = Right(ExeName$, Len(ExeName$)-OptionSep)
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  SUB    rsp,8
  MOV    rcx,qword [v_ExeName$]
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  SUB    r15,qword [v_OptionSep]
  MOV    rax,r15
  MOV    rdx,rax
  MOV    rcx,qword [v_ExeName$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,40
  LEA    rcx,[v_Option$]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; PortSep = FindString(Option$, ":", 1)
  PUSH   qword 1
  MOV    rax,_S13
  MOV    rdx,rax
  MOV    rcx,qword [v_Option$]
  POP    r8
  CALL   PB_FindString2
  MOV    qword [v_PortSep],rax
; 
; If PortSep
  CMP    qword [v_PortSep],0
  JE    _EndIf3634
; NetworkHost$ = Left(Option$, PortSep-1)
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    r15,qword [v_PortSep]
  DEC    r15
  MOV    rax,r15
  MOV    rdx,rax
  MOV    rcx,qword [v_Option$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  LEA    rcx,[v_NetworkHost$]
  POP    rdx
  CALL   SYS_AllocateString4
; NetworkPort  = Val(Right(Option$, Len(Option$)-PortSep))
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rcx,qword [v_Option$]
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  SUB    r15,qword [v_PortSep]
  MOV    rax,r15
  MOV    rdx,rax
  MOV    rcx,qword [v_Option$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    qword [v_NetworkPort],rax
; 
; Else
  JMP   _EndIf3633
_EndIf3634:
; 
; NonNumber = 0
  MOV    qword [v_NonNumber],0
; For i = 1 To Len(Option$)
  MOV    qword [v_i],1
  JMP   _ForSkipDebug3636
_For3636:
_ForSkipDebug3636:
  MOV    rcx,qword [v_Option$]
  CALL   PB_Len
  CMP    rax,qword [v_i]
  JL    _Next3637
; If Asc(Mid(Option$, i, 1)) < '0' Or Asc(Mid(Option$, i, 1)) > '9'
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  SUB    rsp,8
  MOV    r9,qword [PB_StringBasePosition]
  MOV    r8,qword 1
  MOV    rdx,qword [v_i]
  MOV    rcx,qword [v_Option$]
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Asc
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    r15,rax
  CMP    r15,48
  JL     Ok363
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  SUB    rsp,8
  MOV    r9,qword [PB_StringBasePosition]
  MOV    r8,qword 1
  MOV    rdx,qword [v_i]
  MOV    rcx,qword [v_Option$]
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Asc
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    r15,rax
  CMP    r15,57
  JG     Ok363
  JMP    No363
Ok363:
  MOV    rax,1
  JMP    End363
No363:
  XOR    rax,rax
End363:
  AND    rax,rax
  JE    _EndIf3639
; NonNumber = 1
  MOV    qword [v_NonNumber],1
; Break
  JMP   _Next3637
; EndIf
_EndIf3639:
; Next i
_NextContinue3637:
  INC    qword [v_i]
  JNO   _For3636
_Next3637:
; 
; If NonNumber = 0
  MOV    r15,qword [v_NonNumber]
  AND    r15,r15
  JNE   _EndIf3641
; NetworkPort = Val(Option$)
  MOV    rcx,qword [v_Option$]
  CALL   PB_Val
  MOV    qword [v_NetworkPort],rax
; Else
  JMP   _EndIf3640
_EndIf3641:
; NetworkHost$ = Option$
  MOV    rcx,qword [v_Option$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[v_NetworkHost$]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf3640:
; 
; EndIf
_EndIf3633:
; 
; EndIf
_EndIf3632:
; ExeName$ = ""
  MOV    rdx,_S3
  LEA    rcx,[v_ExeName$]
  CALL   SYS_FastAllocateStringFree4
; 
; Pass$ = ProgramParameter()
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_ProgramParameter
  ADD    rsp,40
  LEA    rcx,[v_Pass$]
  POP    rdx
  CALL   SYS_AllocateString4
; If UCase(Left(Pass$, 10)) = "/PASSWORD=" Or UCase(Left(Pass$, 11)) = "--PASSWORD="
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rdx,[PB_StringBasePosition]
  PUSH   rdx
  PUSH   rdx
  MOV    rdx,qword 10
  MOV    rcx,qword [v_Pass$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S564
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    Ok364
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rdx,[PB_StringBasePosition]
  PUSH   rdx
  PUSH   rdx
  MOV    rdx,qword 11
  MOV    rcx,qword [v_Pass$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S565
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    Ok364
  JMP    No364
Ok364:
  MOV    rax,1
  JMP    End364
No364:
  XOR    rax,rax
End364:
  AND    rax,rax
  JE    _EndIf3644
; NetworkPass$ = Right(Pass$, Len(Pass$)-FindString(Pass$, "=", 1))
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  SUB    rsp,8
  MOV    rcx,qword [v_Pass$]
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  SUB    rsp,8
  PUSH   qword 1
  MOV    rax,_S194
  MOV    rdx,rax
  MOV    rcx,qword [v_Pass$]
  POP    r8
  SUB    rsp,32
  CALL   PB_FindString2
  ADD    rsp,40
  SUB    r15,rax
  MOV    rax,r15
  MOV    rdx,rax
  MOV    rcx,qword [v_Pass$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,40
  LEA    rcx,[v_NetworkPass$]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf3644:
; 
; ElseIf ExenameU$ = "-O"  
  JMP   _EndIf3624
_EndIf3630:
  PUSH   qword [v_ExeNameU$]
  MOV    rcx,_S570
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf3645
; OptionsFile$ = ProgramParameter()
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_ProgramParameter
  ADD    rsp,40
  LEA    rcx,[v_OptionsFile$]
  POP    rdx
  CALL   SYS_AllocateString4
; ExeName$ = ProgramParameter()
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_ProgramParameter
  ADD    rsp,40
  LEA    rcx,[v_ExeName$]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; Else
  JMP   _EndIf3624
_EndIf3645:
; OptionsFile$ = ""
  MOV    rdx,_S3
  LEA    rcx,[v_OptionsFile$]
  CALL   SYS_FastAllocateStringFree4
; 
; EndIf
_EndIf3624:
; 
; 
; 
; CommandLine$ = ""
  MOV    rdx,_S3
  LEA    rcx,[v_CommandLine$]
  CALL   SYS_FastAllocateStringFree4
; Repeat
_Repeat3647:
; Parameter$ = ProgramParameter()
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_ProgramParameter
  ADD    rsp,40
  LEA    rcx,[v_Parameter$]
  POP    rdx
  CALL   SYS_AllocateString4
; If Parameter$ <> ""
  PUSH   qword [v_Parameter$]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf3649
; CommandLine$ + " " + Chr(34)+Parameter$+Chr(34) 
  MOV    rcx,qword [v_CommandLine$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S571
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [v_Parameter$]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S99
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[v_CommandLine$]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf3649:
; Until Parameter$ = ""
  PUSH   qword [v_Parameter$]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _Repeat3647
_Until3647:
; CommandLine$ = LTrim(CommandLine$) 
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rcx,qword [v_CommandLine$]
  POP    rdx
  SUB    rsp,32
  CALL   PB_LTrim
  ADD    rsp,40
  LEA    rcx,[v_CommandLine$]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; CompilerIf #PB_Compiler_Debugger
; 
; 
; 
; 
; CompilerIf #CompileMac
; 
; 
; 
; CustomWarningMode = -1
  MOV    qword [v_CustomWarningMode],-1
; 
; If OptionsFile$ <> ""
  PUSH   qword [v_OptionsFile$]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf3651
; If ReadFile(0, OptionsFile$)
  MOV    rdx,qword [v_OptionsFile$]
  MOV    rcx,qword 0
  CALL   PB_ReadFile
  AND    rax,rax
  JE    _EndIf3653
; 
; While Eof(0) = 0
_While3654:
  MOV    rcx,qword 0
  CALL   PB_Eof
  MOV    r15,rax
  AND    r15,r15
  JNE   _Wend3654
; Line$ = ReadString(0, #PB_UTF8)      
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rdx,qword 2
  MOV    rcx,qword 0
  POP    r8
  SUB    rsp,32
  CALL   PB_ReadString2
  ADD    rsp,40
  LEA    rcx,[v_Line$]
  POP    rdx
  CALL   SYS_AllocateString4
; Option$ = UCase(StringField(Line$, 1, " "))
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rdx,[PB_StringBasePosition]
  PUSH   rdx
  PUSH   rdx
  MOV    rax,_S25
  MOV    r8,rax
  MOV    rdx,qword 1
  MOV    rcx,qword [v_Line$]
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  LEA    rcx,[v_Option$]
  POP    rdx
  CALL   SYS_AllocateString4
; Value$  = Trim(Right(Line$, Len(Line$)-Len(Option$)))
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rdx,[PB_StringBasePosition]
  PUSH   rdx
  PUSH   rdx
  SUB    rsp,8
  MOV    rcx,qword [v_Line$]
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  SUB    rsp,8
  MOV    rcx,qword [v_Option$]
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  SUB    r15,rax
  MOV    rax,r15
  MOV    rdx,rax
  MOV    rcx,qword [v_Line$]
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,40
  LEA    rcx,[v_Value$]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; Select Option$
  PUSH   qword [v_Option$]
; Case "EXEFILE"    : ExeName$ = Value$        
  MOV    rdx,_S572
  MOV    rcx,[rsp]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _Case324
  MOV    rcx,qword [v_Value$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[v_ExeName$]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Case "COMMANDLINE": Commandline$ = Value$
  JMP   _EndSelect53
_Case324:
  MOV    rdx,_S573
  MOV    rcx,[rsp]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _Case325
  MOV    rcx,qword [v_Value$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[v_CommandLine$]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Case "SOURCEFILE" : MainFileName$ = Value$
  JMP   _EndSelect53
_Case325:
  MOV    rdx,_S574
  MOV    rcx,[rsp]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _Case326
  MOV    rcx,qword [v_Value$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[v_MainFileName$]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Case "PREFERENCES": PreferenceFile$ = Value$
  JMP   _EndSelect53
_Case326:
  MOV    rdx,_S575
  MOV    rcx,[rsp]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _Case327
  MOV    rcx,qword [v_Value$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[v_PreferenceFile$]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Case "PURIFIER": PurifierSettings$ = Value$
  JMP   _EndSelect53
_Case327:
  MOV    rdx,_S576
  MOV    rcx,[rsp]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _Case328
  MOV    rcx,qword [v_Value$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[v_PurifierSettings$]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Case "NETWORK"
  JMP   _EndSelect53
_Case328:
  MOV    rdx,_S577
  MOV    rcx,[rsp]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _Case329
; If UCase(Value$) = "CLIENT"
  MOV    rdx,[PB_StringBasePosition]
  PUSH   rdx
  PUSH   rdx
  MOV    rcx,qword [v_Value$]
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S578
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _EndIf3656
; NetworkMode = 1
  MOV    qword [v_NetworkMode],1
; ElseIf UCase(Value$) = "SERVER"
  JMP   _EndIf3655
_EndIf3656:
  MOV    rdx,[PB_StringBasePosition]
  PUSH   rdx
  PUSH   rdx
  MOV    rcx,qword [v_Value$]
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S579
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _EndIf3657
; NetworkMode = 2
  MOV    qword [v_NetworkMode],2
; EndIf
_EndIf3655:
_EndIf3657:
; 
; Case "HOST":     NetworkHost$ = Value$ 
  JMP   _EndSelect53
_Case329:
  MOV    rdx,_S580
  MOV    rcx,[rsp]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _Case330
  MOV    rcx,qword [v_Value$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[v_NetworkHost$]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Case "PORT":     NetworkPort  = Val(Value$)
  JMP   _EndSelect53
_Case330:
  MOV    rdx,_S581
  MOV    rcx,[rsp]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _Case331
  SUB    rsp,8
  MOV    rcx,qword [v_Value$]
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,40
  MOV    qword [v_NetworkPort],rax
; Case "PASSWORD": NetworkPass$ = Value$       
  JMP   _EndSelect53
_Case331:
  MOV    rdx,_S582
  MOV    rcx,[rsp]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _Case332
  MOV    rcx,qword [v_Value$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[v_NetworkPass$]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; 
; Case "WARNINGS"
  JMP   _EndSelect53
_Case332:
  MOV    rdx,_S583
  MOV    rcx,[rsp]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _Case333
; Select UCase(Value$)
  MOV    rdx,[PB_StringBasePosition]
  PUSH   rdx
  PUSH   rdx
  MOV    rcx,qword [v_Value$]
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
; Case "IGNORE" : CustomWarningMode = 0
  MOV    rdx,_S584
  MOV    rcx,[rsp]
  ADD    rcx,[PB_StringBase]
  SUB    rsp,32
  CALL   SYS_StringEqual
  ADD    rsp,32
  OR     rax,rax
  JE    _Case334
  MOV    qword [v_CustomWarningMode],0
; Case "DISPLAY": CustomWarningMode = 1
  JMP   _EndSelect54
_Case334:
  MOV    rdx,_S585
  MOV    rcx,[rsp]
  ADD    rcx,[PB_StringBase]
  SUB    rsp,32
  CALL   SYS_StringEqual
  ADD    rsp,32
  OR     rax,rax
  JE    _Case335
  MOV    qword [v_CustomWarningMode],1
; Case "ERROR"  : CustomWarningMode = 2
  JMP   _EndSelect54
_Case335:
  MOV    rdx,_S172
  MOV    rcx,[rsp]
  ADD    rcx,[PB_StringBase]
  SUB    rsp,32
  CALL   SYS_StringEqual
  ADD    rsp,32
  OR     rax,rax
  JE    _Case336
  MOV    qword [v_CustomWarningMode],2
; EndSelect
_Case336:
_EndSelect54:
  POP    qword [PB_StringBasePosition]
; 
; CompilerIf #CompileMac = 0 
; Case "WATCH"
  JMP   _EndSelect53
_Case333:
  MOV    rdx,_S586
  MOV    rcx,[rsp]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _Case337
; AddElement(Watchlist())
  SUB    rsp,8
  MOV    rcx,qword [t_Watchlist]
  SUB    rsp,32
  CALL   PB_AddElement
  ADD    rsp,40
; Watchlist() = Value$          
  MOV    rcx,qword [v_Value$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rbp,qword [t_Watchlist+8]
  LEA    rcx,[rbp+16]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Case "BREAK"
  JMP   _EndSelect53
_Case337:
  MOV    rdx,_S587
  MOV    rcx,[rsp]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _Case338
; AddElement(BreakpointStrings())
  SUB    rsp,8
  MOV    rcx,qword [t_BreakpointStrings]
  SUB    rsp,32
  CALL   PB_AddElement
  ADD    rsp,40
; BreakpointStrings() = Value$
  MOV    rcx,qword [v_Value$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rbp,qword [t_BreakpointStrings+8]
  LEA    rcx,[rbp+16]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; CompilerEndIf
; EndSelect
_Case338:
_EndSelect53:
  POP    rax
; Wend
  JMP   _While3654
_Wend3654:
; 
; CloseFile(0)
  MOV    rcx,qword 0
  CALL   PB_CloseFile
; Else
  JMP   _EndIf3652
_EndIf3653:
; MessageRequester("PureBasic Debugger",Language("StandaloneDebugger","Commandline"), #FLAG_Warning)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 48
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rax,_S588
  PUSH   rax
  MOV    rax,_S539
  MOV    rcx,rax
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S156
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_MessageRequester2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf3652:
; EndIf
_EndIf3651:
; 
; If PreferenceFile$ = "" 
  PUSH   qword [v_PreferenceFile$]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf3660
; CompilerIf #CompileWindows
; PreferenceFile$ = PureBasicConfigPath() + "PureBasic.prefs"
  MOV    rdx,[PB_StringBasePosition]
  PUSH   rdx
  PUSH   rdx
  SUB    rsp,32
  CALL  _Procedure84
  ADD    rsp,40
  MOV    rcx,_S589
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[v_PreferenceFile$]
  POP    rdx
  CALL   SYS_AllocateString4
; CompilerElse
; EndIf
_EndIf3660:
; 
; 
; 
; Standalone_LoadPreferences()
  CALL  _Procedure646
; LoadLanguage() 
  CALL  _Procedure204
; 
; If CustomWarningMode <> -1
  MOV    r15,qword [v_CustomWarningMode]
  CMP    r15,-1
  JE    _EndIf3662
; WarningMode = CustomWarningMode
  MOV    rax,qword [v_CustomWarningMode]
  MOV    qword [v_WarningMode],rax
; EndIf
_EndIf3662:
; 
; If Standalone_CreateGUI() = 0
  CALL  _Procedure684
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3664
; MessageRequester("PureBasic Debugger","FATAL ERROR! Cannot create GUI.", #FLAG_Error)
  PUSH   qword 16
  MOV    rax,_S590
  PUSH   rax
  MOV    rax,_S156
  MOV    rcx,rax
  POP    rdx
  POP    r8
  CALL   PB_MessageRequester2
; End  
  JMP   _PB_EOP
; EndIf
_EndIf3664:
; 
; SetupHighlighting()
  CALL  _Procedure662
; 
; EnsureWindowOnDesktop(#WINDOW_Main)
  MOV    rcx,qword 1
  CALL  _Procedure162
; If IsDebuggerMaximized
  CMP    qword [v_IsDebuggerMaximized],0
  JE    _EndIf3666
; ShowWindowMaximized(#WINDOW_Main)
  MOV    rcx,qword 1
  CALL  _Procedure100
; Else
  JMP   _EndIf3665
_EndIf3666:
; HideWindow(#WINDOW_Main, 0)
  MOV    rdx,qword 0
  MOV    rcx,qword 1
  CALL   PB_HideWindow
; EndIf
_EndIf3665:
; 
; Standalone_ResizeGUI()
  CALL  _Procedure664
; 
; 
; 
; If NetworkMode = 0 And ExeName$ = ""
  MOV    r15,qword [v_NetworkMode]
  AND    r15,r15
  JNE    No365
  PUSH   qword [v_ExeName$]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE     No365
Ok365:
  MOV    rax,1
  JMP    End365
No365:
  XOR    rax,rax
End365:
  AND    rax,rax
  JE    _EndIf3669
; MessageRequester("PureBasic Debugger",Language("StandaloneDebugger","Commandline"), #FLAG_Error)  
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 16
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rax,_S588
  PUSH   rax
  MOV    rax,_S539
  MOV    rcx,rax
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S156
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_MessageRequester2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; End  
  JMP   _PB_EOP
; EndIf
_EndIf3669:
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #CompileMac
; 
; If NetworkMode = 0 
  MOV    r15,qword [v_NetworkMode]
  AND    r15,r15
  JNE   _EndIf3671
; DebuggerUseFIFO = 0 
  MOV    qword [v_DebuggerUseFIFO],0
; *DebuggerData = Debugger_ExecuteProgram(ExeName$, CommandLine$, CurrentDirectory$)
  MOV    r8,qword [v_CurrentDirectory$]
  MOV    rdx,qword [v_CommandLine$]
  MOV    rcx,qword [v_ExeName$]
  CALL  _Procedure432
  MOV    qword [p_DebuggerData],rax
; If *DebuggerData = 0
  MOV    r15,qword [p_DebuggerData]
  AND    r15,r15
  JNE   _EndIf3673
; MessageRequester("PureBasic Debugger",ReplaceString(Language("StandaloneDebugger","ExecuteError"), "%filename%", ExeName$), #FLAG_Error)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 16
  MOV    rdx,[PB_StringBasePosition]
  PUSH   rdx
  PUSH   rdx
  PUSH   qword [v_ExeName$]
  MOV    rax,_S201
  PUSH   rax
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rax,_S591
  PUSH   rax
  MOV    rax,_S539
  MOV    rcx,rax
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ReplaceString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S156
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_MessageRequester2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; End
  JMP   _PB_EOP
; EndIf
_EndIf3673:
; 
; Standalone_AddLog(Language("Debugger","Waiting"), Date())
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_Date
  ADD    rsp,32
  PUSH   rax
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rax,_S555
  PUSH   rax
  MOV    rax,_S90
  MOV    rcx,rax
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure682
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; StatusBarText(#STATUSBAR, 0, Language("Debugger","Waiting")) 
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S555
  PUSH   rax
  MOV    rax,_S90
  MOV    rcx,rax
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StatusBarText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; Else
  JMP   _EndIf3670
_EndIf3671:
; Standalone_AddLog(Language("NetworkDebugger","Waiting"), Date())
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_Date
  ADD    rsp,32
  PUSH   rax
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rax,_S555
  PUSH   rax
  MOV    rax,_S114
  MOV    rcx,rax
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure682
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; StatusBarText(#STATUSBAR, 0, Language("NetworkDebugger","Waiting"))
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S555
  PUSH   rax
  MOV    rax,_S114
  MOV    rcx,rax
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StatusBarText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(#GADGET_Waiting, Language("NetworkDebugger","Waiting"))
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S555
  PUSH   rax
  MOV    rax,_S114
  MOV    rcx,rax
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 18
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; *DebuggerData = Debugger_NetworkConnect(NetworkMode, NetworkHost$, NetworkPort, NetworkPass$)
  MOV    r9,qword [v_NetworkPass$]
  MOV    r8,qword [v_NetworkPort]
  MOV    rdx,qword [v_NetworkHost$]
  MOV    rcx,qword [v_NetworkMode]
  CALL  _Procedure434
  MOV    qword [p_DebuggerData],rax
; If *DebuggerData = 0
  MOV    r15,qword [p_DebuggerData]
  AND    r15,r15
  JNE   _EndIf3676
; End 
  JMP   _PB_EOP
; EndIf
_EndIf3676:
; 
; EndIf
_EndIf3670:
; 
; 
; 
; 
; 
; 
; Standalone_Quit = 0
  MOV    qword [v_Standalone_Quit],0
; Repeat
_Repeat3755:
; EventID = WindowEvent()
  CALL   PB_WindowEvent
  MOV    qword [v_EventID],rax
; 
; If EventID = 0
  MOV    r15,qword [v_EventID]
  AND    r15,r15
  JNE   _EndIf3757
; If Debugger_ProcessIncomingCommands() = 0 
  CALL  _Procedure430
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3759
; Delay(1) 
  MOV    rcx,qword 1
  CALL   PB_Delay
; EndIf          
_EndIf3759:
; Else
  JMP   _EndIf3756
_EndIf3757:
; ProcessEvent(EventID)
  MOV    rcx,qword [v_EventID]
  CALL  _Procedure690
; EndIf  
_EndIf3756:
; Until Standalone_Quit <> 0
  MOV    r15,qword [v_Standalone_Quit]
  AND    r15,r15
  JE    _Repeat3755
_Until3755:
; 
; 
; 
; If ListSize(RunningDebuggers()) <> 0
  MOV    rcx,qword [t_RunningDebuggers]
  CALL   PB_ListSize
  MOV    r15,rax
  AND    r15,r15
  JE    _EndIf3762
; Debugger_ForceDestroy(*DebuggerData)
  MOV    rcx,qword [p_DebuggerData]
  CALL  _Procedure420
; EndIf
_EndIf3762:
; 
; If DebuggerMemorizeWindows And IsWindowMinimized(#WINDOW_Main) = 0
  CMP    qword [v_DebuggerMemorizeWindows],0
  JE     No369
  MOV    rcx,qword 1
  CALL  _Procedure104
  MOV    r15,rax
  AND    r15,r15
  JNE    No369
Ok369:
  MOV    rax,1
  JMP    End369
No369:
  XOR    rax,rax
End369:
  AND    rax,rax
  JE    _EndIf3764
; IsDebuggerMaximized = IsWindowMaximized(#WINDOW_Main)
  MOV    rcx,qword 1
  CALL  _Procedure102
  MOV    qword [v_IsDebuggerMaximized],rax
; If IsDebuggerMaximized = 0
  MOV    r15,qword [v_IsDebuggerMaximized]
  AND    r15,r15
  JNE   _EndIf3766
; DebuggerMainWindowX = WindowX(#WINDOW_Main)
  MOV    rcx,qword 1
  CALL   PB_WindowX
  MOV    qword [v_DebuggerMainWindowX],rax
; DebuggerMainWindowY = WindowY(#WINDOW_Main)
  MOV    rcx,qword 1
  CALL   PB_WindowY
  MOV    qword [v_DebuggerMainWindowY],rax
; DebuggerMainWindowWidth = WindowWidth(#WINDOW_Main)
  MOV    rcx,qword 1
  CALL   PB_WindowWidth
  MOV    qword [v_DebuggerMainWindowWidth],rax
; DebuggerMainWindowHeight = WindowHeight(#WINDOW_Main)
  MOV    rcx,qword 1
  CALL   PB_WindowHeight
  MOV    qword [v_DebuggerMainWindowHeight],rax
; EndIf
_EndIf3766:
; EndIf
_EndIf3764:
; 
; Standalone_SavePreferences()
  CALL  _Procedure648
; 
; If OptionsFile$ <> ""
  PUSH   qword [v_OptionsFile$]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf3768
; If CreateFile(0, OptionsFile$)
  MOV    rdx,qword [v_OptionsFile$]
  MOV    rcx,qword 0
  CALL   PB_CreateFile
  AND    rax,rax
  JE    _EndIf3770
; 
; CompilerIf #CompileMac = 0    
; ForEach Watchlist()
  MOV    rcx,qword [t_Watchlist]
  CALL   PB_ResetList
_ForEach3771:
  MOV    rcx,qword [t_Watchlist]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next3771
; WriteStringN(0, "WATCH "+Watchlist())
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rcx,_S592
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [t_Watchlist+8]
  MOV    rcx,qword [rbp+16]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_WriteStringN
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Next Watchlist()
  JMP   _ForEach3771
_Next3771:
; 
; ForEach Breakpoints()
  MOV    rcx,qword [t_Breakpoints]
  CALL   PB_ResetList
_ForEach3772:
  MOV    rcx,qword [t_Breakpoints]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next3772
; If (Breakpoints() >> 24) & $FF = 0
  MOV    rbp,qword [t_Breakpoints+8]
  MOVSXD r15,dword [rbp+16]
  SAR    r15,24
  AND    r15,255
  AND    r15,r15
  JNE   _EndIf3774
; WriteStringN(0, "BREAK "+Str((Breakpoints() & $FFFFFF) + 1))
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rcx,_S593
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rdx,[PB_StringBasePosition]
  PUSH   rdx
  PUSH   rdx
  MOV    rbp,qword [t_Breakpoints+8]
  MOVSXD r15,dword [rbp+16]
  AND    r15,16777215
  INC    r15
  MOV    rax,r15
  MOV    rcx,rax
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_WriteStringN
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Else
  JMP   _EndIf3773
_EndIf3774:
; WriteStringN(0, "BREAK "+Str((Breakpoints() & $FFFFFF) + 1) + ", " + SourceFiles((Breakpoints()>>24) & $FF)\FileName$)
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rcx,_S593
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rdx,[PB_StringBasePosition]
  PUSH   rdx
  PUSH   rdx
  MOV    rbp,qword [t_Breakpoints+8]
  MOVSXD r15,dword [rbp+16]
  AND    r15,16777215
  INC    r15
  MOV    rax,r15
  MOV    rcx,rax
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S28
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOVSXD r15,dword [rbp+16]
  SAR    r15,24
  AND    r15,255
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  MOV    rcx,qword [rbp]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_WriteStringN
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf3773:
; Next Breakpoints()
  JMP   _ForEach3772
_Next3772:
; 
; If PurifierSettings$
  MOV    rcx,qword [v_PurifierSettings$]
  XOR    rdx,rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf3777
; WriteStringN(0, "PURIFIER " + PurifierSettings$)
  MOV    rax,[PB_StringBasePosition]
  PUSH   rax
  SUB    rsp,8
  PUSH   rax
  MOV    rcx,_S594
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [v_PurifierSettings$]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_WriteStringN
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf3777:
; CompilerEndIf
; 
; CloseFile(0)
  MOV    rcx,qword 0
  CALL   PB_CloseFile
; EndIf
_EndIf3770:
; EndIf
_EndIf3768:
; 
; End
  JMP   _PB_EOP
; 
; 
; 
; 
; 
_PB_EOP:
  CALL   PB_EndFunctions
  CALL   SYS_FreeStrings
  MOV    rcx,[PB_MemoryBase]
  CALL   HeapDestroy
  MOV    rcx,[PB_ExitCode]
  CALL   ExitProcess
PB_EndFunctions:
  SUB    rsp,40
  CALL   PB_EndXML
  CALL   PB_EndThread
  CALL   PB_FreePreferences
  CALL   PB_FreePackers
  CALL   PB_FreeLibraries
  CALL   PB_FreeFileSystem
  CALL   PB_FreeFiles
  CALL   PB_EndDragDrop
  CALL   PB_FreeGadgets
  CALL   PB_FreeWindows
  CALL   PB_Event_Free
  CALL   PB_FreeDesktops
  CALL   PB_FreeImages
  CALL   PB_EndAlphaImage
  CALL   PB_EndVectorDrawing
  CALL   PB_FreeFonts
  CALL   PB_FreeObjects
  CALL   PB_FreeMemorys
  ADD    rsp,40
  RET
; 
; Procedure LibraryViewer_DisplayObject(*Debugger.DebuggerData, index)
_Procedure558:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS558=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; If index <> -1 And *Debugger\ObjectList <> 0
  MOV    r15,qword [rsp+PS558+8]
  CMP    r15,-1
  JE     No289
  MOV    rbp,qword [rsp+PS558+0]
  MOV    r15,qword [rbp+652]
  AND    r15,r15
  JE     No289
Ok289:
  MOV    rax,1
  JMP    End289
No289:
  XOR    rax,rax
End289:
  AND    rax,rax
  JE    _EndIf2683
; *idlist.Local_Array = *Debugger\ObjectList
  MOV    rbp,qword [rsp+PS558+0]
  PUSH   qword [rbp+652]
  POP    rax
  MOV    qword [rsp+40],rax
; *libinfo.Debugger_LibraryData = *Debugger\LibraryList + *Debugger\CurrentLibrary * SizeOf(Debugger_LibraryData)
  MOV    rbp,qword [rsp+PS558+0]
  MOV    r15,qword [rbp+636]
  MOV    rbp,qword [rsp+PS558+0]
  MOVSXD r14,dword [rbp+660]
  IMUL   r14,28
  ADD    r15,r14
  MOV    qword [rsp+48],r15
; 
; *Debugger\CurrentObject = index
  PUSH   qword [rsp+PS558+8]
  MOV    rbp,qword [rsp+PS558+8]
  POP    rax
  MOV    dword [rbp+664],eax
; If *Debugger\Is64bit          
  MOV    rbp,qword [rsp+PS558+0]
  CMP    dword [rbp+32],0
  JE    _EndIf2685
; *Debugger\CurrentObjectID = *idlist\q[index]
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS558+16]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp]
  MOV    rbp,qword [rsp+PS558+8]
  POP    rax
  MOV    qword [rbp+668],rax
; Else
  JMP   _EndIf2684
_EndIf2685:
; *Debugger\CurrentObjectID = *idlist\l[index]
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS558+16]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp]
  PUSH   rax
  MOV    rbp,qword [rsp+PS558+8]
  POP    rax
  MOV    qword [rbp+668],rax
; EndIf    
_EndIf2684:
; 
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectText], "")
  MOV    rax,_S3
  PUSH   rax
  MOV    rbp,qword [rsp+PS558+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2840]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetText
; LibraryViewer_FreeObject(*Debugger)          
  PUSH   qword [rsp+PS558+0]
  POP    rcx
  CALL  _Procedure552
; 
; If *libinfo\FunctionMask & #LIBRARYINFO_Text
  MOV    rbp,qword [rsp+48]
  MOVSXD r15,dword [rbp+24]
  AND    r15,2
  AND    r15,r15
  JE    _EndIf2688
; Command.CommandInfo\Command = #COMMAND_GetObjectText
  LEA    rbp,[rsp+56]
  MOV    dword [rbp],26
; Command\Value1 = *Debugger\CurrentLibrary
  MOV    rbp,qword [rsp+PS558+0]
  MOVSXD rax,dword [rbp+660]
  PUSH   rax
  LEA    rbp,[rsp+64]
  POP    rax
  MOV    dword [rbp+8],eax
; 
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS558+0]
  CMP    dword [rbp+32],0
  JE    _EndIf2690
; Command\DataSize = 8
  LEA    rbp,[rsp+56]
  MOV    dword [rbp+4],8
; SendDebuggerCommandWithData(*Debugger, @Command, @*idlist\q[index])            
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS558+16]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  LEA    rax,[rbp]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS558+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure8
; Else
  JMP   _EndIf2689
_EndIf2690:
; Command\DataSize = 4
  LEA    rbp,[rsp+56]
  MOV    dword [rbp+4],4
; SendDebuggerCommandWithData(*Debugger, @Command, @*idlist\l[index])         
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS558+16]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  LEA    rax,[rbp]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS558+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure8
; EndIf
_EndIf2689:
; EndIf
_EndIf2688:
; 
; If *libinfo\FunctionMask & #LIBRARYINFO_Data
  MOV    rbp,qword [rsp+48]
  MOVSXD r15,dword [rbp+24]
  AND    r15,4
  AND    r15,r15
  JE    _EndIf2693
; Command.CommandInfo\Command = #COMMAND_GetObjectData
  LEA    rbp,[rsp+56]
  MOV    dword [rbp],27
; Command\Value1 = *Debugger\CurrentLibrary
  MOV    rbp,qword [rsp+PS558+0]
  MOVSXD rax,dword [rbp+660]
  PUSH   rax
  LEA    rbp,[rsp+64]
  POP    rax
  MOV    dword [rbp+8],eax
; 
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS558+0]
  CMP    dword [rbp+32],0
  JE    _EndIf2695
; Command\DataSize = 8
  LEA    rbp,[rsp+56]
  MOV    dword [rbp+4],8
; SendDebuggerCommandWithData(*Debugger, @Command, @*idlist\q[index])            
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS558+16]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  LEA    rax,[rbp]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS558+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure8
; Else
  JMP   _EndIf2694
_EndIf2695:
; Command\DataSize = 4
  LEA    rbp,[rsp+56]
  MOV    dword [rbp+4],4
; SendDebuggerCommandWithData(*Debugger, @Command, @*idlist\l[index])          
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS558+16]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  LEA    rax,[rbp]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS558+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure8
; EndIf            
_EndIf2694:
; EndIf
_EndIf2693:
; 
; EndIf
_EndIf2683:
; EndProcedure
_EndProcedureZero559:
  XOR    rax,rax
_EndProcedure559:
  ADD    rsp,80
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure CollectLanguageInfo()
_Procedure200:
  PUSH   rbp
  PUSH   r15
  PS200=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; ClearList(AvailableLanguages())
  PUSH   qword [t_AvailableLanguages]
  POP    rcx
  CALL   PB_ClearList
; 
; 
; 
; AddElement(AvailableLanguages())
  PUSH   qword [t_AvailableLanguages]
  POP    rcx
  CALL   PB_AddElement
; AvailableLanguages()\Name$         = "English"
  MOV    rbp,qword [t_AvailableLanguages+8]
  MOV    rdx,_S41
  LEA    rcx,[rbp+16]
  CALL   SYS_FastAllocateStringFree4
; AvailableLanguages()\FileName$     = "-------"
  MOV    rdx,_S42
  LEA    rcx,[rbp+24]
  CALL   SYS_FastAllocateStringFree4
; AvailableLanguages()\Date$         = FormatDate("%mm/%dd/%yyyy", #PB_Compiler_Date)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1543587670
  MOV    rax,_S43
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_FormatDate
  ADD    rsp,40
  LEA    rcx,[rbp+32]
  POP    rdx
  CALL   SYS_AllocateString4
; AvailableLanguages()\Creator$      = #ProductName$ + " Team"
  MOV    rdx,_S44
  LEA    rcx,[rbp+40]
  CALL   SYS_FastAllocateStringFree4
; AvailableLanguages()\CreatorEmail$ = "support@" + LCase(#ProductName$) + ".com"
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S45
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S46
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_LCase
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S47
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rbp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; 
; 
; If ExamineDirectory(0, PureBasicPath$ + #DEFAULT_CatalogPath, "*.catalog")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rax,_S49
  PUSH   rax
  MOV    rcx,qword [v_PureBasicPath$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S48
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ExamineDirectory
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  AND    rax,rax
  JE    _EndIf268
; While NextDirectoryEntry(0)
_While269:
  PUSH   qword 0
  POP    rcx
  CALL   PB_NextDirectoryEntry
  AND    rax,rax
  JE    _Wend269
; If DirectoryEntryType(0) = 1
  PUSH   qword 0
  POP    rcx
  CALL   PB_DirectoryEntryType
  MOV    r15,rax
  CMP    r15,1
  JNE   _EndIf271
; GetLanguageInfo(PureBasicPath$ + #DEFAULT_CatalogPath+DirectoryEntryName(0))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rcx,qword [v_PureBasicPath$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S48
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DirectoryEntryName
  ADD    rsp,32
  POP    rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure198
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf271:
; Wend
  JMP   _While269
_Wend269:
; 
; FinishDirectory(0)
  PUSH   qword 0
  POP    rcx
  CALL   PB_FinishDirectory
; EndIf
_EndIf268:
; 
; 
; 
; If ExamineDirectory(0, PureBasicPath$ + #DEFAULT_CatalogPath, "*.*")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rax,_S50
  PUSH   rax
  MOV    rcx,qword [v_PureBasicPath$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S48
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ExamineDirectory
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  AND    rax,rax
  JE    _EndIf273
; While NextDirectoryEntry(0)
_While274:
  PUSH   qword 0
  POP    rcx
  CALL   PB_NextDirectoryEntry
  AND    rax,rax
  JE    _Wend274
; If DirectoryEntryType(0) = 2
  PUSH   qword 0
  POP    rcx
  CALL   PB_DirectoryEntryType
  MOV    r15,rax
  CMP    r15,2
  JNE   _EndIf276
; If DirectoryEntryName(0) <> ".." And DirectoryEntryName(0) <> "."
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DirectoryEntryName
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S51
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    No16
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DirectoryEntryName
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S52
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    No16
Ok16:
  MOV    rax,1
  JMP    End16
No16:
  XOR    rax,rax
End16:
  AND    rax,rax
  JE    _EndIf278
; Directory$ = PureBasicPath$ + #DEFAULT_CatalogPath + DirectoryEntryName(0) + #Separator
  MOV    rcx,qword [v_PureBasicPath$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S48
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DirectoryEntryName
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S4
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; If ExamineDirectory(1, Directory$, "*.catalog")
  MOV    rax,_S49
  PUSH   rax
  PUSH   qword [rsp+48]
  PUSH   qword 1
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_ExamineDirectory
  AND    rax,rax
  JE    _EndIf280
; While NextDirectoryEntry(1)
_While281:
  PUSH   qword 1
  POP    rcx
  CALL   PB_NextDirectoryEntry
  AND    rax,rax
  JE    _Wend281
; If DirectoryEntryType(1) = 1
  PUSH   qword 1
  POP    rcx
  CALL   PB_DirectoryEntryType
  MOV    r15,rax
  CMP    r15,1
  JNE   _EndIf283
; GetLanguageInfo(Directory$ + DirectoryEntryName(1))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DirectoryEntryName
  ADD    rsp,32
  POP    rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure198
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf283:
; Wend
  JMP   _While281
_Wend281:
; 
; FinishDirectory(1)
  PUSH   qword 1
  POP    rcx
  CALL   PB_FinishDirectory
; EndIf
_EndIf280:
; EndIf   
_EndIf278:
; EndIf
_EndIf276:
; Wend
  JMP   _While274
_Wend274:
; 
; FinishDirectory(0)
  PUSH   qword 0
  POP    rcx
  CALL   PB_FinishDirectory
; EndIf
_EndIf273:
; 
; EndProcedure
_EndProcedureZero201:
  XOR    rax,rax
_EndProcedure201:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure VariableDebug_DebuggerEvent(*Debugger.DebuggerData)
_Procedure22:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS22=352
  MOV    rax,35
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; Shared *VariableGadget_Used.VariableGadget 
; 
; If *Debugger\Command\Command = #COMMAND_ControlVariableViewer
  MOV    rbp,qword [rsp+PS22+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,46
  JNE   _EndIf2200
; OpenVariableWindow(*Debugger)
  PUSH   qword [rsp+PS22+0]
  POP    rcx
  CALL  _Procedure42
; ProcedureReturn     
  JMP   _EndProcedure23
; EndIf
_EndIf2200:
; 
; 
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Variable] = 0
  MOV    rbp,qword [rsp+PS22+0]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+856]
  AND    r15,r15
  JNE   _EndIf2202
; ProcedureReturn 
  JMP   _EndProcedure23
; EndIf
_EndIf2202:
; 
; Select *Debugger\Command\Command
  MOV    rbp,qword [rsp+PS22+0]
  MOVSXD rax,dword [rbp+52]
  PUSH   rax
; 
; 
; Case #COMMAND_GlobalNames
  MOV    r15,13
  CMP    r15,[rsp]
  JNE   _Case203
; VariableGadget_Allocate(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global], *Debugger\Command\Value2)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2352]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure286
  ADD    rsp,40
; VariableGadget_Lock(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2352]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure278
  ADD    rsp,40
; VariableGadget_Use(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2352]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure290
  ADD    rsp,40
; 
; *Pointer = *Debugger\CommandData
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+48],rax
; For i = 1 To *Debugger\Command\Value2
  MOV    qword [rsp+56],1
  JMP   _ForSkipDebug2203
_For2203:
_ForSkipDebug2203:
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD rax,dword [rbp+64]
  CMP    rax,qword [rsp+56]
  JL    _Next2204
; type = PeekB(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+64],rax
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; dynamictype = PeekB(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+72],rax
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; scope = PeekB(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+80],rax
; ScopeName$ = ScopeName(scope)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure66
  ADD    rsp,48
  LEA    rcx,[rsp+96]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; sublevel = PeekL(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    qword [rsp+96],rax
; *Pointer + 4
  MOV    r15,qword [rsp+48]
  ADD    r15,4
  MOV    qword [rsp+48],r15
; name$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*pointer) + 1
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; mod$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+120]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*pointer) + 1
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; 
; VariableGadget_Add(type, dynamictype, sublevel, ScopeName$, name$, mod$, 0, *Debugger\Is64bit)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+128]
  PUSH   qword [rsp+144]
  PUSH   qword [rsp+128]
  PUSH   qword [rsp+128]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure292
  ADD    rsp,72
; Next i    
_NextContinue2204:
  INC    qword [rsp+56]
  JNO   _For2203
_Next2204:
; 
; VariableGadget_Unlock(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2352]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure280
  ADD    rsp,40
; VariableGadget_Sort(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2352]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure272
  ADD    rsp,40
; 
; 
; Case #COMMAND_Globals
  JMP   _EndSelect28
_Case203:
  MOV    r15,14
  CMP    r15,[rsp]
  JNE   _Case204
; VariableGadget_Lock(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2352]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure278
  ADD    rsp,40
; VariableGadget_Use(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2352]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure290
  ADD    rsp,40
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Progress], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2344]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; UpdateStep = *Debugger\Command\Value2 / 100
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r15,dword [rbp+64]
  MOV    rax,r15
  MOV    rcx,100
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    qword [rsp+120],r15
; NextUpdate = UpdateStep    
  PUSH   qword [rsp+120]
  POP    rax
  MOV    qword [rsp+128],rax
; Timeout.q  = ElapsedMilliseconds() + 750
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_ElapsedMilliseconds
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,750
  MOV    qword [rsp+136],r15
; ProgressVisible = 0
  MOV    qword [rsp+144],0
; 
; *Pointer = *Debugger\CommandData
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+48],rax
; For i = 1 To *Debugger\Command\Value2
  MOV    qword [rsp+56],1
  JMP   _ForSkipDebug2205
_For2205:
_ForSkipDebug2205:
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD rax,dword [rbp+64]
  CMP    rax,qword [rsp+56]
  JL    _Next2206
; type = PeekB(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+64],rax
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; 
; VariableGadget_Set(i-1, *Pointer, *Debugger\Is64bit, #False)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS22+24]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+72]
  MOV    r15,qword [rsp+88]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure298
  ADD    rsp,40
; *Pointer + GetValueSize(type, *Pointer, *Debugger\Is64bit)
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure246
  ADD    rsp,40
  ADD    r15,rax
  MOV    qword [rsp+48],r15
; 
; If i > NextUpdate And (ProgressVisible Or Timeout < ElapsedMilliseconds())
  MOV    r15,qword [rsp+56]
  CMP    r15,qword [rsp+128]
  JLE    No246
  CMP    qword [rsp+144],0
  JNE    Ok247
  MOV    r15,qword [rsp+136]
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_ElapsedMilliseconds
  ADD    rsp,40
  CMP    r15,rax
  JL     Ok247
  JMP    No247
Ok247:
  MOV    rax,1
  JMP    End247
No247:
  XOR    rax,rax
End247:
  AND    rax,rax
  JE     No246
Ok246:
  MOV    rax,1
  JMP    End246
No246:
  XOR    rax,rax
End246:
  AND    rax,rax
  JE    _EndIf2208
; If ProgressVisible = 0 And i < *Debugger\Command\Value2 / 2  
  MOV    r15,qword [rsp+144]
  AND    r15,r15
  JNE    No248
  MOV    r15,qword [rsp+56]
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r14,dword [rbp+64]
  MOV    rax,r14
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r14,rax
  CMP    r15,r14
  JGE    No248
Ok248:
  MOV    rax,1
  JMP    End248
No248:
  XOR    rax,rax
End248:
  AND    rax,rax
  JE    _EndIf2210
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Progress], #PB_ProgressBar_Maximum, *Debugger\Command\Value2)            
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS22+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2344]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetAttribute
  ADD    rsp,40
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global], 1)
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2352]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Splitter], #PB_Splitter_FirstGadget, *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2336]
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS22+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2328]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetAttribute
  ADD    rsp,40
; 
; ContainerWidth = GadgetWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2336]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetWidth
  ADD    rsp,40
  MOV    qword [rsp+152],rax
; ContainerHeight = GadgetHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2336]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetHeight
  ADD    rsp,40
  MOV    qword [rsp+160],rax
; If ContainerWidth > 20+300
  MOV    r15,qword [rsp+152]
  CMP    r15,320
  JLE   _EndIf2212
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Progress], (ContainerWidth-300) / 2, (ContainerHeight-20)/2, 300, 20)
  PUSH   qword 20
  PUSH   qword 300
  MOV    r15,qword [rsp+176]
  ADD    r15,-20
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+176]
  ADD    r15,-300
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS22+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2344]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,40
; Else
  JMP   _EndIf2211
_EndIf2212:
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Progress], 10, (ContainerHeight-20)/2, ContainerWidth-20, 20)
  PUSH   qword 20
  MOV    r15,qword [rsp+160]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+176]
  ADD    r15,-20
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS22+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2344]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,40
; EndIf            
_EndIf2211:
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2336]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; 
; ProgressVisible = 1
  MOV    qword [rsp+144],1
; EndIf    
_EndIf2210:
; 
; NextUpdate + UpdateStep
  MOV    r15,qword [rsp+128]
  ADD    r15,qword [rsp+120]
  MOV    qword [rsp+128],r15
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Progress], i)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2344]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; 
; FlushEvents() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure4
  ADD    rsp,40
; If *Debugger\Windows[#DEBUGGER_WINDOW_Variable] = 0
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+856]
  AND    r15,r15
  JNE   _EndIf2215
; ProcedureReturn 
  ADD    rsp,8
  JMP   _EndProcedure23
; EndIf 
_EndIf2215:
; EndIf 
_EndIf2208:
; Next i  
_NextContinue2206:
  INC    qword [rsp+56]
  JNO   _For2205
_Next2206:
; 
; If ProgressVisible
  CMP    qword [rsp+144],0
  JE    _EndIf2217
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Progress], *Debugger\Command\Value2)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2344]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; 
; FlushEvents() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure4
  ADD    rsp,40
; If *Debugger\Windows[#DEBUGGER_WINDOW_Variable] = 0
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+856]
  AND    r15,r15
  JNE   _EndIf2219
; ProcedureReturn 
  ADD    rsp,8
  JMP   _EndProcedure23
; EndIf 
_EndIf2219:
; EndIf
_EndIf2217:
; 
; VariableGadget_SyncAll() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure294
  ADD    rsp,40
; VariableGadget_Sort(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2352]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure272
  ADD    rsp,40
; 
; If ProgressVisible
  CMP    qword [rsp+144],0
  JE    _EndIf2221
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer], 1)          
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2336]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Splitter], #PB_Splitter_FirstGadget, *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2352]
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS22+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2328]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetAttribute
  ADD    rsp,40
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2352]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; EndIf   
_EndIf2221:
; 
; VariableGadget_Unlock(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2352]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure280
  ADD    rsp,40
; 
; 
; Case #COMMAND_Locals 
  JMP   _EndSelect28
_Case204:
  MOV    r15,15
  CMP    r15,[rsp]
  JNE   _Case205
; VariableGadget_Allocate(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Local], *Debugger\Command\Value2)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2360]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure286
  ADD    rsp,40
; VariableGadget_Lock(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Local])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2360]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure278
  ADD    rsp,40
; VariableGadget_Use(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Local])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2360]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure290
  ADD    rsp,40
; *VariableGadget_Used\CustomData = *Debugger\Command\Value1
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
  MOV    rbp,qword [p_VariableGadget_Used]
  POP    rax
  MOV    qword [rbp+24],rax
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Progress], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2344]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; UpdateStep = *Debugger\Command\Value2 / 100
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r15,dword [rbp+64]
  MOV    rax,r15
  MOV    rcx,100
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    qword [rsp+120],r15
; NextUpdate = UpdateStep    
  PUSH   qword [rsp+120]
  POP    rax
  MOV    qword [rsp+128],rax
; Timeout.q  = ElapsedMilliseconds() + 750
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_ElapsedMilliseconds
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,750
  MOV    qword [rsp+136],r15
; ProgressVisible = 0
  MOV    qword [rsp+144],0
; 
; *Pointer = *Debugger\CommandData
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+48],rax
; For i = 1 To *Debugger\Command\Value2
  MOV    qword [rsp+56],1
  JMP   _ForSkipDebug2222
_For2222:
_ForSkipDebug2222:
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD rax,dword [rbp+64]
  CMP    rax,qword [rsp+56]
  JL    _Next2223
; type = PeekB(*Pointer) & ~(1<<6) 
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,-65
  MOV    qword [rsp+64],r15
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; dynamictype = PeekB(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+72],rax
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; scope = PeekB(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+80],rax
; ScopeName$ = ScopeName(scope)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure66
  ADD    rsp,48
  LEA    rcx,[rsp+96]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; sublevel = PeekL(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    qword [rsp+96],rax
; *Pointer + 4
  MOV    r15,qword [rsp+48]
  ADD    r15,4
  MOV    qword [rsp+48],r15
; name$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; 
; VariableGadget_Add(type, dynamictype, sublevel, ScopeName$, name$, "", *Pointer, *Debugger\Is64bit)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+128]
  PUSH   qword [rsp+144]
  PUSH   qword [rsp+128]
  PUSH   qword [rsp+128]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure292
  ADD    rsp,72
; *Pointer + GetValueSize(type, *Pointer, *Debugger\Is64bit)                                                          
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure246
  ADD    rsp,40
  ADD    r15,rax
  MOV    qword [rsp+48],r15
; 
; If i > NextUpdate And (ProgressVisible Or Timeout < ElapsedMilliseconds())
  MOV    r15,qword [rsp+56]
  CMP    r15,qword [rsp+128]
  JLE    No249
  CMP    qword [rsp+144],0
  JNE    Ok250
  MOV    r15,qword [rsp+136]
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_ElapsedMilliseconds
  ADD    rsp,40
  CMP    r15,rax
  JL     Ok250
  JMP    No250
Ok250:
  MOV    rax,1
  JMP    End250
No250:
  XOR    rax,rax
End250:
  AND    rax,rax
  JE     No249
Ok249:
  MOV    rax,1
  JMP    End249
No249:
  XOR    rax,rax
End249:
  AND    rax,rax
  JE    _EndIf2225
; If ProgressVisible = 0 And i < *Debugger\Command\Value2 / 2  
  MOV    r15,qword [rsp+144]
  AND    r15,r15
  JNE    No251
  MOV    r15,qword [rsp+56]
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r14,dword [rbp+64]
  MOV    rax,r14
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r14,rax
  CMP    r15,r14
  JGE    No251
Ok251:
  MOV    rax,1
  JMP    End251
No251:
  XOR    rax,rax
End251:
  AND    rax,rax
  JE    _EndIf2227
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Progress], #PB_ProgressBar_Maximum, *Debugger\Command\Value2)            
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS22+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2344]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetAttribute
  ADD    rsp,40
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Local], 1)
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2360]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Splitter], #PB_Splitter_SecondGadget, *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2336]
  PUSH   qword 4
  MOV    rbp,qword [rsp+PS22+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2328]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetAttribute
  ADD    rsp,40
; 
; ContainerWidth = GadgetWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2336]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetWidth
  ADD    rsp,40
  MOV    qword [rsp+152],rax
; ContainerHeight = GadgetHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2336]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetHeight
  ADD    rsp,40
  MOV    qword [rsp+160],rax
; If ContainerWidth > 20+300
  MOV    r15,qword [rsp+152]
  CMP    r15,320
  JLE   _EndIf2229
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Progress], (ContainerWidth-300) / 2, (ContainerHeight-20)/2, 300, 20)
  PUSH   qword 20
  PUSH   qword 300
  MOV    r15,qword [rsp+176]
  ADD    r15,-20
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+176]
  ADD    r15,-300
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS22+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2344]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,40
; Else
  JMP   _EndIf2228
_EndIf2229:
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Progress], 10, (ContainerHeight-20)/2, ContainerWidth-20, 20)
  PUSH   qword 20
  MOV    r15,qword [rsp+160]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+176]
  ADD    r15,-20
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS22+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2344]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,40
; EndIf            
_EndIf2228:
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2336]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; 
; ProgressVisible = 1
  MOV    qword [rsp+144],1
; EndIf           
_EndIf2227:
; 
; NextUpdate + UpdateStep
  MOV    r15,qword [rsp+128]
  ADD    r15,qword [rsp+120]
  MOV    qword [rsp+128],r15
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Progress], i)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2344]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; 
; FlushEvents() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure4
  ADD    rsp,40
; If *Debugger\Windows[#DEBUGGER_WINDOW_Variable] = 0
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+856]
  AND    r15,r15
  JNE   _EndIf2232
; ProcedureReturn 
  ADD    rsp,8
  JMP   _EndProcedure23
; EndIf 
_EndIf2232:
; EndIf         
_EndIf2225:
; Next i  
_NextContinue2223:
  INC    qword [rsp+56]
  JNO   _For2222
_Next2223:
; 
; VariableGadget_Sort(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Local])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2360]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure272
  ADD    rsp,40
; 
; If ProgressVisible
  CMP    qword [rsp+144],0
  JE    _EndIf2234
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer], 1)          
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2336]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Splitter], #PB_Splitter_SecondGadget, *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Local])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2360]
  PUSH   qword 4
  MOV    rbp,qword [rsp+PS22+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2328]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetAttribute
  ADD    rsp,40
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Local], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2360]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; EndIf   
_EndIf2234:
; 
; VariableGadget_Unlock(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Local])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2360]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure280
  ADD    rsp,40
; 
; 
; 
; Case #COMMAND_ArrayInfo                    
  JMP   _EndSelect28
_Case205:
  MOV    r15,16
  CMP    r15,[rsp]
  JNE   _Case206
; *Pointer = *Debugger\CommandData
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+48],rax
; 
; If *Debugger\Command\Value1 
  MOV    rbp,qword [rsp+PS22+8]
  CMP    dword [rbp+60],0
  JE    _EndIf2236
; Gadget   = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ArrayInfo]    
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2376]
  POP    rax
  MOV    qword [rsp+168],rax
; OldState = -1
  MOV    qword [rsp+176],-1
; 
; 
; 
; 
; If CountGadgetItems(Gadget) = 0
  SUB    rsp,8
  PUSH   qword [rsp+176]
  POP    rcx
  SUB    rsp,32
  CALL   PB_CountGadgetItems
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf2238
; AddNew = 1
  MOV    qword [rsp+184],1
; Else
  JMP   _EndIf2237
_EndIf2238:
; AddNew = 0    
  MOV    qword [rsp+184],0
; Protected Dim InfoStrings$(*Debugger\Command\Value2)
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD rax,dword [rbp+64]
  INC    rax
  SUB    rsp,16
  MOV    rdx,rax
  LEA    rax,[rsp+208]
  PUSH   rax
  MOV    r9,s_s
  MOV    r8,8
  MOV    rcx,8
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,56
  MOV    qword [rsp+192],rax
; EndIf        
_EndIf2237:
; Else        
  JMP   _EndIf2235
_EndIf2236:
; Gadget   = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalArrayInfo]
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2384]
  POP    rax
  MOV    qword [rsp+168],rax
; OldState = GetGadgetState(Gadget)      
  SUB    rsp,8
  PUSH   qword [rsp+176]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    qword [rsp+176],rax
; ClearGadgetItems(Gadget)
  SUB    rsp,8
  PUSH   qword [rsp+176]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ClearGadgetItems
  ADD    rsp,40
; AddNew = 1
  MOV    qword [rsp+184],1
; EndIf
_EndIf2235:
; 
; For i = 0 To *Debugger\Command\Value2-1
  MOV    qword [rsp+56],0
  JMP   _ForSkipDebug2241
_For2241:
_ForSkipDebug2241:
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r15,dword [rbp+64]
  DEC    r15
  CMP    r15,qword [rsp+56]
  JL    _Next2242
; Name$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1    
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; 
; ModName$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+216]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1    
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; 
; Dimensions$ = PeekAscii(*Pointer)    
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+224]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1    
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; 
; type = PeekB(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+64],rax
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; 
; 
; scope = PeekB(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+80],rax
; ScopeName$ = ScopeName(scope, type)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure66
  ADD    rsp,48
  LEA    rcx,[rsp+96]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; 
; If IS_POINTER(type)
  MOV    r15,qword [rsp+64]
  AND    r15,128
  AND    r15,r15
  JE    _EndIf2244
; Name$ = "*" + Name$
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S100
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+112]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf          
_EndIf2244:
; 
; If *Debugger\Command\Value1 = 0 
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r15,dword [rbp+60]
  AND    r15,r15
  JNE   _EndIf2246
; AddGadgetItem(Gadget, i, ScopeName$+Chr(10)+ModuleName(Name$, ModName$)+Dimensions$, ImageID(VariableGadget_Icons(type & #TYPEMASK)))
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+72]
  AND    r15,63
  MOV    rbp,qword [a_VariableGadget_Icons]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  MOV    rcx,qword [rsp+104]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+248]
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure68
  ADD    rsp,40
  POP    rax
  MOV    rcx,qword [rsp+240]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+200]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; SetGadgetItemData(Gadget, i, i) 
  SUB    rsp,8
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+192]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetItemData
  ADD    rsp,40
; 
; ElseIf AddNew        
  JMP   _EndIf2245
_EndIf2246:
  CMP    qword [rsp+184],0
  JE    _EndIf2247
; AddGadgetItem(Gadget, i, ScopeName$+Chr(10)+ModuleName(Name$, ModName$)+Dimensions$, ImageID(VariableGadget_Icons(type & #TYPEMASK)))
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+72]
  AND    r15,63
  MOV    rbp,qword [a_VariableGadget_Icons]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  MOV    rcx,qword [rsp+104]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+248]
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure68
  ADD    rsp,40
  POP    rax
  MOV    rcx,qword [rsp+240]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+200]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; SetGadgetItemData(Gadget, i, i) 
  SUB    rsp,8
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+192]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetItemData
  ADD    rsp,40
; 
; Else
  JMP   _EndIf2245
_EndIf2247:
; InfoStrings$(i) = ModuleName(Name$, ModName$)+Dimensions$ 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+232]
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure68
  ADD    rsp,48
  MOV    rcx,qword [rsp+224]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [rsp+200]
  SAL    r15,3
  LEA    rcx,[rbp+r15]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; EndIf
_EndIf2245:
; Next i
_NextContinue2242:
  INC    qword [rsp+56]
  JNO   _For2241
_Next2242:
; 
; 
; 
; 
; If AddNew = 0
  MOV    r15,qword [rsp+184]
  AND    r15,r15
  JNE   _EndIf2250
; For i = 0 To *Debugger\Command\Value2-1
  MOV    qword [rsp+56],0
  JMP   _ForSkipDebug2251
_For2251:
_ForSkipDebug2251:
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r15,dword [rbp+64]
  DEC    r15
  CMP    r15,qword [rsp+56]
  JL    _Next2252
; SetGadgetItemText(Gadget, i, InfoStrings$(GetGadgetItemData(Gadget, i)), 1)
  SUB    rsp,8
  PUSH   qword 1
  SUB    rsp,8
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+200]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetItemData
  ADD    rsp,40
  MOV    r15,rax
  MOV    rbp,qword [rsp+208]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+200]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
; Next i
_NextContinue2252:
  INC    qword [rsp+56]
  JNO   _For2251
_Next2252:
; EndIf
_EndIf2250:
; 
; If OldState <> -1 
  MOV    r15,qword [rsp+176]
  CMP    r15,-1
  JE    _EndIf2254
; SetGadgetState(Gadget, OldState)
  SUB    rsp,8
  PUSH   qword [rsp+184]
  PUSH   qword [rsp+184]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; EndIf    
_EndIf2254:
; 
; VariableWindowSort(*Debugger, Gadget)    
  SUB    rsp,8
  PUSH   qword [rsp+176]
  PUSH   qword [rsp+PS22+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure490
  ADD    rsp,40
; 
; 
; 
; Case #COMMAND_ListInfo
  JMP   _EndSelect28
_Case206:
  MOV    r15,18
  CMP    r15,[rsp]
  JNE   _Case207
; *Pointer = *Debugger\CommandData
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+48],rax
; 
; If *Debugger\Command\Value1 
  MOV    rbp,qword [rsp+PS22+8]
  CMP    dword [rbp+60],0
  JE    _EndIf2256
; Gadget   = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListInfo]    
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2408]
  POP    rax
  MOV    qword [rsp+168],rax
; OldState = -1
  MOV    qword [rsp+176],-1
; 
; 
; 
; 
; If CountGadgetItems(Gadget) = 0
  SUB    rsp,8
  PUSH   qword [rsp+176]
  POP    rcx
  SUB    rsp,32
  CALL   PB_CountGadgetItems
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf2258
; AddNew = 1
  MOV    qword [rsp+184],1
; Else
  JMP   _EndIf2257
_EndIf2258:
; AddNew = 0     
  MOV    qword [rsp+184],0
; Protected Dim InfoStrings$(*Debugger\Command\Value2)
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD rax,dword [rbp+64]
  INC    rax
  SUB    rsp,16
  MOV    rdx,rax
  LEA    rax,[rsp+208]
  PUSH   rax
  MOV    r9,s_s
  MOV    r8,8
  MOV    rcx,8
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,56
  MOV    qword [rsp+192],rax
; EndIf
_EndIf2257:
; Else
  JMP   _EndIf2255
_EndIf2256:
; Gadget   = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalListInfo]
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2416]
  POP    rax
  MOV    qword [rsp+168],rax
; OldState = GetGadgetState(Gadget)      
  SUB    rsp,8
  PUSH   qword [rsp+176]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    qword [rsp+176],rax
; ClearGadgetItems(Gadget)
  SUB    rsp,8
  PUSH   qword [rsp+176]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ClearGadgetItems
  ADD    rsp,40
; AddNew = 1
  MOV    qword [rsp+184],1
; EndIf
_EndIf2255:
; 
; For i = 0 To *Debugger\Command\Value2-1
  MOV    qword [rsp+56],0
  JMP   _ForSkipDebug2261
_For2261:
_ForSkipDebug2261:
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r15,dword [rbp+64]
  DEC    r15
  CMP    r15,qword [rsp+56]
  JL    _Next2262
; Name$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1    
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; 
; ModName$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+216]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1   
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; 
; type = PeekB(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+64],rax
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; 
; 
; scope = PeekB(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+80],rax
; ScopeName$ = ScopeName(scope, type)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure66
  ADD    rsp,48
  LEA    rcx,[rsp+96]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; 
; If IS_POINTER(type)
  MOV    r15,qword [rsp+64]
  AND    r15,128
  AND    r15,r15
  JE    _EndIf2264
; Name$ = "*" + Name$
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S100
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+112]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf  
_EndIf2264:
; Name$ + "()" 
  MOV    rcx,qword [rsp+104]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S244
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS22+8]
  CMP    dword [rbp+32],0
  JE    _EndIf2266
; If PeekQ(*Pointer) = -1
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JNE   _EndIf2268
; Size$ = "-"
  MOV    rdx,_S38
  LEA    rcx,[rsp+224]
  SUB    rsp,40
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,40
; Else
  JMP   _EndIf2267
_EndIf2268:
; Size$ = Str(PeekQ(*Pointer))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  LEA    rcx,[rsp+232]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf2267:
; *Pointer + 8
  MOV    r15,qword [rsp+48]
  ADD    r15,8
  MOV    qword [rsp+48],r15
; 
; If PeekQ(*Pointer) = -1
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JNE   _EndIf2271
; Current$ = "-"
  MOV    rdx,_S38
  LEA    rcx,[rsp+232]
  SUB    rsp,40
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,40
; Else
  JMP   _EndIf2270
_EndIf2271:
; Current$ = Str(PeekQ(*Pointer))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  LEA    rcx,[rsp+240]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf2270:
; *Pointer + 8         
  MOV    r15,qword [rsp+48]
  ADD    r15,8
  MOV    qword [rsp+48],r15
; Else
  JMP   _EndIf2265
_EndIf2266:
; If PeekL(*Pointer) = -1
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JNE   _EndIf2275
; Size$ = "-"
  MOV    rdx,_S38
  LEA    rcx,[rsp+224]
  SUB    rsp,40
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,40
; Else
  JMP   _EndIf2274
_EndIf2275:
; Size$ = Str(PeekL(*Pointer))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  LEA    rcx,[rsp+232]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf2274:
; *Pointer + 4
  MOV    r15,qword [rsp+48]
  ADD    r15,4
  MOV    qword [rsp+48],r15
; 
; If PeekL(*Pointer) = -1
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JNE   _EndIf2278
; Current$ = "-"
  MOV    rdx,_S38
  LEA    rcx,[rsp+232]
  SUB    rsp,40
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,40
; Else
  JMP   _EndIf2277
_EndIf2278:
; Current$ = Str(PeekL(*Pointer))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  LEA    rcx,[rsp+240]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf2277:
; *Pointer + 4     
  MOV    r15,qword [rsp+48]
  ADD    r15,4
  MOV    qword [rsp+48],r15
; EndIf
_EndIf2265:
; 
; If *Debugger\Command\Value1 = 0 
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r15,dword [rbp+60]
  AND    r15,r15
  JNE   _EndIf2281
; AddGadgetItem(Gadget, i, ScopeName$+Chr(10)+ModuleName(Name$, ModName$)+Chr(10)+Size$+Chr(10)+Current$, ImageID(VariableGadget_Icons(type & #TYPEMASK)))
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+72]
  AND    r15,63
  MOV    rbp,qword [a_VariableGadget_Icons]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  MOV    rcx,qword [rsp+104]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+248]
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure68
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+248]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+256]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+200]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; SetGadgetItemData(Gadget, i, i) 
  SUB    rsp,8
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+192]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetItemData
  ADD    rsp,40
; 
; ElseIf AddNew       
  JMP   _EndIf2280
_EndIf2281:
  CMP    qword [rsp+184],0
  JE    _EndIf2282
; AddGadgetItem(Gadget, i, ScopeName$+Chr(10)+ModuleName(Name$, ModName$)+Chr(10)+Size$+Chr(10)+Current$, ImageID(VariableGadget_Icons(type & #TYPEMASK)))
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+72]
  AND    r15,63
  MOV    rbp,qword [a_VariableGadget_Icons]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  MOV    rcx,qword [rsp+104]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+248]
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure68
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+248]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+256]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+200]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; SetGadgetItemData(Gadget, i, i) 
  SUB    rsp,8
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+192]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetItemData
  ADD    rsp,40
; 
; Else
  JMP   _EndIf2280
_EndIf2282:
; 
; InfoStrings$(i) = Size$ + Chr(10) + Current$
  MOV    rcx,qword [rsp+224]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+240]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [rsp+200]
  SAL    r15,3
  LEA    rcx,[rbp+r15]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf2280:
; Next i
_NextContinue2262:
  INC    qword [rsp+56]
  JNO   _For2261
_Next2262:
; 
; 
; 
; 
; If AddNew = 0
  MOV    r15,qword [rsp+184]
  AND    r15,r15
  JNE   _EndIf2285
; For i = 0 To *Debugger\Command\Value2-1
  MOV    qword [rsp+56],0
  JMP   _ForSkipDebug2286
_For2286:
_ForSkipDebug2286:
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r15,dword [rbp+64]
  DEC    r15
  CMP    r15,qword [rsp+56]
  JL    _Next2287
; index = GetGadgetItemData(Gadget, i)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+184]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetItemData
  ADD    rsp,40
  MOV    qword [rsp+240],rax
; SetGadgetItemText(Gadget, i, StringField(InfoStrings$(index), 1, Chr(10)), 2)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S88
  PUSH   rax
  PUSH   qword 1
  MOV    r15,qword [rsp+288]
  MOV    rbp,qword [rsp+240]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+200]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; SetGadgetItemText(Gadget, i, StringField(InfoStrings$(index), 2, Chr(10)), 3)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 3
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S88
  PUSH   rax
  PUSH   qword 2
  MOV    r15,qword [rsp+288]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+200]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Next i
_NextContinue2287:
  INC    qword [rsp+56]
  JNO   _For2286
_Next2287:
; EndIf
_EndIf2285:
; 
; If OldState <> -1 
  MOV    r15,qword [rsp+176]
  CMP    r15,-1
  JE    _EndIf2289
; SetGadgetState(Gadget, OldState)
  SUB    rsp,8
  PUSH   qword [rsp+184]
  PUSH   qword [rsp+184]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; EndIf
_EndIf2289:
; 
; VariableWindowSort(*Debugger, Gadget)    
  SUB    rsp,8
  PUSH   qword [rsp+176]
  PUSH   qword [rsp+PS22+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure490
  ADD    rsp,40
; 
; 
; Case #COMMAND_MapInfo
  JMP   _EndSelect28
_Case207:
  MOV    r15,20
  CMP    r15,[rsp]
  JNE   _Case208
; *Pointer = *Debugger\CommandData
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+48],rax
; 
; If *Debugger\Command\Value1 
  MOV    rbp,qword [rsp+PS22+8]
  CMP    dword [rbp+60],0
  JE    _EndIf2291
; Gadget   = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapInfo]    
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2440]
  POP    rax
  MOV    qword [rsp+168],rax
; OldState = -1
  MOV    qword [rsp+176],-1
; 
; 
; 
; 
; If CountGadgetItems(Gadget) = 0
  SUB    rsp,8
  PUSH   qword [rsp+176]
  POP    rcx
  SUB    rsp,32
  CALL   PB_CountGadgetItems
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf2293
; AddNew = 1
  MOV    qword [rsp+184],1
; Else
  JMP   _EndIf2292
_EndIf2293:
; AddNew = 0     
  MOV    qword [rsp+184],0
; Protected Dim InfoStrings$(*Debugger\Command\Value2)
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD rax,dword [rbp+64]
  INC    rax
  SUB    rsp,16
  MOV    rdx,rax
  LEA    rax,[rsp+208]
  PUSH   rax
  MOV    r9,s_s
  MOV    r8,8
  MOV    rcx,8
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,56
  MOV    qword [rsp+192],rax
; EndIf
_EndIf2292:
; Else
  JMP   _EndIf2290
_EndIf2291:
; Gadget   = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalMapInfo]
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2448]
  POP    rax
  MOV    qword [rsp+168],rax
; OldState = GetGadgetState(Gadget)      
  SUB    rsp,8
  PUSH   qword [rsp+176]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    qword [rsp+176],rax
; ClearGadgetItems(Gadget)
  SUB    rsp,8
  PUSH   qword [rsp+176]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ClearGadgetItems
  ADD    rsp,40
; AddNew = 1
  MOV    qword [rsp+184],1
; EndIf
_EndIf2290:
; 
; For i = 0 To *Debugger\Command\Value2-1
  MOV    qword [rsp+56],0
  JMP   _ForSkipDebug2296
_For2296:
_ForSkipDebug2296:
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r15,dword [rbp+64]
  DEC    r15
  CMP    r15,qword [rsp+56]
  JL    _Next2297
; Name$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1    
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; 
; ModName$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+216]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1   
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; 
; type = PeekB(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+64],rax
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; 
; 
; scope = PeekB(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+80],rax
; ScopeName$ = ScopeName(scope, type)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure66
  ADD    rsp,48
  LEA    rcx,[rsp+96]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; 
; If IS_POINTER(type)
  MOV    r15,qword [rsp+64]
  AND    r15,128
  AND    r15,r15
  JE    _EndIf2299
; Name$ = "*" + Name$
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S100
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+112]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf  
_EndIf2299:
; Name$ + "()" 
  MOV    rcx,qword [rsp+104]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S244
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS22+8]
  CMP    dword [rbp+32],0
  JE    _EndIf2301
; If PeekQ(*Pointer) = -1
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JNE   _EndIf2303
; Size$ = "-"
  MOV    rdx,_S38
  LEA    rcx,[rsp+224]
  SUB    rsp,40
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,40
; Else
  JMP   _EndIf2302
_EndIf2303:
; Size$ = Str(PeekQ(*Pointer))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  LEA    rcx,[rsp+232]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf2302:
; *Pointer + 8        
  MOV    r15,qword [rsp+48]
  ADD    r15,8
  MOV    qword [rsp+48],r15
; Else
  JMP   _EndIf2300
_EndIf2301:
; If PeekL(*Pointer) = -1
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JNE   _EndIf2307
; Size$ = "-"
  MOV    rdx,_S38
  LEA    rcx,[rsp+224]
  SUB    rsp,40
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,40
; Else
  JMP   _EndIf2306
_EndIf2307:
; Size$ = Str(PeekL(*Pointer))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  LEA    rcx,[rsp+232]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf2306:
; *Pointer + 4   
  MOV    r15,qword [rsp+48]
  ADD    r15,4
  MOV    qword [rsp+48],r15
; EndIf
_EndIf2300:
; 
; IsCurrent = PeekB(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+248],rax
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; 
; If IsCurrent
  CMP    qword [rsp+248],0
  JE    _EndIf2310
; Current$ = Chr(34)+PeekS(*Pointer)+Chr(34) 
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S99
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S99
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+240]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + (MemoryStringLength(*Pointer) + 1) * #CharSize
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_MemoryStringLength
  ADD    rsp,40
  MOV    r14,rax
  INC    r14
  ADD    r14,r14
  ADD    r15,r14
  MOV    qword [rsp+48],r15
; Else
  JMP   _EndIf2309
_EndIf2310:
; Current$ = "-"
  MOV    rdx,_S38
  LEA    rcx,[rsp+232]
  SUB    rsp,40
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,40
; EndIf
_EndIf2309:
; 
; If *Debugger\Command\Value1 = 0 
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r15,dword [rbp+60]
  AND    r15,r15
  JNE   _EndIf2313
; AddGadgetItem(Gadget, i, ScopeName$+Chr(10)+ModuleName(Name$, ModName$)+Chr(10)+Size$+Chr(10)+Current$, ImageID(VariableGadget_Icons(type & #TYPEMASK)))
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+72]
  AND    r15,63
  MOV    rbp,qword [a_VariableGadget_Icons]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  MOV    rcx,qword [rsp+104]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+248]
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure68
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+248]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+256]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+200]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; SetGadgetItemData(Gadget, i, i) 
  SUB    rsp,8
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+192]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetItemData
  ADD    rsp,40
; 
; ElseIf AddNew       
  JMP   _EndIf2312
_EndIf2313:
  CMP    qword [rsp+184],0
  JE    _EndIf2314
; AddGadgetItem(Gadget, i, ScopeName$+Chr(10)+ModuleName(Name$, ModName$)+Chr(10)+Size$+Chr(10)+Current$, ImageID(VariableGadget_Icons(type & #TYPEMASK)))
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+72]
  AND    r15,63
  MOV    rbp,qword [a_VariableGadget_Icons]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  MOV    rcx,qword [rsp+104]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+248]
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure68
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+248]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+256]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+200]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; SetGadgetItemData(Gadget, i, i) 
  SUB    rsp,8
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+192]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetItemData
  ADD    rsp,40
; 
; Else
  JMP   _EndIf2312
_EndIf2314:
; 
; InfoStrings$(i) = Size$ + Chr(10) + Current$
  MOV    rcx,qword [rsp+224]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+240]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [rsp+200]
  SAL    r15,3
  LEA    rcx,[rbp+r15]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf2312:
; Next i
_NextContinue2297:
  INC    qword [rsp+56]
  JNO   _For2296
_Next2297:
; 
; 
; 
; 
; If AddNew = 0
  MOV    r15,qword [rsp+184]
  AND    r15,r15
  JNE   _EndIf2317
; For i = 0 To *Debugger\Command\Value2-1
  MOV    qword [rsp+56],0
  JMP   _ForSkipDebug2318
_For2318:
_ForSkipDebug2318:
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r15,dword [rbp+64]
  DEC    r15
  CMP    r15,qword [rsp+56]
  JL    _Next2319
; index = GetGadgetItemData(Gadget, i)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+184]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetItemData
  ADD    rsp,40
  MOV    qword [rsp+240],rax
; SetGadgetItemText(Gadget, i, StringField(InfoStrings$(index), 1, Chr(10)), 2)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S88
  PUSH   rax
  PUSH   qword 1
  MOV    r15,qword [rsp+288]
  MOV    rbp,qword [rsp+240]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+200]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; SetGadgetItemText(Gadget, i, StringField(InfoStrings$(index), 2, Chr(10)), 3)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 3
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S88
  PUSH   rax
  PUSH   qword 2
  MOV    r15,qword [rsp+288]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+200]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Next i
_NextContinue2319:
  INC    qword [rsp+56]
  JNO   _For2318
_Next2319:
; EndIf
_EndIf2317:
; 
; If OldState <> -1 
  MOV    r15,qword [rsp+176]
  CMP    r15,-1
  JE    _EndIf2321
; SetGadgetState(Gadget, OldState)
  SUB    rsp,8
  PUSH   qword [rsp+184]
  PUSH   qword [rsp+184]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; EndIf
_EndIf2321:
; 
; VariableWindowSort(*Debugger, Gadget)      
  SUB    rsp,8
  PUSH   qword [rsp+176]
  PUSH   qword [rsp+PS22+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure490
  ADD    rsp,40
; 
; 
; Case #COMMAND_ListData
  JMP   _EndSelect28
_Case208:
  MOV    r15,19
  CMP    r15,[rsp]
  JNE   _Case209
; If *Debugger\Command\Value1 = 0 
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r15,dword [rbp+60]
  AND    r15,r15
  JNE   _EndIf2323
; MessageRequester(Language("Debugger", "ViewArrayList"), PeekAsciiLength(*Debugger\CommandData, *Debugger\Command\DataSize))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  MOV    rbp,qword [rsp+PS22+48]
  MOVSXD rax,dword [rbp+56]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS22+56]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S246
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MessageRequester
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; 
; Else 
  JMP   _EndIf2322
_EndIf2323:
; 
; 
; If GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel]) <> 4
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2320]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,4
  JE    _EndIf2326
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel], 4)
  SUB    rsp,8
  PUSH   qword 4
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2320]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; 
; FlushEvents() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure4
  ADD    rsp,40
; If *Debugger\Windows[#DEBUGGER_WINDOW_Variable] = 0
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+856]
  AND    r15,r15
  JNE   _EndIf2328
; ProcedureReturn 
  ADD    rsp,8
  JMP   _EndProcedure23
; EndIf 
_EndIf2328:
; EndIf
_EndIf2326:
; 
; VariableGadget_Allocate(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer], *Debugger\Command\Value2)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure286
  ADD    rsp,40
; VariableGadget_Lock(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure278
  ADD    rsp,40
; VariableGadget_Use(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer])       
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure290
  ADD    rsp,40
; type = *Debugger\Command\Value1  
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+64],rax
; *pointer = *Debugger\CommandData
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+48],rax
; 
; RealName$ = PeekS(*pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,32
  LEA    rcx,[rsp+264]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *pointer + MemoryStringLengthBytes(*pointer) + #CharSize
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_MemoryStringLength
  ADD    rsp,40
  MOV    r14,rax
  ADD    r14,r14
  ADD    r15,r14
  ADD    r15,2
  MOV    qword [rsp+48],r15
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_InputName], RealName$)
  SUB    rsp,8
  PUSH   qword [rsp+264]
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2512]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
; 
; 
; For i = Len(RealName$) To 1 Step -1
  SUB    rsp,8
  PUSH   qword [rsp+264]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    qword [rsp+56],rax
  JMP   _ForSkipDebug2329
_For2329:
_ForSkipDebug2329:
  MOV    rax,1
  CMP    rax,qword [rsp+56]
  JG    _Next2330
; If Mid(RealName$, i, 1) = "("
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+288]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S93
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _EndIf2332
; RealName$ = Trim(Left(RealName$, i-1))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+88]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+296]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,32
  LEA    rcx,[rsp+264]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Break
  JMP   _Next2330
; EndIf
_EndIf2332:
; Next i
_NextContinue2330:
  DEC    qword [rsp+56]
  JNO   _For2329
_Next2330:
; 
; If IS_STRUCTURE(type) And Not IS_POINTER(type)
  MOV    r15,qword [rsp+64]
  AND    r15,63
  CMP    r15,7
  JNE    No252
  MOV    r15,qword [rsp+64]
  AND    r15,128
  AND    r15,r15
  JE     No253
  XOR    rax,rax
  JMP    Ok253
No253:
  MOV    rax,1
Ok253:
  AND    rax,rax
  JE     No252
Ok252:
  MOV    rax,1
  JMP    End252
No252:
  XOR    rax,rax
End252:
  AND    rax,rax
  JE    _EndIf2334
; *map = *pointer
  PUSH   qword [rsp+48]
  POP    rax
  MOV    qword [rsp+264],rax
; While PeekB(*pointer) <> -1
_While2335:
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JE    _Wend2335
; *pointer + 6
  MOV    r15,qword [rsp+48]
  ADD    r15,6
  MOV    qword [rsp+48],r15
; *pointer + MemoryAsciiLength(*pointer) + 1
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; Wend
  JMP   _While2335
_Wend2335:
; *pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; EndIf             
_EndIf2334:
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerProgress], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2560]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; UpdateStep = *Debugger\Command\Value2 / 100
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r15,dword [rbp+64]
  MOV    rax,r15
  MOV    rcx,100
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    qword [rsp+120],r15
; NextUpdate = UpdateStep    
  PUSH   qword [rsp+120]
  POP    rax
  MOV    qword [rsp+128],rax
; Timeout.q  = ElapsedMilliseconds() + 750
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_ElapsedMilliseconds
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,750
  MOV    qword [rsp+136],r15
; ProgressVisible = 0
  MOV    qword [rsp+144],0
; 
; LinesAdded = 0               
  MOV    qword [rsp+272],0
; While *pointer < *Debugger\CommandData + *Debugger\Command\DataSize
_While2336:
  MOV    r15,qword [rsp+48]
  MOV    rbp,qword [rsp+PS22+8]
  MOV    r14,qword [rbp+72]
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD rax,dword [rbp+56]
  ADD    r14,rax
  CMP    r15,r14
  JGE   _Wend2336
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS22+8]
  CMP    dword [rbp+32],0
  JE    _EndIf2338
; index$= Str(PeekQ(*pointer))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  LEA    rcx,[rsp+288]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *pointer + 8
  MOV    r15,qword [rsp+48]
  ADD    r15,8
  MOV    qword [rsp+48],r15
; Else
  JMP   _EndIf2337
_EndIf2338:
; index$ = Str(PeekL(*pointer))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  LEA    rcx,[rsp+288]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *pointer + 4
  MOV    r15,qword [rsp+48]
  ADD    r15,4
  MOV    qword [rsp+48],r15
; EndIf
_EndIf2337:
; 
; If IS_STRUCTURE(type) And Not IS_POINTER(type)
  MOV    r15,qword [rsp+64]
  AND    r15,63
  CMP    r15,7
  JNE    No254
  MOV    r15,qword [rsp+64]
  AND    r15,128
  AND    r15,r15
  JE     No255
  XOR    rax,rax
  JMP    Ok255
No255:
  MOV    rax,1
Ok255:
  AND    rax,rax
  JE     No254
Ok254:
  MOV    rax,1
  JMP    End254
No254:
  XOR    rax,rax
End254:
  AND    rax,rax
  JE    _EndIf2341
; VariableGadget_Add(7, 0, 0, "", RealName$ + "(:" + index$ + ":)", "", *Pointer, *Debugger\Is64bit) 
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  MOV    rax,_S3
  PUSH   rax
  MOV    rcx,qword [rsp+288]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S259
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+320]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S260
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 7
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+32],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure292
  ADD    rsp,64
  POP    qword [PB_StringBasePosition]
; LinesAdded + 1
  MOV    r15,qword [rsp+272]
  INC    r15
  MOV    qword [rsp+272],r15
; 
; *mappointer = *map
  PUSH   qword [rsp+264]
  POP    rax
  MOV    qword [rsp+288],rax
; While PeekB(*mappointer) <> -1
_While2342:
  SUB    rsp,8
  PUSH   qword [rsp+296]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JE    _Wend2342
; structtype = PeekB(*mappointer)
  SUB    rsp,8
  PUSH   qword [rsp+296]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+296],rax
; *mappointer + 1
  MOV    r15,qword [rsp+288]
  INC    r15
  MOV    qword [rsp+288],r15
; dynamictype = PeekB(*mappointer)
  SUB    rsp,8
  PUSH   qword [rsp+296]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+72],rax
; *mappointer + 1
  MOV    r15,qword [rsp+288]
  INC    r15
  MOV    qword [rsp+288],r15
; sublevel = PeekL(*mappointer)
  SUB    rsp,8
  PUSH   qword [rsp+296]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    qword [rsp+96],rax
; *mappointer + 4
  MOV    r15,qword [rsp+288]
  ADD    r15,4
  MOV    qword [rsp+288],r15
; Name$ = PeekAscii(*mappointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+320]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *mappointer + MemoryAsciiLength(*mappointer) + 1
  MOV    r15,qword [rsp+288]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+304]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+288],r15
; 
; VariableGadget_Add(structtype, dynamictype, sublevel, "", Name$, "", *Pointer, *Debugger\Is64bit) 
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword [rsp+136]
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword [rsp+144]
  PUSH   qword [rsp+128]
  PUSH   qword [rsp+360]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure292
  ADD    rsp,72
; *Pointer + GetValueSize(structtype, *Pointer, *Debugger\Is64bit)              
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+320]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure246
  ADD    rsp,40
  ADD    r15,rax
  MOV    qword [rsp+48],r15
; LinesAdded + 1
  MOV    r15,qword [rsp+272]
  INC    r15
  MOV    qword [rsp+272],r15
; Wend            
  JMP   _While2342
_Wend2342:
; 
; Else
  JMP   _EndIf2340
_EndIf2341:
; VariableGadget_Add(type, 0, 0, "", RealName$ + "(:" + index$ + ":)", "", *Pointer, *Debugger\Is64bit) 
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  MOV    rax,_S3
  PUSH   rax
  MOV    rcx,qword [rsp+288]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S259
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+320]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S260
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [rsp+128]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+32],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure292
  ADD    rsp,64
  POP    qword [PB_StringBasePosition]
; *Pointer + GetValueSize(type, *Pointer, *Debugger\Is64bit)         
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure246
  ADD    rsp,40
  ADD    r15,rax
  MOV    qword [rsp+48],r15
; LinesAdded + 1
  MOV    r15,qword [rsp+272]
  INC    r15
  MOV    qword [rsp+272],r15
; EndIf
_EndIf2340:
; 
; If LinesAdded > NextUpdate And (ProgressVisible Or ElapsedMilliseconds() > Timeout)
  MOV    r15,qword [rsp+272]
  CMP    r15,qword [rsp+128]
  JLE    No256
  CMP    qword [rsp+144],0
  JNE    Ok257
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_ElapsedMilliseconds
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,qword [rsp+136]
  JG     Ok257
  JMP    No257
Ok257:
  MOV    rax,1
  JMP    End257
No257:
  XOR    rax,rax
End257:
  AND    rax,rax
  JE     No256
Ok256:
  MOV    rax,1
  JMP    End256
No256:
  XOR    rax,rax
End256:
  AND    rax,rax
  JE    _EndIf2345
; If ProgressVisible = 0 And LinesAdded < *Debugger\Command\Value2 / 2          
  MOV    r15,qword [rsp+144]
  AND    r15,r15
  JNE    No258
  MOV    r15,qword [rsp+272]
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r14,dword [rbp+64]
  MOV    rax,r14
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r14,rax
  CMP    r15,r14
  JGE    No258
Ok258:
  MOV    rax,1
  JMP    End258
No258:
  XOR    rax,rax
End258:
  AND    rax,rax
  JE    _EndIf2347
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerProgress], #PB_ProgressBar_Maximum, *Debugger\Command\Value2)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS22+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2560]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetAttribute
  ADD    rsp,40
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerContainer], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2568]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer], 1)   
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; ProgressVisible = 1
  MOV    qword [rsp+144],1
; EndIf       
_EndIf2347:
; 
; NextUpdate + UpdateStep
  MOV    r15,qword [rsp+128]
  ADD    r15,qword [rsp+120]
  MOV    qword [rsp+128],r15
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerProgress], LinesAdded)
  SUB    rsp,8
  PUSH   qword [rsp+280]
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2560]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; 
; FlushEvents() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure4
  ADD    rsp,40
; If *Debugger\Windows[#DEBUGGER_WINDOW_Variable] = 0
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+856]
  AND    r15,r15
  JNE   _EndIf2349
; ProcedureReturn 
  ADD    rsp,8
  JMP   _EndProcedure23
; EndIf 
_EndIf2349:
; EndIf          
_EndIf2345:
; Wend
  JMP   _While2336
_Wend2336:
; 
; If ProgressVisible
  CMP    qword [rsp+144],0
  JE    _EndIf2351
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerProgress], *Debugger\Command\Value2)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2560]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; 
; FlushEvents() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure4
  ADD    rsp,40
; If *Debugger\Windows[#DEBUGGER_WINDOW_Variable] = 0
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+856]
  AND    r15,r15
  JNE   _EndIf2353
; ProcedureReturn 
  ADD    rsp,8
  JMP   _EndProcedure23
; EndIf 
_EndIf2353:
; EndIf
_EndIf2351:
; 
; If IS_STRUCTURE(type) And Not IS_POINTER(type)
  MOV    r15,qword [rsp+64]
  AND    r15,63
  CMP    r15,7
  JNE    No259
  MOV    r15,qword [rsp+64]
  AND    r15,128
  AND    r15,r15
  JE     No260
  XOR    rax,rax
  JMP    Ok260
No260:
  MOV    rax,1
Ok260:
  AND    rax,rax
  JE     No259
Ok259:
  MOV    rax,1
  JMP    End259
No259:
  XOR    rax,rax
End259:
  AND    rax,rax
  JE    _EndIf2355
; VariableGadget_Expand(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure288
  ADD    rsp,40
; EndIf 
_EndIf2355:
; 
; VariableGadget_Sort(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure272
  ADD    rsp,40
; 
; If ProgressVisible
  CMP    qword [rsp+144],0
  JE    _EndIf2357
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerContainer], 1)          
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2568]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; EndIf 
_EndIf2357:
; 
; VariableGadget_Unlock(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer])        
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure280
  ADD    rsp,40
; 
; EndIf
_EndIf2322:
; 
; 
; 
; Case #COMMAND_ArrayData
  JMP   _EndSelect28
_Case209:
  MOV    r15,17
  CMP    r15,[rsp]
  JNE   _Case210
; If *Debugger\Command\Value1 = 0 
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r15,dword [rbp+60]
  AND    r15,r15
  JNE   _EndIf2359
; MessageRequester(Language("Debugger", "ViewArrayList"), PeekAsciiLength(*Debugger\CommandData, *Debugger\Command\DataSize))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  MOV    rbp,qword [rsp+PS22+48]
  MOVSXD rax,dword [rbp+56]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS22+56]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S246
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MessageRequester
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; 
; Else 
  JMP   _EndIf2358
_EndIf2359:
; 
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel], 4)
  SUB    rsp,8
  PUSH   qword 4
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2320]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; 
; 
; VariableGadget_Allocate(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer], *Debugger\Command\Value2)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure286
  ADD    rsp,40
; VariableGadget_Lock(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure278
  ADD    rsp,40
; VariableGadget_Use(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer])       
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure290
  ADD    rsp,40
; type = *Debugger\Command\Value1
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+64],rax
; *pointer = *Debugger\CommandData
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+48],rax
; 
; RealName$ = PeekS(*pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,32
  LEA    rcx,[rsp+264]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *pointer + MemoryStringLengthBytes(*pointer) + #CharSize
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_MemoryStringLength
  ADD    rsp,40
  MOV    r14,rax
  ADD    r14,r14
  ADD    r15,r14
  ADD    r15,2
  MOV    qword [rsp+48],r15
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_InputName], RealName$)
  SUB    rsp,8
  PUSH   qword [rsp+264]
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2512]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
; 
; 
; For i = Len(RealName$) To 1 Step -1
  SUB    rsp,8
  PUSH   qword [rsp+264]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    qword [rsp+56],rax
  JMP   _ForSkipDebug2361
_For2361:
_ForSkipDebug2361:
  MOV    rax,1
  CMP    rax,qword [rsp+56]
  JG    _Next2362
; If Mid(RealName$, i, 1) = "("
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+288]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S93
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _EndIf2364
; RealName$ = Trim(Left(RealName$, i-1))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+88]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+296]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,32
  LEA    rcx,[rsp+264]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Break
  JMP   _Next2362
; EndIf
_EndIf2364:
; Next i
_NextContinue2362:
  DEC    qword [rsp+56]
  JNO   _For2361
_Next2362:
; 
; If IS_STRUCTURE(type) And Not IS_POINTER(type)
  MOV    r15,qword [rsp+64]
  AND    r15,63
  CMP    r15,7
  JNE    No261
  MOV    r15,qword [rsp+64]
  AND    r15,128
  AND    r15,r15
  JE     No262
  XOR    rax,rax
  JMP    Ok262
No262:
  MOV    rax,1
Ok262:
  AND    rax,rax
  JE     No261
Ok261:
  MOV    rax,1
  JMP    End261
No261:
  XOR    rax,rax
End261:
  AND    rax,rax
  JE    _EndIf2366
; *map = *pointer
  PUSH   qword [rsp+48]
  POP    rax
  MOV    qword [rsp+264],rax
; While PeekB(*pointer) <> -1
_While2367:
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JE    _Wend2367
; *pointer + 6
  MOV    r15,qword [rsp+48]
  ADD    r15,6
  MOV    qword [rsp+48],r15
; *pointer + MemoryAsciiLength(*pointer) + 1
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; Wend
  JMP   _While2367
_Wend2367:
; *pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; EndIf
_EndIf2366:
; 
; FlushEvents() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure4
  ADD    rsp,40
; If *Debugger\Windows[#DEBUGGER_WINDOW_Variable] = 0
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+856]
  AND    r15,r15
  JNE   _EndIf2369
; ProcedureReturn 
  ADD    rsp,8
  JMP   _EndProcedure23
; EndIf 
_EndIf2369:
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerProgress], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2560]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; UpdateStep = *Debugger\Command\Value2 / 100
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r15,dword [rbp+64]
  MOV    rax,r15
  MOV    rcx,100
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    qword [rsp+120],r15
; NextUpdate = UpdateStep    
  PUSH   qword [rsp+120]
  POP    rax
  MOV    qword [rsp+128],rax
; Timeout.q  = ElapsedMilliseconds() + 750
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_ElapsedMilliseconds
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,750
  MOV    qword [rsp+136],r15
; ProgressVisible = 0
  MOV    qword [rsp+144],0
; 
; LinesAdded = 0      
  MOV    qword [rsp+272],0
; While *pointer < *Debugger\CommandData + *Debugger\Command\DataSize
_While2370:
  MOV    r15,qword [rsp+48]
  MOV    rbp,qword [rsp+PS22+8]
  MOV    r14,qword [rbp+72]
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD rax,dword [rbp+56]
  ADD    r14,rax
  CMP    r15,r14
  JGE   _Wend2370
; Indizes$ = PeekAscii(*pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+312]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *pointer + MemoryAsciiLength(*pointer) + 1
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; 
; If IS_STRUCTURE(type) And Not IS_POINTER(type)
  MOV    r15,qword [rsp+64]
  AND    r15,63
  CMP    r15,7
  JNE    No263
  MOV    r15,qword [rsp+64]
  AND    r15,128
  AND    r15,r15
  JE     No264
  XOR    rax,rax
  JMP    Ok264
No264:
  MOV    rax,1
Ok264:
  AND    rax,rax
  JE     No263
Ok263:
  MOV    rax,1
  JMP    End263
No263:
  XOR    rax,rax
End263:
  AND    rax,rax
  JE    _EndIf2372
; VariableGadget_Add(7, 0, 0, "", RealName$ + "("+Indizes$+")", "", *Pointer, *Debugger\Is64bit) 
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  MOV    rax,_S3
  PUSH   rax
  MOV    rcx,qword [rsp+288]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S93
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+344]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S29
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 7
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+32],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure292
  ADD    rsp,64
  POP    qword [PB_StringBasePosition]
; LinesAdded + 1
  MOV    r15,qword [rsp+272]
  INC    r15
  MOV    qword [rsp+272],r15
; 
; *mappointer = *map
  PUSH   qword [rsp+264]
  POP    rax
  MOV    qword [rsp+288],rax
; While PeekB(*mappointer) <> -1
_While2373:
  SUB    rsp,8
  PUSH   qword [rsp+296]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JE    _Wend2373
; structtype = PeekB(*mappointer)
  SUB    rsp,8
  PUSH   qword [rsp+296]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+296],rax
; *mappointer + 1
  MOV    r15,qword [rsp+288]
  INC    r15
  MOV    qword [rsp+288],r15
; dynamictype = PeekB(*mappointer)
  SUB    rsp,8
  PUSH   qword [rsp+296]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+72],rax
; *mappointer + 1
  MOV    r15,qword [rsp+288]
  INC    r15
  MOV    qword [rsp+288],r15
; sublevel = PeekL(*mappointer)
  SUB    rsp,8
  PUSH   qword [rsp+296]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    qword [rsp+96],rax
; *mappointer + 4
  MOV    r15,qword [rsp+288]
  ADD    r15,4
  MOV    qword [rsp+288],r15
; Name$ = PeekAscii(*mappointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+320]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *mappointer + MemoryAsciiLength(*mappointer) + 1
  MOV    r15,qword [rsp+288]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+304]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+288],r15
; 
; VariableGadget_Add(structtype, dynamictype, sublevel, "", Name$, "", *Pointer, *Debugger\Is64bit) 
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword [rsp+136]
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword [rsp+144]
  PUSH   qword [rsp+128]
  PUSH   qword [rsp+360]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure292
  ADD    rsp,72
; *Pointer + GetValueSize(structtype, *Pointer, *Debugger\Is64bit)             
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+320]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure246
  ADD    rsp,40
  ADD    r15,rax
  MOV    qword [rsp+48],r15
; LinesAdded + 1
  MOV    r15,qword [rsp+272]
  INC    r15
  MOV    qword [rsp+272],r15
; Wend            
  JMP   _While2373
_Wend2373:
; 
; Else
  JMP   _EndIf2371
_EndIf2372:
; VariableGadget_Add(type, 0, 0, "", RealName$ + "("+Indizes$+")", "", *Pointer, *Debugger\Is64bit) 
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  MOV    rax,_S3
  PUSH   rax
  MOV    rcx,qword [rsp+288]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S93
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+344]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S29
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [rsp+128]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+32],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure292
  ADD    rsp,64
  POP    qword [PB_StringBasePosition]
; *Pointer + GetValueSize(type, *Pointer, *Debugger\Is64bit)           
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure246
  ADD    rsp,40
  ADD    r15,rax
  MOV    qword [rsp+48],r15
; LinesAdded + 1
  MOV    r15,qword [rsp+272]
  INC    r15
  MOV    qword [rsp+272],r15
; EndIf
_EndIf2371:
; 
; If LinesAdded > NextUpdate And (ProgressVisible Or ElapsedMilliseconds() > Timeout)
  MOV    r15,qword [rsp+272]
  CMP    r15,qword [rsp+128]
  JLE    No265
  CMP    qword [rsp+144],0
  JNE    Ok266
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_ElapsedMilliseconds
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,qword [rsp+136]
  JG     Ok266
  JMP    No266
Ok266:
  MOV    rax,1
  JMP    End266
No266:
  XOR    rax,rax
End266:
  AND    rax,rax
  JE     No265
Ok265:
  MOV    rax,1
  JMP    End265
No265:
  XOR    rax,rax
End265:
  AND    rax,rax
  JE    _EndIf2376
; If ProgressVisible = 0 And LinesAdded < *Debugger\Command\Value2 / 2          
  MOV    r15,qword [rsp+144]
  AND    r15,r15
  JNE    No267
  MOV    r15,qword [rsp+272]
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r14,dword [rbp+64]
  MOV    rax,r14
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r14,rax
  CMP    r15,r14
  JGE    No267
Ok267:
  MOV    rax,1
  JMP    End267
No267:
  XOR    rax,rax
End267:
  AND    rax,rax
  JE    _EndIf2378
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerProgress], #PB_ProgressBar_Maximum, *Debugger\Command\Value2)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS22+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2560]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetAttribute
  ADD    rsp,40
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerContainer], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2568]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer], 1)   
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; ProgressVisible = 1
  MOV    qword [rsp+144],1
; EndIf       
_EndIf2378:
; 
; NextUpdate + UpdateStep
  MOV    r15,qword [rsp+128]
  ADD    r15,qword [rsp+120]
  MOV    qword [rsp+128],r15
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerProgress], LinesAdded)
  SUB    rsp,8
  PUSH   qword [rsp+280]
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2560]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; 
; FlushEvents() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure4
  ADD    rsp,40
; If *Debugger\Windows[#DEBUGGER_WINDOW_Variable] = 0
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+856]
  AND    r15,r15
  JNE   _EndIf2380
; ProcedureReturn 
  ADD    rsp,8
  JMP   _EndProcedure23
; EndIf 
_EndIf2380:
; EndIf          
_EndIf2376:
; Wend
  JMP   _While2370
_Wend2370:
; 
; If ProgressVisible
  CMP    qword [rsp+144],0
  JE    _EndIf2382
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerProgress], *Debugger\Command\Value2)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2560]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; 
; FlushEvents() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure4
  ADD    rsp,40
; If *Debugger\Windows[#DEBUGGER_WINDOW_Variable] = 0
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+856]
  AND    r15,r15
  JNE   _EndIf2384
; ProcedureReturn 
  ADD    rsp,8
  JMP   _EndProcedure23
; EndIf 
_EndIf2384:
; EndIf
_EndIf2382:
; 
; If IS_STRUCTURE(type) And Not IS_POINTER(type)
  MOV    r15,qword [rsp+64]
  AND    r15,63
  CMP    r15,7
  JNE    No268
  MOV    r15,qword [rsp+64]
  AND    r15,128
  AND    r15,r15
  JE     No269
  XOR    rax,rax
  JMP    Ok269
No269:
  MOV    rax,1
Ok269:
  AND    rax,rax
  JE     No268
Ok268:
  MOV    rax,1
  JMP    End268
No268:
  XOR    rax,rax
End268:
  AND    rax,rax
  JE    _EndIf2386
; VariableGadget_Expand(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure288
  ADD    rsp,40
; EndIf 
_EndIf2386:
; 
; VariableGadget_Sort(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure272
  ADD    rsp,40
; 
; If ProgressVisible
  CMP    qword [rsp+144],0
  JE    _EndIf2388
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerContainer], 1)          
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2568]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; EndIf 
_EndIf2388:
; 
; VariableGadget_Unlock(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure280
  ADD    rsp,40
; 
; EndIf     
_EndIf2358:
; 
; 
; Case #COMMAND_MapData
  JMP   _EndSelect28
_Case210:
  MOV    r15,21
  CMP    r15,[rsp]
  JNE   _Case211
; If *Debugger\Command\Value1 = 0 
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r15,dword [rbp+60]
  AND    r15,r15
  JNE   _EndIf2390
; MessageRequester(Language("Debugger", "ViewArrayList"), PeekAsciiLength(*Debugger\CommandData, *Debugger\Command\DataSize))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  MOV    rbp,qword [rsp+PS22+48]
  MOVSXD rax,dword [rbp+56]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS22+56]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S246
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MessageRequester
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; 
; Else 
  JMP   _EndIf2389
_EndIf2390:
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel], 4)        
  SUB    rsp,8
  PUSH   qword 4
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2320]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; 
; VariableGadget_Allocate(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer], *Debugger\Command\Value2)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure286
  ADD    rsp,40
; VariableGadget_Lock(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure278
  ADD    rsp,40
; VariableGadget_Use(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer])       
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure290
  ADD    rsp,40
; type = *Debugger\Command\Value1
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+64],rax
; *pointer = *Debugger\CommandData
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+48],rax
; 
; RealName$ = PeekS(*pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,32
  LEA    rcx,[rsp+264]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *pointer + MemoryStringLengthBytes(*pointer) + #CharSize
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_MemoryStringLength
  ADD    rsp,40
  MOV    r14,rax
  ADD    r14,r14
  ADD    r15,r14
  ADD    r15,2
  MOV    qword [rsp+48],r15
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_InputName], RealName$)
  SUB    rsp,8
  PUSH   qword [rsp+264]
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2512]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
; 
; 
; For i = Len(RealName$) To 1 Step -1
  SUB    rsp,8
  PUSH   qword [rsp+264]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    qword [rsp+56],rax
  JMP   _ForSkipDebug2392
_For2392:
_ForSkipDebug2392:
  MOV    rax,1
  CMP    rax,qword [rsp+56]
  JG    _Next2393
; If Mid(RealName$, i, 1) = "("
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+288]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S93
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _EndIf2395
; RealName$ = Trim(Left(RealName$, i-1))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+88]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+296]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,32
  LEA    rcx,[rsp+264]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Break
  JMP   _Next2393
; EndIf
_EndIf2395:
; Next i        
_NextContinue2393:
  DEC    qword [rsp+56]
  JNO   _For2392
_Next2393:
; 
; If IS_STRUCTURE(type) And Not IS_POINTER(type)
  MOV    r15,qword [rsp+64]
  AND    r15,63
  CMP    r15,7
  JNE    No270
  MOV    r15,qword [rsp+64]
  AND    r15,128
  AND    r15,r15
  JE     No271
  XOR    rax,rax
  JMP    Ok271
No271:
  MOV    rax,1
Ok271:
  AND    rax,rax
  JE     No270
Ok270:
  MOV    rax,1
  JMP    End270
No270:
  XOR    rax,rax
End270:
  AND    rax,rax
  JE    _EndIf2397
; *map = *pointer
  PUSH   qword [rsp+48]
  POP    rax
  MOV    qword [rsp+264],rax
; While PeekB(*pointer) <> -1
_While2398:
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JE    _Wend2398
; *pointer + 6
  MOV    r15,qword [rsp+48]
  ADD    r15,6
  MOV    qword [rsp+48],r15
; *pointer + MemoryAsciiLength(*pointer) + 1
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; Wend
  JMP   _While2398
_Wend2398:
; *pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; EndIf
_EndIf2397:
; 
; FlushEvents() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure4
  ADD    rsp,40
; If *Debugger\Windows[#DEBUGGER_WINDOW_Variable] = 0
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+856]
  AND    r15,r15
  JNE   _EndIf2400
; ProcedureReturn 
  ADD    rsp,8
  JMP   _EndProcedure23
; EndIf 
_EndIf2400:
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerProgress], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2560]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; UpdateStep = *Debugger\Command\Value2 / 100
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r15,dword [rbp+64]
  MOV    rax,r15
  MOV    rcx,100
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    qword [rsp+120],r15
; NextUpdate = UpdateStep    
  PUSH   qword [rsp+120]
  POP    rax
  MOV    qword [rsp+128],rax
; Timeout.q  = ElapsedMilliseconds() + 750
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_ElapsedMilliseconds
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,750
  MOV    qword [rsp+136],r15
; ProgressVisible = 0
  MOV    qword [rsp+144],0
; 
; LinesAdded = 0      
  MOV    qword [rsp+272],0
; While *pointer < *Debugger\CommandData + *Debugger\Command\DataSize
_While2401:
  MOV    r15,qword [rsp+48]
  MOV    rbp,qword [rsp+PS22+8]
  MOV    r14,qword [rbp+72]
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD rax,dword [rbp+56]
  ADD    r14,rax
  CMP    r15,r14
  JGE   _Wend2401
; Key$ = Chr(34)+PeekS(*pointer)+Chr(34) 
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S99
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S99
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+320]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *pointer + (MemoryStringLength(*pointer) + 1) * #CharSize
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_MemoryStringLength
  ADD    rsp,40
  MOV    r14,rax
  INC    r14
  ADD    r14,r14
  ADD    r15,r14
  MOV    qword [rsp+48],r15
; 
; If IS_STRUCTURE(type) And Not IS_POINTER(type)
  MOV    r15,qword [rsp+64]
  AND    r15,63
  CMP    r15,7
  JNE    No272
  MOV    r15,qword [rsp+64]
  AND    r15,128
  AND    r15,r15
  JE     No273
  XOR    rax,rax
  JMP    Ok273
No273:
  MOV    rax,1
Ok273:
  AND    rax,rax
  JE     No272
Ok272:
  MOV    rax,1
  JMP    End272
No272:
  XOR    rax,rax
End272:
  AND    rax,rax
  JE    _EndIf2403
; VariableGadget_Add(7, 0, 0, "", RealName$ + "("+Key$+")", "", *Pointer, *Debugger\Is64bit) 
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  MOV    rax,_S3
  PUSH   rax
  MOV    rcx,qword [rsp+288]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S93
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+352]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S29
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 7
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+32],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure292
  ADD    rsp,64
  POP    qword [PB_StringBasePosition]
; LinesAdded + 1
  MOV    r15,qword [rsp+272]
  INC    r15
  MOV    qword [rsp+272],r15
; 
; *mappointer = *map
  PUSH   qword [rsp+264]
  POP    rax
  MOV    qword [rsp+288],rax
; While PeekB(*mappointer) <> -1
_While2404:
  SUB    rsp,8
  PUSH   qword [rsp+296]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JE    _Wend2404
; structtype = PeekB(*mappointer)
  SUB    rsp,8
  PUSH   qword [rsp+296]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+296],rax
; *mappointer + 1
  MOV    r15,qword [rsp+288]
  INC    r15
  MOV    qword [rsp+288],r15
; dynamictype = PeekB(*mappointer)
  SUB    rsp,8
  PUSH   qword [rsp+296]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+72],rax
; *mappointer + 1
  MOV    r15,qword [rsp+288]
  INC    r15
  MOV    qword [rsp+288],r15
; sublevel = PeekL(*mappointer)
  SUB    rsp,8
  PUSH   qword [rsp+296]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    qword [rsp+96],rax
; *mappointer + 4
  MOV    r15,qword [rsp+288]
  ADD    r15,4
  MOV    qword [rsp+288],r15
; Name$ = PeekAscii(*mappointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+320]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *mappointer + MemoryAsciiLength(*mappointer) + 1
  MOV    r15,qword [rsp+288]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+304]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+288],r15
; 
; VariableGadget_Add(structtype, dynamictype, sublevel, "", Name$, "", *Pointer, *Debugger\Is64bit) 
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword [rsp+136]
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword [rsp+144]
  PUSH   qword [rsp+128]
  PUSH   qword [rsp+360]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure292
  ADD    rsp,72
; *Pointer + GetValueSize(structtype, *Pointer, *Debugger\Is64bit)             
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+320]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure246
  ADD    rsp,40
  ADD    r15,rax
  MOV    qword [rsp+48],r15
; LinesAdded + 1
  MOV    r15,qword [rsp+272]
  INC    r15
  MOV    qword [rsp+272],r15
; Wend            
  JMP   _While2404
_Wend2404:
; 
; Else
  JMP   _EndIf2402
_EndIf2403:
; VariableGadget_Add(type, 0, 0, "", RealName$ + "("+Key$+")", "", *Pointer, *Debugger\Is64bit) 
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  MOV    rax,_S3
  PUSH   rax
  MOV    rcx,qword [rsp+288]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S93
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+352]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S29
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [rsp+128]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+32],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure292
  ADD    rsp,64
  POP    qword [PB_StringBasePosition]
; *Pointer + GetValueSize(type, *Pointer, *Debugger\Is64bit)           
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure246
  ADD    rsp,40
  ADD    r15,rax
  MOV    qword [rsp+48],r15
; LinesAdded + 1
  MOV    r15,qword [rsp+272]
  INC    r15
  MOV    qword [rsp+272],r15
; EndIf
_EndIf2402:
; 
; If LinesAdded > NextUpdate And (ProgressVisible Or ElapsedMilliseconds() > Timeout)
  MOV    r15,qword [rsp+272]
  CMP    r15,qword [rsp+128]
  JLE    No274
  CMP    qword [rsp+144],0
  JNE    Ok275
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_ElapsedMilliseconds
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,qword [rsp+136]
  JG     Ok275
  JMP    No275
Ok275:
  MOV    rax,1
  JMP    End275
No275:
  XOR    rax,rax
End275:
  AND    rax,rax
  JE     No274
Ok274:
  MOV    rax,1
  JMP    End274
No274:
  XOR    rax,rax
End274:
  AND    rax,rax
  JE    _EndIf2407
; If ProgressVisible = 0 And LinesAdded < *Debugger\Command\Value2 / 2          
  MOV    r15,qword [rsp+144]
  AND    r15,r15
  JNE    No276
  MOV    r15,qword [rsp+272]
  MOV    rbp,qword [rsp+PS22+8]
  MOVSXD r14,dword [rbp+64]
  MOV    rax,r14
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r14,rax
  CMP    r15,r14
  JGE    No276
Ok276:
  MOV    rax,1
  JMP    End276
No276:
  XOR    rax,rax
End276:
  AND    rax,rax
  JE    _EndIf2409
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerProgress], #PB_ProgressBar_Maximum, *Debugger\Command\Value2)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS22+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2560]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetAttribute
  ADD    rsp,40
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerContainer], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2568]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer], 1)   
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; ProgressVisible = 1
  MOV    qword [rsp+144],1
; EndIf       
_EndIf2409:
; 
; NextUpdate + UpdateStep
  MOV    r15,qword [rsp+128]
  ADD    r15,qword [rsp+120]
  MOV    qword [rsp+128],r15
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerProgress], LinesAdded)
  SUB    rsp,8
  PUSH   qword [rsp+280]
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2560]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; 
; FlushEvents() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure4
  ADD    rsp,40
; If *Debugger\Windows[#DEBUGGER_WINDOW_Variable] = 0
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+856]
  AND    r15,r15
  JNE   _EndIf2411
; ProcedureReturn 
  ADD    rsp,8
  JMP   _EndProcedure23
; EndIf 
_EndIf2411:
; EndIf          
_EndIf2407:
; Wend
  JMP   _While2401
_Wend2401:
; 
; If ProgressVisible
  CMP    qword [rsp+144],0
  JE    _EndIf2413
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerProgress], *Debugger\Command\Value2)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2560]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; 
; FlushEvents() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure4
  ADD    rsp,40
; If *Debugger\Windows[#DEBUGGER_WINDOW_Variable] = 0
  MOV    rbp,qword [rsp+PS22+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+856]
  AND    r15,r15
  JNE   _EndIf2415
; ProcedureReturn 
  ADD    rsp,8
  JMP   _EndProcedure23
; EndIf 
_EndIf2415:
; EndIf
_EndIf2413:
; 
; If IS_STRUCTURE(type) And Not IS_POINTER(type)
  MOV    r15,qword [rsp+64]
  AND    r15,63
  CMP    r15,7
  JNE    No277
  MOV    r15,qword [rsp+64]
  AND    r15,128
  AND    r15,r15
  JE     No278
  XOR    rax,rax
  JMP    Ok278
No278:
  MOV    rax,1
Ok278:
  AND    rax,rax
  JE     No277
Ok277:
  MOV    rax,1
  JMP    End277
No277:
  XOR    rax,rax
End277:
  AND    rax,rax
  JE    _EndIf2417
; VariableGadget_Expand(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure288
  ADD    rsp,40
; EndIf 
_EndIf2417:
; 
; VariableGadget_Sort(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure272
  ADD    rsp,40
; 
; If ProgressVisible
  CMP    qword [rsp+144],0
  JE    _EndIf2419
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerContainer], 1)          
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS22+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2568]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; EndIf 
_EndIf2419:
; 
; VariableGadget_Unlock(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS22+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure280
  ADD    rsp,40
; 
; EndIf  
_EndIf2389:
; 
; EndSelect
_Case211:
_EndSelect28:
  POP    rax
; 
; EndProcedure
_EndProcedureZero23:
  XOR    rax,rax
_EndProcedure23:
  PUSH   rax
  MOV    rcx,qword [rsp+304]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+88]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+256]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+224]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+280]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+104]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+208]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+216]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+112]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+312]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+232]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+192]
  SUB    rsp,40
  CALL   SYS_FreeArray
  ADD    rsp,40
  POP    rax
  ADD    rsp,320
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure OpenLibraryViewerWindow(*Debugger.DebuggerData)
_Procedure48:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS48=128
  MOV    rax,8
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; 
; 
; 
; 
; LibraryViewer_Init()
  CALL  _Procedure64
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Library]
  MOV    rbp,qword [rsp+PS48+0]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+880],0
  JE    _EndIf2730
; SetWindowForeground(*Debugger\Windows[#DEBUGGER_WINDOW_Library])
  MOV    rbp,qword [rsp+PS48+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+880]
  POP    rcx
  CALL  _Procedure106
; 
; Else
  JMP   _EndIf2729
_EndIf2730:
; Window = OpenWindow(#PB_Any, LibraryViewerX, LibraryViewerY, LibraryViewerWidth, LibraryViewerHeight, Language("Debugger","LibraryViewerTitle") + " - " + DebuggerTitle(*Debugger\FileName$), #PB_Window_SystemMenu|#PB_Window_SizeGadget|#PB_Window_MinimizeGadget|#PB_Window_Invisible|#PB_Window_MaximizeGadget)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 282001408
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S315
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS48+48]
  PUSH   qword [rbp+80]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure260
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [v_LibraryViewerHeight]
  PUSH   qword [v_LibraryViewerWidth]
  PUSH   qword [v_LibraryViewerY]
  PUSH   qword [v_LibraryViewerX]
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_OpenWindow2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+40],rax
; If Window
  CMP    qword [rsp+40],0
  JE    _EndIf2733
; *Debugger\Windows[#DEBUGGER_WINDOW_Library] = Window  
  PUSH   qword [rsp+40]
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+880],rax
; 
; 
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectData2] = ContainerGadget(#PB_Any, 0, 0, 0, 0, #PB_Container_Double)
  PUSH   qword 8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ContainerGadget2
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2856],rax
; CloseGadgetList()
  CALL   PB_CloseGadgetList
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectData2], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2856]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Library_Text1]       = TextGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","SelectLibrary")+":", #PB_Text_Right)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S316
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2816],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList] = ComboBoxGadget(#PB_Any, 0, 0, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ComboBoxGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2824],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Library_Update]      = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Update"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S220
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2872],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectList]  = ListIconGadget(#PB_Any, 0, 0, 0, 0, "", 20, #PB_ListIcon_GridLines|#PB_ListIcon_FullRowSelect|#PB_ListIcon_AlwaysShowSelection)
  PUSH   qword 1073807368
  PUSH   qword 20
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ListIconGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2832],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectText]  = EditorGadget(#PB_Any, 0, 0, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_EditorGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2840],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectData]  = ScrollAreaGadget(#PB_Any, 0, 0, 0, 0, 200, 200, 10)
  PUSH   qword 10
  PUSH   qword 200
  PUSH   qword 200
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScrollAreaGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2848],rax
; CloseGadgetList()
  CALL   PB_CloseGadgetList
; *Debugger\Gadgets[#DEBUGGER_GADGET_Library_Splitter2]   = SplitterGadget(#PB_Any, 0, 0, 0, 0, *Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectText], *Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectData], #PB_Splitter_Vertical|#PB_Splitter_FirstFixed)
  PUSH   qword 5
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2848]
  MOV    rbp,qword [rsp+PS48+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2840]
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SplitterGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2888],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Library_Splitter1]   = SplitterGadget(#PB_Any, 0, 0, 0, 0, *Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectList], *Debugger\Gadgets[#DEBUGGER_GADGET_Library_Splitter2], #PB_Splitter_FirstFixed)
  PUSH   qword 4
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2888]
  MOV    rbp,qword [rsp+PS48+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2832]
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SplitterGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2880],rax
; 
; CompilerIf #CompileWindows
; SetCodePage(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectText])
  MOV    rbp,qword [rsp+PS48+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2840]
  POP    rcx
  CALL  _Procedure136
; 
; hFont = GetStockObject_(#ANSI_FIXED_FONT)
  PUSH   qword 11
  POP    rcx
  CALL   GetStockObject
  MOV    qword [rsp+48],rax
; If hFont
  CMP    qword [rsp+48],0
  JE    _EndIf2735
; SetGadgetFont(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectText], hFont)
  PUSH   qword [rsp+48]
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2840]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetFont
; EndIf        
_EndIf2735:
; CompilerEndIf   
; 
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectText], #PB_Editor_ReadOnly, 1)    
  PUSH   qword 1
  PUSH   qword 2048
  MOV    rbp,qword [rsp+PS48+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2840]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; RemoveGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectList], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2832]
  POP    rcx
  POP    rdx
  CALL   PB_RemoveGadgetColumn
; 
; Debugger_AddShortcuts(Window) 
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure6
; 
; EnsureWindowOnDesktop(Window)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure162
; If LibraryViewerMaximize
  CMP    qword [v_LibraryViewerMaximize],0
  JE    _EndIf2737
; ShowWindowMaximized(Window)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure100
; Else
  JMP   _EndIf2736
_EndIf2737:
; HideWindow(Window, 0)
  PUSH   qword 0
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_HideWindow
; EndIf
_EndIf2736:
; 
; LibraryViewerEvents(*Debugger, #PB_Event_SizeWindow)      
  PUSH   qword 13118
  PUSH   qword [rsp+PS48+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure560
; 
; If LibraryViewerSplitter1 < 20
  MOV    r15,qword [v_LibraryViewerSplitter1]
  CMP    r15,20
  JGE   _EndIf2740
; LibraryViewerSplitter1 = 80
  MOV    qword [v_LibraryViewerSplitter1],80
; EndIf
_EndIf2740:
; If LibraryViewerSplitter2 < 20
  MOV    r15,qword [v_LibraryViewerSplitter2]
  CMP    r15,20
  JGE   _EndIf2742
; LibraryViewerSplitter2 = 80
  MOV    qword [v_LibraryViewerSplitter2],80
; EndIf      
_EndIf2742:
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Splitter1], LibraryViewerSplitter1)
  PUSH   qword [v_LibraryViewerSplitter1]
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2880]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Splitter2], LibraryViewerSplitter2)
  PUSH   qword [v_LibraryViewerSplitter2]
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2888]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; 
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Splitter1], #PB_Splitter_FirstMinimumSize, 20)
  PUSH   qword 20
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS48+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2880]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Splitter2], #PB_Splitter_FirstMinimumSize, 20)
  PUSH   qword 20
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS48+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2888]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Splitter1], #PB_Splitter_SecondMinimumSize, 20)
  PUSH   qword 20
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS48+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2880]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Splitter2], #PB_Splitter_SecondMinimumSize, 20)
  PUSH   qword 20
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS48+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2888]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; 
; *Debugger\CurrentLibrary = -1
  MOV    rbp,qword [rsp+PS48+0]
  MOV    dword [rbp+660],-1
; *Debugger\CurrentObject = -1
  MOV    rbp,qword [rsp+PS48+0]
  MOV    dword [rbp+664],-1
; *Debugger\CurrentObjectID = -1      
  MOV    rbp,qword [rsp+PS48+0]
  MOV    qword [rbp+668],-1
; 
; UpdateLibraryViewerState(*Debugger)      
  PUSH   qword [rsp+PS48+0]
  POP    rcx
  CALL  _Procedure562
; Debugger_ProcessEvents(Window, #PB_Event_ActivateWindow) 
  PUSH   qword 13104
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL  _Procedure14
; 
; If *Debugger\LibraryList 
  MOV    rbp,qword [rsp+PS48+0]
  CMP    qword [rbp+636],0
  JE    _EndIf2744
; *libraries.Debugger_LibraryList = *Debugger\LibraryList
  MOV    rbp,qword [rsp+PS48+0]
  PUSH   qword [rbp+636]
  POP    rax
  MOV    qword [rsp+56],rax
; For i = 0 To *Debugger\NbLibraries-1
  MOV    qword [rsp+64],0
  JMP   _ForSkipDebug2745
_For2745:
_ForSkipDebug2745:
  MOV    rbp,qword [rsp+PS48+0]
  MOVSXD r15,dword [rbp+632]
  DEC    r15
  CMP    r15,qword [rsp+64]
  JL    _Next2746
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList], -1, *libraries\library[i]\Name$)
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+8]
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS48+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2824]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddGadgetItem
; Next i   
_NextContinue2746:
  INC    qword [rsp+64]
  JNO   _For2745
_Next2746:
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2824]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; LibraryViewer_DisplayLibrary(*Debugger, 0) 
  PUSH   qword 0
  PUSH   qword [rsp+PS48+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure556
; Else
  JMP   _EndIf2743
_EndIf2744:
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList], -1, Language("Debugger","NoLibraryInfo"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S317
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS48+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2824]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList], 0)        
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS48+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2824]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; 
; Command.CommandInfo\Command = #COMMAND_GetLibraries
  LEA    rbp,[rsp+72]
  MOV    dword [rbp],24
; SendDebuggerCommand(*Debugger, @Command)         
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS48+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; EndIf
_EndIf2743:
; 
; UpdateLibraryViewerState(*Debugger)      
  PUSH   qword [rsp+PS48+0]
  POP    rcx
  CALL  _Procedure562
; 
; CompilerIf #DEFAULT_CanWindowStayOnTop
; SetWindowStayOnTop(Window, DebuggerOnTop)
  PUSH   qword [v_DebuggerOnTop]
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL  _Procedure112
; CompilerEndIf       
; 
; EndIf
_EndIf2733:
; EndIf
_EndIf2729:
; 
; EndProcedure
_EndProcedureZero49:
  XOR    rax,rax
_EndProcedure49:
  ADD    rsp,104
  POP    r15
  POP    rbp
  RET
; Procedure Standalone_AddLog(Message$, TimeStamp)
_Procedure682:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   r15
  PS682=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS682+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; If LogTimeStamp
  CMP    qword [v_LogTimeStamp],0
  JE    _EndIf3588
; Message$ = FormatDate("[%hh:%ii:%ss] ", TimeStamp) + Message$
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS682+32]
  MOV    rax,_S538
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_FormatDate
  ADD    rsp,40
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf3588:
; AddGadgetItem(#GADGET_Log, -1, Message$)
  PUSH   qword [rsp+40]
  PUSH   qword -1
  PUSH   qword 8
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddGadgetItem
; SetGadgetState(#GADGET_Log, CountGadgetItems(#GADGET_Log)-1)  
  PUSH   qword 8
  POP    rcx
  CALL   PB_CountGadgetItems
  MOV    r15,rax
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 8
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; EndProcedure
_EndProcedureZero683:
  XOR    rax,rax
_EndProcedure683:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,48
  POP    r15
  RET
; Procedure Profiler_UpdateStats(*Debugger.DebuggerData)
_Procedure598:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS598=144
  MOV    rax,9
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; If *Debugger\NbIncludedFiles > 0 And *Debugger\ProfilerFiles And *Debugger\ProfilerData
  MOV    rbp,qword [rsp+PS598+0]
  MOVSXD r15,dword [rbp+88]
  AND    r15,r15
  JLE    No324
  MOV    rbp,qword [rsp+PS598+0]
  CMP    qword [rbp+696],0
  JE     No324
  MOV    rbp,qword [rsp+PS598+0]
  CMP    qword [rbp+704],0
  JE     No324
Ok324:
  MOV    rax,1
  JMP    End324
No324:
  XOR    rax,rax
End324:
  AND    rax,rax
  JE    _EndIf3085
; *files.Debugger_ProfilerList = *Debugger\ProfilerFiles
  MOV    rbp,qword [rsp+PS598+0]
  PUSH   qword [rbp+696]
  POP    rax
  MOV    qword [rsp+40],rax
; Gadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files]
  MOV    rbp,qword [rsp+PS598+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rax
  MOV    qword [rsp+48],rax
; 
; totalcount = 0 
  MOV    qword [rsp+56],0
; For file = 0 To *Debugger\NbIncludedFiles      
  MOV    qword [rsp+64],0
  JMP   _ForSkipDebug3086
_For3086:
_ForSkipDebug3086:
  MOV    rbp,qword [rsp+PS598+0]
  MOVSXD rax,dword [rbp+88]
  CMP    rax,qword [rsp+64]
  JL    _Next3087
; index = GetGadgetItemData(Gadget, file) 
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemData
  MOV    qword [rsp+72],rax
; 
; linecount = *files\file[index ]\Size
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp+4]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+80],rax
; count   = 0
  MOV    qword [rsp+88],0
; *lines.Local_Array = *Debugger\ProfilerData + *files\file[index]\Offset * SizeOf(LONG) 
  MOV    rbp,qword [rsp+PS598+0]
  MOV    r15,qword [rbp+704]
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  MOVSXD r14,dword [rbp]
  SAL    r14,2
  ADD    r15,r14
  MOV    qword [rsp+96],r15
; 
; For line = 0 To linecount-1
  MOV    qword [rsp+104],0
  JMP   _ForSkipDebug3088
_For3088:
_ForSkipDebug3088:
  MOV    r15,qword [rsp+80]
  DEC    r15
  CMP    r15,qword [rsp+104]
  JL    _Next3089
; count + *lines\l[line]
  MOV    r15,qword [rsp+88]
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+112]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp]
  ADD    r15,rax
  MOV    qword [rsp+88],r15
; Next line                    
_NextContinue3089:
  INC    qword [rsp+104]
  JNO   _For3088
_Next3089:
; 
; totalcount + count
  MOV    r15,qword [rsp+56]
  ADD    r15,qword [rsp+88]
  MOV    qword [rsp+56],r15
; 
; SetGadgetItemText(Gadget, file, Str(count), 1)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+128]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+96]
  PUSH   qword [rsp+88]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemText(Gadget, file, StrD(count / linecount, 1), 2)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 2
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  FILD   qword [rsp+136]
  FILD   qword [rsp+128]
  FDIVP  st1,st0
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StrD2
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+96]
  PUSH   qword [rsp+88]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Next file
_NextContinue3087:
  INC    qword [rsp+64]
  JNO   _For3086
_Next3087:
; EndIf
_EndIf3085:
; 
; EndProcedure
_EndProcedureZero599:
  XOR    rax,rax
_EndProcedure599:
  ADD    rsp,112
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure IsCommandStart(*LineStart, *Cursor.BYTE)
_Procedure242:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS242=64
  SUB    rsp,40
; *Cursor - 1 
  MOV    r15,qword [rsp+PS242+8]
  DEC    r15
  MOV    qword [rsp+PS242+8],r15
; 
; While *Cursor > *LineStart
_While503:
  MOV    r15,qword [rsp+PS242+8]
  CMP    r15,qword [rsp+PS242+0]
  JLE   _Wend503
; If *Cursor\b = ':'
  MOV    rbp,qword [rsp+PS242+8]
  MOVSX  r15,byte [rbp]
  CMP    r15,58
  JNE   _EndIf505
; ProcedureReturn 1
  MOV    rax,1
  JMP   _EndProcedure243
; ElseIf *Cursor\b <> ' ' And *Cursor\b <> 9
  JMP   _EndIf504
_EndIf505:
  MOV    rbp,qword [rsp+PS242+8]
  MOVSX  r15,byte [rbp]
  CMP    r15,32
  JE     No48
  MOV    rbp,qword [rsp+PS242+8]
  MOVSX  r15,byte [rbp]
  CMP    r15,9
  JE     No48
Ok48:
  MOV    rax,1
  JMP    End48
No48:
  XOR    rax,rax
End48:
  AND    rax,rax
  JE    _EndIf506
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure243
; EndIf
_EndIf504:
_EndIf506:
; *Cursor - 1
  MOV    r15,qword [rsp+PS242+8]
  DEC    r15
  MOV    qword [rsp+PS242+8],r15
; Wend
  JMP   _While503
_Wend503:
; 
; ProcedureReturn 1  
  MOV    rax,1
  JMP   _EndProcedure243
; EndProcedure
_EndProcedureZero243:
  XOR    rax,rax
_EndProcedure243:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure VariableGadget_ParentCallback(Window, Message, wParam, lParam)
_Procedure270:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PUSH   r15
  PS270=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Callback = GetProp_(Window, "Variable_Callback")
  MOV    rax,_S89
  PUSH   rax
  PUSH   qword [rsp+PS270+8]
  POP    rcx
  POP    rdx
  CALL   GetPropW
  MOV    qword [rsp+40],rax
; 
; If Message = #WM_NCDESTROY
  MOV    r15,qword [rsp+PS270+8]
  CMP    r15,130
  JNE   _EndIf814
; 
; RemoveProp_(Window, "Variable_Callback")
  MOV    rax,_S89
  PUSH   rax
  PUSH   qword [rsp+PS270+8]
  POP    rcx
  POP    rdx
  CALL   RemovePropW
; 
; ElseIf Message = #WM_NOTIFY
  JMP   _EndIf813
_EndIf814:
  MOV    r15,qword [rsp+PS270+8]
  CMP    r15,78
  JNE   _EndIf815
; *nmv.NM_LISTVIEW = lParam      
  PUSH   qword [rsp+PS270+24]
  POP    rax
  MOV    qword [rsp+48],rax
; If *nmv\hdr\code = #LVN_COLUMNCLICK
  MOV    rbp,qword [rsp+48]
  MOVSXD r15,dword [rbp+16]
  CMP    r15,-108
  JNE   _EndIf817
; 
; 
; ForEach VariableGadget_List()
  MOV    rcx,qword [t_VariableGadget_List]
  CALL   PB_ResetList
_ForEach818:
  MOV    rcx,qword [t_VariableGadget_List]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next818
; If *nmv\hdr\hwndFrom = GadgetID(VariableGadget_List()\Gadget)
  MOV    rbp,qword [rsp+48]
  MOV    r15,qword [rbp]
  MOV    rbp,qword [t_VariableGadget_List+8]
  PUSH   qword [rbp+16]
  POP    rcx
  CALL   PB_GadgetID
  CMP    r15,rax
  JNE   _EndIf820
; 
; 
; If VariableGadget_List()\SortColumn = *nmv\iSubItem
  MOV    rbp,qword [t_VariableGadget_List+8]
  MOVSXD r15,dword [rbp+60]
  MOV    rbp,qword [rsp+48]
  CMP    r15d,dword [rbp+28]
  JNE   _EndIf822
; VariableGadget_List()\SortDirection * -1 
  MOV    rbp,qword [t_VariableGadget_List+8]
  MOVSXD r15,dword [rbp+64]
  IMUL   r15,-1
  MOV    rax,r15
  PUSH   rax
  POP    rax
  MOV    dword [rbp+64],eax
; Else
  JMP   _EndIf821
_EndIf822:
; VariableGadget_List()\SortColumn    = *nmv\iSubItem
  MOV    rbp,qword [rsp+48]
  MOVSXD rax,dword [rbp+28]
  PUSH   rax
  MOV    rbp,qword [t_VariableGadget_List+8]
  POP    rax
  MOV    dword [rbp+60],eax
; VariableGadget_List()\SortDirection = 1
  MOV    dword [rbp+64],1
; EndIf
_EndIf821:
; 
; 
; SendMessage_(*nmv\hdr\hwndFrom, #LVM_SORTITEMS, @VariableGadget_List(), @VariableGadget_SortProc())
  LEA    rax,[_Procedure268]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [t_VariableGadget_List+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 4144
  MOV    rbp,qword [rsp+72]
  PUSH   qword [rbp]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; SetSortArrow(VariableGadget_List()\Gadget, VariableGadget_List()\SortColumn, VariableGadget_List()\SortDirection)
  MOV    rbp,qword [t_VariableGadget_List+8]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  MOVSXD rax,dword [rbp+60]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure142
; 
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure271
; EndIf
_EndIf820:
; Next VariableGadget_List()
  JMP   _ForEach818
_Next818:
; EndIf
_EndIf817:
; 
; EndIf
_EndIf813:
_EndIf815:
; 
; If Callback
  CMP    qword [rsp+40],0
  JE    _EndIf825
; ProcedureReturn CallWindowProc_(Callback, Window, Message, wParam, lParam)
  SUB    rsp,8
  PUSH   qword [rsp+PS270+32]
  PUSH   qword [rsp+PS270+32]
  PUSH   qword [rsp+PS270+32]
  PUSH   qword [rsp+PS270+32]
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   CallWindowProcW
  ADD    rsp,48
  JMP   _EndProcedure271
; Else
  JMP   _EndIf824
_EndIf825:
; ProcedureReturn DefWindowProc_(Window, Message, wParam, lParam)
  PUSH   qword [rsp+PS270+24]
  PUSH   qword [rsp+PS270+24]
  PUSH   qword [rsp+PS270+24]
  PUSH   qword [rsp+PS270+24]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   DefWindowProcW
  JMP   _EndProcedure271
; EndIf
_EndIf824:
; EndProcedure
_EndProcedureZero271:
  XOR    rax,rax
_EndProcedure271:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure WatchList_DebuggerEvent(*Debugger.DebuggerData)
_Procedure26:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS26=144
  MOV    rax,10
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; Select *Debugger\Command\Command
  MOV    rbp,qword [rsp+PS26+0]
  MOVSXD rax,dword [rbp+52]
  PUSH   rax
; 
; Case #COMMAND_ControlWatchlist
  MOV    r15,45
  CMP    r15,[rsp]
  JNE   _Case234
; OpenWatchlistWindow(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS26+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure46
  ADD    rsp,40
; 
; Case #COMMAND_Procedures
  JMP   _EndSelect35
_Case234:
  MOV    r15,24
  CMP    r15,[rsp]
  JNE   _Case235
; ClearGadgetItems(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Procedure])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS26+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2704]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ClearGadgetItems
  ADD    rsp,40
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Procedure], -1, Language("Debugger","NoProcedure"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S280
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS26+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2704]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; *Pointer = *Debugger\Procedures
  MOV    rbp,qword [rsp+PS26+8]
  PUSH   qword [rbp+104]
  POP    rax
  MOV    qword [rsp+48],rax
; For i = 1 To *Debugger\NbProcedures
  MOV    qword [rsp+56],1
  JMP   _ForSkipDebug2594
_For2594:
_ForSkipDebug2594:
  MOV    rbp,qword [rsp+PS26+8]
  MOVSXD rax,dword [rbp+100]
  CMP    rax,qword [rsp+56]
  JL    _Next2595
; Name$ = PeekAscii(*Pointer)+"()"
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  MOV    rcx,_S244
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; ModName$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+80]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Procedure], -1, ModuleName(Name$, ModName$))        
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+96]
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure68
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS26+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2704]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Next i
_NextContinue2595:
  INC    qword [rsp+56]
  JNO   _For2594
_Next2595:
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Procedure], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS26+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2704]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; 
; Case #COMMAND_WatchlistError
  JMP   _EndSelect35
_Case235:
  MOV    r15,26
  CMP    r15,[rsp]
  JNE   _Case236
; MessageRequester("PureBasic Debugger", Language("Debugger","VariableError")+#NewLine+PeekS(*Debugger\CommandData, *Debugger\Command\DataSize, #PB_Ascii), #FLAG_Warning)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 48
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S287
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rcx,_S63
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  MOV    rbp,qword [rsp+PS26+64]
  MOVSXD rax,dword [rbp+56]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS26+72]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S156
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_MessageRequester2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; 
; Case #COMMAND_Watchlist 
  JMP   _EndSelect35
_Case236:
  MOV    r15,27
  CMP    r15,[rsp]
  JNE   _Case237
; VariableGadget_Lock(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_List])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS26+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2672]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure278
  ADD    rsp,40
; VariableGadget_Allocate(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_List], *Debugger\Command\Value1)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS26+16]
  MOVSXD rax,dword [rbp+60]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS26+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2672]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure286
  ADD    rsp,40
; VariableGadget_Use(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_List])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS26+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2672]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure290
  ADD    rsp,40
; 
; *Pointer = *Debugger\CommandData
  MOV    rbp,qword [rsp+PS26+8]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+48],rax
; For i = 1 To *Debugger\Command\Value1
  MOV    qword [rsp+56],1
  JMP   _ForSkipDebug2596
_For2596:
_ForSkipDebug2596:
  MOV    rbp,qword [rsp+PS26+8]
  MOVSXD rax,dword [rbp+60]
  CMP    rax,qword [rsp+56]
  JL    _Next2597
; type = PeekB(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+80],rax
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; scope = PeekB(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+88],rax
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; isvalid = PeekB(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+96],rax
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; ProcedureIndex = PeekL(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    qword [rsp+104],rax
; *Pointer + 4
  MOV    r15,qword [rsp+48]
  ADD    r15,4
  MOV    qword [rsp+48],r15
; name$ = PeekS(*Pointer, -1, #PB_UTF8)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword -1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryUTF8LengthBytes(*Pointer) + 1
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; 
; Extra$ = ScopeName(scope)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  PUSH   qword [rsp+120]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure66
  ADD    rsp,48
  LEA    rcx,[rsp+120]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; If ProcedureIndex = -1
  MOV    r15,qword [rsp+104]
  CMP    r15,-1
  JNE   _EndIf2599
; Extra$ + Chr(10)
  MOV    rcx,qword [rsp+112]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+120]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf2598
_EndIf2599:
; Extra$ + Chr(10) + GetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Procedure], ProcedureIndex+1, 0)
  MOV    rcx,qword [rsp+112]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  MOV    r15,qword [rsp+144]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS26+56]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2704]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_GetGadgetItemText2
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+120]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf2598:
; 
; If isvalid = 0
  MOV    r15,qword [rsp+96]
  AND    r15,r15
  JNE   _EndIf2602
; VariableGadget_Add(type, 0, 0, Extra$, name$, "", 0, *Debugger\Is64bit)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS26+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword [rsp+96]
  PUSH   qword [rsp+152]
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [rsp+144]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure292
  ADD    rsp,72
; VariableGadget_SetString(i-1, "---", #False)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rax,_S87
  PUSH   rax
  MOV    r15,qword [rsp+80]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure300
  ADD    rsp,40
; 
; Else        
  JMP   _EndIf2601
_EndIf2602:
; VariableGadget_Add(type, 0, 0, Extra$, name$, "", *Pointer, *Debugger\Is64bit)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS26+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword [rsp+96]
  PUSH   qword [rsp+152]
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [rsp+144]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure292
  ADD    rsp,72
; *Pointer + GetValueSize(type, *Pointer, *Debugger\Is64bit) 
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS26+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure246
  ADD    rsp,40
  ADD    r15,rax
  MOV    qword [rsp+48],r15
; 
; EndIf 
_EndIf2601:
; 
; Next i   
_NextContinue2597:
  INC    qword [rsp+56]
  JNO   _For2596
_Next2597:
; 
; VariableGadget_SyncAll() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure294
  ADD    rsp,40
; VariableGadget_Sort(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_List])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS26+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2672]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure272
  ADD    rsp,40
; VariableGadget_Unlock(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_List])   
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS26+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2672]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure280
  ADD    rsp,40
; 
; Case #COMMAND_WatchlistEvent      
  JMP   _EndSelect35
_Case237:
  MOV    r15,28
  CMP    r15,[rsp]
  JNE   _Case238
; VariableGadget_Use(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_List])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS26+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2672]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure290
  ADD    rsp,40
; If *Debugger\Command\Value1 = -1
  MOV    rbp,qword [rsp+PS26+8]
  MOVSXD r15,dword [rbp+60]
  CMP    r15,-1
  JNE   _EndIf2605
; VariableGadget_SetString(*Debugger\Command\Value2, "---", #True) 
  SUB    rsp,8
  PUSH   qword 1
  MOV    rax,_S87
  PUSH   rax
  MOV    rbp,qword [rsp+PS26+32]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure300
  ADD    rsp,40
; ElseIf *Debugger\CommandData = 0
  JMP   _EndIf2604
_EndIf2605:
  MOV    rbp,qword [rsp+PS26+8]
  MOV    r15,qword [rbp+72]
  AND    r15,r15
  JNE   _EndIf2606
; VariableGadget_Set(*Debugger\Command\Value1, @*Debugger\Command\Value2, *Debugger\Is64bit, #True)
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS26+24]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS26+32]
  LEA    rax,[rbp+64]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS26+40]
  MOVSXD rax,dword [rbp+60]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure298
  ADD    rsp,40
; Else
  JMP   _EndIf2604
_EndIf2606:
; VariableGadget_Set(*Debugger\Command\Value1, *Debugger\CommandData, *Debugger\Is64bit, #True)
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS26+24]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS26+32]
  PUSH   qword [rbp+72]
  MOV    rbp,qword [rsp+PS26+40]
  MOVSXD rax,dword [rbp+60]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure298
  ADD    rsp,40
; EndIf 
_EndIf2604:
; VariableGadget_Sort(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_List])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS26+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2672]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure272
  ADD    rsp,40
; 
; 
; EndSelect
_Case238:
_EndSelect35:
  POP    rax
; 
; EndProcedure
_EndProcedureZero27:
  XOR    rax,rax
_EndProcedure27:
  PUSH   rax
  MOV    rcx,qword [rsp+112]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+72]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,120
  POP    r15
  POP    rbp
  RET
; Procedure SetWindowForeground_Real(Window)
_Procedure110:
  MOV    qword [rsp+8],rcx
  PUSH   r15
  PS110=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; hWnd = WindowID(Window)
  PUSH   qword [rsp+PS110+0]
  POP    rcx
  CALL   PB_WindowID
  MOV    qword [rsp+40],rax
; 
; If GetWindowLongPtr_(hWnd, #GWL_STYLE) & #WS_MINIMIZE
  PUSH   qword -16
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   GetWindowLongPtrW
  MOV    r15,rax
  AND    r15,536870912
  AND    r15,r15
  JE    _EndIf30
; ShowWindow_(hWnd, #SW_RESTORE)
  PUSH   qword 9
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   ShowWindow
; EndIf 
_EndIf30:
; 
; 
; 
; foregroundThreadID = GetWindowThreadProcessId_(GetForegroundWindow_(), 0)
  PUSH   qword 0
  SUB    rsp,8
  SUB    rsp,32
  CALL   GetForegroundWindow
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   GetWindowThreadProcessId
  MOV    qword [rsp+48],rax
; ourThreadID = GetCurrentThreadId_()
  CALL   GetCurrentThreadId
  MOV    qword [rsp+56],rax
; 
; 
; If (foregroundThreadID <> ourThreadID)
  MOV    r15,qword [rsp+48]
  CMP    r15,qword [rsp+56]
  JE    _EndIf32
; AttachThreadInput_(foregroundThreadID, ourThreadID, #True)
  PUSH   qword 1
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   AttachThreadInput
; EndIf
_EndIf32:
; 
; 
; SetForegroundWindow_(hWnd)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   SetForegroundWindow
; 
; 
; If (foregroundThreadID <> ourThreadID)
  MOV    r15,qword [rsp+48]
  CMP    r15,qword [rsp+56]
  JE    _EndIf34
; AttachThreadInput_(foregroundThreadID, ourThreadID, #False)
  PUSH   qword 0
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   AttachThreadInput
; EndIf 
_EndIf34:
; 
; 
; RedrawWindow_(hWnd, #Null, #Null, #RDW_FRAME | #RDW_INVALIDATE) 
  PUSH   qword 1025
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   RedrawWindow
; 
; EndProcedure
_EndProcedureZero111:
  XOR    rax,rax
_EndProcedure111:
  ADD    rsp,64
  POP    r15
  RET
; Procedure.s GetLine(EditorGadget, Index)
_Procedure652:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS652=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS652+32]
  MOV    qword [PB_StringBasePosition],rax
; 
; range.TextRange\chrg\cpMin = ScintillaSendMessage(EditorGadget, #SCI_POSITIONFROMLINE, Index, 0)
  PUSH   qword 0
  PUSH   qword [rsp+PS652+16]
  PUSH   qword 2167
  PUSH   qword [rsp+PS652+24]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
  MOV    rax,rax
  PUSH   rax
  LEA    rbp,[rsp+48]
  POP    rax
  MOV    dword [rbp],eax
; range\chrg\cpMax           = ScintillaSendMessage(EditorGadget, #SCI_GETLINEENDPOSITION, Index, 0)
  PUSH   qword 0
  PUSH   qword [rsp+PS652+16]
  PUSH   qword 2136
  PUSH   qword [rsp+PS652+24]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    dword [rbp+4],eax
; 
; If range\chrg\cpMax > range\chrg\cpMin
  MOVSXD r15,dword [rbp+4]
  CMP    r15d,dword [rbp]
  JLE   _EndIf3491
; range\lpstrText            = AllocateMemory(range\chrg\cpMax-range\chrg\cpMin+1)
  LEA    rbp,[rsp+40]
  MOVSXD r15,dword [rbp+4]
  MOVSXD rax,dword [rbp]
  SUB    r15,rax
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    qword [rbp+8],rax
; 
; If range\lpstrText
  CMP    qword [rbp+8],0
  JE    _EndIf3493
; length = ScintillaSendMessage(EditorGadget, #SCI_GETTEXTRANGE, 0, @range)
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 2162
  PUSH   qword [rsp+PS652+24]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
  MOV    qword [rsp+56],rax
; Line$ = PeekS(range\lpstrText, length, #PB_Ascii) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword [rsp+88]
  LEA    rbp,[rsp+80]
  PUSH   qword [rbp+8]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  LEA    rcx,[rsp+72]
  POP    rdx
  CALL   SYS_AllocateString4
; FreeMemory(range\lpstrText)
  PUSH   qword [rbp+8]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf3493:
; EndIf
_EndIf3491:
; 
; ProcedureReturn Line$
  MOV    rcx,qword [rsp+64]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure653
; EndProcedure
_EndProcedureZero653:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure653:
  PUSH   rax
  MOV    rcx,qword [rsp+72]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure.s CreateRelativePath(BasePath$, FileName$)
_Procedure158:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   r15
  PS158=112
  MOV    rax,7
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
  MOV    rax,[rsp+PS158+32]
  MOV    qword [PB_StringBasePosition],rax
  MOV    rdx,[rsp+PS158+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
  MOV    rdx,[rsp+PS158+8]
  LEA    rcx,[rsp+48]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; 
; If FileName$ = "" 
  PUSH   qword [rsp+48]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf118
; ProcedureReturn ""
  MOV    rcx,_S3
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure159
; EndIf
_EndIf118:
; 
; 
; FileName$ = UniqueFilename(FileName$)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure154
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; BasePath$ = UniqueFilename(BasePath$)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure154
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; 
; 
; CompilerIf #PB_Compiler_OS = #PB_OS_Windows
; If Mid(BasePath$, 2, 1) = ":" And Mid(FileName$, 2, 1) = ":"
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword 2
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S13
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE     No1
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword 2
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S13
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE     No1
Ok1:
  MOV    rax,1
  JMP    End1
No1:
  XOR    rax,rax
End1:
  AND    rax,rax
  JE    _EndIf120
; 
; If UCase(Left(BasePath$, 1)) <> UCase(Left(FileName$, 1))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,32
  POP    rcx
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  ADD    rcx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf122
; ProcedureReturn FileName$
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure159
; EndIf
_EndIf122:
; 
; ElseIf Left(BasePath$, 2) = "\\" And Left(FileName$, 2) = "\\"
  JMP   _EndIf119
_EndIf120:
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S14
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE     No2
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S14
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE     No2
Ok2:
  MOV    rax,1
  JMP    End2
No2:
  XOR    rax,rax
End2:
  AND    rax,rax
  JE    _EndIf123
; 
; If UCase(StringField(BasePath$, 3, "\")) <> UCase(StringField(FileName$, 3, "\"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S4
  PUSH   rax
  PUSH   qword 3
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S4
  PUSH   rax
  PUSH   qword 3
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,32
  POP    rcx
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  ADD    rcx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf125
; ProcedureReturn FileName$
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure159
; EndIf
_EndIf125:
; 
; Else
  JMP   _EndIf119
_EndIf123:
; 
; ProcedureReturn FileName$
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure159
; 
; EndIf
_EndIf119:
; 
; CompilerElse
; 
; If Right(BasePath$, 1) <> #Separator
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S4
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf128
; BasePath$ + #Separator
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S4
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf128:
; 
; FullFileName$ = FileName$ 
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; 
; 
; For x = Len(BasePath$) To 1 Step -1
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_Len
  MOV    qword [rsp+64],rax
  JMP   _ForSkipDebug129
_For129:
_ForSkipDebug129:
  MOV    rax,1
  CMP    rax,qword [rsp+64]
  JG    _Next130
; If Mid(BasePath$, x, 1) = #Separator
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+96]
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S4
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf132
; CompilerIf #PB_Compiler_OS = #PB_OS_Linux
; If CompareMemoryString(@BasePath$, @FileName$, 1, x) = 0
  PUSH   qword [rsp+64]
  PUSH   qword 1
  MOV    rax,qword [rsp+64]
  MOV    rax,rax
  PUSH   rax
  MOV    rax,qword [rsp+64]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_CompareMemoryString3
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf134
; CompilerEndIf
; BasePath$ = Right(BasePath$, Len(BasePath$)-x)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  SUB    r15,qword [rsp+88]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; FileName$ = Right(FileName$, Len(FileName$)-x)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  SUB    r15,qword [rsp+88]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; Break
  JMP   _Next130
; EndIf    
_EndIf134:
; EndIf
_EndIf132:
; Next x
_NextContinue130:
  DEC    qword [rsp+64]
  JNO   _For129
_Next130:
; 
; 
; 
; count = CountString(BasePath$, #Separator)
  MOV    rax,_S4
  PUSH   rax
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_CountString
  MOV    qword [rsp+72],rax
; If count <= 3 
  MOV    r15,qword [rsp+72]
  CMP    r15,3
  JG    _EndIf136
; For i = 1 To count
  MOV    qword [rsp+80],1
  JMP   _ForSkipDebug137
_For137:
_ForSkipDebug137:
  MOV    rax,qword [rsp+72]
  CMP    rax,qword [rsp+80]
  JL    _Next138
; FileName$ = ".." + #Separator + FileName$
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S15
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; Next i
_NextContinue138:
  INC    qword [rsp+80]
  JNO   _For137
_Next138:
; Else
  JMP   _EndIf135
_EndIf136:
; FileName$ = FullFileName$ 
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf135:
; 
; ProcedureReturn FileName$       
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure159
; EndProcedure
_EndProcedureZero159:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure159:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,96
  POP    r15
  RET
; Procedure MemoryViewer_Update(*Debugger.DebuggerData, Action, File) 
_Procedure482:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS482=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; ViewType = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType])
  MOV    rbp,qword [rsp+PS482+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    qword [rsp+40],rax
; 
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Editor], Language("Debugger","NoData"))     
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S218
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS482+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2264]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; If ViewType = 0 Or ViewType >= 8 
  MOV    r15,qword [rsp+40]
  AND    r15,r15
  JE     Ok229
  MOV    r15,qword [rsp+40]
  CMP    r15,8
  JGE    Ok229
  JMP    No229
Ok229:
  MOV    rax,1
  JMP    End229
No229:
  XOR    rax,rax
End229:
  AND    rax,rax
  JE    _EndIf1848
; ClearGadgetItems(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_List])
  MOV    rbp,qword [rsp+PS482+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2280]
  POP    rcx
  CALL   PB_ClearGadgetItems
; 
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Container], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS482+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2272]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Editor], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS482+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2264]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; Else  
  JMP   _EndIf1847
_EndIf1848:
; FreeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_List]) 
  MOV    rbp,qword [rsp+PS482+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2280]
  POP    rcx
  CALL   PB_FreeGadget
; OpenGadgetList(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Container])
  MOV    rbp,qword [rsp+PS482+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2272]
  POP    rcx
  CALL   PB_OpenGadgetList
; If MemoryOneColumnOnly
  CMP    qword [v_MemoryOneColumnOnly],0
  JE    _EndIf1851
; *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_List] = ListViewGadget(#PB_Any, 0, 0, WindowWidth(*Debugger\Windows[#DEBUGGER_WINDOW_Memory])-20, WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_Memory])-90)
  SUB    rsp,8
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS482+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+848]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowHeight
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,-90
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS482+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+848]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowWidth
  ADD    rsp,32
  MOV    r15,rax
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ListViewGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS482+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2280],rax
; Else
  JMP   _EndIf1850
_EndIf1851:
; *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_List] = ListIconGadget(#PB_Any, 0, 0, WindowWidth(*Debugger\Windows[#DEBUGGER_WINDOW_Memory])-20, WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_Memory])-90, "", 80, #PB_ListIcon_GridLines|#PB_ListIcon_FullRowSelect|#PB_ListIcon_MultiSelect)
  PUSH   qword 1073807364
  PUSH   qword 80
  MOV    rax,_S3
  PUSH   rax
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS482+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+848]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowHeight
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,-90
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS482+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+848]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowWidth
  ADD    rsp,32
  MOV    r15,rax
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ListIconGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS482+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2280],rax
; EndIf
_EndIf1850:
; CloseGadgetList()
  CALL   PB_CloseGadgetList
; 
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Container], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS482+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2272]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Editor], 1)   
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS482+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2264]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; EndIf  
_EndIf1847:
; 
; Select ViewType
  PUSH   qword [rsp+40]
; Case  0: MemoryViewer_Hex(*Debugger)
  XOR    r15,r15
  CMP    r15,[rsp]
  JNE   _Case150
  SUB    rsp,8
  PUSH   qword [rsp+PS482+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure476
  ADD    rsp,40
; Case  1: MemoryViewer_Table(*Debugger, 1, @MemoryViewer_PeekB()): Columns = 16
  JMP   _EndSelect22
_Case150:
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case151
  SUB    rsp,8
  LEA    rax,[_Procedure458]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 1
  PUSH   qword [rsp+PS482+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure474
  ADD    rsp,40
  MOV    qword [rsp+56],16
; 
; Case  2 
  JMP   _EndSelect22
_Case151:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case152
; If *Debugger\IsUnicode = 0
  MOV    rbp,qword [rsp+PS482+8]
  MOVSXD r15,dword [rbp+24]
  AND    r15,r15
  JNE   _EndIf1854
; MemoryViewer_Table(*Debugger, 1, @MemoryViewer_PeekCA()): Columns = 16
  SUB    rsp,8
  LEA    rax,[_Procedure460]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 1
  PUSH   qword [rsp+PS482+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure474
  ADD    rsp,40
  MOV    qword [rsp+56],16
; Else
  JMP   _EndIf1853
_EndIf1854:
; MemoryViewer_Table(*Debugger, 2, @MemoryViewer_PeekCU()): Columns = 8
  SUB    rsp,8
  LEA    rax,[_Procedure462]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 2
  PUSH   qword [rsp+PS482+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure474
  ADD    rsp,40
  MOV    qword [rsp+56],8
; EndIf
_EndIf1853:
; 
; Case  3: MemoryViewer_Table(*Debugger, 2, @MemoryViewer_PeekW()): Columns = 8
  JMP   _EndSelect22
_Case152:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case153
  SUB    rsp,8
  LEA    rax,[_Procedure464]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 2
  PUSH   qword [rsp+PS482+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure474
  ADD    rsp,40
  MOV    qword [rsp+56],8
; Case  4: MemoryViewer_Table(*Debugger, 4, @MemoryViewer_PeekL()): Columns = 4
  JMP   _EndSelect22
_Case153:
  MOV    r15,4
  CMP    r15,[rsp]
  JNE   _Case154
  SUB    rsp,8
  LEA    rax,[_Procedure466]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 4
  PUSH   qword [rsp+PS482+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure474
  ADD    rsp,40
  MOV    qword [rsp+56],4
; Case  5: MemoryViewer_Table(*Debugger, 8, @MemoryViewer_PeekQ()): Columns = 2
  JMP   _EndSelect22
_Case154:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case155
  SUB    rsp,8
  LEA    rax,[_Procedure468]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 8
  PUSH   qword [rsp+PS482+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure474
  ADD    rsp,40
  MOV    qword [rsp+56],2
; Case  6: MemoryViewer_Table(*Debugger, 4, @MemoryViewer_PeekF()): Columns = 4
  JMP   _EndSelect22
_Case155:
  MOV    r15,6
  CMP    r15,[rsp]
  JNE   _Case156
  SUB    rsp,8
  LEA    rax,[_Procedure470]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 4
  PUSH   qword [rsp+PS482+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure474
  ADD    rsp,40
  MOV    qword [rsp+56],4
; Case  7: MemoryViewer_Table(*Debugger, 8, @MemoryViewer_PeekD()): Columns = 2
  JMP   _EndSelect22
_Case156:
  MOV    r15,7
  CMP    r15,[rsp]
  JNE   _Case157
  SUB    rsp,8
  LEA    rax,[_Procedure472]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 8
  PUSH   qword [rsp+PS482+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure474
  ADD    rsp,40
  MOV    qword [rsp+56],2
; Case  8: MemoryViewer_AsciiUtf8(*Debugger, #PB_Ascii)
  JMP   _EndSelect22
_Case157:
  MOV    r15,8
  CMP    r15,[rsp]
  JNE   _Case158
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+PS482+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure478
  ADD    rsp,40
; Case  9: MemoryViewer_Unicode(*Debugger)
  JMP   _EndSelect22
_Case158:
  MOV    r15,9
  CMP    r15,[rsp]
  JNE   _Case159
  SUB    rsp,8
  PUSH   qword [rsp+PS482+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure480
  ADD    rsp,40
; Case 10: MemoryViewer_AsciiUtf8(*Debugger, #PB_UTF8)
  JMP   _EndSelect22
_Case159:
  MOV    r15,10
  CMP    r15,[rsp]
  JNE   _Case160
  SUB    rsp,8
  PUSH   qword 2
  PUSH   qword [rsp+PS482+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure478
  ADD    rsp,40
; EndSelect
_Case160:
_EndSelect22:
  POP    rax
; 
; 
; If Action <> 0
  MOV    r15,qword [rsp+PS482+8]
  AND    r15,r15
  JE    _EndIf1857
; 
; If ViewType > 0 And ViewType < 8 
  MOV    r15,qword [rsp+40]
  AND    r15,r15
  JLE    No230
  MOV    r15,qword [rsp+40]
  CMP    r15,8
  JGE    No230
Ok230:
  MOV    rax,1
  JMP    End230
No230:
  XOR    rax,rax
End230:
  AND    rax,rax
  JE    _EndIf1859
; 
; Text$ = ""
  MOV    rdx,_S3
  LEA    rcx,[rsp+56]
  CALL   SYS_FastAllocateStringFree4
; Count = CountGadgetItems(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_List])
  MOV    rbp,qword [rsp+PS482+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2280]
  POP    rcx
  CALL   PB_CountGadgetItems
  MOV    qword [rsp+64],rax
; 
; If MemoryOneColumnOnly
  CMP    qword [v_MemoryOneColumnOnly],0
  JE    _EndIf1861
; 
; For i = 0 To Count-1
  MOV    qword [rsp+72],0
  JMP   _ForSkipDebug1862
_For1862:
_ForSkipDebug1862:
  MOV    r15,qword [rsp+64]
  DEC    r15
  CMP    r15,qword [rsp+72]
  JL    _Next1863
; Text$ + GetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_List], i, 0) + #NewLine
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  PUSH   qword [rsp+104]
  MOV    rbp,qword [rsp+PS482+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2280]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_GetGadgetItemText2
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S63
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; Next i        
_NextContinue1863:
  INC    qword [rsp+72]
  JNO   _For1862
_Next1863:
; 
; Else
  JMP   _EndIf1860
_EndIf1861:
; 
; For i = 0 To Count-1          
  MOV    qword [rsp+72],0
  JMP   _ForSkipDebug1865
_For1865:
_ForSkipDebug1865:
  MOV    r15,qword [rsp+64]
  DEC    r15
  CMP    r15,qword [rsp+72]
  JL    _Next1866
; Text$ + GetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_List], i, 0)
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  PUSH   qword [rsp+104]
  MOV    rbp,qword [rsp+PS482+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2280]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_GetGadgetItemText2
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; For c = 1 To Columns
  MOV    qword [rsp+80],1
  JMP   _ForSkipDebug1867
_For1867:
_ForSkipDebug1867:
  MOV    rax,qword [rsp+48]
  CMP    rax,qword [rsp+80]
  JL    _Next1868
; Text$ + Chr(9) + GetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_List], i, c)
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S26
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+104]
  MOV    rbp,qword [rsp+PS482+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2280]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_GetGadgetItemText2
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; Next c
_NextContinue1868:
  INC    qword [rsp+80]
  JNO   _For1867
_Next1868:
; Text$ + #NewLine
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S63
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; Next i  
_NextContinue1866:
  INC    qword [rsp+72]
  JNO   _For1865
_Next1866:
; 
; EndIf  
_EndIf1860:
; 
; Else
  JMP   _EndIf1858
_EndIf1859:
; Text$ = GetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Editor])
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS482+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2264]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetText
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf1858:
; 
; If Action = 1 
  MOV    r15,qword [rsp+PS482+8]
  CMP    r15,1
  JNE   _EndIf1871
; SetClipboardText(Text$)
  PUSH   qword [rsp+56]
  POP    rcx
  CALL   PB_SetClipboardText
; 
; ElseIf Action = 2 
  JMP   _EndIf1870
_EndIf1871:
  MOV    r15,qword [rsp+PS482+8]
  CMP    r15,2
  JNE   _EndIf1872
; 
; If ViewType = 9 
  MOV    r15,qword [rsp+40]
  CMP    r15,9
  JNE   _EndIf1874
; WriteStringFormat(File, #PB_Unicode)
  PUSH   qword 25
  PUSH   qword [rsp+PS482+24]
  POP    rcx
  POP    rdx
  CALL   PB_WriteStringFormat
; WriteString(File, Text$, #PB_Unicode)
  PUSH   qword 25
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+PS482+32]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_WriteString2
; 
; ElseIf ViewType = 10 
  JMP   _EndIf1873
_EndIf1874:
  MOV    r15,qword [rsp+40]
  CMP    r15,10
  JNE   _EndIf1875
; WriteStringFormat(File, #PB_UTF8)
  PUSH   qword 2
  PUSH   qword [rsp+PS482+24]
  POP    rcx
  POP    rdx
  CALL   PB_WriteStringFormat
; WriteString(File, Text$, #PB_UTF8)      
  PUSH   qword 2
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+PS482+32]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_WriteString2
; 
; Else 
  JMP   _EndIf1873
_EndIf1875:
; WriteString(File, Text$)
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+PS482+24]
  POP    rcx
  POP    rdx
  CALL   PB_WriteString
; EndIf
_EndIf1873:
; 
; EndIf        
_EndIf1870:
_EndIf1872:
; 
; EndIf
_EndIf1857:
; 
; EndProcedure
_EndProcedureZero483:
  XOR    rax,rax
_EndProcedure483:
  PUSH   rax
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure OpenDataBreakpointWindow(*Debugger.DebuggerData)
_Procedure52:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS52=64
  SUB    rsp,40
; 
; If *Debugger\DataBreakpointsVisible = 0    
  MOV    rbp,qword [rsp+PS52+0]
  MOVSXD r15,dword [rbp+136]
  AND    r15,r15
  JNE   _EndIf2543
; 
; EnsureWindowOnDesktop(*Debugger\Windows[#DEBUGGER_WINDOW_DataBreakpoints])
  MOV    rbp,qword [rsp+PS52+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  POP    rcx
  CALL  _Procedure162
; HideWindow(*Debugger\Windows[#DEBUGGER_WINDOW_DataBreakpoints], 0) 
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS52+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  POP    rcx
  POP    rdx
  CALL   PB_HideWindow
; 
; If DataBreakpointWindowWidth = 0 Or DataBreakpointWindowHeight = 0
  MOV    r15,qword [v_DataBreakpointWindowWidth]
  AND    r15,r15
  JE     Ok285
  MOV    r15,qword [v_DataBreakpointWindowHeight]
  AND    r15,r15
  JE     Ok285
  JMP    No285
Ok285:
  MOV    rax,1
  JMP    End285
No285:
  XOR    rax,rax
End285:
  AND    rax,rax
  JE    _EndIf2545
; DataBreakpointWindowX           = 75
  MOV    qword [v_DataBreakpointWindowX],75
; DataBreakpointWindowY           = 75
  MOV    qword [v_DataBreakpointWindowY],75
; DataBreakpointWindowWidth       = 700
  MOV    qword [v_DataBreakpointWindowWidth],700
; DataBreakpointWindowHeight      = 300          
  MOV    qword [v_DataBreakpointWindowHeight],300
; EndIf
_EndIf2545:
; 
; ResizeWindow(*Debugger\Windows[#DEBUGGER_WINDOW_DataBreakpoints], DataBreakpointWindowX, DataBreakpointWindowY, DataBreakpointWindowWidth, DataBreakpointWindowHeight)
  SUB    rsp,8
  PUSH   qword [v_DataBreakpointWindowHeight]
  PUSH   qword [v_DataBreakpointWindowWidth]
  PUSH   qword [v_DataBreakpointWindowY]
  PUSH   qword [v_DataBreakpointWindowX]
  MOV    rbp,qword [rsp+PS52+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeWindow
  ADD    rsp,48
; DataBreakpointWindowEvents(*Debugger, #PB_Event_SizeWindow) 
  PUSH   qword 13118
  PUSH   qword [rsp+PS52+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure516
; 
; 
; SetWindowTitle(*Debugger\Windows[#DEBUGGER_WINDOW_DataBreakpoints], Language("Debugger","DataBreakpoints") + " - " + DebuggerTitle(*Debugger\FileName$))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S272
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS52+48]
  PUSH   qword [rbp+80]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure260
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS52+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetWindowTitle
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; *Debugger\DataBreakpointsVisible = 1
  MOV    rbp,qword [rsp+PS52+0]
  MOV    dword [rbp+136],1
; EndIf  
_EndIf2543:
; 
; SetWindowForeground(*Debugger\Windows[#DEBUGGER_WINDOW_DataBreakpoints])
  MOV    rbp,qword [rsp+PS52+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  POP    rcx
  CALL  _Procedure106
; DataBreakpointWindowEvents(*Debugger, #PB_Event_SizeWindow)
  PUSH   qword 13118
  PUSH   qword [rsp+PS52+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure516
; 
; EndProcedure
_EndProcedureZero53:
  XOR    rax,rax
_EndProcedure53:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure Profiler_DrawFile(*Debugger.DebuggerData, *Area.ProfilerDrawing, index, color)
_Procedure574:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS574=144
  MOV    rax,9
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; *files.Debugger_ProfilerList = *Debugger\ProfilerFiles
  MOV    rbp,qword [rsp+PS574+0]
  PUSH   qword [rbp+696]
  POP    rax
  MOV    qword [rsp+40],rax
; maxlines = *files\file[index]\Size
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS574+24]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp+4]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+48],rax
; 
; *lines.Local_Array = *Debugger\ProfilerData + *files\file[index]\Offset * SizeOf(LONG)
  MOV    rbp,qword [rsp+PS574+0]
  MOV    r15,qword [rbp+704]
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS574+24]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  MOVSXD r14,dword [rbp]
  SAL    r14,2
  ADD    r15,r14
  MOV    qword [rsp+56],r15
; line               = *Area\lineStart      
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD rax,dword [rbp+16]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+64],rax
; 
; If *Area\h >= *Area\lines 
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD r15,dword [rbp+12]
  MOV    rbp,qword [rsp+PS574+8]
  CMP    r15d,dword [rbp+20]
  JL    _EndIf2878
; 
; height = Round(*Debugger\ProfilerRatioY, 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS574+8]
  PUSH   qword [rbp+732]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  POP    rdx
  CALL   PB_Round_DOUBLE
  MOVSD  [rsp-8],xmm0
  FLD    qword [rsp-8]
  FISTP  qword [rsp+72]
; While line < *Area\lineStart + *Area\lines - 1 And line < maxlines 
_While2879:
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD r14,dword [rbp+16]
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD rax,dword [rbp+20]
  ADD    r14,rax
  DEC    r14
  CMP    r15,r14
  JGE    No303
  MOV    r15,qword [rsp+64]
  CMP    r15,qword [rsp+48]
  JGE    No303
Ok303:
  MOV    rax,1
  JMP    End303
No303:
  XOR    rax,rax
End303:
  AND    rax,rax
  JE    _Wend2879
; length = (*lines\l[line] - *Area\countStart) * *Debugger\ProfilerRatioX
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  MOVSXD r15,dword [rbp]
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD rax,dword [rbp+24]
  SUB    r15,rax
  MOV    rbp,qword [rsp+PS574+0]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FMUL   qword [rbp+724]
  FISTP  qword [rsp+80]
; 
; If length > 0 
  MOV    r15,qword [rsp+80]
  AND    r15,r15
  JLE   _EndIf2881
; If length > *Area\w: length = *Area\w: EndIf               
  MOV    r15,qword [rsp+80]
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD rax,dword [rbp+8]
  CMP    r15,rax
  JLE   _EndIf2883
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD rax,dword [rbp+8]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+80],rax
_EndIf2883:
; 
; Box(*Area\x, *Area\y + (line-*Area\lineStart)* *Debugger\ProfilerRatioY, length, height, color)
  SUB    rsp,8
  PUSH   qword [rsp+PS574+32]
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+104]
  MOV    rbp,qword [rsp+PS574+40]
  MOVSXD r15,dword [rbp+4]
  MOV    r14,qword [rsp+96]
  MOV    rbp,qword [rsp+PS574+40]
  MOVSXD rax,dword [rbp+16]
  SUB    r14,rax
  MOV    rbp,qword [rsp+PS574+32]
  MOV    [rsp-8],r14
  FILD   qword [rsp-8]
  FMUL   qword [rbp+732]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FADDP  st1,st0
  FADD   qword [D1]
  PUSH   rax
  FISTP  qword [rsp]
  MOV    rbp,qword [rsp+PS574+48]
  MOVSXD rax,dword [rbp]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Box2
  ADD    rsp,48
; If *Debugger\ProfilerRatioY >= 3
  MOV    rbp,qword [rsp+PS574+0]
  FLD    qword [rbp+732]
  FCOMP  qword [D4]
  FNSTSW ax
  TEST   ah,1h
  JNE   _EndIf2885
; 
; Line(*Area\x, *Area\y + (line-*Area\lineStart)* *Debugger\ProfilerRatioY, *Area\w, 1, $FFFFFF)     
  SUB    rsp,8
  PUSH   qword 16777215
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS574+32]
  MOVSXD rax,dword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS574+40]
  MOVSXD r15,dword [rbp+4]
  MOV    r14,qword [rsp+96]
  MOV    rbp,qword [rsp+PS574+40]
  MOVSXD rax,dword [rbp+16]
  SUB    r14,rax
  MOV    rbp,qword [rsp+PS574+32]
  MOV    [rsp-8],r14
  FILD   qword [rsp-8]
  FMUL   qword [rbp+732]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FADDP  st1,st0
  FADD   qword [D1]
  PUSH   rax
  FISTP  qword [rsp]
  MOV    rbp,qword [rsp+PS574+48]
  MOVSXD rax,dword [rbp]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Line2
  ADD    rsp,48
; EndIf                 
_EndIf2885:
; EndIf
_EndIf2881:
; 
; line + 1
  MOV    r15,qword [rsp+64]
  INC    r15
  MOV    qword [rsp+64],r15
; Wend
  JMP   _While2879
_Wend2879:
; 
; 
; If line < *Area\lineStart + *Area\lines And line < maxlines 
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD r14,dword [rbp+16]
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD rax,dword [rbp+20]
  ADD    r14,rax
  CMP    r15,r14
  JGE    No304
  MOV    r15,qword [rsp+64]
  CMP    r15,qword [rsp+48]
  JGE    No304
Ok304:
  MOV    rax,1
  JMP    End304
No304:
  XOR    rax,rax
End304:
  AND    rax,rax
  JE    _EndIf2887
; length = (*lines\l[line] - *Area\countStart) * *Debugger\ProfilerRatioX
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  MOVSXD r15,dword [rbp]
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD rax,dword [rbp+24]
  SUB    r15,rax
  MOV    rbp,qword [rsp+PS574+0]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FMUL   qword [rbp+724]
  FISTP  qword [rsp+80]
; 
; If length > 0 
  MOV    r15,qword [rsp+80]
  AND    r15,r15
  JLE   _EndIf2889
; If length > *Area\w: length = *Area\w: EndIf               
  MOV    r15,qword [rsp+80]
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD rax,dword [rbp+8]
  CMP    r15,rax
  JLE   _EndIf2891
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD rax,dword [rbp+8]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+80],rax
_EndIf2891:
; 
; If (line-*Area\lineStart)* *Debugger\ProfilerRatioY + height > *Area\h
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD rax,dword [rbp+16]
  SUB    r15,rax
  MOV    rbp,qword [rsp+PS574+0]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FMUL   qword [rbp+732]
  FILD   qword [rsp+72]
  FADDP  st1,st0
  FADD   qword [D1]
  MOV    rbp,qword [rsp+PS574+8]
  FILD   dword [rbp+12]
  FCOMPP
  FNSTSW ax
  TEST   ah,1h
  JE    _EndIf2893
; height = *Area\h - (line-*Area\lineStart)* *Debugger\ProfilerRatioY
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD r15,dword [rbp+12]
  MOV    r14,qword [rsp+64]
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD rax,dword [rbp+16]
  SUB    r14,rax
  MOV    rbp,qword [rsp+PS574+0]
  MOV    [rsp-8],r14
  FILD   qword [rsp-8]
  FMUL   qword [rbp+732]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FXCH
  FSUBP  st1,st0
  FADD   qword [D1]
  FISTP  qword [rsp+72]
; EndIf
_EndIf2893:
; 
; Box(*Area\x, *Area\y + (line-*Area\lineStart)* *Debugger\ProfilerRatioY, length, height, color)
  SUB    rsp,8
  PUSH   qword [rsp+PS574+32]
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+104]
  MOV    rbp,qword [rsp+PS574+40]
  MOVSXD r15,dword [rbp+4]
  MOV    r14,qword [rsp+96]
  MOV    rbp,qword [rsp+PS574+40]
  MOVSXD rax,dword [rbp+16]
  SUB    r14,rax
  MOV    rbp,qword [rsp+PS574+32]
  MOV    [rsp-8],r14
  FILD   qword [rsp-8]
  FMUL   qword [rbp+732]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FADDP  st1,st0
  FADD   qword [D1]
  PUSH   rax
  FISTP  qword [rsp]
  MOV    rbp,qword [rsp+PS574+48]
  MOVSXD rax,dword [rbp]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Box2
  ADD    rsp,48
; If *Debugger\ProfilerRatioY >= 3
  MOV    rbp,qword [rsp+PS574+0]
  FLD    qword [rbp+732]
  FCOMP  qword [D4]
  FNSTSW ax
  TEST   ah,1h
  JNE   _EndIf2895
; 
; Line(*Area\x, *Area\y + (line-*Area\lineStart)* *Debugger\ProfilerRatioY, *Area\w, 1, $FFFFFF)     
  SUB    rsp,8
  PUSH   qword 16777215
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS574+32]
  MOVSXD rax,dword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS574+40]
  MOVSXD r15,dword [rbp+4]
  MOV    r14,qword [rsp+96]
  MOV    rbp,qword [rsp+PS574+40]
  MOVSXD rax,dword [rbp+16]
  SUB    r14,rax
  MOV    rbp,qword [rsp+PS574+32]
  MOV    [rsp-8],r14
  FILD   qword [rsp-8]
  FMUL   qword [rbp+732]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FADDP  st1,st0
  FADD   qword [D1]
  PUSH   rax
  FISTP  qword [rsp]
  MOV    rbp,qword [rsp+PS574+48]
  MOVSXD rax,dword [rbp]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Line2
  ADD    rsp,48
; EndIf                 
_EndIf2895:
; EndIf
_EndIf2889:
; EndIf
_EndIf2887:
; 
; Else 
  JMP   _EndIf2877
_EndIf2878:
; thick.d  = 0
  FLD    qword [D1]
  FSTP   qword [rsp+88]
; lineDraw = 0
  MOV    qword [rsp+96],0
; max      = 0
  MOV    qword [rsp+104],0
; 
; While line < *Area\lineStart + *Area\lines And line < maxlines 
_While2897:
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD r14,dword [rbp+16]
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD rax,dword [rbp+20]
  ADD    r14,rax
  CMP    r15,r14
  JGE    No305
  MOV    r15,qword [rsp+64]
  CMP    r15,qword [rsp+48]
  JGE    No305
Ok305:
  MOV    rax,1
  JMP    End305
No305:
  XOR    rax,rax
End305:
  AND    rax,rax
  JE    _Wend2897
; thick + *Debugger\ProfilerRatioY
  FLD    qword [rsp+88]
  MOV    rbp,qword [rsp+PS574+0]
  FADD   qword [rbp+732]
  FADD   qword [D1]
  FSTP   qword [rsp+88]
; max = Max(max, *lines\l[line])
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+104],rax
; 
; If thick >= 1
  FLD    qword [rsp+88]
  FCOMP  qword [D2]
  FNSTSW ax
  TEST   ah,1h
  JNE   _EndIf2899
; length = (max - *Area\countStart) * *Debugger\ProfilerRatioX
  MOV    r15,qword [rsp+104]
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD rax,dword [rbp+24]
  SUB    r15,rax
  MOV    rbp,qword [rsp+PS574+0]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FMUL   qword [rbp+724]
  FISTP  qword [rsp+80]
; 
; If length > 0 
  MOV    r15,qword [rsp+80]
  AND    r15,r15
  JLE   _EndIf2901
; If length > *Area\w: length = *Area\w: EndIf        
  MOV    r15,qword [rsp+80]
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD rax,dword [rbp+8]
  CMP    r15,rax
  JLE   _EndIf2903
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD rax,dword [rbp+8]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+80],rax
_EndIf2903:
; Line(*Area\x, *Area\y + lineDraw, length, 1, color)
  SUB    rsp,8
  PUSH   qword [rsp+PS574+32]
  PUSH   qword 1
  PUSH   qword [rsp+104]
  MOV    rbp,qword [rsp+PS574+40]
  MOVSXD r15,dword [rbp+4]
  ADD    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS574+48]
  MOVSXD rax,dword [rbp]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Line2
  ADD    rsp,48
; EndIf
_EndIf2901:
; 
; max   = 0
  MOV    qword [rsp+104],0
; thick    - 1
  FLD    qword [rsp+88]
  FADD   qword [D5]
  FSTP   qword [rsp+88]
; lineDraw + 1
  MOV    r15,qword [rsp+96]
  INC    r15
  MOV    qword [rsp+96],r15
; EndIf
_EndIf2899:
; 
; line + 1
  MOV    r15,qword [rsp+64]
  INC    r15
  MOV    qword [rsp+64],r15
; Wend
  JMP   _While2897
_Wend2897:
; 
; If thick > 0
  FLD    qword [rsp+88]
  FCOMP  qword [D1]
  FNSTSW ax
  TEST   ah,41h
  JNE   _EndIf2905
; 
; length = (max - *Area\countStart) * *Debugger\ProfilerRatioX
  MOV    r15,qword [rsp+104]
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD rax,dword [rbp+24]
  SUB    r15,rax
  MOV    rbp,qword [rsp+PS574+0]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FMUL   qword [rbp+724]
  FISTP  qword [rsp+80]
; 
; If length > 0 
  MOV    r15,qword [rsp+80]
  AND    r15,r15
  JLE   _EndIf2907
; If length > *Area\w: length = *Area\w: EndIf        
  MOV    r15,qword [rsp+80]
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD rax,dword [rbp+8]
  CMP    r15,rax
  JLE   _EndIf2909
  MOV    rbp,qword [rsp+PS574+8]
  MOVSXD rax,dword [rbp+8]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+80],rax
_EndIf2909:
; Line(*Area\x, *Area\y + lineDraw, length, 1, color)
  SUB    rsp,8
  PUSH   qword [rsp+PS574+32]
  PUSH   qword 1
  PUSH   qword [rsp+104]
  MOV    rbp,qword [rsp+PS574+40]
  MOVSXD r15,dword [rbp+4]
  ADD    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS574+48]
  MOVSXD rax,dword [rbp]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Line2
  ADD    rsp,48
; EndIf        
_EndIf2907:
; EndIf
_EndIf2905:
; 
; EndIf  
_EndIf2877:
; 
; 
; 
; 
; 
; 
; 
; 
; 
; EndProcedure
_EndProcedureZero575:
  XOR    rax,rax
_EndProcedure575:
  ADD    rsp,112
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure Variable_SortProc(*data1.ListIconData, *data2.ListIconData, *Values.Variable_SortData)
_Procedure492:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS492=64
  SUB    rsp,40
; If *data1 = 0 Or *data2 = 0 
  MOV    r15,qword [rsp+PS492+0]
  AND    r15,r15
  JE     Ok234
  MOV    r15,qword [rsp+PS492+8]
  AND    r15,r15
  JE     Ok234
  JMP    No234
Ok234:
  MOV    rax,1
  JMP    End234
No234:
  XOR    rax,rax
End234:
  AND    rax,rax
  JE    _EndIf1970
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure493
; 
; ElseIf *Values\Type = 0 
  JMP   _EndIf1969
_EndIf1970:
  MOV    rbp,qword [rsp+PS492+16]
  MOVSXD r15,dword [rbp]
  AND    r15,r15
  JNE   _EndIf1971
; ProcedureReturn CompareMemoryString(*Values\Values\p[*data1\UserData], *Values\Values\p[*data2\UserData], #PB_String_NoCase) * *Values\Direction
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS492+24]
  MOV    rbp,qword [rbp+8]
  PUSH   rbp
  MOV    rbp,qword [rsp+PS492+24]
  MOV    rax,qword [rbp]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp]
  MOV    rbp,qword [rsp+PS492+32]
  MOV    rbp,qword [rbp+8]
  PUSH   rbp
  MOV    rbp,qword [rsp+PS492+24]
  MOV    rax,qword [rbp]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CompareMemoryString2
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS492+16]
  MOVSXD rax,dword [rbp+4]
  IMUL   r15,rax
  MOV    rax,r15
  JMP   _EndProcedure493
; 
; Else 
  JMP   _EndIf1969
_EndIf1971:
; If *Values\Values\q[*data1\UserData] = *Values\Values\q[*data2\UserData]
  MOV    rbp,qword [rsp+PS492+16]
  MOV    rbp,qword [rbp+8]
  PUSH   rbp
  MOV    rbp,qword [rsp+PS492+8]
  MOV    rax,qword [rbp]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  MOV    r15,qword [rbp]
  MOV    rbp,qword [rsp+PS492+16]
  MOV    rbp,qword [rbp+8]
  PUSH   rbp
  MOV    rbp,qword [rsp+PS492+16]
  MOV    rax,qword [rbp]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  CMP    r15,qword [rbp]
  JNE   _EndIf1974
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure493
; ElseIf *Values\Values\q[*data1\UserData] < *Values\Values\q[*data2\UserData]
  JMP   _EndIf1973
_EndIf1974:
  MOV    rbp,qword [rsp+PS492+16]
  MOV    rbp,qword [rbp+8]
  PUSH   rbp
  MOV    rbp,qword [rsp+PS492+8]
  MOV    rax,qword [rbp]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  MOV    r15,qword [rbp]
  MOV    rbp,qword [rsp+PS492+16]
  MOV    rbp,qword [rbp+8]
  PUSH   rbp
  MOV    rbp,qword [rsp+PS492+16]
  MOV    rax,qword [rbp]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  CMP    r15,qword [rbp]
  JGE   _EndIf1975
; ProcedureReturn (-1) * *Values\Direction
  MOV    rbp,qword [rsp+PS492+16]
  MOVSXD r15,dword [rbp+4]
  IMUL   r15,-1
  MOV    rax,r15
  JMP   _EndProcedure493
; Else
  JMP   _EndIf1973
_EndIf1975:
; ProcedureReturn *Values\Direction
  MOV    rbp,qword [rsp+PS492+16]
  MOVSXD rax,dword [rbp+4]
  JMP   _EndProcedure493
; EndIf
_EndIf1973:
; 
; EndIf
_EndIf1969:
; EndProcedure
_EndProcedureZero493:
  XOR    rax,rax
_EndProcedure493:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure Variable_WindowCallback(Window, Message, wParam, lParam)
_Procedure494:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PUSH   r15
  PS494=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Result = #PB_ProcessPureBasicEvents
  MOV    qword [rsp+40],-522133279
; 
; If Message = #WM_NOTIFY
  MOV    r15,qword [rsp+PS494+8]
  CMP    r15,78
  JNE   _EndIf1978
; *nmv.NM_LISTVIEW = lParam      
  PUSH   qword [rsp+PS494+24]
  POP    rax
  MOV    qword [rsp+48],rax
; If *nmv\hdr\code = #LVN_COLUMNCLICK
  MOV    rbp,qword [rsp+48]
  MOVSXD r15,dword [rbp+16]
  CMP    r15,-108
  JNE   _EndIf1980
; Column = *nmv\iSubItem
  MOV    rbp,qword [rsp+48]
  MOVSXD rax,dword [rbp+28]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+56],rax
; 
; ForEach RunningDebuggers()
  MOV    rcx,qword [t_RunningDebuggers]
  CALL   PB_ResetList
_ForEach1981:
  MOV    rcx,qword [t_RunningDebuggers]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next1981
; If RunningDebuggers()\Windows[#DEBUGGER_WINDOW_Variable] <> 0
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+872]
  AND    r15,r15
  JE    _EndIf1983
; *Debugger.DebuggerData = @RunningDebuggers()
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    qword [rsp+64],rax
; 
; Select *nmv\hdr\hwndFrom
  MOV    rbp,qword [rsp+48]
  PUSH   qword [rbp]
; 
; Case GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ArrayInfo])
  SUB    rsp,8
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2376]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  CMP    rax,[rsp]
  JNE   _Case166
; If *Debugger\ArraySortColumn = Column
  MOV    rbp,qword [rsp+72]
  MOVSX  r15,byte [rbp+148]
  CMP    r15,qword [rsp+64]
  JNE   _EndIf1985
; *Debugger\ArraySortDirection * -1
  MOV    rbp,qword [rsp+72]
  MOVSX  r15,byte [rbp+149]
  IMUL   r15,-1
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+80]
  POP    rax
  MOV    byte [rbp+149],al
; Else
  JMP   _EndIf1984
_EndIf1985:
; *Debugger\ArraySortColumn = Column
  PUSH   qword [rsp+64]
  MOV    rbp,qword [rsp+80]
  POP    rax
  MOV    byte [rbp+148],al
; *Debugger\ArraySortDirection = 1
  MOV    rbp,qword [rsp+72]
  MOV    byte [rbp+149],1
; EndIf
_EndIf1984:
; VariableWindowSort(*Debugger, *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ArrayInfo])
  SUB    rsp,8
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2376]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure490
  ADD    rsp,40
; Break                
  ADD    rsp,8
  JMP   _Next1981
; 
; Case GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalArrayInfo])
  JMP   _EndSelect24
_Case166:
  SUB    rsp,8
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2384]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  CMP    rax,[rsp]
  JNE   _Case167
; If *Debugger\LocalArraySortColumn = Column
  MOV    rbp,qword [rsp+72]
  MOVSX  r15,byte [rbp+150]
  CMP    r15,qword [rsp+64]
  JNE   _EndIf1988
; *Debugger\LocalArraySortDirection * -1
  MOV    rbp,qword [rsp+72]
  MOVSX  r15,byte [rbp+151]
  IMUL   r15,-1
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+80]
  POP    rax
  MOV    byte [rbp+151],al
; Else
  JMP   _EndIf1987
_EndIf1988:
; *Debugger\LocalArraySortColumn = Column
  PUSH   qword [rsp+64]
  MOV    rbp,qword [rsp+80]
  POP    rax
  MOV    byte [rbp+150],al
; *Debugger\LocalArraySortDirection = 1
  MOV    rbp,qword [rsp+72]
  MOV    byte [rbp+151],1
; EndIf
_EndIf1987:
; VariableWindowSort(*Debugger, *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalArrayInfo])
  SUB    rsp,8
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2384]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure490
  ADD    rsp,40
; Break              
  ADD    rsp,8
  JMP   _Next1981
; 
; Case GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListInfo])
  JMP   _EndSelect24
_Case167:
  SUB    rsp,8
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2408]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  CMP    rax,[rsp]
  JNE   _Case168
; If *Debugger\ListSortColumn = Column
  MOV    rbp,qword [rsp+72]
  MOVSX  r15,byte [rbp+152]
  CMP    r15,qword [rsp+64]
  JNE   _EndIf1991
; *Debugger\ListSortDirection * -1
  MOV    rbp,qword [rsp+72]
  MOVSX  r15,byte [rbp+153]
  IMUL   r15,-1
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+80]
  POP    rax
  MOV    byte [rbp+153],al
; Else
  JMP   _EndIf1990
_EndIf1991:
; *Debugger\ListSortColumn = Column
  PUSH   qword [rsp+64]
  MOV    rbp,qword [rsp+80]
  POP    rax
  MOV    byte [rbp+152],al
; *Debugger\ListSortDirection = 1
  MOV    rbp,qword [rsp+72]
  MOV    byte [rbp+153],1
; EndIf
_EndIf1990:
; VariableWindowSort(*Debugger, *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListInfo])
  SUB    rsp,8
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2408]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure490
  ADD    rsp,40
; Break
  ADD    rsp,8
  JMP   _Next1981
; 
; Case GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalListInfo])
  JMP   _EndSelect24
_Case168:
  SUB    rsp,8
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2416]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  CMP    rax,[rsp]
  JNE   _Case169
; If *Debugger\LocalListSortColumn = Column
  MOV    rbp,qword [rsp+72]
  MOVSX  r15,byte [rbp+154]
  CMP    r15,qword [rsp+64]
  JNE   _EndIf1994
; *Debugger\LocalListSortDirection * -1
  MOV    rbp,qword [rsp+72]
  MOVSX  r15,byte [rbp+155]
  IMUL   r15,-1
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+80]
  POP    rax
  MOV    byte [rbp+155],al
; Else
  JMP   _EndIf1993
_EndIf1994:
; *Debugger\LocalListSortColumn = Column
  PUSH   qword [rsp+64]
  MOV    rbp,qword [rsp+80]
  POP    rax
  MOV    byte [rbp+154],al
; *Debugger\LocalListSortDirection = 1
  MOV    rbp,qword [rsp+72]
  MOV    byte [rbp+155],1
; EndIf
_EndIf1993:
; VariableWindowSort(*Debugger, *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalListInfo])
  SUB    rsp,8
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2416]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure490
  ADD    rsp,40
; Break   
  ADD    rsp,8
  JMP   _Next1981
; 
; Case GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapInfo])
  JMP   _EndSelect24
_Case169:
  SUB    rsp,8
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2440]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  CMP    rax,[rsp]
  JNE   _Case170
; If *Debugger\MapSortColumn = Column
  MOV    rbp,qword [rsp+72]
  MOVSX  r15,byte [rbp+156]
  CMP    r15,qword [rsp+64]
  JNE   _EndIf1997
; *Debugger\MapSortDirection * -1
  MOV    rbp,qword [rsp+72]
  MOVSX  r15,byte [rbp+157]
  IMUL   r15,-1
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+80]
  POP    rax
  MOV    byte [rbp+157],al
; Else
  JMP   _EndIf1996
_EndIf1997:
; *Debugger\MapSortColumn = Column
  PUSH   qword [rsp+64]
  MOV    rbp,qword [rsp+80]
  POP    rax
  MOV    byte [rbp+156],al
; *Debugger\MapSortDirection = 1
  MOV    rbp,qword [rsp+72]
  MOV    byte [rbp+157],1
; EndIf
_EndIf1996:
; VariableWindowSort(*Debugger, *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapInfo])
  SUB    rsp,8
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2440]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure490
  ADD    rsp,40
; Break
  ADD    rsp,8
  JMP   _Next1981
; 
; Case GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalMapInfo])
  JMP   _EndSelect24
_Case170:
  SUB    rsp,8
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2448]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  CMP    rax,[rsp]
  JNE   _Case171
; If *Debugger\LocalMapSortColumn = Column
  MOV    rbp,qword [rsp+72]
  MOVSX  r15,byte [rbp+158]
  CMP    r15,qword [rsp+64]
  JNE   _EndIf2000
; *Debugger\LocalMapSortDirection * -1
  MOV    rbp,qword [rsp+72]
  MOVSX  r15,byte [rbp+159]
  IMUL   r15,-1
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+80]
  POP    rax
  MOV    byte [rbp+159],al
; Else
  JMP   _EndIf1999
_EndIf2000:
; *Debugger\LocalMapSortColumn = Column
  PUSH   qword [rsp+64]
  MOV    rbp,qword [rsp+80]
  POP    rax
  MOV    byte [rbp+158],al
; *Debugger\LocalMapSortDirection = 1
  MOV    rbp,qword [rsp+72]
  MOV    byte [rbp+159],1
; EndIf
_EndIf1999:
; VariableWindowSort(*Debugger, *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalMapInfo])
  SUB    rsp,8
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2448]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure490
  ADD    rsp,40
; Break             
  ADD    rsp,8
  JMP   _Next1981
; 
; EndSelect
_Case171:
_EndSelect24:
  POP    rax
; EndIf
_EndIf1983:
; Next RunningDebuggers()
  JMP   _ForEach1981
_Next1981:
; EndIf
_EndIf1980:
; EndIf
_EndIf1978:
; 
; ProcedureReturn Result
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure495
; EndProcedure
_EndProcedureZero495:
  XOR    rax,rax
_EndProcedure495:
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure Network_ConnectServer(*This.Network_Communication)
_Procedure392:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS392=160
  MOV    rax,12
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; Success = #False
  MOV    qword [rsp+40],0
; Protected NewList Values$()
  PUSH   qword [rsp+48]
  POP    rcx
  CALL   PB_FreeList
  MOV    r9,8
  MOV    r8,s_s
  LEA    rdx,[rsp+48]
  MOV    rcx,8
  CALL   PB_NewList
; AcceptSocket = #SOCKET_ERROR
  MOV    qword [rsp+64],-1
; 
; If *This\Password$
  MOV    rbp,qword [rsp+PS392+0]
  MOV    rcx,qword [rbp+16]
  XOR    rdx,rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf1225
; Network_SetupEncryption(*This, *This\Password$)
  MOV    rbp,qword [rsp+PS392+0]
  PUSH   qword [rbp+16]
  PUSH   qword [rsp+PS392+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure368
; EndIf
_EndIf1225:
; 
; If *This\Host$ <> ""
  MOV    rbp,qword [rsp+PS392+0]
  PUSH   qword [rbp+8]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf1227
; Title$ = ReplaceString(ReplaceString(Language("NetworkDebugger", "ServerTitleNamed"), "%port%", Str(*This\Port)), "%host%", *This\Host$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS392+24]
  PUSH   qword [rbp+8]
  MOV    rax,_S117
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS392+72]
  MOVSXD rax,dword [rbp+24]
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S116
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S115
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ReplaceString
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ReplaceString
  ADD    rsp,40
  LEA    rcx,[rsp+80]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf1226
_EndIf1227:
; Title$ = ReplaceString(Language("NetworkDebugger", "ServerTitle"), "%port%", Str(*This\Port))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS392+40]
  MOVSXD rax,dword [rbp+24]
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S116
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S118
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ReplaceString
  ADD    rsp,40
  LEA    rcx,[rsp+80]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf  
_EndIf1226:
; 
; Network_OpenWindow(*This, Title$)  
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+PS392+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure384
; HideWindow(*This\Window, 0) 
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS392+8]
  PUSH   qword [rbp+76]
  POP    rcx
  POP    rdx
  CALL   PB_HideWindow
; 
; If Network_Listen(*This\Socket, *This\Host$, *This\Port)
  SUB    rsp,8
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS392+16]
  MOVSXD rax,dword [rbp+24]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS392+24]
  MOV    rcx,qword [rbp+8]
  SUB    rsp,40
  CALL   SYS_ToAscii
  ADD    rsp,40
  PUSH   rax
  MOV    qword [rsp+24],rax
  MOV    rbp,qword [rsp+PS392+32]
  PUSH   qword [rbp+60]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   Network_Listen
  ADD    rsp,40
  PUSH   rax
  MOV    rcx,[rsp+8]
  SUB    rsp,32
  CALL   SYS_FreeStringNoCheck
  ADD    rsp,32
  POP    rax
  ADD    rsp,8
  AND    rax,rax
  JE    _EndIf1230
; 
; While *This\AbortPressed = #False And Success = 0
_While1231:
  MOV    rbp,qword [rsp+PS392+0]
  MOVSXD r15,dword [rbp+120]
  AND    r15,r15
  JNE    No183
  MOV    r15,qword [rsp+40]
  AND    r15,r15
  JNE    No183
Ok183:
  MOV    rax,1
  JMP    End183
No183:
  XOR    rax,rax
End183:
  AND    rax,rax
  JE    _Wend1231
; 
; Network_AddLog(*This, Language("NetworkDebugger", "Listen"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S119
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+24]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; While *This\AbortPressed = #False And AcceptSocket = #SOCKET_ERROR
_While1232:
  MOV    rbp,qword [rsp+PS392+0]
  MOVSXD r15,dword [rbp+120]
  AND    r15,r15
  JNE    No184
  MOV    r15,qword [rsp+64]
  CMP    r15,-1
  JNE    No184
Ok184:
  MOV    rax,1
  JMP    End184
No184:
  XOR    rax,rax
End184:
  AND    rax,rax
  JE    _Wend1232
; AcceptSocket = Network_CheckAccept(*This\Socket)
  MOV    rbp,qword [rsp+PS392+0]
  PUSH   qword [rbp+60]
  POP    rcx
  CALL   Network_CheckAccept
  MOV    qword [rsp+64],rax
; If AcceptSocket = #SOCKET_ERROR 
  MOV    r15,qword [rsp+64]
  CMP    r15,-1
  JNE   _EndIf1234
; If Network_FlushWindowEvents(*This) = 0
  PUSH   qword [rsp+PS392+0]
  POP    rcx
  CALL  _Procedure388
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1236
; Delay(50)            
  PUSH   qword 50
  POP    rcx
  CALL   PB_Delay
; EndIf
_EndIf1236:
; EndIf
_EndIf1234:
; Wend
  JMP   _While1232
_Wend1232:
; 
; If *This\AbortPressed
  MOV    rbp,qword [rsp+PS392+0]
  CMP    dword [rbp+120],0
  JE    _EndIf1238
; Break
  JMP   _Wend1231
; EndIf
_EndIf1238:
; 
; 
; Network_FlushWindowEvents(*This)
  PUSH   qword [rsp+PS392+0]
  POP    rcx
  CALL  _Procedure388
; 
; *This\EncryptionDataSent = 0
  MOV    rbp,qword [rsp+PS392+0]
  MOV    dword [rbp+144],0
; 
; While *This\AbortPressed = #False And Success = 0
_While1239:
  MOV    rbp,qword [rsp+PS392+0]
  MOVSXD r15,dword [rbp+120]
  AND    r15,r15
  JNE    No185
  MOV    r15,qword [rsp+40]
  AND    r15,r15
  JNE    No185
Ok185:
  MOV    rax,1
  JMP    End185
No185:
  XOR    rax,rax
End185:
  AND    rax,rax
  JE    _Wend1239
; Select Network_CheckData(AcceptSocket)
  PUSH   qword [rsp+64]
  POP    rcx
  CALL   Network_CheckData
  MOV    rax,rax
  PUSH   rax
; 
; Case 0 
  XOR    r15,r15
  CMP    r15,[rsp]
  JNE   _Case78
; If Network_FlushWindowEvents(*This) = 0
  SUB    rsp,8
  PUSH   qword [rsp+PS392+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure388
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1241
; Delay(50)
  SUB    rsp,8
  PUSH   qword 50
  POP    rcx
  SUB    rsp,32
  CALL   PB_Delay
  ADD    rsp,40
; EndIf
_EndIf1241:
; 
; Case 1            
  JMP   _EndSelect10
_Case78:
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case79
; Header$   = Network_ReadHeader(AcceptSocket, Values$(), @*CommandData)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  LEA    rax,[rsp+120]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure378
  ADD    rsp,48
  LEA    rcx,[rsp+96]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; VersionNb = Val(StringField(Header$, 2, " "))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S25
  PUSH   rax
  PUSH   qword 2
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+104],rax
; 
; If Header$ = "-error-" Or Header$ = ""    
  PUSH   qword [rsp+88]
  MOV    rcx,_S107
  POP    rdx
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JNE    Ok186
  PUSH   qword [rsp+88]
  MOV    rcx,_S3
  POP    rdx
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JNE    Ok186
  JMP    No186
Ok186:
  MOV    rax,1
  JMP    End186
No186:
  XOR    rax,rax
End186:
  AND    rax,rax
  JE    _EndIf1243
; Network_AddLog(*This, Language("NetworkDebugger", "ConnectionLost"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S120
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+24]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Break 
  ADD    rsp,8
  JMP   _Wend1239
; 
; ElseIf VersionNb <> #PB_Compiler_Version
  JMP   _EndIf1242
_EndIf1243:
  MOV    r15,qword [rsp+104]
  CMP    r15,570
  JE    _EndIf1244
; Network_AddLog(*This, Language("Misc", "Error")+": "+Language("NetworkDebugger", "Error_WrongVersion"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S121
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S122
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+24]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Network_AddLog(*This, Language("NetworkDebugger", "ExeVersion")+": "+StrF(VersionNb / 100.0, 2))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S123
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  FILD   qword [rsp+144]
  FDIV   dword [F4]
  SUB    rsp,8
  FSTP   dword [rsp]
  MOVSS  xmm0,dword [rsp]
  ADD    rsp,8
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StrF2
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+24]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Network_AddLog(*This, Language("NetworkDebugger", "DebuggerVersion")+": "+StrF(#PB_Compiler_Version / 100.0, 2))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S124
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  FLD    dword [F5]
  SUB    rsp,8
  FSTP   dword [rsp]
  MOVSS  xmm0,dword [rsp]
  ADD    rsp,8
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StrF2
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+24]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Network_AddLog(*This, Language("NetworkDebugger", "ConnectionDenied"))              
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S125
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+24]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Network_SendError(AcceptSocket, "WrongVersion", "The PureBasic Version does not match.")
  SUB    rsp,8
  MOV    rax,_S127
  PUSH   rax
  MOV    rax,_S126
  PUSH   rax
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure380
  ADD    rsp,40
; Break
  ADD    rsp,8
  JMP   _Wend1239
; 
; Else
  JMP   _EndIf1242
_EndIf1244:
; Select UCase(StringField(Header$, 1, " "))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S25
  PUSH   rax
  PUSH   qword 1
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
; 
; Case "CONNECT"                                    
  MOV    rdx,_S128
  MOV    rcx,[rsp]
  ADD    rcx,[PB_StringBase]
  SUB    rsp,32
  CALL   SYS_StringEqual
  ADD    rsp,32
  OR     rax,rax
  JE    _Case80
; Select UCase(StringField(Header$, 3, " "))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S25
  PUSH   rax
  PUSH   qword 3
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
; 
; Case "EXECUTABLE"
  MOV    rdx,_S129
  MOV    rcx,[rsp]
  ADD    rcx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _Case81
; Network_AddLog(*This, Language("Misc", "Error")+": "+Language("NetworkDebugger", "Error_NoExecutable"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S121
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S130
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Network_AddLog(*This, Language("NetworkDebugger", "ConnectionDenied")) 
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S125
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Network_SendError(AcceptSocket, "NoExecutable", "The server is not a debug-able executable.")
  SUB    rsp,8
  MOV    rax,_S132
  PUSH   rax
  MOV    rax,_S131
  PUSH   rax
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure380
  ADD    rsp,40
; Break
  MOV    rax,[rsp+8]
  MOV    qword [PB_StringBasePosition],rax
  ADD    rsp,24
  JMP   _Wend1239
; 
; Case "DEBUGGER"
  JMP   _EndSelect12
_Case81:
  MOV    rdx,_S133
  MOV    rcx,[rsp]
  ADD    rcx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _Case82
; PasswordOK = 0
  MOV    qword [rsp+128],0
; 
; If *This\Password$ And *This\EncryptionDataSent > 0
  MOV    rbp,qword [rsp+PS392+24]
  MOV    rcx,qword [rbp+16]
  XOR    rdx,rdx
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JNE    No187
  MOV    rbp,qword [rsp+PS392+24]
  MOVSXD r15,dword [rbp+144]
  AND    r15,r15
  JLE    No187
Ok187:
  MOV    rax,1
  JMP    End187
No187:
  XOR    rax,rax
End187:
  AND    rax,rax
  JE    _EndIf1247
; If *This\EncryptionHash$ = Network_GetValue("EncryptionHash", Values$())
  MOV    rbp,qword [rsp+PS392+24]
  PUSH   qword [rbp+132]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+96]
  MOV    rax,_S134
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure376
  ADD    rsp,40
  POP    rcx
  POP    rdx
  MOV    qword [PB_StringBasePosition],rcx
  ADD    rcx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _EndIf1249
; PasswordOK = 1
  MOV    qword [rsp+128],1
; EndIf
_EndIf1249:
; EndIf
_EndIf1247:
; 
; If *This\Password$ And PasswordOK = 0
  MOV    rbp,qword [rsp+PS392+24]
  MOV    rcx,qword [rbp+16]
  XOR    rdx,rdx
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JNE    No188
  MOV    r15,qword [rsp+128]
  AND    r15,r15
  JNE    No188
Ok188:
  MOV    rax,1
  JMP    End188
No188:
  XOR    rax,rax
End188:
  AND    rax,rax
  JE    _EndIf1251
; 
; *Block = Network_CreateHandshakeBlock(*This)
  SUB    rsp,8
  PUSH   qword [rsp+PS392+32]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure370
  ADD    rsp,40
  MOV    qword [rsp+136],rax
; If *Block
  CMP    qword [rsp+136],0
  JE    _EndIf1253
; Response$ = "ENCRYPTION " + Str(#PB_Compiler_Version) + " AES" + #LF$
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S135
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 570
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S136
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+152]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Response$ + "  Length: "+Str(#EncryptionHandshakeSize) + #LF$
  MOV    rcx,qword [rsp+144]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S137
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 32
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+152]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Response$ + #LF$
  MOV    rcx,qword [rsp+144]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+152]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; If Network_SendString(AcceptSocket, Response$) = 0 Or Network_SendData(AcceptSocket, *Block, #EncryptionHandshakeSize) = 0
  SUB    rsp,8
  MOV    rcx,qword [rsp+152]
  SUB    rsp,32
  CALL   SYS_ToAscii
  ADD    rsp,32
  PUSH   rax
  MOV    qword [rsp+8],rax
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   Network_SendString
  ADD    rsp,32
  PUSH   rax
  MOV    rcx,[rsp+8]
  SUB    rsp,40
  CALL   SYS_FreeStringNoCheck
  ADD    rsp,40
  POP    rax
  ADD    rsp,8
  MOV    r15,rax
  AND    r15,r15
  JE     Ok189
  SUB    rsp,8
  PUSH   qword 32
  PUSH   qword [rsp+152]
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   Network_SendData
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,r15
  JE     Ok189
  JMP    No189
Ok189:
  MOV    rax,1
  JMP    End189
No189:
  XOR    rax,rax
End189:
  AND    rax,rax
  JE    _EndIf1255
; Network_AddLog(*This, Language("NetworkDebugger", "ConnectionLost")) 
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S120
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; FreeMemory(*Block)
  SUB    rsp,8
  PUSH   qword [rsp+144]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FreeMemory
  ADD    rsp,40
; Break
  MOV    rax,[rsp+8]
  MOV    qword [PB_StringBasePosition],rax
  ADD    rsp,24
  JMP   _Wend1239
; EndIf          
_EndIf1255:
; *This\EncryptionDataSent + 1                
  MOV    rbp,qword [rsp+PS392+24]
  MOVSXD r15,dword [rbp+144]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS392+32]
  POP    rax
  MOV    dword [rbp+144],eax
; 
; 
; FreeMemory(*Block)
  SUB    rsp,8
  PUSH   qword [rsp+144]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FreeMemory
  ADD    rsp,40
; Else
  JMP   _EndIf1252
_EndIf1253:
; Network_AddLog(*This, Language("Misc", "Error")+": " + Language("NetworkDebugger", "Error_FatalError"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S121
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S138
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Network_AddLog(*This, Language("NetworkDebugger", "ConnectionDenied")) 
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S125
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Network_SendError(AcceptSocket, "FatalError", "Fatal error.")
  SUB    rsp,8
  MOV    rax,_S140
  PUSH   rax
  MOV    rax,_S139
  PUSH   rax
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure380
  ADD    rsp,40
; Break
  MOV    rax,[rsp+8]
  MOV    qword [PB_StringBasePosition],rax
  ADD    rsp,24
  JMP   _Wend1239
; EndIf
_EndIf1252:
; 
; 
; Else 
  JMP   _EndIf1250
_EndIf1251:
; 
; 
; If *This\Password$
  MOV    rbp,qword [rsp+PS392+24]
  MOV    rcx,qword [rbp+16]
  XOR    rdx,rdx
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JNE   _EndIf1259
; *This\EncryptStream = 1
  MOV    rbp,qword [rsp+PS392+24]
  MOV    dword [rbp+140],1
; EndIf
_EndIf1259:
; 
; Response$ = "ACCEPT " + Str(#PB_Compiler_Version) + " DEBUGGER" + #LF$
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S141
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 570
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S142
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+152]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Response$ + "  CallOnStart: "+Str(CallDebuggerOnStart) + #LF$
  MOV    rcx,qword [rsp+144]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S143
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [v_CallDebuggerOnStart]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+152]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Response$ + "  CallOnEnd: "+Str(CallDebuggerOnEnd) + #LF$
  MOV    rcx,qword [rsp+144]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S144
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [v_CallDebuggerOnEnd]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+152]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Response$ + "  Unicode: "+Str(#PB_Compiler_Unicode) + #LF$
  MOV    rcx,qword [rsp+144]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S145
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+152]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Response$ + "  BigEndian: "+Str(#DEBUGGER_BigEndian) + #LF$
  MOV    rcx,qword [rsp+144]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S146
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+152]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Response$ + "  Encryption: "+Str(*This\EncryptStream) + #LF$
  MOV    rcx,qword [rsp+144]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S147
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS392+56]
  MOVSXD rax,dword [rbp+140]
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+152]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Response$ + #LF$
  MOV    rcx,qword [rsp+144]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+152]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; If Network_SendString(AcceptSocket, Response$)
  SUB    rsp,8
  MOV    rcx,qword [rsp+152]
  SUB    rsp,32
  CALL   SYS_ToAscii
  ADD    rsp,32
  PUSH   rax
  MOV    qword [rsp+8],rax
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   Network_SendString
  ADD    rsp,32
  PUSH   rax
  MOV    rcx,[rsp+8]
  SUB    rsp,40
  CALL   SYS_FreeStringNoCheck
  ADD    rsp,40
  POP    rax
  ADD    rsp,8
  AND    rax,rax
  JE    _EndIf1261
; Success = #True
  MOV    qword [rsp+64],1
; Network_AddLog(*This, Language("NetworkDebugger", "ConnectionSuccess"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S148
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Else
  JMP   _EndIf1260
_EndIf1261:
; Network_AddLog(*This, Language("NetworkDebugger", "ConnectionLost")) 
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S120
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; EndIf     
_EndIf1260:
; Break                        
  MOV    rax,[rsp+8]
  MOV    qword [PB_StringBasePosition],rax
  ADD    rsp,24
  JMP   _Wend1239
; EndIf
_EndIf1250:
; 
; Default                    
  JMP   _EndSelect12
_Case82:
; Network_AddLog(*This, Language("Misc", "Error")+": "+Language("NetworkDebugger", "Error_NoService"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S121
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S149
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Network_AddLog(*This, Language("NetworkDebugger", "ConnectionDenied")) 
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S125
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Network_SendError(AcceptSocket, "NoService", "The server cannot provide the requested service.")
  SUB    rsp,8
  MOV    rax,_S151
  PUSH   rax
  MOV    rax,_S150
  PUSH   rax
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure380
  ADD    rsp,40
; Break
  MOV    rax,[rsp+8]
  MOV    qword [PB_StringBasePosition],rax
  ADD    rsp,24
  JMP   _Wend1239
; 
; EndSelect                                                    
_Case83:
_EndSelect12:
  POP    qword [PB_StringBasePosition]
; 
; Default
  JMP   _EndSelect11
_Case80:
; Network_AddLog(*This, Language("Misc", "Error")+": "+Language("NetworkDebugger", "Error_InvalidRequest"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S121
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S152
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Network_AddLog(*This, Language("NetworkDebugger", "ConnectionDenied"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S125
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Network_SendError(AcceptSocket, "InvalidRequest", "Invalid request.")
  MOV    rax,_S154
  PUSH   rax
  MOV    rax,_S153
  PUSH   rax
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure380
  ADD    rsp,32
; Break   
  MOV    rax,[rsp+0]
  MOV    qword [PB_StringBasePosition],rax
  ADD    rsp,16
  JMP   _Wend1239
; 
; EndSelect
_Case84:
_EndSelect11:
  POP    qword [PB_StringBasePosition]
; 
; EndIf
_EndIf1242:
; 
; If *CommandData
  CMP    qword [rsp+96],0
  JE    _EndIf1264
; FreeMemory(*CommandData)
  SUB    rsp,8
  PUSH   qword [rsp+104]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FreeMemory
  ADD    rsp,40
; *CommandData = 0
  MOV    qword [rsp+96],0
; EndIf
_EndIf1264:
; 
; Case 2
  JMP   _EndSelect10
_Case79:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case85
; Network_AddLog(*This, Language("NetworkDebugger", "ConnectionLost"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S120
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+24]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Break
  ADD    rsp,8
  JMP   _Wend1239
; 
; EndSelect
_Case85:
_EndSelect10:
  POP    rax
; Wend
  JMP   _While1239
_Wend1239:
; 
; If Success = 0
  MOV    r15,qword [rsp+40]
  AND    r15,r15
  JNE   _EndIf1266
; 
; Network_CloseSocket(AcceptSocket)
  PUSH   qword [rsp+64]
  POP    rcx
  CALL   Network_CloseSocket
; AcceptSocket = #SOCKET_ERROR
  MOV    qword [rsp+64],-1
; EndIf
_EndIf1266:
; 
; Wend
  JMP   _While1231
_Wend1231:
; 
; Else
  JMP   _EndIf1229
_EndIf1230:
; Network_AddLog(*This, Language("NetworkDebugger", "ServerFailed") + " " + Str(*This\Port))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S155
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S25
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS392+40]
  MOVSXD rax,dword [rbp+24]
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS392+24]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; 
; 
; 
; SetActiveWindow(*This\Window)       
  MOV    rbp,qword [rsp+PS392+0]
  PUSH   qword [rbp+76]
  POP    rcx
  CALL   PB_SetActiveWindow
; MessageRequester("PureBasic Debugger", Language("NetworkDebugger", "ServerFailed") + " " + Str(*This\Port), #FLAG_Error)       
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 16
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S155
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rcx,_S25
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS392+56]
  MOVSXD rax,dword [rbp+24]
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S156
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_MessageRequester2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf1229:
; 
; 
; If Success
  CMP    qword [rsp+40],0
  JE    _EndIf1269
; 
; 
; Network_CloseSocket(*This\Socket)
  MOV    rbp,qword [rsp+PS392+0]
  PUSH   qword [rbp+60]
  POP    rcx
  CALL   Network_CloseSocket
; *This\Socket = AcceptSocket
  PUSH   qword [rsp+64]
  MOV    rbp,qword [rsp+PS392+8]
  POP    rax
  MOV    qword [rbp+60],rax
; 
; 
; 
; *This\CommandReceived = 0 
  MOV    rbp,qword [rsp+PS392+0]
  MOV    dword [rbp+36],0
; *This\CommandTimeout  = ElapsedMilliseconds()    
  CALL   PB_ElapsedMilliseconds
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS392+8]
  POP    rax
  MOV    qword [rbp+40],rax
; 
; *This\Connected = 1 
  MOV    rbp,qword [rsp+PS392+0]
  MOV    dword [rbp+28],1
; 
; EndIf  
_EndIf1269:
; 
; Network_CloseWindow(*This)
  PUSH   qword [rsp+PS392+0]
  POP    rcx
  CALL  _Procedure386
; 
; ProcedureReturn Success
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure393
; EndProcedure
_EndProcedureZero393:
  XOR    rax,rax
_EndProcedure393:
  PUSH   rax
  MOV    rcx,qword [rsp+80]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+128]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+88]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,40
  CALL   PB_FreeList
  ADD    rsp,40
  POP    rax
  ADD    rsp,136
  POP    r15
  POP    rbp
  RET
; Procedure GetRequiredHeight(Gadget, Flags = 0)
_Procedure92:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PS92=64
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Protected Width.l, Height.l
; GetRequiredSize(Gadget, @Width, @Height, Flags)
  PUSH   qword [rsp+PS92+8]
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS92+24]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; ProcedureReturn Height
  MOVSXD rax,dword [rsp+48]
  JMP   _EndProcedure93
; EndProcedure 
_EndProcedureZero93:
  XOR    rax,rax
_EndProcedure93:
  ADD    rsp,56
  RET
; Procedure SetCodePage(Gadget)
_Procedure136:
  MOV    qword [rsp+8],rcx
  PUSH   r15
  PS136=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; linfo.s = Space(6)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 6
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Space
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; linfo_len = GetLocaleInfo_(GetSystemDefaultLCID_(), #LOCALE_IDEFAULTANSICODEPAGE, @linfo, 6)
  PUSH   qword 6
  MOV    rax,qword [rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 4100
  SUB    rsp,8
  SUB    rsp,32
  CALL   GetSystemDefaultLCID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   GetLocaleInfoW
  MOV    qword [rsp+48],rax
; If linfo_len>0
  MOV    r15,qword [rsp+48]
  AND    r15,r15
  JLE   _EndIf51
; 
; 
; If Val(Mid(linfo, 1, linfo_len))<>0
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+88]
  PUSH   qword 1
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    r15,rax
  AND    r15,r15
  JE    _EndIf53
; SendMessage_(GadgetID(Gadget), #EM_SETTEXTMODE, #TM_SINGLECODEPAGE, 0)
  PUSH   qword 0
  PUSH   qword 16
  PUSH   qword 1113
  SUB    rsp,8
  PUSH   qword [rsp+PS136+32]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; EndIf
_EndIf53:
; EndIf
_EndIf51:
; EndProcedure
_EndProcedureZero137:
  XOR    rax,rax
_EndProcedure137:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,64
  POP    r15
  RET
; Procedure UpdateLibraryViewer(*Debugger.DebuggerData)
_Procedure564:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS564=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; SetWindowTitle(*Debugger\Windows[#DEBUGGER_WINDOW_Library], Language("Debugger","LibraryViewerTitle") + " - " + GetFilePart(*Debugger\FileName$))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S315
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS564+40]
  PUSH   qword [rbp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetFilePart
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS564+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+880]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetWindowTitle
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Text1], Language("Debugger","SelectLibrary")+":")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S316
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS564+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2816]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Update], Language("Debugger","Update"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S220
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS564+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2872]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; LibraryViewerEvents(*Debugger, #PB_Event_SizeWindow) 
  PUSH   qword 13118
  PUSH   qword [rsp+PS564+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure560
; 
; EndProcedure
_EndProcedureZero565:
  XOR    rax,rax
_EndProcedure565:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure IsBasicKeyword(Word$, *LineStart = 0, *WordStart = 0)
_Procedure236:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS236=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS236+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; 
; If Right(Word$, 1) = "$"
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S20
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf480
; Word$ = Left(Word$, Len(Word$)-1)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; AddDollar = 1
  MOV    qword [rsp+48],1
; EndIf
_EndIf480:
; 
; Word$ = LCase(Word$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_LCase
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; k = BasicKeywordsHT(Asc(Word$))  
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_Asc
  MOV    r15,rax
  MOV    rbp,qword [a_BasicKeywordsHT]
  SAL    r15,2
  MOVSXD rax,dword [rbp+r15]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+56],rax
; If k
  CMP    qword [rsp+56],0
  JE    _EndIf482
; While Quit = 0 And k <= #NbBasicKeywords
_While483:
  MOV    r15,qword [rsp+64]
  AND    r15,r15
  JNE    No41
  MOV    r15,qword [rsp+56]
  CMP    r15,111
  JG     No41
Ok41:
  MOV    rax,1
  JMP    End41
No41:
  XOR    rax,rax
End41:
  AND    rax,rax
  JE    _Wend483
; 
; If BasicKeywords(k) <= Word$
  MOV    r15,qword [rsp+56]
  MOV    rbp,qword [a_BasicKeywords]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  MOV    rcx,qword [rsp+48]
  POP    rdx
  CALL   SYS_StringSuperior
  OR     rax,rax
  JNE   _EndIf485
; If BasicKeywords(k) = Word$
  MOV    r15,qword [rsp+56]
  MOV    rbp,qword [a_BasicKeywords]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  MOV    rcx,qword [rsp+48]
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf487
; BasicKeyword$ = BasicKeywordsReal(k)
  MOV    r15,qword [rsp+56]
  MOV    rbp,qword [a_BasicKeywordsReal]
  SAL    r15,3
  MOV    rcx,qword [rbp+r15]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[v_BasicKeyword$]
  POP    rdx
  CALL   SYS_AllocateString4
; Result = k
  PUSH   qword [rsp+56]
  POP    rax
  MOV    qword [rsp+72],rax
; Quit = 1
  MOV    qword [rsp+64],1
; EndIf
_EndIf487:
; Else
  JMP   _EndIf484
_EndIf485:
; Quit = 1
  MOV    qword [rsp+64],1
; EndIf
_EndIf484:
; 
; k+1
  MOV    r15,qword [rsp+56]
  INC    r15
  MOV    qword [rsp+56],r15
; Wend
  JMP   _While483
_Wend483:
; EndIf
_EndIf482:
; 
; If AddDollar
  CMP    qword [rsp+48],0
  JE    _EndIf490
; BasicKeyword$ + "$"
  MOV    rcx,qword [v_BasicKeyword$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S20
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[v_BasicKeyword$]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf490:
; 
; If (Result = #KEYWORD_Align Or Result = #KEYWORD_Extends) And *LineStart And *WordStart
  MOV    r15,qword [rsp+72]
  CMP    r15,1
  JE     Ok42
  MOV    r15,qword [rsp+72]
  CMP    r15,55
  JE     Ok42
  JMP    No42
Ok42:
  MOV    rax,1
  JMP    End42
No42:
  XOR    rax,rax
End42:
  AND    rax,rax
  JE     No43
  CMP    qword [rsp+PS236+8],0
  JE     No43
  CMP    qword [rsp+PS236+16],0
  JE     No43
Ok43:
  MOV    rax,1
  JMP    End43
No43:
  XOR    rax,rax
End43:
  AND    rax,rax
  JE    _EndIf492
; 
; If IsAfterStructure(Result, *LineStart, *WordStart) = #False
  PUSH   qword [rsp+PS236+16]
  PUSH   qword [rsp+PS236+16]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure234
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf494
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure237
; EndIf
_EndIf494:
; EndIf
_EndIf492:
; 
; ProcedureReturn Result
  MOV    rax,qword [rsp+72]
  JMP   _EndProcedure237
; EndProcedure
_EndProcedureZero237:
  XOR    rax,rax
_EndProcedure237:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure UpdateHistoryWindowState(*Debugger.DebuggerData)
_Procedure506:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS506=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; If *Debugger\ProgramState = -1
  MOV    rbp,qword [rsp+PS506+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JNE   _EndIf2457
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Update], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS506+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2592]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Reset], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS506+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2648]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_ResetAll], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS506+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2656]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; Else
  JMP   _EndIf2456
_EndIf2457:
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Update], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS506+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2592]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Reset], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS506+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2648]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_ResetAll], 0)    
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS506+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2656]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; If *Debugger\ProgramState <> 0 And *Debugger\ProgramState <> -2
  MOV    rbp,qword [rsp+PS506+0]
  MOVSXD r15,dword [rbp+112]
  AND    r15,r15
  JE     No280
  MOV    rbp,qword [rsp+PS506+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-2
  JE     No280
Ok280:
  MOV    rax,1
  JMP    End280
No280:
  XOR    rax,rax
End280:
  AND    rax,rax
  JE    _EndIf2460
; Command.CommandInfo\Command = #COMMAND_GetHistory
  LEA    rbp,[rsp+40]
  MOV    dword [rbp],16
; SendDebuggerCommand(*Debugger, @Command)
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS506+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Command.CommandInfo\Command = #COMMAND_GetProcedureStats
  LEA    rbp,[rsp+40]
  MOV    dword [rbp],19
; SendDebuggerCommand(*Debugger, @Command)       
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS506+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; EndIf    
_EndIf2460:
; EndIf    
_EndIf2456:
; 
; EndProcedure
_EndProcedureZero507:
  XOR    rax,rax
_EndProcedure507:
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure UpdateDebugOutputWindow(*Debugger.DebuggerData)
_Procedure56:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS56=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; If *Debugger\IsDebugMessage 
  MOV    rbp,qword [rsp+PS56+0]
  CMP    dword [rbp+784],0
  JE    _EndIf1628
; 
; Gadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Debug_List]
  MOV    rbp,qword [rsp+PS56+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+944]
  POP    rax
  MOV    qword [rsp+40],rax
; 
; AddGadgetItem(Gadget, -1, *Debugger\DebugMessage$)
  MOV    rbp,qword [rsp+PS56+0]
  PUSH   qword [rbp+788]
  PUSH   qword -1
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddGadgetItem
; 
; CompilerIf #CompileLinux
; 
; CompilerIf #CompileWindows
; SendMessage_(GadgetID(Gadget), #WM_VSCROLL, #SB_BOTTOM, #Null)
  PUSH   qword 0
  PUSH   qword 7
  PUSH   qword 277
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; CompilerEndIf
; 
; CompilerIf #CompileMac
; 
; *Debugger\DebugMessage$ = ""
  MOV    rbp,qword [rsp+PS56+0]
  MOV    rdx,_S3
  LEA    rcx,[rbp+788]
  CALL   SYS_FastAllocateStringFree4
; *Debugger\IsDebugMessage = #False
  MOV    rbp,qword [rsp+PS56+0]
  MOV    dword [rbp+784],0
; EndIf
_EndIf1628:
; 
; EndProcedure
_EndProcedureZero57:
  XOR    rax,rax
_EndProcedure57:
  ADD    rsp,48
  POP    rbp
  RET
; ProcedureDLL Network_ReceiveThread(Dummy)
_Procedure402:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS402=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; Protected Command.CommandInfo
; Protected *CommandData
; 
; Repeat
_Repeat1334:
; LockMutex(Network_Mutex)  
  PUSH   qword [v_Network_Mutex]
  POP    rcx
  CALL   qword [PB_LockMutex]
; 
; TotalCount = 0
  MOV    qword [rsp+72],0
; ForEach Network_Data()
  MOV    rcx,qword [t_Network_Data]
  CALL   PB_ResetList
_ForEach1335:
  MOV    rcx,qword [t_Network_Data]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next1335
; 
; 
; 
; While Network_Data()\Connected And Network_Data()\EndReceived = 0 And Network_Data()\IsFatalError = 0
_While1336:
  MOV    rbp,qword [t_Network_Data+8]
  CMP    dword [rbp+44],0
  JE     No195
  MOVSXD r15,dword [rbp+64]
  AND    r15,r15
  JNE    No195
  MOVSXD r15,dword [rbp+48]
  AND    r15,r15
  JNE    No195
Ok195:
  MOV    rax,1
  JMP    End195
No195:
  XOR    rax,rax
End195:
  AND    rax,rax
  JE    _Wend1336
; 
; 
; If Network_Data()\StackCount >= #MAX_COMMANDSTACK 
  MOV    rbp,qword [t_Network_Data+8]
  MOVSXD r15,dword [rbp+772]
  CMP    r15,800
  JL    _EndIf1338
; 
; 
; Break
  JMP   _Wend1336
; EndIf         
_EndIf1338:
; 
; Select Network_CheckData(Network_Data()\Socket)
  MOV    rbp,qword [t_Network_Data+8]
  PUSH   qword [rbp+76]
  POP    rcx
  CALL   Network_CheckData
  MOV    rax,rax
  PUSH   rax
; 
; Case 0 
  XOR    r15,r15
  CMP    r15,[rsp]
  JNE   _Case96
; Break
  ADD    rsp,8
  JMP   _Wend1336
; 
; Case 1 
  JMP   _EndSelect16
_Case96:
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case97
; If Network_ReadCommand(@Network_Data(), @Command, @*CommandData)
  SUB    rsp,8
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [t_Network_Data+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure400
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf1340
; 
; 
; 
; LockMutex(Network_Data()\StackMutex)
  SUB    rsp,8
  MOV    rbp,qword [t_Network_Data+8]
  PUSH   qword [rbp+84]
  POP    rcx
  SUB    rsp,32
  CALL   qword [PB_LockMutex]
  ADD    rsp,40
; 
; 
; CopyMemory(@Command, @Network_Data()\Stack[Network_Data()\StackCount]\Command, SizeOf(CommandInfo))
  SUB    rsp,8
  PUSH   qword 20
  PUSH   rbp
  MOVSXD rax,dword [rbp+772]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  LEA    rax,[rbp+776]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_CopyMemory
  ADD    rsp,40
; Network_Data()\Stack[Network_Data()\StackCount]\CommandData = *CommandData
  PUSH   qword [rsp+72]
  MOV    rbp,qword [t_Network_Data+8]
  PUSH   rbp
  MOVSXD rax,dword [rbp+772]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    qword [rbp+796],rax
; Network_Data()\StackCount + 1  
  MOV    rbp,qword [t_Network_Data+8]
  MOVSXD r15,dword [rbp+772]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rax
  MOV    dword [rbp+772],eax
; 
; Network_Data()\CommandReceived = 1
  MOV    dword [rbp+52],1
; 
; If Command\Command = #COMMAND_End   
  LEA    rbp,[rsp+48]
  MOVSXD r15,dword [rbp]
  CMP    r15,1
  JNE   _EndIf1342
; Network_Data()\EndReceived = 1
  MOV    rbp,qword [t_Network_Data+8]
  MOV    dword [rbp+64],1
; EndIf                  
_EndIf1342:
; 
; UnlockMutex(Network_Data()\StackMutex)  
  SUB    rsp,8
  MOV    rbp,qword [t_Network_Data+8]
  PUSH   qword [rbp+84]
  POP    rcx
  SUB    rsp,32
  CALL   qword [PB_UnlockMutex]
  ADD    rsp,40
; 
; TotalCount + 1
  MOV    r15,qword [rsp+80]
  INC    r15
  MOV    qword [rsp+80],r15
; 
; 
; If TotalCount > 50 
  MOV    r15,qword [rsp+80]
  CMP    r15,50
  JLE   _EndIf1344
; Break 2
  ADD    rsp,8
  JMP   _Next1335
; EndIf    
_EndIf1344:
; Else        
  JMP   _EndIf1339
_EndIf1340:
; If Network_Data()\EndReceived = 0          
  MOV    rbp,qword [t_Network_Data+8]
  MOVSXD r15,dword [rbp+64]
  AND    r15,r15
  JNE   _EndIf1347
; Network_FatalError(@Network_Data(), @Command, #ERROR_NetworkFail)
  SUB    rsp,8
  PUSH   qword 6
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [t_Network_Data+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure396
  ADD    rsp,40
; EndIf
_EndIf1347:
; Break
  ADD    rsp,8
  JMP   _Wend1336
; EndIf
_EndIf1339:
; 
; Case 2 
  JMP   _EndSelect16
_Case97:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case98
; If Network_Data()\EndReceived = 0  
  MOV    rbp,qword [t_Network_Data+8]
  MOVSXD r15,dword [rbp+64]
  AND    r15,r15
  JNE   _EndIf1349
; Network_FatalError(@Network_Data(), @Command, #ERROR_NetworkFail)
  SUB    rsp,8
  PUSH   qword 6
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [t_Network_Data+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure396
  ADD    rsp,40
; EndIf
_EndIf1349:
; Break
  ADD    rsp,8
  JMP   _Wend1336
; 
; EndSelect
_Case98:
_EndSelect16:
  POP    rax
; 
; Wend  
  JMP   _While1336
_Wend1336:
; 
; Next Network_Data()
  JMP   _ForEach1335
_Next1335:
; 
; UnlockMutex(Network_Mutex)
  PUSH   qword [v_Network_Mutex]
  POP    rcx
  CALL   qword [PB_UnlockMutex]
; 
; Delay(10) 
  PUSH   qword 10
  POP    rcx
  CALL   PB_Delay
; ForEver
  JMP   _Repeat1334
_Until1334:
; 
; EndProcedure
_EndProcedureZero403:
  XOR    rax,rax
_EndProcedure403:
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure GetLanguageInfo(FileName$)
_Procedure198:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS198=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS198+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; 
; If OpenPreferences(FileName$)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_OpenPreferences
  AND    rax,rax
  JE    _EndIf260
; 
; If PreferenceGroup("LanguageInfo")
  MOV    rax,_S32
  PUSH   rax
  POP    rcx
  CALL   PB_PreferenceGroup
  AND    rax,rax
  JE    _EndIf262
; 
; If ReadPreferenceString("Application", "") = #CatalogFileIDE 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S3
  PUSH   rax
  MOV    rax,_S33
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ReadPreferenceString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S34
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf264
; 
; Name$ = ReadPreferenceString("Language", "")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S3
  PUSH   rax
  MOV    rax,_S35
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ReadPreferenceString
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; If Name$ <> "" And UCase(Name$) <> "ENGLISH" 
  PUSH   qword [rsp+48]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    No15
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S36
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    No15
Ok15:
  MOV    rax,1
  JMP    End15
No15:
  XOR    rax,rax
End15:
  AND    rax,rax
  JE    _EndIf266
; 
; AddElement(AvailableLanguages())
  PUSH   qword [t_AvailableLanguages]
  POP    rcx
  CALL   PB_AddElement
; AvailableLanguages()\Name$         = Name$
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [t_AvailableLanguages+8]
  LEA    rcx,[rbp+16]
  POP    rdx
  CALL   SYS_AllocateString4
; AvailableLanguages()\FileName$     = FileName$
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rbp+24]
  POP    rdx
  CALL   SYS_AllocateString4
; AvailableLanguages()\Date$         = ReadPreferenceString("LastUpdated", "-")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S38
  PUSH   rax
  MOV    rax,_S37
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ReadPreferenceString
  ADD    rsp,40
  LEA    rcx,[rbp+32]
  POP    rdx
  CALL   SYS_AllocateString4
; AvailableLanguages()\Creator$      = ReadPreferenceString("Creator", "-")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S38
  PUSH   rax
  MOV    rax,_S39
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ReadPreferenceString
  ADD    rsp,40
  LEA    rcx,[rbp+40]
  POP    rdx
  CALL   SYS_AllocateString4
; AvailableLanguages()\CreatorEmail$ = ReadPreferenceString("Email", "-")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S38
  PUSH   rax
  MOV    rax,_S40
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ReadPreferenceString
  ADD    rsp,40
  LEA    rcx,[rbp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; EndIf
_EndIf266:
; 
; EndIf
_EndIf264:
; EndIf
_EndIf262:
; ClosePreferences()
  CALL   PB_ClosePreferences
; EndIf
_EndIf260:
; 
; EndProcedure
_EndProcedureZero199:
  XOR    rax,rax
_EndProcedure199:
  PUSH   rax
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,64
  POP    rbp
  RET
; Procedure UpdateProfilerWindow(*Debugger.DebuggerData)
_Procedure604:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS604=64
  SUB    rsp,40
; 
; SetWindowTitle(*Debugger\Windows[#DEBUGGER_WINDOW_Profiler], Language("Debugger","ProfilerTitle") + " - " + DebuggerTitle(*Debugger\FileName$))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S323
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS604+48]
  PUSH   qword [rbp+80]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure260
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS604+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+888]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetWindowTitle
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Start],  Language("Misc","Start"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S324
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS604+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2896]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Stop],   Language("Misc","Stop"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S325
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS604+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2904]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Reset],  Language("Debugger","Reset"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S267
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS604+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2912]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Update], Language("Debugger","Update"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S220
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS604+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2920]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; If *Debugger\NbIncludedFiles > 0
  MOV    rbp,qword [rsp+PS604+0]
  MOVSXD r15,dword [rbp+88]
  AND    r15,r15
  JLE   _EndIf3193
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], -1, Language("Debugger","File"), 0) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S270
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS604+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], -1, Language("Debugger","CalledLines"), 1) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S326
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS604+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], -1, Language("Debugger","CallsPerLine"), 2) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 2
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S327
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS604+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf3193:
; 
; ProfilerWindowEvents(*Debugger, #PB_Event_SizeWindow) 
  PUSH   qword 13118
  PUSH   qword [rsp+PS604+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure602
; 
; EndProcedure
_EndProcedureZero605:
  XOR    rax,rax
_EndProcedure605:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure Network_ReadCommand(*This.Network_Communication, *Command.CommandInfo, *pCommandData.INTEGER)
_Procedure400:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS400=64
  SUB    rsp,40
; *pCommandData\i = 0
  MOV    rbp,qword [rsp+PS400+16]
  MOV    qword [rbp],0
; 
; If *This\EncryptStream
  MOV    rbp,qword [rsp+PS400+0]
  CMP    dword [rbp+140],0
  JE    _EndIf1325
; ProcedureReturn Network_ReadCommandCrypt(*This, *Command, *pCommandData)
  PUSH   qword [rsp+PS400+16]
  PUSH   qword [rsp+PS400+16]
  PUSH   qword [rsp+PS400+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure398
  JMP   _EndProcedure401
; 
; Else
  JMP   _EndIf1324
_EndIf1325:
; 
; If Network_ReceiveData(*This\Socket, *Command, SizeOf(CommandInfo)) = 0
  PUSH   qword 20
  PUSH   qword [rsp+PS400+16]
  MOV    rbp,qword [rsp+PS400+16]
  PUSH   qword [rbp+60]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   Network_ReceiveData
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1328
; ProcedureReturn #False
  XOR    rax,rax
  JMP   _EndProcedure401
; EndIf
_EndIf1328:
; 
; If *Command\DataSize > 0
  MOV    rbp,qword [rsp+PS400+8]
  MOVSXD r15,dword [rbp+4]
  AND    r15,r15
  JLE   _EndIf1330
; *pCommandData\i = AllocateMemory(*Command\DataSize)
  MOV    rbp,qword [rsp+PS400+8]
  MOVSXD rax,dword [rbp+4]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS400+24]
  POP    rax
  MOV    qword [rbp],rax
; If *pCommandData\i = 0
  MOV    rbp,qword [rsp+PS400+16]
  MOV    r15,qword [rbp]
  AND    r15,r15
  JNE   _EndIf1332
; ProcedureReturn #False
  XOR    rax,rax
  JMP   _EndProcedure401
; 
; ElseIf Network_ReceiveData(*This\Socket, *pCommandData\i, *Command\DataSize) = 0
  JMP   _EndIf1331
_EndIf1332:
  MOV    rbp,qword [rsp+PS400+8]
  MOVSXD rax,dword [rbp+4]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS400+24]
  PUSH   qword [rbp]
  MOV    rbp,qword [rsp+PS400+16]
  PUSH   qword [rbp+60]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   Network_ReceiveData
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1333
; ProcedureReturn #False
  XOR    rax,rax
  JMP   _EndProcedure401
; 
; EndIf      
_EndIf1331:
_EndIf1333:
; EndIf
_EndIf1330:
; EndIf
_EndIf1324:
; 
; ProcedureReturn #True
  MOV    rax,1
  JMP   _EndProcedure401
; EndProcedure
_EndProcedureZero401:
  XOR    rax,rax
_EndProcedure401:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure BuildCustomKeywordTable()
_Procedure222:
  PUSH   rbp
  PUSH   r15
  PS222=128
  MOV    rax,8
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; Protected NewList TempList.s() 
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_FreeList
  MOV    r9,8
  MOV    r8,s_s
  LEA    rdx,[rsp+40]
  MOV    rcx,8
  CALL   PB_NewList
; 
; 
; InitSyntaxCheckArrays()      
  CALL  _Procedure218
; 
; 
; 
; ForEach CustomKeywordList()
  MOV    rcx,qword [t_CustomKeywordList]
  CALL   PB_ResetList
_ForEach410:
  MOV    rcx,qword [t_CustomKeywordList]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next410
; Word$ = Trim(RemoveString(CustomKeywordList(), Chr(9)))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S26
  PUSH   rax
  MOV    rbp,qword [t_CustomKeywordList+8]
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_RemoveString
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; *Cursor.Character = @Word$
  MOV    rax,qword [rsp+56]
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    qword [rsp+64],rax
; While *Cursor\c
_While411:
  MOV    rbp,qword [rsp+64]
  CMP    word [rbp],0
  JE    _Wend411
; If ValidCharacters(*Cursor\c) = 0 And *Cursor\c <> '_' And *Cursor\c <> '*' And *Cursor\c <> '$'
  MOV    rbp,qword [rsp+64]
  MOVZX  r15,word [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  MOVSX  r15,byte [rbp+r15]
  AND    r15,r15
  JNE    No22
  MOV    rbp,qword [rsp+64]
  MOVZX  r15,word [rbp]
  MOV    rax,95
  CMP    r15,rax
  JE     No22
  MOV    rbp,qword [rsp+64]
  MOVZX  r15,word [rbp]
  MOV    rax,42
  CMP    r15,rax
  JE     No22
  MOV    rbp,qword [rsp+64]
  MOVZX  r15,word [rbp]
  MOV    rax,36
  CMP    r15,rax
  JE     No22
Ok22:
  MOV    rax,1
  JMP    End22
No22:
  XOR    rax,rax
End22:
  AND    rax,rax
  JE    _EndIf413
; Word$ = ""
  MOV    rdx,_S3
  LEA    rcx,[rsp+56]
  CALL   SYS_FastAllocateStringFree4
; Break
  JMP   _Wend411
; EndIf    
_EndIf413:
; *Cursor + SizeOf(Character)
  MOV    r15,qword [rsp+64]
  ADD    r15,2
  MOV    qword [rsp+64],r15
; Wend    
  JMP   _While411
_Wend411:
; 
; If Word$ <> ""
  PUSH   qword [rsp+56]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf415
; AddElement(TempList())
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_AddElement
; TempList() = Word$
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+48+8]
  LEA    rcx,[rbp+16]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf415:
; Next CustomKeywordList()
  JMP   _ForEach410
_Next410:
; 
; 
; 
; If CustomKeywordFile$ <> "" And FileSize(CustomKeywordFile$) < 50000 
  PUSH   qword [v_CustomKeywordFile$]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    No23
  PUSH   qword [v_CustomKeywordFile$]
  POP    rcx
  CALL   PB_FileSize
  MOV    r15,rax
  CMP    r15,50000
  JGE    No23
Ok23:
  MOV    rax,1
  JMP    End23
No23:
  XOR    rax,rax
End23:
  AND    rax,rax
  JE    _EndIf417
; If ReadFile(#FILE_LoadFunctions, CustomKeywordFile$)
  PUSH   qword [v_CustomKeywordFile$]
  PUSH   qword 0
  POP    rcx
  POP    rdx
  CALL   PB_ReadFile
  AND    rax,rax
  JE    _EndIf419
; While Not Eof(#FILE_LoadFunctions)
_While420:
  PUSH   qword 0
  POP    rcx
  CALL   PB_Eof
  AND    rax,rax
  JE     No24
  XOR    rax,rax
  JMP    Ok24
No24:
  MOV    rax,1
Ok24:
  AND    rax,rax
  JE    _Wend420
; Word$ = Trim(RemoveString(ReadString(#FILE_LoadFunctions), Chr(9)))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S26
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_ReadString
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_RemoveString
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; *Cursor.Character = @Word$
  MOV    rax,qword [rsp+56]
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    qword [rsp+64],rax
; While *Cursor\c
_While421:
  MOV    rbp,qword [rsp+64]
  CMP    word [rbp],0
  JE    _Wend421
; If ValidCharacters(*Cursor\c) = 0 And *Cursor\c <> '_' And *Cursor\c <> '*' And *Cursor\c <> '$'
  MOV    rbp,qword [rsp+64]
  MOVZX  r15,word [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  MOVSX  r15,byte [rbp+r15]
  AND    r15,r15
  JNE    No25
  MOV    rbp,qword [rsp+64]
  MOVZX  r15,word [rbp]
  MOV    rax,95
  CMP    r15,rax
  JE     No25
  MOV    rbp,qword [rsp+64]
  MOVZX  r15,word [rbp]
  MOV    rax,42
  CMP    r15,rax
  JE     No25
  MOV    rbp,qword [rsp+64]
  MOVZX  r15,word [rbp]
  MOV    rax,36
  CMP    r15,rax
  JE     No25
Ok25:
  MOV    rax,1
  JMP    End25
No25:
  XOR    rax,rax
End25:
  AND    rax,rax
  JE    _EndIf423
; Word$ = ""
  MOV    rdx,_S3
  LEA    rcx,[rsp+56]
  CALL   SYS_FastAllocateStringFree4
; Break
  JMP   _Wend421
; EndIf    
_EndIf423:
; *Cursor + SizeOf(Character)
  MOV    r15,qword [rsp+64]
  ADD    r15,2
  MOV    qword [rsp+64],r15
; Wend    
  JMP   _While421
_Wend421:
; 
; If Word$ <> ""
  PUSH   qword [rsp+56]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf425
; AddElement(TempList())
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_AddElement
; TempList() = Word$
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+48+8]
  LEA    rcx,[rbp+16]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf425:
; Wend
  JMP   _While420
_Wend420:
; CloseFile(#FILE_LoadFunctions)
  PUSH   qword 0
  POP    rcx
  CALL   PB_CloseFile
; EndIf
_EndIf419:
; EndIf
_EndIf417:
; 
; 
; SortList(TempList(), #PB_Sort_Ascending|#PB_Sort_NoCase)    
  PUSH   qword 2
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_SortList
; 
; NbCustomKeywords = ListSize(TempList())
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_ListSize
  MOV    qword [v_NbCustomKeywords],rax
; Global Dim CustomKeywords.s(NbCustomKeywords) 
  MOV    rax,qword [v_NbCustomKeywords]
  INC    rax
  SUB    rsp,24
  MOV    rdx,rax
  MOV    rax,a_CustomKeywords
  PUSH   rax
  MOV    r9,s_s
  MOV    r8,8
  MOV    rcx,8
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_CustomKeywords],rax
; 
; For i = 0 To 255
  MOV    qword [rsp+72],0
  JMP   _ForSkipDebug426
_For426:
_ForSkipDebug426:
  MOV    rax,255
  CMP    rax,qword [rsp+72]
  JL    _Next427
; CustomKeywordsHT(i) = 0 
  MOV    r15,qword [rsp+72]
  MOV    rbp,qword [a_CustomKeywordsHT]
  SAL    r15,2
  MOV    dword [rbp+r15],0
; Next i
_NextContinue427:
  INC    qword [rsp+72]
  JNO   _For426
_Next427:
; 
; CurrentChar = 0
  MOV    qword [rsp+80],0
; ForEach TempList()
  MOV    rcx,qword [rsp+40]
  CALL   PB_ResetList
_ForEach428:
  MOV    rcx,qword [rsp+40]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next428
; index = ListIndex(TempList())+1 
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_ListIndex
  MOV    r15,rax
  INC    r15
  MOV    qword [rsp+88],r15
; CustomKeywords(index) = TempList() 
  MOV    rbp,qword [rsp+40+8]
  MOV    rcx,qword [rbp+16]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    r15,qword [rsp+96]
  MOV    rbp,qword [a_CustomKeywords]
  SAL    r15,3
  LEA    rcx,[rbp+r15]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; Char = Asc(UCase(Left(TempList(), 1)))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  MOV    rbp,qword [rsp+104+8]
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Asc
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+96],rax
; If Char <> CurrentChar
  MOV    r15,qword [rsp+96]
  CMP    r15,qword [rsp+80]
  JE    _EndIf430
; CustomKeywordsHT(Char) = index
  PUSH   qword [rsp+88]
  MOV    r15,qword [rsp+104]
  MOV    rbp,qword [a_CustomKeywordsHT]
  SAL    r15,2
  POP    rax
  MOV    dword [rbp+r15],eax
; CurrentChar = Char
  PUSH   qword [rsp+96]
  POP    rax
  MOV    qword [rsp+80],rax
; EndIf    
_EndIf430:
; Next TempList()
  JMP   _ForEach428
_Next428:
; 
; EndProcedure
_EndProcedureZero223:
  XOR    rax,rax
_EndProcedure223:
  PUSH   rax
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  PUSH   qword [rsp+48]
  POP    rcx
  SUB    rsp,40
  CALL   PB_FreeList
  ADD    rsp,40
  POP    rax
  ADD    rsp,104
  POP    r15
  POP    rbp
  RET
; Procedure HighlightingEngine(*InBuffer, InBufferLength, CursorPosition, Callback.HighlightCallback, IsSourceCode)
_Procedure244:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS244=304
  MOV    rax,29
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; *Cursor.HighlightPTR = *InBuffer
  PUSH   qword [rsp+PS244+0]
  POP    rax
  MOV    qword [rsp+40],rax
; *InBufferEnd = *InBuffer + InBufferLength
  MOV    r15,qword [rsp+PS244+0]
  ADD    r15,qword [rsp+PS244+8]
  MOV    qword [rsp+48],r15
; *LineStart   = *InBuffer 
  PUSH   qword [rsp+PS244+0]
  POP    rax
  MOV    qword [rsp+56],rax
; 
; If IsSourceCode And *ActiveSource And *ActiveSource\EnableASM
  CMP    qword [rsp+PS244+32],0
  JE     No49
  CMP    qword [p_ActiveSource],0
  JE     No49
  MOV    rbp,qword [p_ActiveSource]
  CMP    dword [rbp],0
  JE     No49
Ok49:
  MOV    rax,1
  JMP    End49
No49:
  XOR    rax,rax
End49:
  AND    rax,rax
  JE    _EndIf508
; ASMEnabled = 1
  MOV    qword [rsp+64],1
; Else
  JMP   _EndIf507
_EndIf508:
; ASMEnabled = 0
  MOV    qword [rsp+64],0
; EndIf
_EndIf507:
; 
; If IsSourceCode And *ActiveSource And *ActiveSource\Parser\Encoding = 1
  CMP    qword [rsp+PS244+32],0
  JE     No50
  CMP    qword [p_ActiveSource],0
  JE     No50
  MOV    rbp,qword [p_ActiveSource]
  MOVSXD r15,dword [rbp+12]
  CMP    r15,1
  JNE    No50
Ok50:
  MOV    rax,1
  JMP    End50
No50:
  XOR    rax,rax
End50:
  AND    rax,rax
  JE    _EndIf511
; SourceStringFormat = #PB_UTF8
  MOV    qword [v_SourceStringFormat],2
; Else
  JMP   _EndIf510
_EndIf511:
; SourceStringFormat = #PB_Ascii
  MOV    qword [v_SourceStringFormat],24
; EndIf    
_EndIf510:
; 
; SeparatorChar = 0
  MOV    qword [rsp+72],0
; OldSeparatorChar = 0   
  MOV    qword [rsp+80],0
; OlderSeparatorChar = 0 
  MOV    qword [rsp+88],0
; 
; While *Cursor < *InBufferEnd
_While513:
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE   _Wend513
; 
; *StringStart = *Cursor
  PUSH   qword [rsp+40]
  POP    rax
  MOV    qword [rsp+96],rax
; 
; 
; While *Cursor < *InBufferEnd And (*Cursor\b = ' ' Or *Cursor\b = 9)
_While514:
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE    No51
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,32
  JE     Ok52
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,9
  JE     Ok52
  JMP    No52
Ok52:
  MOV    rax,1
  JMP    End52
No52:
  XOR    rax,rax
End52:
  AND    rax,rax
  JE     No51
Ok51:
  MOV    rax,1
  JMP    End51
No51:
  XOR    rax,rax
End51:
  AND    rax,rax
  JE    _Wend514
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; Wend
  JMP   _While514
_Wend514:
; 
; 
; 
; *WordStart = *Cursor
  PUSH   qword [rsp+40]
  POP    rax
  MOV    qword [rsp+104],rax
; 
; While *Cursor < *InBufferEnd And ValidCharacters(*Cursor\a)
_While515:
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE    No53
  MOV    rbp,qword [rsp+40]
  MOVZX  r15,byte [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  CMP    byte [rbp+r15],0
  JE     No53
Ok53:
  MOV    rax,1
  JMP    End53
No53:
  XOR    rax,rax
End53:
  AND    rax,rax
  JE    _Wend515
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; Wend
  JMP   _While515
_Wend515:
; 
; *WordEnd.BYTE = *Cursor
  PUSH   qword [rsp+40]
  POP    rax
  MOV    qword [rsp+112],rax
; 
; 
; 
; AfterSpaces = 0
  MOV    qword [rsp+120],0
; While *Cursor < *InBufferEnd And (*Cursor\b = ' ' Or *Cursor\b = 9)
_While516:
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE    No54
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,32
  JE     Ok55
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,9
  JE     Ok55
  JMP    No55
Ok55:
  MOV    rax,1
  JMP    End55
No55:
  XOR    rax,rax
End55:
  AND    rax,rax
  JE     No54
Ok54:
  MOV    rax,1
  JMP    End54
No54:
  XOR    rax,rax
End54:
  AND    rax,rax
  JE    _Wend516
; AfterSpaces+1
  MOV    r15,qword [rsp+120]
  INC    r15
  MOV    qword [rsp+120],r15
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; Wend   
  JMP   _While516
_Wend516:
; 
; 
; 
; 
; If AfterSpaces = 0 And *Cursor < *InBufferEnd And *Cursor\b = '$' And *WordStart < *WordEnd 
  MOV    r15,qword [rsp+120]
  AND    r15,r15
  JNE    No56
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE    No56
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,36
  JNE    No56
  MOV    r15,qword [rsp+104]
  CMP    r15,qword [rsp+112]
  JGE    No56
Ok56:
  MOV    rax,1
  JMP    End56
No56:
  XOR    rax,rax
End56:
  AND    rax,rax
  JE    _EndIf518
; *WordEnd + 1
  MOV    r15,qword [rsp+112]
  INC    r15
  MOV    qword [rsp+112],r15
; *Cursor  + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; 
; While *Cursor < *InBufferEnd And (*Cursor\b = ' ' Or *Cursor\b = 9)
_While519:
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE    No57
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,32
  JE     Ok58
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,9
  JE     Ok58
  JMP    No58
Ok58:
  MOV    rax,1
  JMP    End58
No58:
  XOR    rax,rax
End58:
  AND    rax,rax
  JE     No57
Ok57:
  MOV    rax,1
  JMP    End57
No57:
  XOR    rax,rax
End57:
  AND    rax,rax
  JE    _Wend519
; AfterSpaces+1
  MOV    r15,qword [rsp+120]
  INC    r15
  MOV    qword [rsp+120],r15
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; Wend   
  JMP   _While519
_Wend519:
; EndIf
_EndIf518:
; 
; WordLength = *WordEnd - *WordStart 
  MOV    r15,qword [rsp+112]
  SUB    r15,qword [rsp+104]
  MOV    qword [rsp+128],r15
; WordStart$ = PeekAsciiLength(*WordStart, WordLength)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword [rsp+160]
  PUSH   qword [rsp+144]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  LEA    rcx,[rsp+144]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; SeparatorUsed = 0
  MOV    qword [rsp+144],0
; IgnoreSeparator = 0
  MOV    qword [rsp+152],0
; 
; 
; 
; If *Cursor > *InBufferEnd 
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JLE   _EndIf521
; SeparatorChar = #EndSeparator 
  MOV    qword [rsp+160],-1
; 
; Else
  JMP   _EndIf520
_EndIf521:
; 
; NewLine = 0
  MOV    qword [rsp+168],0
; If ValidCharacters(*Cursor\a)
  MOV    rbp,qword [rsp+40]
  MOVZX  r15,byte [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  CMP    byte [rbp+r15],0
  JE    _EndIf524
; SeparatorChar = 0
  MOV    qword [rsp+160],0
; 
; ElseIf *Cursor\b = 13 Or *Cursor\b = 10         
  JMP   _EndIf523
_EndIf524:
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,13
  JE     Ok59
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,10
  JE     Ok59
  JMP    No59
Ok59:
  MOV    rax,1
  JMP    End59
No59:
  XOR    rax,rax
End59:
  AND    rax,rax
  JE    _EndIf525
; NewLine = 1
  MOV    qword [rsp+168],1
; 
; If *Cursor+1 < *InBufferEnd And (*Cursor\a[1] = 13 Or *Cursor\a[1] = 10)  
  MOV    r15,qword [rsp+40]
  INC    r15
  CMP    r15,qword [rsp+48]
  JGE    No60
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  POP    rbp
  MOVZX  r15,byte [rbp+1]
  MOV    rax,13
  CMP    r15,rax
  JE     Ok61
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  POP    rbp
  MOVZX  r15,byte [rbp+1]
  MOV    rax,10
  CMP    r15,rax
  JE     Ok61
  JMP    No61
Ok61:
  MOV    rax,1
  JMP    End61
No61:
  XOR    rax,rax
End61:
  AND    rax,rax
  JE     No60
Ok60:
  MOV    rax,1
  JMP    End60
No60:
  XOR    rax,rax
End60:
  AND    rax,rax
  JE    _EndIf527
; *Cursor + 2
  MOV    r15,qword [rsp+40]
  ADD    r15,2
  MOV    qword [rsp+40],r15
; Else
  JMP   _EndIf526
_EndIf527:
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; EndIf
_EndIf526:
; 
; SeparatorChar = #SkipSeparator
  MOV    qword [rsp+160],-2
; 
; ElseIf *Cursor\b = 0
  JMP   _EndIf523
_EndIf525:
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  AND    r15,r15
  JNE   _EndIf529
; SeparatorChar = #EndSeparator 
  MOV    qword [rsp+160],-1
; 
; Else
  JMP   _EndIf523
_EndIf529:
; SeparatorChar = *Cursor\a
  MOV    rbp,qword [rsp+40]
  MOVZX  rax,byte [rbp]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+160],rax
; EndIf
_EndIf523:
; EndIf
_EndIf520:
; 
; 
; If IsCustomKeyword(WordStart$) And OldSeparatorChar <> '\'
  PUSH   qword [rsp+136]
  POP    rcx
  CALL  _Procedure230
  AND    rax,rax
  JE     No62
  MOV    r15,qword [rsp+80]
  CMP    r15,92
  JE     No62
Ok62:
  MOV    rax,1
  JMP    End62
No62:
  XOR    rax,rax
End62:
  AND    rax,rax
  JE    _EndIf532
; 
; 
; If EnableCaseCorrection And (CursorPosition = 0 Or CursorPosition < *WordStart-*InBuffer Or CursorPosition > *WordEnd-*InBuffer)
  CMP    qword [v_EnableCaseCorrection],0
  JE     No63
  MOV    r15,qword [rsp+PS244+16]
  AND    r15,r15
  JE     Ok64
  MOV    r15,qword [rsp+PS244+16]
  MOV    r14,qword [rsp+104]
  SUB    r14,qword [rsp+PS244+0]
  CMP    r15,r14
  JL     Ok64
  MOV    r15,qword [rsp+PS244+16]
  MOV    r14,qword [rsp+112]
  SUB    r14,qword [rsp+PS244+0]
  CMP    r15,r14
  JG     Ok64
  JMP    No64
Ok64:
  MOV    rax,1
  JMP    End64
No64:
  XOR    rax,rax
End64:
  AND    rax,rax
  JE     No63
Ok63:
  MOV    rax,1
  JMP    End63
No63:
  XOR    rax,rax
End63:
  AND    rax,rax
  JE    _EndIf534
; TextChanged = CopyMemoryCheck(ToAscii(CustomKeyword$), *WordStart, Len(CustomKeyword$)) 
  PUSH   qword [v_CustomKeyword$]
  POP    rcx
  CALL   PB_Len
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+112]
  PUSH   qword [v_CustomKeyword$]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure96
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure214
  MOV    qword [rsp+176],rax
; Else
  JMP   _EndIf533
_EndIf534:
; TextChanged = 0
  MOV    qword [rsp+176],0
; EndIf
_EndIf533:
; 
; If EnableKeywordBolding 
  CMP    qword [v_EnableKeywordBolding],0
  JE    _EndIf537
; Callback(*StringStart, *WordStart- *StringStart, *NormalTextColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  MOV    r15,qword [rsp+136]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Callback(*WordStart  , *WordEnd  - *WordStart  , *CustomKeywordColor, 1, TextChanged)        
  SUB    rsp,8
  PUSH   qword [rsp+184]
  PUSH   qword 1
  PUSH   qword [p_CustomKeywordColor]
  MOV    r15,qword [rsp+144]
  SUB    r15,qword [rsp+136]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+144]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Callback(*WordEnd    , *Cursor   - *WordEnd    , *NormalTextColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+144]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Else
  JMP   _EndIf536
_EndIf537:
; Callback(*StringStart, *Cursor - *StringStart, *CustomKeywordColor, 0, TextChanged)
  SUB    rsp,8
  PUSH   qword [rsp+184]
  PUSH   qword 0
  PUSH   qword [p_CustomKeywordColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; EndIf      
_EndIf536:
; 
; CompilerIf Defined(IDE_SYNTAXCHECK, #PB_Constant)
; 
; 
; 
; 
; 
; 
; ElseIf IsBasicKeyword(WordStart$, *LineStart, *WordStart) And OldSeparatorChar <> '\' And (ASMEnabled = 0 Or IsASMKeyword(WordStart$) = 0 Or IsCommandStart(*LineStart, *WordStart) = 0)
  JMP   _EndIf531
_EndIf532:
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure236
  AND    rax,rax
  JE     No65
  MOV    r15,qword [rsp+80]
  CMP    r15,92
  JE     No65
  MOV    r15,qword [rsp+64]
  AND    r15,r15
  JE     Ok66
  PUSH   qword [rsp+136]
  POP    rcx
  CALL  _Procedure228
  MOV    r15,rax
  AND    r15,r15
  JE     Ok66
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL  _Procedure242
  MOV    r15,rax
  AND    r15,r15
  JE     Ok66
  JMP    No66
Ok66:
  MOV    rax,1
  JMP    End66
No66:
  XOR    rax,rax
End66:
  AND    rax,rax
  JE     No65
Ok65:
  MOV    rax,1
  JMP    End65
No65:
  XOR    rax,rax
End65:
  AND    rax,rax
  JE    _EndIf539
; 
; 
; 
; 
; If EnableCaseCorrection And (CursorPosition = 0 Or CursorPosition < *WordStart-*InBuffer Or CursorPosition > *WordEnd-*InBuffer)
  CMP    qword [v_EnableCaseCorrection],0
  JE     No67
  MOV    r15,qword [rsp+PS244+16]
  AND    r15,r15
  JE     Ok68
  MOV    r15,qword [rsp+PS244+16]
  MOV    r14,qword [rsp+104]
  SUB    r14,qword [rsp+PS244+0]
  CMP    r15,r14
  JL     Ok68
  MOV    r15,qword [rsp+PS244+16]
  MOV    r14,qword [rsp+112]
  SUB    r14,qword [rsp+PS244+0]
  CMP    r15,r14
  JG     Ok68
  JMP    No68
Ok68:
  MOV    rax,1
  JMP    End68
No68:
  XOR    rax,rax
End68:
  AND    rax,rax
  JE     No67
Ok67:
  MOV    rax,1
  JMP    End67
No67:
  XOR    rax,rax
End67:
  AND    rax,rax
  JE    _EndIf541
; TextChanged = CopyMemoryCheck(ToAscii(BasicKeyword$), *WordStart, Len(BasicKeyword$)) 
  PUSH   qword [v_BasicKeyword$]
  POP    rcx
  CALL   PB_Len
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+112]
  PUSH   qword [v_BasicKeyword$]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure96
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure214
  MOV    qword [rsp+176],rax
; Else
  JMP   _EndIf540
_EndIf541:
; TextChanged = 0
  MOV    qword [rsp+176],0
; EndIf
_EndIf540:
; 
; If EnableKeywordBolding 
  CMP    qword [v_EnableKeywordBolding],0
  JE    _EndIf544
; Callback(*StringStart, *WordStart- *StringStart, *NormalTextColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  MOV    r15,qword [rsp+136]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Callback(*WordStart  , *WordEnd  - *WordStart  , *BasicKeywordColor, 1, TextChanged)         
  SUB    rsp,8
  PUSH   qword [rsp+184]
  PUSH   qword 1
  PUSH   qword [p_BasicKeywordColor]
  MOV    r15,qword [rsp+144]
  SUB    r15,qword [rsp+136]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+144]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Callback(*WordEnd    , *Cursor   - *WordEnd    , *NormalTextColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+144]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Else
  JMP   _EndIf543
_EndIf544:
; Callback(*StringStart, *Cursor - *StringStart, *BasicKeywordColor, 0, TextChanged)
  SUB    rsp,8
  PUSH   qword [rsp+184]
  PUSH   qword 0
  PUSH   qword [p_BasicKeywordColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; EndIf
_EndIf543:
; 
; ElseIf SeparatorChar = ':' And *Cursor\a[1] = ':'
  JMP   _EndIf531
_EndIf539:
  MOV    r15,qword [rsp+160]
  CMP    r15,58
  JNE    No69
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  POP    rbp
  MOVZX  r15,byte [rbp+1]
  MOV    rax,58
  CMP    r15,rax
  JNE    No69
Ok69:
  MOV    rax,1
  JMP    End69
No69:
  XOR    rax,rax
End69:
  AND    rax,rax
  JE    _EndIf546
; 
; 
; 
; Callback(*StringStart, *Cursor-*StringStart, *ModuleColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_ModuleColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Callback(*Cursor, 2, *OperatorColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_OperatorColor]
  PUSH   qword 2
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; 
; 
; SeparatorChar = #ModuleSeparator
  MOV    qword [rsp+160],-2
; SeparatorUsed = 1
  MOV    qword [rsp+144],1
; *Cursor + 2 
  MOV    r15,qword [rsp+40]
  ADD    r15,2
  MOV    qword [rsp+40],r15
; 
; 
; ElseIf SeparatorChar = ':' And IsLineStart(*LineStart, *WordStart) And WordLength > 0
  JMP   _EndIf531
_EndIf546:
  MOV    r15,qword [rsp+160]
  CMP    r15,58
  JNE    No70
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL  _Procedure240
  AND    rax,rax
  JE     No70
  MOV    r15,qword [rsp+128]
  AND    r15,r15
  JLE    No70
Ok70:
  MOV    rax,1
  JMP    End70
No70:
  XOR    rax,rax
End70:
  AND    rax,rax
  JE    _EndIf547
; 
; 
; 
; Callback(*StringStart, *Cursor-*StringStart+1, *LabelColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_LabelColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; SeparatorUsed = 1
  MOV    qword [rsp+144],1
; 
; 
; 
; ElseIf SeparatorChar = '(' And WordLength > 0
  JMP   _EndIf531
_EndIf547:
  MOV    r15,qword [rsp+160]
  CMP    r15,40
  JNE    No71
  MOV    r15,qword [rsp+128]
  AND    r15,r15
  JLE    No71
Ok71:
  MOV    rax,1
  JMP    End71
No71:
  XOR    rax,rax
End71:
  AND    rax,rax
  JE    _EndIf548
; 
; 
; TextChanged = 0
  MOV    qword [rsp+176],0
; 
; FunctionPosition = IsAPIFunction(*WordStart, WordLength)
  PUSH   qword [rsp+128]
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  CALL  _Procedure224
  MOV    qword [rsp+184],rax
; If FunctionPosition > -1
  MOV    r15,qword [rsp+184]
  CMP    r15,-1
  JLE   _EndIf550
; 
; If EnableCaseCorrection 
  CMP    qword [v_EnableCaseCorrection],0
  JE    _EndIf552
; TextChanged = CopyMemoryCheck(APIFunctions(FunctionPosition)\Ascii, *WordStart, WordLength-1)
  MOV    r15,qword [rsp+128]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+112]
  MOV    r15,qword [rsp+200]
  MOV    rbp,qword [a_APIFunctions]
  IMUL   r15,280
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure214
  MOV    qword [rsp+176],rax
; EndIf
_EndIf552:
; 
; Else
  JMP   _EndIf549
_EndIf550:
; FunctionPosition = IsBasicFunction(UCase(WordStart$))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+176]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure226
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+184],rax
; If FunctionPosition > -1
  MOV    r15,qword [rsp+184]
  CMP    r15,-1
  JLE   _EndIf555
; 
; If EnableCaseCorrection And OldSeparatorChar <> '.' 
  CMP    qword [v_EnableCaseCorrection],0
  JE     No72
  MOV    r15,qword [rsp+80]
  CMP    r15,46
  JE     No72
Ok72:
  MOV    rax,1
  JMP    End72
No72:
  XOR    rax,rax
End72:
  AND    rax,rax
  JE    _EndIf557
; TextChanged = CopyMemoryCheck(BasicFunctions(FunctionPosition)\Ascii, *WordStart, WordLength)
  PUSH   qword [rsp+128]
  PUSH   qword [rsp+112]
  MOV    r15,qword [rsp+200]
  MOV    rbp,qword [a_BasicFunctions]
  IMUL   r15,280
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure214
  MOV    qword [rsp+176],rax
; EndIf
_EndIf557:
; 
; EndIf         
_EndIf555:
; 
; EndIf
_EndIf549:
; 
; If OldSeparatorChar = '.'
  MOV    r15,qword [rsp+80]
  CMP    r15,46
  JNE   _EndIf559
; WordStart$ = UCase(WordStart$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+160]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  LEA    rcx,[rsp+144]
  POP    rdx
  CALL   SYS_AllocateString4
; If Len(WordStart$) = 1 And FindString(#BasicTypeChars, WordStart$, 1) 
  PUSH   qword [rsp+136]
  POP    rcx
  CALL   PB_Len
  MOV    r15,rax
  CMP    r15,1
  JNE    No73
  PUSH   qword 1
  PUSH   qword [rsp+144]
  MOV    rax,_S68
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_FindString2
  AND    rax,rax
  JE     No73
Ok73:
  MOV    rax,1
  JMP    End73
No73:
  XOR    rax,rax
End73:
  AND    rax,rax
  JE    _EndIf561
; Callback(*StringStart, *Cursor-*StringStart, *NormalTextColor, 0, TextChanged)
  SUB    rsp,8
  PUSH   qword [rsp+184]
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Else
  JMP   _EndIf560
_EndIf561:
; Callback(*StringStart, *Cursor-*StringStart, *StructureColor, 0, TextChanged)
  SUB    rsp,8
  PUSH   qword [rsp+184]
  PUSH   qword 0
  PUSH   qword [p_StructureColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; EndIf     
_EndIf560:
; ElseIf OldSeparatorChar = #ModuleSeparator And OlderSeparatorChar = '.'
  JMP   _EndIf558
_EndIf559:
  MOV    r15,qword [rsp+80]
  CMP    r15,-2
  JNE    No74
  MOV    r15,qword [rsp+88]
  CMP    r15,46
  JNE    No74
Ok74:
  MOV    rax,1
  JMP    End74
No74:
  XOR    rax,rax
End74:
  AND    rax,rax
  JE    _EndIf563
; 
; Callback(*StringStart, *Cursor-*StringStart, *StructureColor, 0, TextChanged)
  SUB    rsp,8
  PUSH   qword [rsp+184]
  PUSH   qword 0
  PUSH   qword [p_StructureColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Else               
  JMP   _EndIf558
_EndIf563:
; Callback(*StringStart, *Cursor-*StringStart, *PureKeywordColor, 0, TextChanged)
  SUB    rsp,8
  PUSH   qword [rsp+184]
  PUSH   qword 0
  PUSH   qword [p_PureKeywordColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; EndIf     
_EndIf558:
; 
; ElseIf IsDecNumber(*WordStart, WordLength) Or (OldSeparatorChar = '.' And ByteUcase(PeekB(*WordStart)) = 'E' And IsDecNumber(*WordStart+1, WordLength-1)) 
  JMP   _EndIf531
_EndIf548:
  PUSH   qword [rsp+128]
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  CALL  _Procedure238
  AND    rax,rax
  JNE    Ok75
  MOV    r15,qword [rsp+80]
  CMP    r15,46
  JNE    No76
  PUSH   qword [rsp+104]
  POP    rcx
  CALL   PB_PeekB
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure216
  MOV    r15,rax
  CMP    r15,69
  JNE    No76
  MOV    r15,qword [rsp+128]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+112]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL  _Procedure238
  AND    rax,rax
  JE     No76
Ok76:
  MOV    rax,1
  JMP    End76
No76:
  XOR    rax,rax
End76:
  AND    rax,rax
  JNE    Ok75
  JMP    No75
Ok75:
  MOV    rax,1
  JMP    End75
No75:
  XOR    rax,rax
End75:
  AND    rax,rax
  JE    _EndIf565
; 
; 
; 
; If SeparatorChar = '.'
  MOV    r15,qword [rsp+160]
  CMP    r15,46
  JNE   _EndIf567
; Callback(*StringStart, *Cursor-*StringStart+1, *NumberColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NumberColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; SeparatorUsed = 1
  MOV    qword [rsp+144],1
; Else
  JMP   _EndIf566
_EndIf567:
; Callback(*StringStart, *Cursor-*StringStart, *NumberColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NumberColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; EndIf
_EndIf566:
; 
; ElseIf ASMEnabled And IsASMKeyword(WordStart$)
  JMP   _EndIf531
_EndIf565:
  CMP    qword [rsp+64],0
  JE     No77
  PUSH   qword [rsp+136]
  POP    rcx
  CALL  _Procedure228
  AND    rax,rax
  JE     No77
Ok77:
  MOV    rax,1
  JMP    End77
No77:
  XOR    rax,rax
End77:
  AND    rax,rax
  JE    _EndIf569
; 
; 
; 
; 
; If EnableCaseCorrection And (CursorPosition = 0 Or CursorPosition < *WordStart-*InBuffer Or CursorPosition > *WordEnd-*InBuffer)
  CMP    qword [v_EnableCaseCorrection],0
  JE     No78
  MOV    r15,qword [rsp+PS244+16]
  AND    r15,r15
  JE     Ok79
  MOV    r15,qword [rsp+PS244+16]
  MOV    r14,qword [rsp+104]
  SUB    r14,qword [rsp+PS244+0]
  CMP    r15,r14
  JL     Ok79
  MOV    r15,qword [rsp+PS244+16]
  MOV    r14,qword [rsp+112]
  SUB    r14,qword [rsp+PS244+0]
  CMP    r15,r14
  JG     Ok79
  JMP    No79
Ok79:
  MOV    rax,1
  JMP    End79
No79:
  XOR    rax,rax
End79:
  AND    rax,rax
  JE     No78
Ok78:
  MOV    rax,1
  JMP    End78
No78:
  XOR    rax,rax
End78:
  AND    rax,rax
  JE    _EndIf571
; TextChanged = CopyMemoryCheck(ToAscii(ASMKeyword$), *WordStart, WordLength) 
  PUSH   qword [rsp+128]
  PUSH   qword [rsp+112]
  PUSH   qword [v_ASMKeyword$]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure96
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure214
  MOV    qword [rsp+176],rax
; Callback(*StringStart, *Cursor-*StringStart, *ASMKeywordColor, 0, TextChanged)
  SUB    rsp,8
  PUSH   qword [rsp+184]
  PUSH   qword 0
  PUSH   qword [p_ASMKeywordColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Else
  JMP   _EndIf570
_EndIf571:
; Callback(*StringStart, *Cursor-*StringStart, *ASMKeywordColor, 0, 0)       
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_ASMKeywordColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; EndIf   
_EndIf570:
; 
; ElseIf OldSeparatorChar = '\' Or SeparatorChar = '\' 
  JMP   _EndIf531
_EndIf569:
  MOV    r15,qword [rsp+80]
  CMP    r15,92
  JE     Ok80
  MOV    r15,qword [rsp+160]
  CMP    r15,92
  JE     Ok80
  JMP    No80
Ok80:
  MOV    rax,1
  JMP    End80
No80:
  XOR    rax,rax
End80:
  AND    rax,rax
  JE    _EndIf573
; 
; 
; Callback(*StringStart, *Cursor-*StringStart, *StructureColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_StructureColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; 
; 
; ElseIf SeparatorChar = '.' Or OldSeparatorChar = '.' Or (OldSeparatorChar = #ModuleSeparator And OlderSeparatorChar = '.')
  JMP   _EndIf531
_EndIf573:
  MOV    r15,qword [rsp+160]
  CMP    r15,46
  JE     Ok81
  MOV    r15,qword [rsp+80]
  CMP    r15,46
  JE     Ok81
  MOV    r15,qword [rsp+80]
  CMP    r15,-2
  JNE    No82
  MOV    r15,qword [rsp+88]
  CMP    r15,46
  JNE    No82
Ok82:
  MOV    rax,1
  JMP    End82
No82:
  XOR    rax,rax
End82:
  AND    rax,rax
  JNE    Ok81
  JMP    No81
Ok81:
  MOV    rax,1
  JMP    End81
No81:
  XOR    rax,rax
End81:
  AND    rax,rax
  JE    _EndIf574
; 
; 
; 
; If OldSeparatorChar = '.'
  MOV    r15,qword [rsp+80]
  CMP    r15,46
  JNE   _EndIf576
; WordStart$ = UCase(WordStart$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+160]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  LEA    rcx,[rsp+144]
  POP    rdx
  CALL   SYS_AllocateString4
; If Len(WordStart$) = 1 And FindString(#BasicTypeChars, WordStart$, 1) 
  PUSH   qword [rsp+136]
  POP    rcx
  CALL   PB_Len
  MOV    r15,rax
  CMP    r15,1
  JNE    No83
  PUSH   qword 1
  PUSH   qword [rsp+144]
  MOV    rax,_S68
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_FindString2
  AND    rax,rax
  JE     No83
Ok83:
  MOV    rax,1
  JMP    End83
No83:
  XOR    rax,rax
End83:
  AND    rax,rax
  JE    _EndIf578
; Callback(*StringStart, *Cursor-*StringStart, *NormalTextColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Else        
  JMP   _EndIf577
_EndIf578:
; Callback(*StringStart, *Cursor-*StringStart, *StructureColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_StructureColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; EndIf
_EndIf577:
; 
; Else
  JMP   _EndIf575
_EndIf576:
; *ForwardCursor.HighlightPTR = *Cursor+1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+192],r15
; While *ForwardCursor.HighlightPTR < *InBufferEnd And ValidCharacters(*ForwardCursor\a)
_While581:
  MOV    r15,qword [rsp+192]
  CMP    r15,qword [rsp+48]
  JGE    No84
  MOV    rbp,qword [rsp+192]
  MOVZX  r15,byte [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  CMP    byte [rbp+r15],0
  JE     No84
Ok84:
  MOV    rax,1
  JMP    End84
No84:
  XOR    rax,rax
End84:
  AND    rax,rax
  JE    _Wend581
; *ForwardCursor + 1
  MOV    r15,qword [rsp+192]
  INC    r15
  MOV    qword [rsp+192],r15
; Wend
  JMP   _While581
_Wend581:
; NextWord$ = UCase(PeekAsciiLength(*Cursor+1, *ForwardCursor-*Cursor-1))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  MOV    r15,qword [rsp+240]
  SUB    r15,qword [rsp+88]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+96]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  LEA    rcx,[rsp+208]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; 
; While *ForwardCursor < *InBufferEnd And *ForwardCursor\b = ' ' Or *ForwardCursor\b = 9: *ForwardCursor + 1: Wend
_While582:
  MOV    r15,qword [rsp+192]
  CMP    r15,qword [rsp+48]
  JGE    No85
  MOV    rbp,qword [rsp+192]
  MOVSX  r15,byte [rbp]
  CMP    r15,32
  JNE    No85
  MOV    rbp,qword [rsp+192]
  MOVSX  r15,byte [rbp]
  CMP    r15,9
  JE     Ok85
  JMP    No85
Ok85:
  MOV    rax,1
  JMP    End85
No85:
  XOR    rax,rax
End85:
  AND    rax,rax
  JE    _Wend582
  MOV    r15,qword [rsp+192]
  INC    r15
  MOV    qword [rsp+192],r15
  JMP   _While582
_Wend582:
; If *ForwardCursor < *InBufferEnd-2 And *ForwardCursor\b = ':' And PeekB(*ForwardCursor + 1) = ':'
  MOV    r15,qword [rsp+192]
  MOV    r14,qword [rsp+48]
  ADD    r14,-2
  CMP    r15,r14
  JGE    No86
  MOV    rbp,qword [rsp+192]
  MOVSX  r15,byte [rbp]
  CMP    r15,58
  JNE    No86
  MOV    r15,qword [rsp+192]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_PeekB
  MOV    r15,rax
  CMP    r15,58
  JNE    No86
Ok86:
  MOV    rax,1
  JMP    End86
No86:
  XOR    rax,rax
End86:
  AND    rax,rax
  JE    _EndIf584
; IsModulePrefix = 1
  MOV    qword [rsp+208],1
; *ForwardCursor + 2
  MOV    r15,qword [rsp+192]
  ADD    r15,2
  MOV    qword [rsp+192],r15
; While *ForwardCursor < *InBufferEnd And *ForwardCursor\b = ' ' Or *ForwardCursor\b = 9: *ForwardCursor + 1: Wend
_While585:
  MOV    r15,qword [rsp+192]
  CMP    r15,qword [rsp+48]
  JGE    No87
  MOV    rbp,qword [rsp+192]
  MOVSX  r15,byte [rbp]
  CMP    r15,32
  JNE    No87
  MOV    rbp,qword [rsp+192]
  MOVSX  r15,byte [rbp]
  CMP    r15,9
  JE     Ok87
  JMP    No87
Ok87:
  MOV    rax,1
  JMP    End87
No87:
  XOR    rax,rax
End87:
  AND    rax,rax
  JE    _Wend585
  MOV    r15,qword [rsp+192]
  INC    r15
  MOV    qword [rsp+192],r15
  JMP   _While585
_Wend585:
; While *ForwardCursor.HighlightPTR < *InBufferEnd And ValidCharacters(*ForwardCursor\a)
_While586:
  MOV    r15,qword [rsp+192]
  CMP    r15,qword [rsp+48]
  JGE    No88
  MOV    rbp,qword [rsp+192]
  MOVZX  r15,byte [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  CMP    byte [rbp+r15],0
  JE     No88
Ok88:
  MOV    rax,1
  JMP    End88
No88:
  XOR    rax,rax
End88:
  AND    rax,rax
  JE    _Wend586
; *ForwardCursor + 1
  MOV    r15,qword [rsp+192]
  INC    r15
  MOV    qword [rsp+192],r15
; Wend
  JMP   _While586
_Wend586:
; While *ForwardCursor < *InBufferEnd And *ForwardCursor\b = ' ' Or *ForwardCursor\b = 9: *ForwardCursor + 1: Wend
_While587:
  MOV    r15,qword [rsp+192]
  CMP    r15,qword [rsp+48]
  JGE    No89
  MOV    rbp,qword [rsp+192]
  MOVSX  r15,byte [rbp]
  CMP    r15,32
  JNE    No89
  MOV    rbp,qword [rsp+192]
  MOVSX  r15,byte [rbp]
  CMP    r15,9
  JE     Ok89
  JMP    No89
Ok89:
  MOV    rax,1
  JMP    End89
No89:
  XOR    rax,rax
End89:
  AND    rax,rax
  JE    _Wend587
  MOV    r15,qword [rsp+192]
  INC    r15
  MOV    qword [rsp+192],r15
  JMP   _While587
_Wend587:
; Else
  JMP   _EndIf583
_EndIf584:
; IsModulePrefix = 0
  MOV    qword [rsp+208],0
; EndIf
_EndIf583:
; 
; If *ForwardCursor\b = '('  
  MOV    rbp,qword [rsp+192]
  MOVSX  r15,byte [rbp]
  CMP    r15,40
  JNE   _EndIf590
; Callback(*StringStart, *Cursor-*StringStart, *PureKeywordColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_PureKeywordColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; 
; ElseIf IsModulePrefix = 0 And Len(NextWord$) = 1 And FindString(#BasicTypeChars, NextWord$, 1) 
  JMP   _EndIf589
_EndIf590:
  MOV    r15,qword [rsp+208]
  AND    r15,r15
  JNE    No90
  PUSH   qword [rsp+200]
  POP    rcx
  CALL   PB_Len
  MOV    r15,rax
  CMP    r15,1
  JNE    No90
  PUSH   qword 1
  PUSH   qword [rsp+208]
  MOV    rax,_S68
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_FindString2
  AND    rax,rax
  JE     No90
Ok90:
  MOV    rax,1
  JMP    End90
No90:
  XOR    rax,rax
End90:
  AND    rax,rax
  JE    _EndIf591
; Callback(*StringStart, *Cursor-*StringStart, *NormalTextColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; 
; 
; 
; ElseIf NextWord$ = "P" And *Cursor < *InBufferEnd-8 And CompareMemoryString(*Cursor, ToAscii(".p-ascii"), #PB_String_NoCase, 8, #PB_Ascii) = 0
  JMP   _EndIf589
_EndIf591:
  PUSH   qword [rsp+200]
  MOV    rcx,_S69
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE     No91
  MOV    r15,qword [rsp+40]
  MOV    r14,qword [rsp+48]
  ADD    r14,-8
  CMP    r15,r14
  JGE    No91
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword 8
  PUSH   qword 1
  MOV    rax,_S70
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure96
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_CompareMemoryString4
  ADD    rsp,48
  MOV    r15,rax
  AND    r15,r15
  JNE    No91
Ok91:
  MOV    rax,1
  JMP    End91
No91:
  XOR    rax,rax
End91:
  AND    rax,rax
  JE    _EndIf592
; Callback(*StringStart, *Cursor-*StringStart, *NormalTextColor, 0, 0)                   
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Callback(*Cursor, 1, *SeparatorColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_SeparatorColor]
  PUSH   qword 1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Callback(*Cursor+1, 7, *NormalTextColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  PUSH   qword 7
  MOV    r15,qword [rsp+80]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; *Cursor + 8
  MOV    r15,qword [rsp+40]
  ADD    r15,8
  MOV    qword [rsp+40],r15
; SeparatorChar = #SkipSeparator          
  MOV    qword [rsp+160],-2
; 
; ElseIf NextWord$ = "P" And *Cursor < *InBufferEnd-10 And CompareMemoryString(*Cursor, ToAscii(".p-unicode"), #PB_String_NoCase, 10, #PB_Ascii) = 0
  JMP   _EndIf589
_EndIf592:
  PUSH   qword [rsp+200]
  MOV    rcx,_S69
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE     No92
  MOV    r15,qword [rsp+40]
  MOV    r14,qword [rsp+48]
  ADD    r14,-10
  CMP    r15,r14
  JGE    No92
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword 10
  PUSH   qword 1
  MOV    rax,_S71
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure96
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_CompareMemoryString4
  ADD    rsp,48
  MOV    r15,rax
  AND    r15,r15
  JNE    No92
Ok92:
  MOV    rax,1
  JMP    End92
No92:
  XOR    rax,rax
End92:
  AND    rax,rax
  JE    _EndIf593
; Callback(*StringStart, *Cursor-*StringStart, *NormalTextColor, 0, 0)                   
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Callback(*Cursor, 1, *SeparatorColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_SeparatorColor]
  PUSH   qword 1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Callback(*Cursor+1, 9, *NormalTextColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  PUSH   qword 9
  MOV    r15,qword [rsp+80]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; *Cursor + 10
  MOV    r15,qword [rsp+40]
  ADD    r15,10
  MOV    qword [rsp+40],r15
; SeparatorChar = #SkipSeparator        
  MOV    qword [rsp+160],-2
; 
; ElseIf NextWord$ = "P" And *Cursor < *InBufferEnd-7 And CompareMemoryString(*Cursor, ToAscii(".p-bstr"), #PB_String_NoCase, 7, #PB_Ascii) = 0
  JMP   _EndIf589
_EndIf593:
  PUSH   qword [rsp+200]
  MOV    rcx,_S69
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE     No93
  MOV    r15,qword [rsp+40]
  MOV    r14,qword [rsp+48]
  ADD    r14,-7
  CMP    r15,r14
  JGE    No93
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword 7
  PUSH   qword 1
  MOV    rax,_S72
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure96
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_CompareMemoryString4
  ADD    rsp,48
  MOV    r15,rax
  AND    r15,r15
  JNE    No93
Ok93:
  MOV    rax,1
  JMP    End93
No93:
  XOR    rax,rax
End93:
  AND    rax,rax
  JE    _EndIf594
; Callback(*StringStart, *Cursor-*StringStart, *NormalTextColor, 0, 0)                   
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Callback(*Cursor, 1, *SeparatorColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_SeparatorColor]
  PUSH   qword 1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Callback(*Cursor+1, 6, *NormalTextColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  PUSH   qword 6
  MOV    r15,qword [rsp+80]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; *Cursor + 7
  MOV    r15,qword [rsp+40]
  ADD    r15,7
  MOV    qword [rsp+40],r15
; SeparatorChar = #SkipSeparator        
  MOV    qword [rsp+160],-2
; 
; ElseIf NextWord$ = "P" And *Cursor < *InBufferEnd-10 And CompareMemoryString(*Cursor, ToAscii(".p-variant"), #PB_String_NoCase, 10, #PB_Ascii) = 0
  JMP   _EndIf589
_EndIf594:
  PUSH   qword [rsp+200]
  MOV    rcx,_S69
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE     No94
  MOV    r15,qword [rsp+40]
  MOV    r14,qword [rsp+48]
  ADD    r14,-10
  CMP    r15,r14
  JGE    No94
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword 10
  PUSH   qword 1
  MOV    rax,_S73
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure96
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_CompareMemoryString4
  ADD    rsp,48
  MOV    r15,rax
  AND    r15,r15
  JNE    No94
Ok94:
  MOV    rax,1
  JMP    End94
No94:
  XOR    rax,rax
End94:
  AND    rax,rax
  JE    _EndIf595
; Callback(*StringStart, *Cursor-*StringStart, *NormalTextColor, 0, 0)                   
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Callback(*Cursor, 1, *SeparatorColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_SeparatorColor]
  PUSH   qword 1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Callback(*Cursor+1, 9, *NormalTextColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  PUSH   qword 9
  MOV    r15,qword [rsp+80]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; *Cursor + 10
  MOV    r15,qword [rsp+40]
  ADD    r15,10
  MOV    qword [rsp+40],r15
; SeparatorChar = #SkipSeparator      
  MOV    qword [rsp+160],-2
; 
; ElseIf NextWord$ = "P" And *Cursor < *InBufferEnd-7 And CompareMemoryString(*Cursor, ToAscii(".p-utf8"), #PB_String_NoCase, 7, #PB_Ascii) = 0
  JMP   _EndIf589
_EndIf595:
  PUSH   qword [rsp+200]
  MOV    rcx,_S69
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE     No95
  MOV    r15,qword [rsp+40]
  MOV    r14,qword [rsp+48]
  ADD    r14,-7
  CMP    r15,r14
  JGE    No95
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword 7
  PUSH   qword 1
  MOV    rax,_S74
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure96
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_CompareMemoryString4
  ADD    rsp,48
  MOV    r15,rax
  AND    r15,r15
  JNE    No95
Ok95:
  MOV    rax,1
  JMP    End95
No95:
  XOR    rax,rax
End95:
  AND    rax,rax
  JE    _EndIf596
; Callback(*StringStart, *Cursor-*StringStart, *NormalTextColor, 0, 0)                   
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Callback(*Cursor, 1, *SeparatorColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_SeparatorColor]
  PUSH   qword 1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Callback(*Cursor+1, 6, *NormalTextColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  PUSH   qword 6
  MOV    r15,qword [rsp+80]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; *Cursor + 7
  MOV    r15,qword [rsp+40]
  ADD    r15,7
  MOV    qword [rsp+40],r15
; SeparatorChar = #SkipSeparator                 
  MOV    qword [rsp+160],-2
; 
; 
; Else
  JMP   _EndIf589
_EndIf596:
; Callback(*StringStart, *Cursor-*StringStart, *StructureColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_StructureColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; 
; EndIf
_EndIf589:
; EndIf
_EndIf575:
; 
; 
; ElseIf *Cursor-*StringStart > 0 
  JMP   _EndIf531
_EndIf574:
  MOV    r15,qword [rsp+40]
  SUB    r15,qword [rsp+96]
  AND    r15,r15
  JLE   _EndIf598
; 
; 
; Callback(*StringStart, *Cursor-*StringStart, *NormalTextColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; 
; EndIf
_EndIf531:
_EndIf598:
; 
; 
; 
; 
; If SeparatorUsed = 0 And SeparatorChar <> #SkipSeparator
  MOV    r15,qword [rsp+144]
  AND    r15,r15
  JNE    No96
  MOV    r15,qword [rsp+160]
  CMP    r15,-2
  JE     No96
Ok96:
  MOV    rax,1
  JMP    End96
No96:
  XOR    rax,rax
End96:
  AND    rax,rax
  JE    _EndIf600
; 
; If SeparatorChar = '!' And IsLineStart(*LineStart, *Cursor)
  MOV    r15,qword [rsp+160]
  CMP    r15,33
  JNE    No97
  PUSH   qword [rsp+40]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL  _Procedure240
  AND    rax,rax
  JE     No97
Ok97:
  MOV    rax,1
  JMP    End97
No97:
  XOR    rax,rax
End97:
  AND    rax,rax
  JE    _EndIf602
; 
; 
; 
; *StringStart = *Cursor 
  PUSH   qword [rsp+40]
  POP    rax
  MOV    qword [rsp+96],rax
; While *Cursor < *InBufferEnd And *Cursor\b <> ';' And *Cursor\b <> 10 And *Cursor\b <> 13 And *Cursor\b
_While603:
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE    No98
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,59
  JE     No98
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,10
  JE     No98
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,13
  JE     No98
  MOV    rbp,qword [rsp+40]
  CMP    byte [rbp],0
  JE     No98
Ok98:
  MOV    rax,1
  JMP    End98
No98:
  XOR    rax,rax
End98:
  AND    rax,rax
  JE    _Wend603
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; Wend
  JMP   _While603
_Wend603:
; 
; If *Cursor\b <> ';' 
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,59
  JE    _EndIf605
; NewLine = 1
  MOV    qword [rsp+168],1
; 
; If *Cursor+1 < *InBufferEnd And (*Cursor\a[1] = 10 Or *Cursor\a[1] = 13)
  MOV    r15,qword [rsp+40]
  INC    r15
  CMP    r15,qword [rsp+48]
  JGE    No99
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  POP    rbp
  MOVZX  r15,byte [rbp+1]
  MOV    rax,10
  CMP    r15,rax
  JE     Ok100
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  POP    rbp
  MOVZX  r15,byte [rbp+1]
  MOV    rax,13
  CMP    r15,rax
  JE     Ok100
  JMP    No100
Ok100:
  MOV    rax,1
  JMP    End100
No100:
  XOR    rax,rax
End100:
  AND    rax,rax
  JE     No99
Ok99:
  MOV    rax,1
  JMP    End99
No99:
  XOR    rax,rax
End99:
  AND    rax,rax
  JE    _EndIf607
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; EndIf
_EndIf607:
; 
; If *Cursor < *InBufferEnd 
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE   _EndIf609
; *Cursor + 1 
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; EndIf   
_EndIf609:
; EndIf     
_EndIf605:
; 
; Callback(*StringStart, *Cursor-*StringStart, *ASMKeywordColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_ASMKeywordColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; SeparatorChar = #SkipSeparator
  MOV    qword [rsp+160],-2
; 
; 
; 
; ElseIf SeparatorChar = '"'
  JMP   _EndIf601
_EndIf602:
  MOV    r15,qword [rsp+160]
  CMP    r15,34
  JNE   _EndIf610
; 
; 
; 
; *StringStart = *Cursor 
  PUSH   qword [rsp+40]
  POP    rax
  MOV    qword [rsp+96],rax
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; While *Cursor < *InBufferEnd And (*Cursor\b <> '"' And *Cursor\b <> 10 And *Cursor\b <> 13 And *Cursor\b)
_While611:
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE    No101
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,34
  JE     No102
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,10
  JE     No102
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,13
  JE     No102
  MOV    rbp,qword [rsp+40]
  CMP    byte [rbp],0
  JE     No102
Ok102:
  MOV    rax,1
  JMP    End102
No102:
  XOR    rax,rax
End102:
  AND    rax,rax
  JE     No101
Ok101:
  MOV    rax,1
  JMP    End101
No101:
  XOR    rax,rax
End101:
  AND    rax,rax
  JE    _Wend611
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; Wend
  JMP   _While611
_Wend611:
; 
; If *Cursor\b = 10 Or *Cursor\b = 13
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,10
  JE     Ok103
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,13
  JE     Ok103
  JMP    No103
Ok103:
  MOV    rax,1
  JMP    End103
No103:
  XOR    rax,rax
End103:
  AND    rax,rax
  JE    _EndIf613
; NewLine = 1
  MOV    qword [rsp+168],1
; 
; If *Cursor+1 < *InBufferEnd And (*Cursor\a[1] = 10 Or *Cursor\a[1] = 13)
  MOV    r15,qword [rsp+40]
  INC    r15
  CMP    r15,qword [rsp+48]
  JGE    No104
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  POP    rbp
  MOVZX  r15,byte [rbp+1]
  MOV    rax,10
  CMP    r15,rax
  JE     Ok105
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  POP    rbp
  MOVZX  r15,byte [rbp+1]
  MOV    rax,13
  CMP    r15,rax
  JE     Ok105
  JMP    No105
Ok105:
  MOV    rax,1
  JMP    End105
No105:
  XOR    rax,rax
End105:
  AND    rax,rax
  JE     No104
Ok104:
  MOV    rax,1
  JMP    End104
No104:
  XOR    rax,rax
End104:
  AND    rax,rax
  JE    _EndIf615
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; EndIf    
_EndIf615:
; EndIf
_EndIf613:
; 
; If *Cursor < *InBufferEnd 
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE   _EndIf617
; *Cursor + 1      
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; EndIf        
_EndIf617:
; 
; Callback(*StringStart, *Cursor-*StringStart, *StringColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_StringColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; SeparatorChar = #SkipSeparator
  MOV    qword [rsp+160],-2
; 
; ElseIf SeparatorChar = '~' And *Cursor\a[1] = '"'
  JMP   _EndIf601
_EndIf610:
  MOV    r15,qword [rsp+160]
  CMP    r15,126
  JNE    No106
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  POP    rbp
  MOVZX  r15,byte [rbp+1]
  MOV    rax,34
  CMP    r15,rax
  JNE    No106
Ok106:
  MOV    rax,1
  JMP    End106
No106:
  XOR    rax,rax
End106:
  AND    rax,rax
  JE    _EndIf618
; 
; 
; 
; *StringStart = *Cursor 
  PUSH   qword [rsp+40]
  POP    rax
  MOV    qword [rsp+96],rax
; *Cursor + 2
  MOV    r15,qword [rsp+40]
  ADD    r15,2
  MOV    qword [rsp+40],r15
; 
; While *Cursor < *InBufferEnd         
_While619:
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE   _Wend619
; Select *Cursor\b
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  MOV    rax,r15
  PUSH   rax
; 
; Case 0         
  XOR    r15,r15
  CMP    r15,[rsp]
  JNE   _Case4
; Break
  ADD    rsp,8
  JMP   _Wend619
; 
; Case 13, 10    
  JMP   _EndSelect2
_Case4:
  MOV    r15,13
  CMP    r15,[rsp]
  JE    _Case5
  MOV    r15,10
  CMP    r15,[rsp]
  JNE   _Case6
_Case5:
; NewLine = 1              
  MOV    qword [rsp+176],1
; If *Cursor+1 < *InBufferEnd And (*Cursor\a[1] = 10 Or *Cursor\a[1] = 13)
  MOV    r15,qword [rsp+48]
  INC    r15
  CMP    r15,qword [rsp+56]
  JGE    No107
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  POP    rbp
  MOVZX  r15,byte [rbp+1]
  MOV    rax,10
  CMP    r15,rax
  JE     Ok108
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  POP    rbp
  MOVZX  r15,byte [rbp+1]
  MOV    rax,13
  CMP    r15,rax
  JE     Ok108
  JMP    No108
Ok108:
  MOV    rax,1
  JMP    End108
No108:
  XOR    rax,rax
End108:
  AND    rax,rax
  JE     No107
Ok107:
  MOV    rax,1
  JMP    End107
No107:
  XOR    rax,rax
End107:
  AND    rax,rax
  JE    _EndIf621
; *Cursor + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; EndIf    
_EndIf621:
; Break      
  ADD    rsp,8
  JMP   _Wend619
; 
; Case '"'       
  JMP   _EndSelect2
_Case6:
  MOV    r15,34
  CMP    r15,[rsp]
  JNE   _Case7
; *Cursor + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; Break
  ADD    rsp,8
  JMP   _Wend619
; 
; Case '\'       
  JMP   _EndSelect2
_Case7:
  MOV    r15,92
  CMP    r15,[rsp]
  JNE   _Case8
; If *Cursor+1 < *InBufferEnd
  MOV    r15,qword [rsp+48]
  INC    r15
  CMP    r15,qword [rsp+56]
  JGE   _EndIf623
; Select *Cursor\a[1]
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  POP    rbp
  MOVZX  r15,byte [rbp+1]
  MOV    rax,r15
  PUSH   rax
; 
; Case 'a', 'b', 'f', 'n', 'r', 't', 'v', '"', '\'
  MOV    r15,97
  CMP    r15,[rsp]
  JE    _Case9
  MOV    r15,98
  CMP    r15,[rsp]
  JE    _Case9
  MOV    r15,102
  CMP    r15,[rsp]
  JE    _Case9
  MOV    r15,110
  CMP    r15,[rsp]
  JE    _Case9
  MOV    r15,114
  CMP    r15,[rsp]
  JE    _Case9
  MOV    r15,116
  CMP    r15,[rsp]
  JE    _Case9
  MOV    r15,118
  CMP    r15,[rsp]
  JE    _Case9
  MOV    r15,34
  CMP    r15,[rsp]
  JE    _Case9
  MOV    r15,92
  CMP    r15,[rsp]
  JNE   _Case10
_Case9:
; 
; *Cursor + 2
  MOV    r15,qword [rsp+56]
  ADD    r15,2
  MOV    qword [rsp+56],r15
; 
; Default
  JMP   _EndSelect3
_Case10:
; 
; If *Cursor > *StringStart
  MOV    r15,qword [rsp+56]
  CMP    r15,qword [rsp+112]
  JLE   _EndIf625
; Callback(*StringStart, *Cursor-*StringStart, *StringColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_StringColor]
  MOV    r15,qword [rsp+88]
  SUB    r15,qword [rsp+144]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+88]
  ADD    rsp,48
; EndIf                    
_EndIf625:
; Callback(*StringStart, 2, *BadEscapeColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_BadEscapeColor]
  PUSH   qword 2
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+88]
  ADD    rsp,48
; *Cursor + 2
  MOV    r15,qword [rsp+56]
  ADD    r15,2
  MOV    qword [rsp+56],r15
; *StringStart = *Cursor
  PUSH   qword [rsp+56]
  POP    rax
  MOV    qword [rsp+112],rax
; 
; EndSelect
_Case11:
_EndSelect3:
  POP    rax
; Else
  JMP   _EndIf622
_EndIf623:
; *Cursor + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; Break
  ADD    rsp,8
  JMP   _Wend619
; EndIf
_EndIf622:
; 
; Default        
  JMP   _EndSelect2
_Case8:
; *Cursor + 1         
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; 
; EndSelect        
_Case12:
_EndSelect2:
  POP    rax
; Wend
  JMP   _While619
_Wend619:
; 
; If *Cursor > *StringStart
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+96]
  JLE   _EndIf628
; Callback(*StringStart, *Cursor-*StringStart, *StringColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_StringColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; EndIf 
_EndIf628:
; SeparatorChar = #SkipSeparator
  MOV    qword [rsp+160],-2
; 
; ElseIf SeparatorChar = ';'
  JMP   _EndIf601
_EndIf618:
  MOV    r15,qword [rsp+160]
  CMP    r15,59
  JNE   _EndIf629
; 
; 
; 
; 
; 
; *StringStart = *Cursor
  PUSH   qword [rsp+40]
  POP    rax
  MOV    qword [rsp+96],rax
; WhiteOnly = #True
  MOV    qword [rsp+216],1
; While *Cursor < *InBufferEnd And (*Cursor\b <> 10 And *Cursor\b <> 13 And *Cursor\b)
_While630:
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE    No109
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,10
  JE     No110
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,13
  JE     No110
  MOV    rbp,qword [rsp+40]
  CMP    byte [rbp],0
  JE     No110
Ok110:
  MOV    rax,1
  JMP    End110
No110:
  XOR    rax,rax
End110:
  AND    rax,rax
  JE     No109
Ok109:
  MOV    rax,1
  JMP    End109
No109:
  XOR    rax,rax
End109:
  AND    rax,rax
  JE    _Wend630
; If *Cursor\b <> ' ' And *Cursor\b <> 9
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,32
  JE     No111
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,9
  JE     No111
Ok111:
  MOV    rax,1
  JMP    End111
No111:
  XOR    rax,rax
End111:
  AND    rax,rax
  JE    _EndIf632
; WhiteOnly = #False
  MOV    qword [rsp+216],0
; EndIf
_EndIf632:
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; Wend
  JMP   _While630
_Wend630:
; NewLine = 1
  MOV    qword [rsp+168],1
; *LineEnd = *Cursor
  PUSH   qword [rsp+40]
  POP    rax
  MOV    qword [rsp+224],rax
; 
; If *Cursor+1 < *InBufferEnd And (*Cursor\a[1] = 10 Or *Cursor\a[1] = 13)
  MOV    r15,qword [rsp+40]
  INC    r15
  CMP    r15,qword [rsp+48]
  JGE    No112
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  POP    rbp
  MOVZX  r15,byte [rbp+1]
  MOV    rax,10
  CMP    r15,rax
  JE     Ok113
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  POP    rbp
  MOVZX  r15,byte [rbp+1]
  MOV    rax,13
  CMP    r15,rax
  JE     Ok113
  JMP    No113
Ok113:
  MOV    rax,1
  JMP    End113
No113:
  XOR    rax,rax
End113:
  AND    rax,rax
  JE     No112
Ok112:
  MOV    rax,1
  JMP    End112
No112:
  XOR    rax,rax
End112:
  AND    rax,rax
  JE    _EndIf634
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; EndIf
_EndIf634:
; 
; If *Cursor < *InBufferEnd 
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE   _EndIf636
; *Cursor + 1        
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; EndIf
_EndIf636:
; 
; SeparatorChar = #SkipSeparator
  MOV    qword [rsp+160],-2
; 
; CompilerIf Defined(PUREBASIC_IDE, #PB_Constant)
; 
; 
; Callback(*StringStart, *Cursor-*StringStart, *CommentColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_CommentColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; 
; CompilerEndIf
; 
; ElseIf SeparatorChar = '#'
  JMP   _EndIf601
_EndIf629:
  MOV    r15,qword [rsp+160]
  CMP    r15,35
  JNE   _EndIf637
; 
; 
; 
; *StringStart = *Cursor
  PUSH   qword [rsp+40]
  POP    rax
  MOV    qword [rsp+96],rax
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; While *Cursor < *InBufferEnd And ValidCharacters(*Cursor\a)
_While638:
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE    No114
  MOV    rbp,qword [rsp+40]
  MOVZX  r15,byte [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  CMP    byte [rbp+r15],0
  JE     No114
Ok114:
  MOV    rax,1
  JMP    End114
No114:
  XOR    rax,rax
End114:
  AND    rax,rax
  JE    _Wend638
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; Wend
  JMP   _While638
_Wend638:
; 
; If *Cursor < *InBufferEnd And *Cursor\b = '$' 
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE    No115
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,36
  JNE    No115
Ok115:
  MOV    rax,1
  JMP    End115
No115:
  XOR    rax,rax
End115:
  AND    rax,rax
  JE    _EndIf640
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; EndIf
_EndIf640:
; 
; 
; If EnableCaseCorrection And ConstantListSize > 0 And *Cursor > *StringStart + 1 And IsKnownConstant(PeekAsciiLength(*StringStart, *Cursor-*StringStart)) And (CursorPosition = 0 Or CursorPosition < *StringStart-*InBuffer Or CursorPosition > *Cursor-*InBuffer)
  CMP    qword [v_EnableCaseCorrection],0
  JE     No116
  MOV    r15,qword [v_ConstantListSize]
  AND    r15,r15
  JLE    No116
  MOV    r15,qword [rsp+40]
  MOV    r14,qword [rsp+96]
  INC    r14
  CMP    r15,r14
  JLE    No116
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  MOV    r15,qword [rsp+88]
  SUB    r15,qword [rsp+144]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure232
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  AND    rax,rax
  JE     No116
  MOV    r15,qword [rsp+PS244+16]
  AND    r15,r15
  JE     Ok117
  MOV    r15,qword [rsp+PS244+16]
  MOV    r14,qword [rsp+96]
  SUB    r14,qword [rsp+PS244+0]
  CMP    r15,r14
  JL     Ok117
  MOV    r15,qword [rsp+PS244+16]
  MOV    r14,qword [rsp+40]
  SUB    r14,qword [rsp+PS244+0]
  CMP    r15,r14
  JG     Ok117
  JMP    No117
Ok117:
  MOV    rax,1
  JMP    End117
No117:
  XOR    rax,rax
End117:
  AND    rax,rax
  JE     No116
Ok116:
  MOV    rax,1
  JMP    End116
No116:
  XOR    rax,rax
End116:
  AND    rax,rax
  JE    _EndIf642
; TextChanged = CopyMemoryCheck(ToAscii(KnownConstant$), *StringStart, Len(KnownConstant$)) 
  PUSH   qword [v_KnownConstant$]
  POP    rcx
  CALL   PB_Len
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+104]
  PUSH   qword [v_KnownConstant$]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure96
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure214
  MOV    qword [rsp+176],rax
; Callback(*StringStart, *Cursor-*StringStart, *ConstantColor, 0, TextChanged) 
  SUB    rsp,8
  PUSH   qword [rsp+184]
  PUSH   qword 0
  PUSH   qword [p_ConstantColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; Else
  JMP   _EndIf641
_EndIf642:
; Callback(*StringStart, *Cursor-*StringStart, *ConstantColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_ConstantColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; EndIf
_EndIf641:
; 
; SeparatorChar = #SkipSeparator 
  MOV    qword [rsp+160],-2
; 
; ElseIf SeparatorChar = 39 
  JMP   _EndIf601
_EndIf637:
  MOV    r15,qword [rsp+160]
  CMP    r15,39
  JNE   _EndIf644
; 
; 
; 
; *StringStart = *Cursor 
  PUSH   qword [rsp+40]
  POP    rax
  MOV    qword [rsp+96],rax
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; While *Cursor < *InBufferEnd And (*Cursor\b <> 39 And *Cursor\b <> 10 And *Cursor\b <> 13 And *Cursor\b)
_While645:
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE    No118
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,39
  JE     No119
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,10
  JE     No119
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,13
  JE     No119
  MOV    rbp,qword [rsp+40]
  CMP    byte [rbp],0
  JE     No119
Ok119:
  MOV    rax,1
  JMP    End119
No119:
  XOR    rax,rax
End119:
  AND    rax,rax
  JE     No118
Ok118:
  MOV    rax,1
  JMP    End118
No118:
  XOR    rax,rax
End118:
  AND    rax,rax
  JE    _Wend645
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; Wend
  JMP   _While645
_Wend645:
; 
; If *Cursor < *InBufferEnd And (*Cursor\b = 10 Or *Cursor\b = 13)
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE    No120
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,10
  JE     Ok121
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,13
  JE     Ok121
  JMP    No121
Ok121:
  MOV    rax,1
  JMP    End121
No121:
  XOR    rax,rax
End121:
  AND    rax,rax
  JE     No120
Ok120:
  MOV    rax,1
  JMP    End120
No120:
  XOR    rax,rax
End120:
  AND    rax,rax
  JE    _EndIf647
; NewLine = 1
  MOV    qword [rsp+168],1
; 
; If *Cursor+1 < *InBufferEnd And (*Cursor\a[1] = 10 Or *Cursor\a[1] = 13)
  MOV    r15,qword [rsp+40]
  INC    r15
  CMP    r15,qword [rsp+48]
  JGE    No122
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  POP    rbp
  MOVZX  r15,byte [rbp+1]
  MOV    rax,10
  CMP    r15,rax
  JE     Ok123
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  POP    rbp
  MOVZX  r15,byte [rbp+1]
  MOV    rax,13
  CMP    r15,rax
  JE     Ok123
  JMP    No123
Ok123:
  MOV    rax,1
  JMP    End123
No123:
  XOR    rax,rax
End123:
  AND    rax,rax
  JE     No122
Ok122:
  MOV    rax,1
  JMP    End122
No122:
  XOR    rax,rax
End122:
  AND    rax,rax
  JE    _EndIf649
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; EndIf
_EndIf649:
; EndIf
_EndIf647:
; 
; Callback(*StringStart, *Cursor-*StringStart+1, *ConstantColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_ConstantColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; SeparatorChar = #SkipSeparator
  MOV    qword [rsp+160],-2
; 
; 
; 
; ElseIf SeparatorChar = '$'
  JMP   _EndIf601
_EndIf644:
  MOV    r15,qword [rsp+160]
  CMP    r15,36
  JNE   _EndIf650
; 
; 
; 
; *StringStart = *Cursor
  PUSH   qword [rsp+40]
  POP    rax
  MOV    qword [rsp+96],rax
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; While *Cursor < *InBufferEnd And ((*Cursor\b >= '0' And *Cursor\b <= '9') Or (*Cursor\b >= 'A' And *Cursor\b <= 'F') Or (*Cursor\b >= 'a' And *Cursor\b <= 'f'))
_While651:
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE    No124
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,48
  JL     No125
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,57
  JG     No125
Ok125:
  MOV    rax,1
  JMP    End125
No125:
  XOR    rax,rax
End125:
  AND    rax,rax
  JNE    Ok126
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,65
  JL     No127
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,70
  JG     No127
Ok127:
  MOV    rax,1
  JMP    End127
No127:
  XOR    rax,rax
End127:
  AND    rax,rax
  JNE    Ok128
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,97
  JL     No129
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,102
  JG     No129
Ok129:
  MOV    rax,1
  JMP    End129
No129:
  XOR    rax,rax
End129:
  AND    rax,rax
  JNE    Ok128
  JMP    No128
Ok128:
  MOV    rax,1
  JMP    End128
No128:
  XOR    rax,rax
End128:
  AND    rax,rax
  JNE    Ok126
  JMP    No126
Ok126:
  MOV    rax,1
  JMP    End126
No126:
  XOR    rax,rax
End126:
  AND    rax,rax
  JE     No124
Ok124:
  MOV    rax,1
  JMP    End124
No124:
  XOR    rax,rax
End124:
  AND    rax,rax
  JE    _Wend651
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; Wend
  JMP   _While651
_Wend651:
; 
; Callback(*StringStart, *Cursor-*StringStart, *NumberColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NumberColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; SeparatorChar = #SkipSeparator
  MOV    qword [rsp+160],-2
; 
; 
; ElseIf SeparatorChar = '%'
  JMP   _EndIf601
_EndIf650:
  MOV    r15,qword [rsp+160]
  CMP    r15,37
  JNE   _EndIf652
; 
; 
; 
; *StringStart = *Cursor
  PUSH   qword [rsp+40]
  POP    rax
  MOV    qword [rsp+96],rax
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; 
; While *Cursor < *InBufferEnd And (*Cursor\b = '1' Or *Cursor\b = '0')
_While653:
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE    No130
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,49
  JE     Ok131
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,48
  JE     Ok131
  JMP    No131
Ok131:
  MOV    rax,1
  JMP    End131
No131:
  XOR    rax,rax
End131:
  AND    rax,rax
  JE     No130
Ok130:
  MOV    rax,1
  JMP    End130
No130:
  XOR    rax,rax
End130:
  AND    rax,rax
  JE    _Wend653
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; Wend
  JMP   _While653
_Wend653:
; 
; If *Cursor = *StringStart + 1   
  MOV    r15,qword [rsp+40]
  MOV    r14,qword [rsp+96]
  INC    r14
  CMP    r15,r14
  JNE   _EndIf655
; Callback(*StringStart, 1, *OperatorColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_OperatorColor]
  PUSH   qword 1
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; 
; Else  
  JMP   _EndIf654
_EndIf655:
; Callback(*StringStart, *Cursor-*StringStart, *NumberColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NumberColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; 
; EndIf  
_EndIf654:
; SeparatorChar = #SkipSeparator
  MOV    qword [rsp+160],-2
; 
; 
; ElseIf SeparatorChar = '@' Or SeparatorChar = '?'
  JMP   _EndIf601
_EndIf652:
  MOV    r15,qword [rsp+160]
  CMP    r15,64
  JE     Ok132
  MOV    r15,qword [rsp+160]
  CMP    r15,63
  JE     Ok132
  JMP    No132
Ok132:
  MOV    rax,1
  JMP    End132
No132:
  XOR    rax,rax
End132:
  AND    rax,rax
  JE    _EndIf657
; 
; 
; 
; IsNumber = 0
  MOV    qword [rsp+232],0
; *StringStart = *Cursor
  PUSH   qword [rsp+40]
  POP    rax
  MOV    qword [rsp+96],rax
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; 
; While *Cursor < *InBufferEnd And (ValidCharacters(*Cursor\a) Or *Cursor\b = '$')
_While658:
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE    No133
  MOV    rbp,qword [rsp+40]
  MOVZX  r15,byte [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  CMP    byte [rbp+r15],0
  JNE    Ok134
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,36
  JE     Ok134
  JMP    No134
Ok134:
  MOV    rax,1
  JMP    End134
No134:
  XOR    rax,rax
End134:
  AND    rax,rax
  JE     No133
Ok133:
  MOV    rax,1
  JMP    End133
No133:
  XOR    rax,rax
End133:
  AND    rax,rax
  JE    _Wend658
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; Wend
  JMP   _While658
_Wend658:
; 
; Callback(*StringStart, *Cursor-*StringStart, *PointerColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_PointerColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; SeparatorChar = #SkipSeparator 
  MOV    qword [rsp+160],-2
; 
; 
; 
; ElseIf SeparatorChar = '*'
  JMP   _EndIf601
_EndIf657:
  MOV    r15,qword [rsp+160]
  CMP    r15,42
  JNE   _EndIf659
; 
; 
; 
; If ValidCharacters(*Cursor\a[1]) = 0 
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  POP    rbp
  MOVZX  r15,byte [rbp+1]
  MOV    rbp,qword [a_ValidCharacters]
  MOVSX  r15,byte [rbp+r15]
  AND    r15,r15
  JNE   _EndIf661
; Callback(*Cursor, 1, *OperatorColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_OperatorColor]
  PUSH   qword 1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; 
; Else 
  JMP   _EndIf660
_EndIf661:
; 
; *BackCursor.HighlightPTR = *Cursor-1
  MOV    r15,qword [rsp+40]
  DEC    r15
  MOV    qword [rsp+240],r15
; IsPointer = 1
  MOV    qword [rsp+248],1
; While *BackCursor >= *InBuffer And *BackCursor\b <> 10 And *BackCursor\b <> 13
_While663:
  MOV    r15,qword [rsp+240]
  CMP    r15,qword [rsp+PS244+0]
  JL     No135
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,10
  JE     No135
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,13
  JE     No135
Ok135:
  MOV    rax,1
  JMP    End135
No135:
  XOR    rax,rax
End135:
  AND    rax,rax
  JE    _Wend663
; If *BackCursor\b = '(' Or *BackCursor\b = ':' Or *BackCursor\b = '[' Or *BackCursor\b = ',' Or *BackCursor\b = '*' Or *BackCursor\b = '=' Or *BackCursor\b = '+' Or *BackCursor\b = '-' Or *BackCursor\b = '/' Or *BackCursor\b = '@' Or *BackCursor\b = '&' Or *BackCursor\b = '|' Or *BackCursor\b = '!' Or *BackCursor\b = '~' Or *BackCursor\b = '<' Or *BackCursor\b = '>' Or *BackCursor\b = '\' Or *BackCursor\b = '%'
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,40
  JE     Ok136
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,58
  JE     Ok136
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,91
  JE     Ok136
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,44
  JE     Ok136
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,42
  JE     Ok136
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,61
  JE     Ok136
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,43
  JE     Ok136
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,45
  JE     Ok136
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,47
  JE     Ok136
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,64
  JE     Ok136
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,38
  JE     Ok136
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,124
  JE     Ok136
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,33
  JE     Ok136
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,126
  JE     Ok136
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,60
  JE     Ok136
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,62
  JE     Ok136
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,92
  JE     Ok136
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,37
  JE     Ok136
  JMP    No136
Ok136:
  MOV    rax,1
  JMP    End136
No136:
  XOR    rax,rax
End136:
  AND    rax,rax
  JE    _EndIf665
; 
; Break     
  JMP   _Wend663
; ElseIf ValidCharacters(*BackCursor\a) Or *BackCursor\b = ')' Or *BackCursor\b = ']' Or *BackCursor\b = '.'
  JMP   _EndIf664
_EndIf665:
  MOV    rbp,qword [rsp+240]
  MOVZX  r15,byte [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  CMP    byte [rbp+r15],0
  JNE    Ok137
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,41
  JE     Ok137
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,93
  JE     Ok137
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,46
  JE     Ok137
  JMP    No137
Ok137:
  MOV    rax,1
  JMP    End137
No137:
  XOR    rax,rax
End137:
  AND    rax,rax
  JE    _EndIf666
; 
; IsPointer = 0
  MOV    qword [rsp+248],0
; Break
  JMP   _Wend663
; EndIf
_EndIf664:
_EndIf666:
; *BackCursor - 1
  MOV    r15,qword [rsp+240]
  DEC    r15
  MOV    qword [rsp+240],r15
; Wend
  JMP   _While663
_Wend663:
; 
; If ValidCharacters(*BackCursor\a)  
  MOV    rbp,qword [rsp+240]
  MOVZX  r15,byte [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  CMP    byte [rbp+r15],0
  JE    _EndIf668
; *CheckEnd = *BackCursor
  PUSH   qword [rsp+240]
  POP    rax
  MOV    qword [rsp+256],rax
; While *BackCursor >= *InBuffer And ValidCharacters(*BackCursor\a) 
_While669:
  MOV    r15,qword [rsp+240]
  CMP    r15,qword [rsp+PS244+0]
  JL     No138
  MOV    rbp,qword [rsp+240]
  MOVZX  r15,byte [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  CMP    byte [rbp+r15],0
  JE     No138
Ok138:
  MOV    rax,1
  JMP    End138
No138:
  XOR    rax,rax
End138:
  AND    rax,rax
  JE    _Wend669
; *BackCursor - 1
  MOV    r15,qword [rsp+240]
  DEC    r15
  MOV    qword [rsp+240],r15
; Wend            
  JMP   _While669
_Wend669:
; IsPointer = IsBasicKeyword(PeekAsciiLength(*BackCursor+1, *CheckEnd-*BackCursor))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  MOV    r15,qword [rsp+320]
  SUB    r15,qword [rsp+304]
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+312]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure236
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+248],rax
; 
; If IsPointer = 0 And *BackCursor >= *InBuffer And *BackCursor\b = '.' 
  MOV    r15,qword [rsp+248]
  AND    r15,r15
  JNE    No139
  MOV    r15,qword [rsp+240]
  CMP    r15,qword [rsp+PS244+0]
  JL     No139
  MOV    rbp,qword [rsp+240]
  MOVSX  r15,byte [rbp]
  CMP    r15,46
  JNE    No139
Ok139:
  MOV    rax,1
  JMP    End139
No139:
  XOR    rax,rax
End139:
  AND    rax,rax
  JE    _EndIf671
; *BackCursor - 1
  MOV    r15,qword [rsp+240]
  DEC    r15
  MOV    qword [rsp+240],r15
; *CheckEnd = *BackCursor
  PUSH   qword [rsp+240]
  POP    rax
  MOV    qword [rsp+256],rax
; While *BackCursor >= *InBuffer And ValidCharacters(*BackCursor\a) 
_While672:
  MOV    r15,qword [rsp+240]
  CMP    r15,qword [rsp+PS244+0]
  JL     No140
  MOV    rbp,qword [rsp+240]
  MOVZX  r15,byte [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  CMP    byte [rbp+r15],0
  JE     No140
Ok140:
  MOV    rax,1
  JMP    End140
No140:
  XOR    rax,rax
End140:
  AND    rax,rax
  JE    _Wend672
; *BackCursor - 1
  MOV    r15,qword [rsp+240]
  DEC    r15
  MOV    qword [rsp+240],r15
; Wend               
  JMP   _While672
_Wend672:
; IsPointer = IsBasicKeyword(PeekAsciiLength(*BackCursor+1, *CheckEnd-*BackCursor))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  MOV    r15,qword [rsp+320]
  SUB    r15,qword [rsp+304]
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+312]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure236
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+248],rax
; EndIf
_EndIf671:
; EndIf
_EndIf668:
; 
; If IsPointer = 0
  MOV    r15,qword [rsp+248]
  AND    r15,r15
  JNE   _EndIf674
; Callback(*Cursor, 1, *OperatorColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_OperatorColor]
  PUSH   qword 1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; 
; Else
  JMP   _EndIf673
_EndIf674:
; *StringStart = *Cursor
  PUSH   qword [rsp+40]
  POP    rax
  MOV    qword [rsp+96],rax
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; While *Cursor < *InBufferEnd And (ValidCharacters(*Cursor\a) Or *Cursor\b = '$')
_While676:
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE    No141
  MOV    rbp,qword [rsp+40]
  MOVZX  r15,byte [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  CMP    byte [rbp+r15],0
  JNE    Ok142
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  CMP    r15,36
  JE     Ok142
  JMP    No142
Ok142:
  MOV    rax,1
  JMP    End142
No142:
  XOR    rax,rax
End142:
  AND    rax,rax
  JE     No141
Ok141:
  MOV    rax,1
  JMP    End141
No141:
  XOR    rax,rax
End141:
  AND    rax,rax
  JE    _Wend676
; *Cursor + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; Wend
  JMP   _While676
_Wend676:
; 
; Callback(*StringStart, *Cursor-*StringStart, *PointerColor, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_PointerColor]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; SeparatorChar = #SkipSeparator 
  MOV    qword [rsp+160],-2
; 
; EndIf
_EndIf673:
; 
; EndIf
_EndIf660:
; 
; 
; 
; 
; ElseIf SeparatorChar = '=' Or SeparatorChar = '+' Or SeparatorChar = '-' Or SeparatorChar = '/' Or SeparatorChar = '&' Or SeparatorChar = '|' Or SeparatorChar = '!' Or SeparatorChar = '~' Or SeparatorChar = '<' Or SeparatorChar = '>'
  JMP   _EndIf601
_EndIf659:
  MOV    r15,qword [rsp+160]
  CMP    r15,61
  JE     Ok143
  MOV    r15,qword [rsp+160]
  CMP    r15,43
  JE     Ok143
  MOV    r15,qword [rsp+160]
  CMP    r15,45
  JE     Ok143
  MOV    r15,qword [rsp+160]
  CMP    r15,47
  JE     Ok143
  MOV    r15,qword [rsp+160]
  CMP    r15,38
  JE     Ok143
  MOV    r15,qword [rsp+160]
  CMP    r15,124
  JE     Ok143
  MOV    r15,qword [rsp+160]
  CMP    r15,33
  JE     Ok143
  MOV    r15,qword [rsp+160]
  CMP    r15,126
  JE     Ok143
  MOV    r15,qword [rsp+160]
  CMP    r15,60
  JE     Ok143
  MOV    r15,qword [rsp+160]
  CMP    r15,62
  JE     Ok143
  JMP    No143
Ok143:
  MOV    rax,1
  JMP    End143
No143:
  XOR    rax,rax
End143:
  AND    rax,rax
  JE    _EndIf677
; 
; 
; 
; 
; Callback(*Cursor, 1, *OperatorColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_OperatorColor]
  PUSH   qword 1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; 
; 
; 
; ElseIf SeparatorChar = '(' Or SeparatorChar = ')' Or SeparatorChar = '[' Or SeparatorChar = ']' Or SeparatorChar = '.' Or SeparatorChar = ',' Or SeparatorChar = ':' Or SeparatorChar = '\'
  JMP   _EndIf601
_EndIf677:
  MOV    r15,qword [rsp+160]
  CMP    r15,40
  JE     Ok144
  MOV    r15,qword [rsp+160]
  CMP    r15,41
  JE     Ok144
  MOV    r15,qword [rsp+160]
  CMP    r15,91
  JE     Ok144
  MOV    r15,qword [rsp+160]
  CMP    r15,93
  JE     Ok144
  MOV    r15,qword [rsp+160]
  CMP    r15,46
  JE     Ok144
  MOV    r15,qword [rsp+160]
  CMP    r15,44
  JE     Ok144
  MOV    r15,qword [rsp+160]
  CMP    r15,58
  JE     Ok144
  MOV    r15,qword [rsp+160]
  CMP    r15,92
  JE     Ok144
  JMP    No144
Ok144:
  MOV    rax,1
  JMP    End144
No144:
  XOR    rax,rax
End144:
  AND    rax,rax
  JE    _EndIf678
; 
; 
; 
; 
; Callback(*Cursor, 1, *SeparatorColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_SeparatorColor]
  PUSH   qword 1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; 
; 
; ElseIf SeparatorChar > 0
  JMP   _EndIf601
_EndIf678:
  MOV    r15,qword [rsp+160]
  AND    r15,r15
  JLE   _EndIf679
; 
; 
; 
; Callback(*Cursor, 1, *NormalTextColor, 0, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [p_NormalTextColor]
  PUSH   qword 1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   qword [rsp+PS244+72]
  ADD    rsp,48
; EndIf
_EndIf601:
_EndIf679:
; EndIf
_EndIf600:
; 
; If SeparatorChar > 0  
  MOV    r15,qword [rsp+160]
  AND    r15,r15
  JLE   _EndIf681
; *Cursor + 1 
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; EndIf
_EndIf681:
; 
; OlderSeparatorChar = OldSeparatorChar
  PUSH   qword [rsp+80]
  POP    rax
  MOV    qword [rsp+88],rax
; OldSeparatorChar = SeparatorChar
  PUSH   qword [rsp+160]
  POP    rax
  MOV    qword [rsp+80],rax
; 
; If NewLine
  CMP    qword [rsp+168],0
  JE    _EndIf683
; *LineStart = *Cursor
  PUSH   qword [rsp+40]
  POP    rax
  MOV    qword [rsp+56],rax
; OldSeparatorChar = 0
  MOV    qword [rsp+80],0
; OlderSeparatorChar = 0
  MOV    qword [rsp+88],0
; EndIf
_EndIf683:
; 
; If SeparatorChar = #EndSeparator 
  MOV    r15,qword [rsp+160]
  CMP    r15,-1
  JNE   _EndIf685
; Break
  JMP   _Wend513
; EndIf
_EndIf685:
; Wend
  JMP   _While513
_Wend513:
; 
; 
; EndProcedure
_EndProcedureZero245:
  XOR    rax,rax
_EndProcedure245:
  PUSH   rax
  MOV    rcx,qword [rsp+144]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+208]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,272
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure ShowWindowMaximized(Window)
_Procedure100:
  MOV    qword [rsp+8],rcx
  PS100=48
  SUB    rsp,40
; 
; ShowWindow_(WindowID(Window), #SW_MAXIMIZE)
  PUSH   qword 3
  SUB    rsp,8
  PUSH   qword [rsp+PS100+16]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   ShowWindow
; 
; EndProcedure
_EndProcedureZero101:
  XOR    rax,rax
_EndProcedure101:
  ADD    rsp,40
  RET
; Procedure Plugin_Xml_DisplayObject(WindowID, *Buffer, Size)
_Procedure638:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS638=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; *Object.Plugin_Xml = 0
  MOV    qword [rsp+40],0
; 
; XmlID = CatchXML(#PB_Any, *Buffer, Size)
  PUSH   qword [rsp+PS638+16]
  PUSH   qword [rsp+PS638+16]
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CatchXML
  MOV    qword [rsp+48],rax
; If XmlID
  CMP    qword [rsp+48],0
  JE    _EndIf3354
; *Object = AllocateMemory(SizeOf(Plugin_Xml))
  PUSH   qword 28
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+40],rax
; If *Object
  CMP    qword [rsp+40],0
  JE    _EndIf3356
; *Object\XmlID = XmlID
  PUSH   qword [rsp+48]
  MOV    rbp,qword [rsp+48]
  POP    rax
  MOV    dword [rbp],eax
; 
; 
; *Object\Tree = TreeGadget(#PB_Any, 0, 0, 0, 0, #PB_Tree_AlwaysShowSelection) 
  PUSH   qword 32
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TreeGadget2
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+48]
  POP    rax
  MOV    dword [rbp+4],eax
; *Object\Panel = PanelGadget(#PB_Any, 0, 0, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PanelGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+48]
  POP    rax
  MOV    dword [rbp+8],eax
; 
; AddGadgetItem(*Object\Panel, -1, "Information")
  MOV    rax,_S349
  PUSH   rax
  PUSH   qword -1
  MOV    rbp,qword [rsp+56]
  MOVSXD rax,dword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddGadgetItem
; *Object\Info = EditorGadget(#PB_Any, 0, 0, 0, 0, #PB_Editor_ReadOnly) 
  PUSH   qword 2048
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_EditorGadget2
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+48]
  POP    rax
  MOV    dword [rbp+16],eax
; 
; AddGadgetItem(*Object\Panel, -1, "Attributes")
  MOV    rax,_S350
  PUSH   rax
  PUSH   qword -1
  MOV    rbp,qword [rsp+56]
  MOVSXD rax,dword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddGadgetItem
; *Object\Attributes = ListIconGadget(#PB_Any, 0, 0, 0, 0, "Attribute", 100, #PB_ListIcon_GridLines|#PB_ListIcon_FullRowSelect)
  PUSH   qword 1073807360
  PUSH   qword 100
  MOV    rax,_S351
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ListIconGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+48]
  POP    rax
  MOV    dword [rbp+20],eax
; AddGadgetColumn(*Object\Attributes, 1, "Value", 300)
  PUSH   qword 300
  MOV    rax,_S92
  PUSH   rax
  PUSH   qword 1
  MOV    rbp,qword [rsp+64]
  MOVSXD rax,dword [rbp+20]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_AddGadgetColumn
; 
; AddGadgetItem(*Object\Panel, -1, "Text")
  MOV    rax,_S352
  PUSH   rax
  PUSH   qword -1
  MOV    rbp,qword [rsp+56]
  MOVSXD rax,dword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddGadgetItem
; *Object\Text = EditorGadget(#PB_Any, 0, 0, 0, 0, #PB_Editor_ReadOnly) 
  PUSH   qword 2048
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_EditorGadget2
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+48]
  POP    rax
  MOV    dword [rbp+24],eax
; 
; CloseGadgetList()
  CALL   PB_CloseGadgetList
; 
; *Object\Splitter = SplitterGadget(#PB_Any, 0, 0, 0, 0, *Object\Tree, *Object\Panel, #PB_Splitter_Separator)
  PUSH   qword 2
  MOV    rbp,qword [rsp+48]
  MOVSXD rax,dword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  MOVSXD rax,dword [rbp+4]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SplitterGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+48]
  POP    rax
  MOV    dword [rbp+12],eax
; 
; 
; 
; Node = ChildXMLNode(RootXMLNode(XmlID))
  PUSH   qword [rsp+48]
  POP    rcx
  CALL   PB_RootXMLNode
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_ChildXMLNode
  MOV    qword [rsp+56],rax
; While Node
_While3357:
  CMP    qword [rsp+56],0
  JE    _Wend3357
; Xml_RecursiveAdd(Node, *Object\Tree, 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+48]
  MOVSXD rax,dword [rbp+4]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure636
; Node = NextXMLNode(Node)
  PUSH   qword [rsp+56]
  POP    rcx
  CALL   PB_NextXMLNode
  MOV    qword [rsp+56],rax
; Wend
  JMP   _While3357
_Wend3357:
; 
; Else
  JMP   _EndIf3355
_EndIf3356:
; FreeXML(XmlID)
  PUSH   qword [rsp+48]
  POP    rcx
  CALL   PB_FreeXML
; EndIf    
_EndIf3355:
; EndIf
_EndIf3354:
; 
; ProcedureReturn *Object
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure639
; EndProcedure
_EndProcedureZero639:
  XOR    rax,rax
_EndProcedure639:
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure MemoryViewer_DebuggerEvent(*Debugger.DebuggerData)
_Procedure20:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS20=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; If *Debugger\Command\Command = #COMMAND_ControlMemoryViewer
  MOV    rbp,qword [rsp+PS20+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,43
  JNE   _EndIf1944
; If *Debugger\Command\Value1 = 1 
  MOV    rbp,qword [rsp+PS20+0]
  MOVSXD r15,dword [rbp+60]
  CMP    r15,1
  JNE   _EndIf1946
; OpenMemoryViewerWindow(*Debugger)
  PUSH   qword [rsp+PS20+0]
  POP    rcx
  CALL  _Procedure40
; 
; ElseIf *Debugger\Command\Value1 = 2 
  JMP   _EndIf1945
_EndIf1946:
  MOV    rbp,qword [rsp+PS20+0]
  MOVSXD r15,dword [rbp+60]
  CMP    r15,2
  JNE   _EndIf1947
; OpenMemoryViewerWindow(*Debugger)
  PUSH   qword [rsp+PS20+0]
  POP    rcx
  CALL  _Procedure40
; 
; If *Debugger\CommandData
  MOV    rbp,qword [rsp+PS20+0]
  CMP    qword [rbp+72],0
  JE    _EndIf1949
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS20+0]
  CMP    dword [rbp+32],0
  JE    _EndIf1951
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Start], StrU(PeekQ(*Debugger\CommandData), #PB_Quad))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 13
  MOV    rbp,qword [rsp+PS20+48]
  PUSH   qword [rbp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StrU2
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS20+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2240]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_End], "+ "+StrU(PeekQ(*Debugger\CommandData+8), #PB_Quad))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S241
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 13
  MOV    rbp,qword [rsp+PS20+48]
  MOV    r15,qword [rbp+72]
  ADD    r15,8
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StrU2
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS20+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2248]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Else
  JMP   _EndIf1950
_EndIf1951:
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Start], StrU(PeekL(*Debugger\CommandData), #PB_Long))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 5
  MOV    rbp,qword [rsp+PS20+48]
  PUSH   qword [rbp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StrU2
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS20+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2240]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_End], "+ "+StrU(PeekL(*Debugger\CommandData+4), #PB_Long))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S241
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 5
  MOV    rbp,qword [rsp+PS20+48]
  MOV    r15,qword [rbp+72]
  ADD    r15,4
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StrU2
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS20+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2248]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf   
_EndIf1950:
; EndIf
_EndIf1949:
; 
; EndIf  
_EndIf1945:
_EndIf1947:
; 
; ProcedureReturn     
  JMP   _EndProcedure21
; EndIf
_EndIf1944:
; 
; 
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Memory] = 0
  MOV    rbp,qword [rsp+PS20+0]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+848]
  AND    r15,r15
  JNE   _EndIf1954
; ProcedureReturn 
  JMP   _EndProcedure21
; EndIf
_EndIf1954:
; 
; If *Debugger\Command\Command = #COMMAND_Memory
  MOV    rbp,qword [rsp+PS20+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,12
  JNE   _EndIf1956
; 
; If *Debugger\Command\Value1 Or *Debugger\Command\Value2
  MOV    rbp,qword [rsp+PS20+0]
  CMP    dword [rbp+60],0
  JNE    Ok233
  MOV    rbp,qword [rsp+PS20+0]
  CMP    dword [rbp+64],0
  JNE    Ok233
  JMP    No233
Ok233:
  MOV    rax,1
  JMP    End233
No233:
  XOR    rax,rax
End233:
  AND    rax,rax
  JE    _EndIf1958
; If *Debugger\MemoryDump  
  MOV    rbp,qword [rsp+PS20+0]
  CMP    qword [rbp+596],0
  JE    _EndIf1960
; FreeMemory(*Debugger\MemoryDump)
  MOV    rbp,qword [rsp+PS20+0]
  PUSH   qword [rbp+596]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf    
_EndIf1960:
; *Debugger\MemoryDump     = *Debugger\CommandData
  MOV    rbp,qword [rsp+PS20+0]
  PUSH   qword [rbp+72]
  MOV    rbp,qword [rsp+PS20+8]
  POP    rax
  MOV    qword [rbp+596],rax
; *Debugger\MemoryDumpSize = *Debugger\Command\DataSize
  MOV    rbp,qword [rsp+PS20+0]
  MOVSXD rax,dword [rbp+56]
  PUSH   rax
  MOV    rbp,qword [rsp+PS20+8]
  POP    rax
  MOV    qword [rbp+604],rax
; *Debugger\CommandData    = 0 
  MOV    rbp,qword [rsp+PS20+0]
  MOV    qword [rbp+72],0
; 
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS20+0]
  CMP    dword [rbp+32],0
  JE    _EndIf1962
; *Debugger\MemoryDumpStart = PeekQ(@*Debugger\Command\Value1)
  MOV    rbp,qword [rsp+PS20+0]
  LEA    rax,[rbp+60]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_PeekQ
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS20+8]
  POP    rax
  MOV    qword [rbp+612],rax
; Else
  JMP   _EndIf1961
_EndIf1962:
; *Debugger\MemoryDumpStart = PeekL(@*Debugger\Command\Value1)
  MOV    rbp,qword [rsp+PS20+0]
  LEA    rax,[rbp+60]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_PeekL
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS20+8]
  POP    rax
  MOV    qword [rbp+612],rax
; EndIf
_EndIf1961:
; 
; MemoryViewer_Update(*Debugger, 0, 0)
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [rsp+PS20+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure482
; 
; Else  
  JMP   _EndIf1957
_EndIf1958:
; 
; 
; If *Debugger\MemoryDump  
  MOV    rbp,qword [rsp+PS20+0]
  CMP    qword [rbp+596],0
  JE    _EndIf1966
; FreeMemory(*Debugger\MemoryDump)
  MOV    rbp,qword [rsp+PS20+0]
  PUSH   qword [rbp+596]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf  
_EndIf1966:
; *Debugger\MemoryDump = 0  
  MOV    rbp,qword [rsp+PS20+0]
  MOV    qword [rbp+596],0
; 
; Message$ = Language("Debugger","InvalidMemory")   
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S242
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; If *Debugger\Command\DataSize > 0 
  MOV    rbp,qword [rsp+PS20+0]
  MOVSXD r15,dword [rbp+56]
  AND    r15,r15
  JLE   _EndIf1968
; Message$ + #NewLine + #NewLine + "Argument error:" +#NewLine+"  "+ PeekS(*Debugger\CommandData, *Debugger\Command\DataSize, #PB_Ascii)
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S243
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  MOV    rbp,qword [rsp+PS20+32]
  MOVSXD rax,dword [rbp+56]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS20+40]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf      
_EndIf1968:
; 
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_List], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS20+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2280]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Editor], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS20+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2264]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; 
; ClearGadgetItems(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_List])      
  MOV    rbp,qword [rsp+PS20+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2280]
  POP    rcx
  CALL   PB_ClearGadgetItems
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Editor], Message$)
  PUSH   qword [rsp+40]
  MOV    rbp,qword [rsp+PS20+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2264]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetText
; 
; EndIf
_EndIf1957:
; 
; EndIf
_EndIf1956:
; 
; EndProcedure
_EndProcedureZero21:
  XOR    rax,rax
_EndProcedure21:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure VariableGadget_SortType(type)
_Procedure264:
  MOV    qword [rsp+8],rcx
  PUSH   r15
  PS264=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; If IS_POINTER(type)
  MOV    r15,qword [rsp+PS264+0]
  AND    r15,128
  AND    r15,r15
  JE    _EndIf760
; ProcedureReturn #SORTTYPE_Pointer
  MOV    rax,9
  JMP   _EndProcedure265
; Else
  JMP   _EndIf759
_EndIf760:
; Select type & #TYPEMASK
  MOV    r15,qword [rsp+PS264+0]
  AND    r15,63
  MOV    rax,r15
  PUSH   rax
; Case #TYPE_BYTE:        ProcedureReturn #SORTTYPE_Byte
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case36
  MOV    rax,1
  ADD    rsp,8
  JMP   _EndProcedure265
; Case #TYPE_ASCII:       ProcedureReturn #SORTTYPE_Ascii
  JMP   _EndSelect6
_Case36:
  MOV    r15,24
  CMP    r15,[rsp]
  JNE   _Case37
  MOV    rax,2
  ADD    rsp,8
  JMP   _EndProcedure265
; Case #TYPE_CHARACTER:   ProcedureReturn #SORTTYPE_Character
  JMP   _EndSelect6
_Case37:
  MOV    r15,11
  CMP    r15,[rsp]
  JNE   _Case38
  MOV    rax,3
  ADD    rsp,8
  JMP   _EndProcedure265
; Case #TYPE_UNICODE:     ProcedureReturn #SORTTYPE_Unicode
  JMP   _EndSelect6
_Case38:
  MOV    r15,25
  CMP    r15,[rsp]
  JNE   _Case39
  MOV    rax,4
  ADD    rsp,8
  JMP   _EndProcedure265
; Case #TYPE_WORD:        ProcedureReturn #SORTTYPE_Word
  JMP   _EndSelect6
_Case39:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case40
  MOV    rax,5
  ADD    rsp,8
  JMP   _EndProcedure265
; Case #TYPE_LONG:        ProcedureReturn #SORTTYPE_Long
  JMP   _EndSelect6
_Case40:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case41
  MOV    rax,6
  ADD    rsp,8
  JMP   _EndProcedure265
; Case #TYPE_INTEGER:     ProcedureReturn #SORTTYPE_Integer
  JMP   _EndSelect6
_Case41:
  MOV    r15,21
  CMP    r15,[rsp]
  JNE   _Case42
  MOV    rax,7
  ADD    rsp,8
  JMP   _EndProcedure265
; Case #TYPE_QUAD:        ProcedureReturn #SORTTYPE_Quad
  JMP   _EndSelect6
_Case42:
  MOV    r15,13
  CMP    r15,[rsp]
  JNE   _Case43
  MOV    rax,8
  ADD    rsp,8
  JMP   _EndProcedure265
; Case #TYPE_FLOAT:       ProcedureReturn #SORTTYPE_Float
  JMP   _EndSelect6
_Case43:
  MOV    r15,9
  CMP    r15,[rsp]
  JNE   _Case44
  MOV    rax,10
  ADD    rsp,8
  JMP   _EndProcedure265
; Case #TYPE_DOUBLE:      ProcedureReturn #SORTTYPE_Double
  JMP   _EndSelect6
_Case44:
  MOV    r15,12
  CMP    r15,[rsp]
  JNE   _Case45
  MOV    rax,11
  ADD    rsp,8
  JMP   _EndProcedure265
; Case #TYPE_STRING:      ProcedureReturn #SORTTYPE_String
  JMP   _EndSelect6
_Case45:
  MOV    r15,8
  CMP    r15,[rsp]
  JNE   _Case46
  MOV    rax,12
  ADD    rsp,8
  JMP   _EndProcedure265
; Case #TYPE_FIXEDSTRING: ProcedureReturn #SORTTYPE_FixedString
  JMP   _EndSelect6
_Case46:
  MOV    r15,10
  CMP    r15,[rsp]
  JNE   _Case47
  MOV    rax,13
  ADD    rsp,8
  JMP   _EndProcedure265
; Case #TYPE_STRUCTURE:   ProcedureReturn #SORTTYPE_Structure
  JMP   _EndSelect6
_Case47:
  MOV    r15,7
  CMP    r15,[rsp]
  JNE   _Case48
  MOV    rax,14
  ADD    rsp,8
  JMP   _EndProcedure265
; Default:                ProcedureReturn #SORTTYPE_Unknown
  JMP   _EndSelect6
_Case48:
  XOR    rax,rax
  ADD    rsp,8
  JMP   _EndProcedure265
; EndSelect
_Case49:
_EndSelect6:
  POP    rax
; EndIf
_EndIf759:
; EndProcedure
_EndProcedureZero265:
  XOR    rax,rax
_EndProcedure265:
  ADD    rsp,48
  POP    r15
  RET
; Procedure FindMemoryCharacter(*Buffer.Character, Length, Character.c)
_Procedure172:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS172=80
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; *BufferEnd = *Buffer + Length*SizeOf(Character)
  MOV    r15,qword [rsp+PS172+0]
  MOV    r14,qword [rsp+PS172+8]
  ADD    r14,r14
  ADD    r15,r14
  MOV    qword [rsp+40],r15
; While *Buffer < *BufferEnd
_While200:
  MOV    r15,qword [rsp+PS172+0]
  CMP    r15,qword [rsp+40]
  JGE   _Wend200
; If *Buffer\c = Character
  MOV    rbp,qword [rsp+PS172+0]
  MOVZX  r15,word [rbp]
  MOVZX  rax,word [rsp+PS172+16]
  CMP    r15,rax
  JNE   _EndIf202
; ProcedureReturn *Buffer
  MOV    rax,qword [rsp+PS172+0]
  JMP   _EndProcedure173
; EndIf
_EndIf202:
; *Buffer + SizeOf(Character)
  MOV    r15,qword [rsp+PS172+0]
  ADD    r15,2
  MOV    qword [rsp+PS172+0],r15
; Wend
  JMP   _While200
_Wend200:
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure173
; EndProcedure
_EndProcedureZero173:
  XOR    rax,rax
_EndProcedure173:
  ADD    rsp,48
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure.s Network_DecryptHandshakeBlock(*This.Network_Communication, *Block, Size)
_Procedure372:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS372=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS372+32]
  MOV    qword [PB_StringBasePosition],rax
; Result$ = "-invalid-"
  MOV    rdx,_S106
  LEA    rcx,[rsp+40]
  CALL   SYS_FastAllocateStringFree4
; 
; If *Block And Size > 0
  CMP    qword [rsp+PS372+8],0
  JE     No176
  MOV    r15,qword [rsp+PS372+16]
  AND    r15,r15
  JLE    No176
Ok176:
  MOV    rax,1
  JMP    End176
No176:
  XOR    rax,rax
End176:
  AND    rax,rax
  JE    _EndIf1165
; *Decrypted = AllocateMemory(Size)
  PUSH   qword [rsp+PS372+16]
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+48],rax
; If *Decrypted
  CMP    qword [rsp+48],0
  JE    _EndIf1167
; 
; CompilerIf #PB_Compiler_Debugger
; 
; rijndael_ecb_decrypt(@*This\CryptContext, *Block, *Decrypted, Size)
  PUSH   qword [rsp+PS372+16]
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+PS372+24]
  MOV    rbp,qword [rsp+PS372+24]
  LEA    rax,[rbp+148]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   rijndael_ecb_decrypt
  MOVSXD rax,eax
; 
; 
; Result$ = Fingerprint(*Decrypted, Size, #PB_Cipher_MD5)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+PS372+48]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Fingerprint
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; CompilerIf #PB_Compiler_Debugger
; 
; FreeMemory(*Decrypted)
  PUSH   qword [rsp+48]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf1167:
; EndIf
_EndIf1165:
; 
; ProcedureReturn Result$
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure373
; EndProcedure
_EndProcedureZero373:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure373:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure Network_AddLog(*This.Network_Communication, Message$)
_Procedure390:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS390=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS390+8]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; AddGadgetItem(*This\LogGadget, -1, Message$)
  PUSH   qword [rsp+40]
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS390+16]
  PUSH   qword [rbp+84]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddGadgetItem
; SetGadgetState(*This\LogGadget, CountGadgetItems(*This\LogGadget)-1)
  MOV    rbp,qword [rsp+PS390+0]
  PUSH   qword [rbp+84]
  POP    rcx
  CALL   PB_CountGadgetItems
  MOV    r15,rax
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS390+8]
  PUSH   qword [rbp+84]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; Network_FlushWindowEvents(*This)
  PUSH   qword [rsp+PS390+0]
  POP    rcx
  CALL  _Procedure388
; EndProcedure
_EndProcedureZero391:
  XOR    rax,rax
_EndProcedure391:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure ClearBreakPoints() 
_Procedure680:
  PUSH   rbp
  PUSH   r15
  PS680=64
  SUB    rsp,40
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_MARKERDELETEALL, 7, 0)      
  PUSH   qword 0
  PUSH   qword 7
  PUSH   qword 2045
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_MARKERDELETEALL, 8, 0)      
  PUSH   qword 0
  PUSH   qword 8
  PUSH   qword 2045
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; RedrawGadget(SourceFiles(CurrentSource)\Gadget)
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  CALL  _Procedure122
; EndProcedure
_EndProcedureZero681:
  XOR    rax,rax
_EndProcedure681:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure VariableGadget_Free(Gadget)
_Procedure276:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS276=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; *VariableGadget.VariableGadget = GetGadgetData(Gadget)
  PUSH   qword [rsp+PS276+0]
  POP    rcx
  CALL   PB_GetGadgetData
  MOV    qword [rsp+40],rax
; ChangeCurrentElement(VariableGadget_List(), *VariableGadget)
  PUSH   qword [rsp+40]
  PUSH   qword [t_VariableGadget_List]
  POP    rcx
  POP    rdx
  CALL   PB_ChangeCurrentElement
; 
; If VariableGadget_List()\Items
  MOV    rbp,qword [t_VariableGadget_List+8]
  CMP    qword [rbp+32],0
  JE    _EndIf850
; *items.VariableGadget_ItemList = VariableGadget_List()\Items
  MOV    rbp,qword [t_VariableGadget_List+8]
  PUSH   qword [rbp+32]
  POP    rax
  MOV    qword [rsp+48],rax
; For i = 0 To VariableGadget_List()\ItemCount-1
  MOV    qword [rsp+56],0
  JMP   _ForSkipDebug851
_For851:
_ForSkipDebug851:
  MOV    rbp,qword [t_VariableGadget_List+8]
  MOVSXD r15,dword [rbp+28]
  DEC    r15
  CMP    r15,qword [rsp+56]
  JL    _Next852
; FreePBString(@*items\item[i]\Name$)
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+64]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rax,qword [rbp+10]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure74
; FreePBString(@*items\item[i]\Value$)  
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+64]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rax,qword [rbp+18]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure74
; FreePBString(@*items\item[i]\Extra$)         
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+64]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rax,qword [rbp+26]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure74
; Next i
_NextContinue852:
  INC    qword [rsp+56]
  JNO   _For851
_Next852:
; 
; FreeMemory(VariableGadget_List()\Items)
  MOV    rbp,qword [t_VariableGadget_List+8]
  PUSH   qword [rbp+32]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf850:
; 
; FreeGadget(Gadget)
  PUSH   qword [rsp+PS276+0]
  POP    rcx
  CALL   PB_FreeGadget
; DeleteElement(VariableGadget_List())
  PUSH   qword [t_VariableGadget_List]
  POP    rcx
  CALL   PB_DeleteElement
; 
; EndProcedure
_EndProcedureZero277:
  XOR    rax,rax
_EndProcedure277:
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure ApplyPurifierOptions(*Debugger.DebuggerData)  
_Procedure612:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS612=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; *Debugger\PurifierGlobal  = GranularityFromState(GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarGlobal]))
  MOV    rbp,qword [rsp+PS612+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3040]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure606
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS612+8]
  POP    rax
  MOV    dword [rbp+756],eax
; *Debugger\PurifierLocal   = GranularityFromState(GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarLocal]))
  MOV    rbp,qword [rsp+PS612+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3064]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure606
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS612+8]
  POP    rax
  MOV    dword [rbp+760],eax
; *Debugger\PurifierString  = GranularityFromState(GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarString]))
  MOV    rbp,qword [rsp+PS612+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3088]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure606
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS612+8]
  POP    rax
  MOV    dword [rbp+764],eax
; *Debugger\PurifierDynamic = GranularityFromState(GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarDynamic]))
  MOV    rbp,qword [rsp+PS612+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3112]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure606
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS612+8]
  POP    rax
  MOV    dword [rbp+768],eax
; 
; Protected Dim State.l(3)
  SUB    rsp,24
  MOV    rdx,4
  LEA    rax,[rsp+64]
  PUSH   rax
  XOR    r9,r9
  MOV    r8,5
  MOV    rcx,4
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [rsp+40],rax
; State(0) = *Debugger\PurifierGlobal
  MOV    rbp,qword [rsp+PS612+0]
  MOVSXD rax,dword [rbp+756]
  PUSH   rax
  MOV    rbp,qword [rsp+48]
  POP    rax
  MOV    dword [rbp+0],eax
; State(1) = *Debugger\PurifierLocal
  MOV    rbp,qword [rsp+PS612+0]
  MOVSXD rax,dword [rbp+760]
  PUSH   rax
  MOV    rbp,qword [rsp+48]
  POP    rax
  MOV    dword [rbp+4],eax
; State(2) = *Debugger\PurifierString
  MOV    rbp,qword [rsp+PS612+0]
  MOVSXD rax,dword [rbp+764]
  PUSH   rax
  MOV    rbp,qword [rsp+48]
  POP    rax
  MOV    dword [rbp+8],eax
; State(3) = *Debugger\PurifierDynamic
  MOV    rbp,qword [rsp+PS612+0]
  MOVSXD rax,dword [rbp+768]
  PUSH   rax
  MOV    rbp,qword [rsp+48]
  POP    rax
  MOV    dword [rbp+12],eax
; 
; Command.CommandInfo\Command = #COMMAND_SetPurifier
  LEA    rbp,[rsp+56]
  MOV    dword [rbp],39
; Command\DataSize = 4 * SizeOf(LONG)
  MOV    dword [rbp+4],16
; SendDebuggerCommandWithData(*Debugger, @Command, @State(0))
  MOV    rbp,qword [rsp+40]
  LEA    rax,[rbp+0]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS612+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure8
; 
; UpdatePurifierLines(*Debugger) 
  PUSH   qword [rsp+PS612+0]
  POP    rcx
  CALL  _Procedure610
; EndProcedure
_EndProcedureZero613:
  XOR    rax,rax
_EndProcedure613:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeArray
  ADD    rsp,40
  POP    rax
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure.s MemoryViewer_PeekCA(*Pointer): ProcedureReturn Str(PeekB(*Pointer) & $FF):   EndProcedure
_Procedure460:
  MOV    qword [rsp+8],rcx
  PUSH   r15
  PS460=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS460+32]
  MOV    qword [PB_StringBasePosition],rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS460+32]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,255
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure461
_EndProcedureZero461:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure461:
  ADD    rsp,48
  POP    r15
  RET
; Procedure LibraryViewer_ClearDisplay(*Debugger.DebuggerData)
_Procedure554:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS554=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; 
; 
; ClearGadgetItems(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectList])   
  MOV    rbp,qword [rsp+PS554+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2832]
  POP    rcx
  CALL   PB_ClearGadgetItems
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectText], "")
  MOV    rax,_S3
  PUSH   rax
  MOV    rbp,qword [rsp+PS554+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2840]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetText
; 
; For i = *Debugger\NbLibColumns-1 To 0 Step -1
  MOV    rbp,qword [rsp+PS554+0]
  MOVSXD r15,dword [rbp+644]
  DEC    r15
  MOV    qword [rsp+40],r15
  JMP   _ForSkipDebug2675
_For2675:
_ForSkipDebug2675:
  XOR    rax,rax
  CMP    rax,qword [rsp+40]
  JG    _Next2676
; RemoveGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectList], i)
  PUSH   qword [rsp+40]
  MOV    rbp,qword [rsp+PS554+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2832]
  POP    rcx
  POP    rdx
  CALL   PB_RemoveGadgetColumn
; Next i
_NextContinue2676:
  DEC    qword [rsp+40]
  JNO   _For2675
_Next2676:
; *Debugger\NbLibColumns = 0
  MOV    rbp,qword [rsp+PS554+0]
  MOV    dword [rbp+644],0
; 
; If *Debugger\ObjectList
  MOV    rbp,qword [rsp+PS554+0]
  CMP    qword [rbp+652],0
  JE    _EndIf2678
; FreeMemory(*Debugger\ObjectList)
  MOV    rbp,qword [rsp+PS554+0]
  PUSH   qword [rbp+652]
  POP    rcx
  CALL   PB_FreeMemory
; *Debugger\ObjectList = 0
  MOV    rbp,qword [rsp+PS554+0]
  MOV    qword [rbp+652],0
; EndIf   
_EndIf2678:
; *Debugger\CurrentObject = -1
  MOV    rbp,qword [rsp+PS554+0]
  MOV    dword [rbp+664],-1
; *Debugger\CurrentObjectID = -1
  MOV    rbp,qword [rsp+PS554+0]
  MOV    qword [rbp+668],-1
; 
; LibraryViewer_FreeObject(*Debugger) 
  PUSH   qword [rsp+PS554+0]
  POP    rcx
  CALL  _Procedure552
; EndProcedure
_EndProcedureZero555:
  XOR    rax,rax
_EndProcedure555:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure IsCustomKeyword(Word$)
_Procedure230:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS230=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS230+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; 
; k = CustomKeywordsHT(Asc(UCase(Word$)))  
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Asc
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    r15,rax
  MOV    rbp,qword [a_CustomKeywordsHT]
  SAL    r15,2
  MOVSXD rax,dword [rbp+r15]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+48],rax
; If k
  CMP    qword [rsp+48],0
  JE    _EndIf453
; While Quit = 0 And k <= NbCustomKeywords
_While454:
  MOV    r15,qword [rsp+56]
  AND    r15,r15
  JNE    No30
  MOV    r15,qword [rsp+48]
  CMP    r15,qword [v_NbCustomKeywords]
  JG     No30
Ok30:
  MOV    rax,1
  JMP    End30
No30:
  XOR    rax,rax
End30:
  AND    rax,rax
  JE    _Wend454
; 
; Compare = CompareMemoryString(@CustomKeywords(k), @Word$, #PB_String_NoCase)  
  PUSH   qword 1
  MOV    rax,qword [rsp+48]
  MOV    rax,rax
  PUSH   rax
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [a_CustomKeywords]
  SAL    r15,3
  MOV    rax,qword [rbp+r15]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CompareMemoryString2
  MOV    qword [rsp+64],rax
; 
; If Compare <= 0
  MOV    r15,qword [rsp+64]
  AND    r15,r15
  JG    _EndIf456
; If Compare = 0
  MOV    r15,qword [rsp+64]
  AND    r15,r15
  JNE   _EndIf458
; CustomKeyword$ = CustomKeywords(k)
  MOV    r15,qword [rsp+48]
  MOV    rbp,qword [a_CustomKeywords]
  SAL    r15,3
  MOV    rcx,qword [rbp+r15]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[v_CustomKeyword$]
  POP    rdx
  CALL   SYS_AllocateString4
; Result = k
  PUSH   qword [rsp+48]
  POP    rax
  MOV    qword [rsp+72],rax
; Quit = 1
  MOV    qword [rsp+56],1
; EndIf
_EndIf458:
; Else
  JMP   _EndIf455
_EndIf456:
; Quit = 1
  MOV    qword [rsp+56],1
; EndIf
_EndIf455:
; 
; k+1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; Wend
  JMP   _While454
_Wend454:
; EndIf
_EndIf453:
; 
; ProcedureReturn Result
  MOV    rax,qword [rsp+72]
  JMP   _EndProcedure231
; EndProcedure
_EndProcedureZero231:
  XOR    rax,rax
_EndProcedure231:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure Network_FatalError(*This.Network_Communication, *Command.CommandInfo, FatalError)
_Procedure396:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS396=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; *This\IsFatalError = #True
  MOV    rbp,qword [rsp+PS396+0]
  MOV    dword [rbp+32],1
; 
; CompilerIf #NOTHREAD = 0
; LockMutex(*This\StackMutex)
  MOV    rbp,qword [rsp+PS396+0]
  PUSH   qword [rbp+68]
  POP    rcx
  CALL   qword [PB_LockMutex]
; 
; 
; For i = 0 To *This\StackCount-1
  MOV    qword [rsp+40],0
  JMP   _ForSkipDebug1309
_For1309:
_ForSkipDebug1309:
  MOV    rbp,qword [rsp+PS396+0]
  MOVSXD r15,dword [rbp+756]
  DEC    r15
  CMP    r15,qword [rsp+40]
  JL    _Next1310
; If *This\Stack[i]\CommandData
  MOV    rbp,qword [rsp+PS396+0]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  CMP    qword [rbp+780],0
  JE    _EndIf1312
; FreeMemory(*This\Stack[i]\CommandData)
  MOV    rbp,qword [rsp+PS396+0]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+780]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf1312:
; Next i
_NextContinue1310:
  INC    qword [rsp+40]
  JNO   _For1309
_Next1310:
; 
; *This\Stack[0]\Command\Command   = #COMMAND_FatalError
  MOV    rbp,qword [rsp+PS396+0]
  PUSH   rbp
  POP    rbp
  MOV    dword [rbp+760],-1
; *This\Stack[0]\Command\Value1    = FatalError
  PUSH   qword [rsp+PS396+16]
  MOV    rbp,qword [rsp+PS396+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    dword [rbp+768],eax
; *This\Stack[0]\Command\Value2    = 0
  MOV    rbp,qword [rsp+PS396+0]
  PUSH   rbp
  POP    rbp
  MOV    dword [rbp+772],0
; *This\Stack[0]\Command\TimeStamp = Date()
  CALL   PB_Date
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS396+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    dword [rbp+776],eax
; *This\Stack[0]\CommandData       = 0
  MOV    rbp,qword [rsp+PS396+0]
  PUSH   rbp
  POP    rbp
  MOV    qword [rbp+780],0
; *This\StackCount = 1     
  MOV    rbp,qword [rsp+PS396+0]
  MOV    dword [rbp+756],1
; 
; UnlockMutex(*This\StackMutex)
  MOV    rbp,qword [rsp+PS396+0]
  PUSH   qword [rbp+68]
  POP    rcx
  CALL   qword [PB_UnlockMutex]
; 
; CompilerElse
; 
; EndProcedure
_EndProcedureZero397:
  XOR    rax,rax
_EndProcedure397:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure GetRequiredSize(Gadget, *Width.LONG, *Height.LONG, Flags = 0)
_Procedure88:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PS88=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; *Width\l  = GadgetWidth(Gadget, #PB_Gadget_RequiredSize)
  PUSH   qword 1
  PUSH   qword [rsp+PS88+8]
  POP    rcx
  POP    rdx
  CALL   PB_GadgetWidth2
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS88+16]
  POP    rax
  MOV    dword [rbp],eax
; *Height\l = GadgetHeight(Gadget, #PB_Gadget_RequiredSize)
  PUSH   qword 1
  PUSH   qword [rsp+PS88+8]
  POP    rcx
  POP    rdx
  CALL   PB_GadgetHeight2
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS88+24]
  POP    rax
  MOV    dword [rbp],eax
; 
; EndProcedure
_EndProcedureZero89:
  XOR    rax,rax
_EndProcedure89:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure OpenVariableWindow(*Debugger.DebuggerData)
_Procedure42:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS42=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Variable]
  MOV    rbp,qword [rsp+PS42+0]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+856],0
  JE    _EndIf2184
; SetWindowForeground(*Debugger\Windows[#DEBUGGER_WINDOW_Variable])
  MOV    rbp,qword [rsp+PS42+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  CALL  _Procedure106
; 
; Else
  JMP   _EndIf2183
_EndIf2184:
; Window = OpenWindow(#PB_Any, VariableWindowX, VariableWindowY, VariableWindowWidth, VariableWindowHeight, Language("Debugger","VariableWindowTitle") + " - " + DebuggerTitle(*Debugger\FileName$), #PB_Window_SystemMenu|#PB_Window_MinimizeGadget|#PB_Window_SizeGadget|#PB_Window_Invisible|#PB_Window_MaximizeGadget)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 282001408
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S248
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS42+48]
  PUSH   qword [rbp+80]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure260
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [v_VariableWindowHeight]
  PUSH   qword [v_VariableWindowWidth]
  PUSH   qword [v_VariableWindowY]
  PUSH   qword [v_VariableWindowX]
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_OpenWindow2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+40],rax
; If Window
  CMP    qword [rsp+40],0
  JE    _EndIf2187
; *Debugger\Windows[#DEBUGGER_WINDOW_Variable] = Window
  PUSH   qword [rsp+40]
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+856],rax
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel] = PanelGadget(#PB_Any, 0, 0, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PanelGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2320],rax
; 
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel], -1, Language("Debugger","Variables"))      
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S249
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS42+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2320]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global] = VariableGadget_Create(#PB_Any, 0, 0, 0, 0, Language("Debugger","Scope"), #True, #False)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 1
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S250
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure274
  ADD    rsp,72
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2352],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Local]  = VariableGadget_Create(#PB_Any, 0, 0, 0, 0, Language("Debugger","Scope"), #True, #False)        
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 1
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S250
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure274
  ADD    rsp,72
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2360],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Splitter] = SplitterGadget(#PB_Any, 0, 0, 0, 0, *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global], *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Local])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2360]
  MOV    rbp,qword [rsp+PS42+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2352]
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SplitterGadget
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2328],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Update] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Update"))       
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S220
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2368],rax
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer] = ContainerGadget(#PB_Any, 0, 0, 0, 0, #PB_Container_Single)       
  PUSH   qword 4
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ContainerGadget2
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2336],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Progress] = ProgressBarGadget(#PB_Any, 0, 0, 0, 0, 0, 100)
  SUB    rsp,8
  PUSH   qword 100
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ProgressBarGadget
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2344],rax
; CloseGadgetList()
  CALL   PB_CloseGadgetList
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer], 1)   
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2336]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; 
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel], -1, Language("Debugger","Arrays"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S251
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS42+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2320]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ArrayInfo] = ListIconGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Scope"), 70, #PB_ListIcon_FullRowSelect|#PB_ListIcon_AlwaysShowSelection|#PB_ListIcon_GridLines)                         
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 1073807368
  PUSH   qword 70
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S250
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ListIconGadget2
  ADD    rsp,72
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2376],rax
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ArrayInfo], 1, Language("Debugger","Name"), 430)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 430
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S91
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS42+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2376]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalArrayInfo] = ListIconGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Scope"), 70, #PB_ListIcon_FullRowSelect|#PB_ListIcon_AlwaysShowSelection|#PB_ListIcon_GridLines)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 1073807368
  PUSH   qword 70
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S250
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ListIconGadget2
  ADD    rsp,72
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2384],rax
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalArrayInfo], 1, Language("Debugger","Name"), 430)        
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 430
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S91
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS42+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2384]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateArray] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Update"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S220
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2392],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ArraySplitter] = SplitterGadget(#PB_Any, 0, 0, 0, 0, *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ArrayInfo], *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalArrayInfo])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2384]
  MOV    rbp,qword [rsp+PS42+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2376]
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SplitterGadget
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2400],rax
; 
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateArray], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2392]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel], -1, Language("Debugger","LinkedLists"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S252
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS42+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2320]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListInfo] = ListIconGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Scope"), 70, #PB_ListIcon_FullRowSelect|#PB_ListIcon_AlwaysShowSelection|#PB_ListIcon_GridLines)               
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 1073807368
  PUSH   qword 70
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S250
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ListIconGadget2
  ADD    rsp,72
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2408],rax
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListInfo], 1, Language("Debugger","Name"), VariableWindowWidth-300)        
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    r15,qword [v_VariableWindowWidth]
  ADD    r15,-300
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S91
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS42+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2408]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListInfo], 2, Language("Debugger","Size"), 70)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 70
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S95
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS42+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2408]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListInfo], 3, Language("Debugger","Current"), 70)                
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 70
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S98
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS42+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2408]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalListInfo] = ListIconGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Scope"), 70, #PB_ListIcon_FullRowSelect|#PB_ListIcon_AlwaysShowSelection|#PB_ListIcon_GridLines)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 1073807368
  PUSH   qword 70
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S250
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ListIconGadget2
  ADD    rsp,72
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2416],rax
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalListInfo], 1, Language("Debugger","Name"), VariableWindowWidth-300)        
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    r15,qword [v_VariableWindowWidth]
  ADD    r15,-300
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S91
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS42+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2416]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalListInfo], 2, Language("Debugger","Size"), 70)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 70
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S95
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS42+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2416]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalListInfo], 3, Language("Debugger","Current"), 70)                
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 70
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S98
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS42+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2416]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateList] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Update"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S220
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2424],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListSplitter] = SplitterGadget(#PB_Any, 0, 0, 0, 0, *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListInfo], *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalListInfo])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2416]
  MOV    rbp,qword [rsp+PS42+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2408]
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SplitterGadget
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2432],rax
; 
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateList], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2424]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel], -1, Language("Debugger","Maps"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S253
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS42+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2320]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapInfo] = ListIconGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Scope"), 70, #PB_ListIcon_FullRowSelect|#PB_ListIcon_AlwaysShowSelection|#PB_ListIcon_GridLines)               
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 1073807368
  PUSH   qword 70
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S250
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ListIconGadget2
  ADD    rsp,72
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2440],rax
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapInfo], 1, Language("Debugger","Name"), VariableWindowWidth-350)  
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    r15,qword [v_VariableWindowWidth]
  ADD    r15,-350
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S91
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS42+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2440]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapInfo], 2, Language("Debugger","Size"), 70)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 70
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S95
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS42+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2440]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapInfo], 3, Language("Debugger","Current"), 120)                
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 120
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S98
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS42+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2440]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalMapInfo] = ListIconGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Scope"), 70, #PB_ListIcon_FullRowSelect|#PB_ListIcon_AlwaysShowSelection|#PB_ListIcon_GridLines)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 1073807368
  PUSH   qword 70
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S250
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ListIconGadget2
  ADD    rsp,72
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2448],rax
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalMapInfo], 1, Language("Debugger","Name"), VariableWindowWidth-350)        
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    r15,qword [v_VariableWindowWidth]
  ADD    r15,-350
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S91
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS42+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2448]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalMapInfo], 2, Language("Debugger","Size"), 70)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 70
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S95
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS42+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2448]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalMapInfo], 3, Language("Debugger","Current"), 120)                
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 120
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S98
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS42+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2448]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateMap] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Update"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S220
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2456],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapSplitter] = SplitterGadget(#PB_Any, 0, 0, 0, 0, *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapInfo], *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalMapInfo])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2448]
  MOV    rbp,qword [rsp+PS42+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2440]
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SplitterGadget
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2464],rax
; 
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateMap], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2456]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; 
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel], -1, Language("Debugger","ViewArrayList"))      
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S246
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS42+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2320]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer] = VariableGadget_Create(#PB_Any, 0, 0, 0, 0, "", #False, #True)
  PUSH   qword 1
  PUSH   qword 0
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure274
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2472],rax
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerContainer] = ContainerGadget(#PB_Any, 0, 0, 0, 0, #PB_Container_Single)
  PUSH   qword 4
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ContainerGadget2
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2568],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerProgress] = ProgressBarGadget(#PB_Any, 0, 0, 0, 0, 0, 100)
  SUB    rsp,8
  PUSH   qword 100
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ProgressBarGadget
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2560],rax
; CloseGadgetList()
  CALL   PB_CloseGadgetList
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerContainer], 1)     
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2568]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Container] = ContainerGadget(#PB_Any, 0, 0, 0, 0, #PB_Container_Single)
  PUSH   qword 4
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ContainerGadget2
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2520],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Text]         = TextGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","ArrayListName")+":", #PB_Text_Right)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S254
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2528],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_InputName]    = StringGadget(#PB_Any, 0, 0, 0, 0, "")
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2512],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_AllItems]     = OptionGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","AllItems"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S255
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_OptionGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2480],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_NonZeroItems] = OptionGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","NonZeroItems"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S256
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_OptionGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2488],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ItemRange]    = OptionGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","ItemRange")+":")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S257
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_OptionGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2496],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_InputRange]   = StringGadget(#PB_Any, 0, 0, 0, 0, "")
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2504],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Display]      = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Display"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S204
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2536],rax
; 
; 
; 
; CloseGadgetList()
  CALL   PB_CloseGadgetList
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_AllItems], 1)        
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2480]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_InputRange], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2504]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Display], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2536]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; 
; CompilerIf #DEFAULT_CanWindowStayOnTop
; SetWindowStayOnTop(Window, DebuggerOnTop)
  PUSH   qword [v_DebuggerOnTop]
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL  _Procedure112
; CompilerEndIf 
; 
; If CreatePopupMenu(#POPUPMENU_VariableViewer)
  PUSH   qword 3
  POP    rcx
  CALL   PB_CreatePopupMenu
  AND    rax,rax
  JE    _EndIf2189
; MenuItem(#DEBUGGER_MENU_WatchlistAdd, Language("Debugger","WatchlistAdd"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S258
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 2
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MenuItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; MenuBar()
  CALL   PB_MenuBar
; MenuItem(#DEBUGGER_MENU_CopyVariable, Language("Debugger","Copy"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S206
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 3
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MenuItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf2189:
; 
; If CreatePopupMenu(#POPUPMENU_ArrayViewer)
  PUSH   qword 4
  POP    rcx
  CALL   PB_CreatePopupMenu
  AND    rax,rax
  JE    _EndIf2191
; MenuItem(#DEBUGGER_MENU_ViewAll,     Language("Debugger", "AllItems"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S255
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 4
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MenuItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; MenuItem(#DEBUGGER_MENU_ViewNonZero, Language("Debugger", "NonZeroItems"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S256
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 5
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MenuItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; MenuItem(#DEBUGGER_MENU_ViewRange,   Language("Debugger", "ItemRange"))      
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S257
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 6
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MenuItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf2191:
; 
; Debugger_AddShortcuts(Window) 
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure6
; 
; 
; 
; *Debugger\ArraySortColumn         = 0
  MOV    rbp,qword [rsp+PS42+0]
  MOV    byte [rbp+148],0
; *Debugger\ArraySortDirection      = 1
  MOV    rbp,qword [rsp+PS42+0]
  MOV    byte [rbp+149],1
; *Debugger\LocalArraySortColumn    = 1
  MOV    rbp,qword [rsp+PS42+0]
  MOV    byte [rbp+150],1
; *Debugger\LocalArraySortDirection = 1
  MOV    rbp,qword [rsp+PS42+0]
  MOV    byte [rbp+151],1
; *Debugger\ListSortColumn          = 0
  MOV    rbp,qword [rsp+PS42+0]
  MOV    byte [rbp+152],0
; *Debugger\ListSortDirection       = 1
  MOV    rbp,qword [rsp+PS42+0]
  MOV    byte [rbp+153],1
; *Debugger\LocalListSortColumn     = 1
  MOV    rbp,qword [rsp+PS42+0]
  MOV    byte [rbp+154],1
; *Debugger\LocalListSortDirection  = 1
  MOV    rbp,qword [rsp+PS42+0]
  MOV    byte [rbp+155],1
; 
; CompilerIf #CompileWindows
; 
; SetWindowCallback(@Variable_WindowCallback(), Window) 
  PUSH   qword [rsp+40]
  LEA    rax,[_Procedure494]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_SetWindowCallback2
; CompilerEndIf
; 
; 
; 
; If *Debugger\ProgramState <> -1
  MOV    rbp,qword [rsp+PS42+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JE    _EndIf2193
; Command.CommandInfo\Command = #COMMAND_GetGlobalNames        
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],9
; SendDebuggerCommand(*Debugger, @Command)      
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS42+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; EndIf
_EndIf2193:
; 
; EnsureWindowOnDesktop(Window)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure162
; If VariableViewerMaximize  
  CMP    qword [v_VariableViewerMaximize],0
  JE    _EndIf2195
; ShowWindowMaximized(Window)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure100
; Else
  JMP   _EndIf2194
_EndIf2195:
; HideWindow(Window, 0)
  PUSH   qword 0
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_HideWindow
; EndIf            
_EndIf2194:
; VariableWindowEvents(*Debugger, #PB_Event_SizeWindow)           
  PUSH   qword 13118
  PUSH   qword [rsp+PS42+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure498
; 
; CompilerIf #CompileLinux
; 
; Height = GetPanelHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel])
  MOV    rbp,qword [rsp+PS42+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2320]
  POP    rcx
  CALL  _Procedure116
  MOV    qword [rsp+72],rax
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Splitter], (Height-55)/2)
  MOV    r15,qword [rsp+72]
  ADD    r15,-55
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2328]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ArraySplitter], (Height-55)/2)      
  MOV    r15,qword [rsp+72]
  ADD    r15,-55
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2400]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListSplitter], (Height-55)/2)      
  MOV    r15,qword [rsp+72]
  ADD    r15,-55
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2432]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapSplitter], (Height-55)/2)      
  MOV    r15,qword [rsp+72]
  ADD    r15,-55
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS42+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2464]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; UpdateVariableWindowState(*Debugger)   
  PUSH   qword [rsp+PS42+0]
  POP    rcx
  CALL  _Procedure500
; 
; 
; 
; CompilerIf #CompileWindows
; SendMessage_(GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global]), #LVM_SETCOLUMNWIDTH, 2, #LVSCW_AUTOSIZE_USEHEADER)      
  PUSH   qword -2
  PUSH   qword 2
  PUSH   qword 4126
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS42+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2352]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; SendMessage_(GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Local]), #LVM_SETCOLUMNWIDTH, 2, #LVSCW_AUTOSIZE_USEHEADER)      
  PUSH   qword -2
  PUSH   qword 2
  PUSH   qword 4126
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS42+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2360]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; SendMessage_(GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer]), #LVM_SETCOLUMNWIDTH, 1, #LVSCW_AUTOSIZE_USEHEADER)      
  PUSH   qword -2
  PUSH   qword 1
  PUSH   qword 4126
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS42+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; SendMessage_(GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ArrayInfo]), #LVM_SETCOLUMNWIDTH, 1, #LVSCW_AUTOSIZE_USEHEADER)      
  PUSH   qword -2
  PUSH   qword 1
  PUSH   qword 4126
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS42+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2376]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; SendMessage_(GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalArrayInfo]), #LVM_SETCOLUMNWIDTH, 1, #LVSCW_AUTOSIZE_USEHEADER)      
  PUSH   qword -2
  PUSH   qword 1
  PUSH   qword 4126
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS42+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2384]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; SendMessage_(GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListInfo]), #LVM_SETCOLUMNWIDTH, 3, #LVSCW_AUTOSIZE_USEHEADER)      
  PUSH   qword -2
  PUSH   qword 3
  PUSH   qword 4126
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS42+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2408]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; SendMessage_(GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalListInfo]), #LVM_SETCOLUMNWIDTH, 3, #LVSCW_AUTOSIZE_USEHEADER)      
  PUSH   qword -2
  PUSH   qword 3
  PUSH   qword 4126
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS42+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2416]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; SendMessage_(GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapInfo]), #LVM_SETCOLUMNWIDTH, 3, #LVSCW_AUTOSIZE_USEHEADER)      
  PUSH   qword -2
  PUSH   qword 3
  PUSH   qword 4126
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS42+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2440]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; SendMessage_(GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalMapInfo]), #LVM_SETCOLUMNWIDTH, 3, #LVSCW_AUTOSIZE_USEHEADER)      
  PUSH   qword -2
  PUSH   qword 3
  PUSH   qword 4126
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS42+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2448]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; CompilerEndIf
; 
; 
; 
; If *Debugger\ProgramState = 0
  MOV    rbp,qword [rsp+PS42+0]
  MOVSXD r15,dword [rbp+112]
  AND    r15,r15
  JNE   _EndIf2198
; 
; 
; Command.CommandInfo\Command = #COMMAND_GetGlobals
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],10
; SendDebuggerCommand(*Debugger, @Command) 
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS42+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Command.CommandInfo\Command = #COMMAND_GetLocals
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],11
; SendDebuggerCommand(*Debugger, @Command) 
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS42+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Command.CommandInfo\Command = #COMMAND_GetArrayInfo
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],12
; Command\Value1 = #True
  MOV    dword [rbp+8],1
; SendDebuggerCommand(*Debugger, @Command)       
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS42+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Command.CommandInfo\Command = #COMMAND_GetArrayInfo
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],12
; Command\Value1 = #False
  MOV    dword [rbp+8],0
; SendDebuggerCommand(*Debugger, @Command)
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS42+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Command.CommandInfo\Command = #COMMAND_GetListInfo
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],13
; Command\Value1 = #True
  MOV    dword [rbp+8],1
; SendDebuggerCommand(*Debugger, @Command)           
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS42+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Command.CommandInfo\Command = #COMMAND_GetListInfo
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],13
; Command\Value1 = #False
  MOV    dword [rbp+8],0
; SendDebuggerCommand(*Debugger, @Command)   
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS42+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Command.CommandInfo\Command = #COMMAND_GetMapInfo
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],14
; Command\Value1 = #True
  MOV    dword [rbp+8],1
; SendDebuggerCommand(*Debugger, @Command)           
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS42+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Command.CommandInfo\Command = #COMMAND_GetMapInfo
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],14
; Command\Value1 = #False
  MOV    dword [rbp+8],0
; SendDebuggerCommand(*Debugger, @Command) 
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS42+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; EndIf      
_EndIf2198:
; 
; Debugger_ProcessEvents(Window, #PB_Event_ActivateWindow) 
  PUSH   qword 13104
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL  _Procedure14
; EndIf  
_EndIf2187:
; EndIf
_EndIf2183:
; 
; EndProcedure
_EndProcedureZero43:
  XOR    rax,rax
_EndProcedure43:
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure.s MemoryViewer_PeekCU(*Pointer): ProcedureReturn Str(PeekW(*Pointer) & $FFFF): EndProcedure
_Procedure462:
  MOV    qword [rsp+8],rcx
  PUSH   r15
  PS462=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS462+32]
  MOV    qword [PB_StringBasePosition],rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS462+32]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekW
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,65535
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure463
_EndProcedureZero463:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure463:
  ADD    rsp,48
  POP    r15
  RET
; Procedure LoadLanguage()
_Procedure204:
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS204=160
  MOV    rax,11
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; 
; 
; NbLanguageGroups = 0
  MOV    qword [v_NbLanguageGroups],0
; NbLanguageStrings = 0
  MOV    qword [v_NbLanguageStrings],0
; 
; Restore Language
  MOV    rax,ll_loadlanguage_language
  MOV    qword [PB_DataPointer],rax
; Repeat
_Repeat286:
; 
; Read.s Name$
  LEA    rcx,[rsp+40]
  MOV    rdx,qword [PB_DataPointer]
  CALL   SYS_FastAllocateStringFree4
  ADD    qword [PB_DataPointer],rax
; Read.s String$
  LEA    rcx,[rsp+48]
  MOV    rdx,qword [PB_DataPointer]
  CALL   SYS_FastAllocateStringFree4
  ADD    qword [PB_DataPointer],rax
; 
; Name$ = UCase(Name$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; If Name$ = "_GROUP_"
  PUSH   qword [rsp+40]
  MOV    rcx,_S53
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf288
; NbLanguageGroups + 1
  MOV    r15,qword [v_NbLanguageGroups]
  INC    r15
  MOV    qword [v_NbLanguageGroups],r15
; ElseIf Name$ = "_END_"
  JMP   _EndIf287
_EndIf288:
  PUSH   qword [rsp+40]
  MOV    rcx,_S54
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf289
; Break
  JMP   _Until286
; Else
  JMP   _EndIf287
_EndIf289:
; NbLanguageStrings + 1
  MOV    r15,qword [v_NbLanguageStrings]
  INC    r15
  MOV    qword [v_NbLanguageStrings],r15
; EndIf
_EndIf287:
; 
; ForEver
  JMP   _Repeat286
_Until286:
; 
; Global Dim LanguageGroups.LanguageGroup(NbLanguageGroups)  
  MOV    rax,qword [v_NbLanguageGroups]
  INC    rax
  SUB    rsp,24
  MOV    rdx,rax
  MOV    rax,a_LanguageGroups
  PUSH   rax
  MOV    r9,s_languagegroup
  MOV    r8,7
  MOV    rcx,1040
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_LanguageGroups],rax
; Global Dim LanguageStrings.s(NbLanguageStrings)
  MOV    rax,qword [v_NbLanguageStrings]
  INC    rax
  SUB    rsp,24
  MOV    rdx,rax
  MOV    rax,a_LanguageStrings
  PUSH   rax
  MOV    r9,s_s
  MOV    r8,8
  MOV    rcx,8
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_LanguageStrings],rax
; Global Dim LanguageNames.s(NbLanguageStrings)
  MOV    rax,qword [v_NbLanguageStrings]
  INC    rax
  SUB    rsp,24
  MOV    rdx,rax
  MOV    rax,a_LanguageNames
  PUSH   rax
  MOV    r9,s_s
  MOV    r8,8
  MOV    rcx,8
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_LanguageNames],rax
; 
; 
; 
; Group = 0
  MOV    qword [rsp+56],0
; StringIndex = 0  
  MOV    qword [rsp+64],0
; 
; Restore Language
  MOV    rax,ll_loadlanguage_language
  MOV    qword [PB_DataPointer],rax
; Repeat
_Repeat291:
; 
; Read.s Name$
  LEA    rcx,[rsp+40]
  MOV    rdx,qword [PB_DataPointer]
  CALL   SYS_FastAllocateStringFree4
  ADD    qword [PB_DataPointer],rax
; Read.s String$
  LEA    rcx,[rsp+48]
  MOV    rdx,qword [PB_DataPointer]
  CALL   SYS_FastAllocateStringFree4
  ADD    qword [PB_DataPointer],rax
; 
; Name$ = UCase(Name$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; If Name$ = "_GROUP_"
  PUSH   qword [rsp+40]
  MOV    rcx,_S53
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf293
; LanguageGroups(Group)\GroupEnd   = StringIndex
  PUSH   qword [rsp+64]
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  POP    rax
  MOV    dword [rbp+12],eax
; Group + 1
  MOV    r15,qword [rsp+56]
  INC    r15
  MOV    qword [rsp+56],r15
; 
; LanguageGroups(Group)\Name$      = UCase(String$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  LEA    rcx,[rbp]
  POP    rdx
  CALL   SYS_AllocateString4
; LanguageGroups(Group)\GroupStart = StringIndex + 1
  MOV    r15,qword [rsp+64]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  POP    rax
  MOV    dword [rbp+8],eax
; For i = 0 To 255
  MOV    qword [rsp+72],0
  JMP   _ForSkipDebug294
_For294:
_ForSkipDebug294:
  MOV    rax,255
  CMP    rax,qword [rsp+72]
  JL    _Next295
; LanguageGroups(Group)\IndexTable[i] = 0
  MOV    r15,qword [rsp+56]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  MOV    dword [rbp+16],0
; Next i
_NextContinue295:
  INC    qword [rsp+72]
  JNO   _For294
_Next295:
; 
; ElseIf Name$ = "_END_"
  JMP   _EndIf292
_EndIf293:
  PUSH   qword [rsp+40]
  MOV    rcx,_S54
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf296
; Break
  JMP   _Until291
; 
; Else
  JMP   _EndIf292
_EndIf296:
; StringIndex + 1
  MOV    r15,qword [rsp+64]
  INC    r15
  MOV    qword [rsp+64],r15
; LanguageNames(StringIndex)   = Name$ + Chr(1) + String$  
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S55
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    r15,qword [rsp+72]
  MOV    rbp,qword [a_LanguageNames]
  SAL    r15,3
  LEA    rcx,[rbp+r15]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; EndIf
_EndIf292:
; 
; ForEver
  JMP   _Repeat291
_Until291:
; 
; LanguageGroups(Group)\GroupEnd   = StringIndex 
  PUSH   qword [rsp+64]
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  POP    rax
  MOV    dword [rbp+12],eax
; 
; 
; 
; For Group = 1 To NbLanguageGroups
  MOV    qword [rsp+56],1
  JMP   _ForSkipDebug298
_For298:
_ForSkipDebug298:
  MOV    rax,qword [v_NbLanguageGroups]
  CMP    rax,qword [rsp+56]
  JL    _Next299
; If LanguageGroups(Group)\GroupStart <= LanguageGroups(Group)\GroupEnd  
  MOV    r15,qword [rsp+56]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  MOVSXD r15,dword [rbp+8]
  MOV    r14,qword [rsp+56]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r14,1040
  ADD    rbp,r14
  CMP    r15d,dword [rbp+12]
  JG    _EndIf301
; 
; SortArray(LanguageNames(), 0, LanguageGroups(Group)\GroupStart, LanguageGroups(Group)\GroupEnd)
  MOV    r15,qword [rsp+56]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  MOVSXD rax,dword [rbp+12]
  MOV    rax,rax
  PUSH   rax
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  MOVSXD rax,dword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword [a_LanguageNames]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_SortArray2
; 
; char = 0
  MOV    qword [rsp+80],0
; For StringIndex = LanguageGroups(Group)\GroupStart To LanguageGroups(Group)\GroupEnd
  MOV    r15,qword [rsp+56]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  MOVSXD rax,dword [rbp+8]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+64],rax
  JMP   _ForSkipDebug302
_For302:
_ForSkipDebug302:
  MOV    r15,qword [rsp+56]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  MOVSXD rax,dword [rbp+12]
  CMP    rax,qword [rsp+64]
  JL    _Next303
; LanguageStrings(StringIndex) = StringField(LanguageNames(StringIndex), 2, Chr(1)) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S55
  PUSH   rax
  PUSH   qword 2
  MOV    r15,qword [rsp+104]
  MOV    rbp,qword [a_LanguageNames]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  MOV    r15,qword [rsp+72]
  MOV    rbp,qword [a_LanguageStrings]
  SAL    r15,3
  LEA    rcx,[rbp+r15]
  POP    rdx
  CALL   SYS_AllocateString4
; LanguageNames(StringIndex)   = StringField(LanguageNames(StringIndex), 1, Chr(1))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S55
  PUSH   rax
  PUSH   qword 1
  MOV    r15,qword [rsp+104]
  MOV    rbp,qword [a_LanguageNames]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  MOV    r15,qword [rsp+72]
  SAL    r15,3
  LEA    rcx,[rbp+r15]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; If Asc(Left(LanguageNames(StringIndex), 1)) <> char
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  MOV    r15,qword [rsp+112]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Asc
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    r15,rax
  CMP    r15,qword [rsp+80]
  JE    _EndIf305
; char = Asc(Left(LanguageNames(StringIndex), 1))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  MOV    r15,qword [rsp+112]
  MOV    rbp,qword [a_LanguageNames]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Asc
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+80],rax
; LanguageGroups(Group)\IndexTable[char] = StringIndex
  PUSH   qword [rsp+64]
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    dword [rbp+16],eax
; EndIf
_EndIf305:
; Next StringIndex
_NextContinue303:
  INC    qword [rsp+64]
  JNO   _For302
_Next303:
; 
; EndIf
_EndIf301:
; Next Group
_NextContinue299:
  INC    qword [rsp+56]
  JNO   _For298
_Next299:
; 
; 
; 
; If CurrentLanguage$ <> "English"
  PUSH   qword [v_CurrentLanguage$]
  MOV    rcx,_S41
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf307
; 
; 
; If LanguageFile$ <> ""
  PUSH   qword [v_LanguageFile$]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf309
; GetLanguageInfo(LanguageFile$)
  PUSH   qword [v_LanguageFile$]
  POP    rcx
  CALL  _Procedure198
; EndIf
_EndIf309:
; 
; Found = 0
  MOV    qword [rsp+88],0
; 
; 
; 
; 
; ForEach AvailableLanguages()    
  MOV    rcx,qword [t_AvailableLanguages]
  CALL   PB_ResetList
_ForEach310:
  MOV    rcx,qword [t_AvailableLanguages]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next310
; If UCase(AvailableLanguages()\Name$) = UCase(CurrentLanguage$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [t_AvailableLanguages+8]
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [v_CurrentLanguage$]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,32
  POP    rcx
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  ADD    rcx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf312
; Found = 1
  MOV    qword [rsp+88],1
; Break
  JMP   _Next310
; EndIf
_EndIf312:
; Next AvailableLanguages()
  JMP   _ForEach310
_Next310:
; 
; 
; 
; 
; If Found = 0    
  MOV    r15,qword [rsp+88]
  AND    r15,r15
  JNE   _EndIf314
; CollectLanguageInfo()
  CALL  _Procedure200
; 
; 
; ForEach AvailableLanguages()    
  MOV    rcx,qword [t_AvailableLanguages]
  CALL   PB_ResetList
_ForEach315:
  MOV    rcx,qword [t_AvailableLanguages]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next315
; If UCase(AvailableLanguages()\Name$) = UCase(CurrentLanguage$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [t_AvailableLanguages+8]
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [v_CurrentLanguage$]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,32
  POP    rcx
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  ADD    rcx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf317
; Found = 1
  MOV    qword [rsp+88],1
; Break
  JMP   _Next315
; EndIf
_EndIf317:
; Next AvailableLanguages()    
  JMP   _ForEach315
_Next315:
; EndIf
_EndIf314:
; 
; If Found 
  CMP    qword [rsp+88],0
  JE    _EndIf319
; 
; LanguageFile$ = AvailableLanguages()\FileName$
  MOV    rbp,qword [t_AvailableLanguages+8]
  MOV    rcx,qword [rbp+24]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[v_LanguageFile$]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; 
; 
; IsUTF8 = 0
  MOV    qword [rsp+96],0
; FileID = ReadFile(#PB_Any, LanguageFile$)
  PUSH   qword [v_LanguageFile$]
  PUSH   qword -1
  POP    rcx
  POP    rdx
  CALL   PB_ReadFile
  MOV    qword [rsp+104],rax
; If FileID
  CMP    qword [rsp+104],0
  JE    _EndIf321
; If ReadStringFormat(FileID) = #PB_UTF8
  PUSH   qword [rsp+104]
  POP    rcx
  CALL   PB_ReadStringFormat
  MOV    r15,rax
  CMP    r15,2
  JNE   _EndIf323
; IsUTF8 = 1
  MOV    qword [rsp+96],1
; EndIf
_EndIf323:
; CloseFile(FileID)
  PUSH   qword [rsp+104]
  POP    rcx
  CALL   PB_CloseFile
; EndIf
_EndIf321:
; 
; If OpenPreferences(AvailableLanguages()\FileName$)
  MOV    rbp,qword [t_AvailableLanguages+8]
  PUSH   qword [rbp+24]
  POP    rcx
  CALL   PB_OpenPreferences
  AND    rax,rax
  JE    _EndIf325
; For Group = 1 To NbLanguageGroups
  MOV    qword [rsp+56],1
  JMP   _ForSkipDebug326
_For326:
_ForSkipDebug326:
  MOV    rax,qword [v_NbLanguageGroups]
  CMP    rax,qword [rsp+56]
  JL    _Next327
; If LanguageGroups(Group)\GroupStart <= LanguageGroups(Group)\GroupEnd  
  MOV    r15,qword [rsp+56]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  MOVSXD r15,dword [rbp+8]
  MOV    r14,qword [rsp+56]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r14,1040
  ADD    rbp,r14
  CMP    r15d,dword [rbp+12]
  JG    _EndIf329
; PreferenceGroup(LanguageGroups(Group)\Name$)
  MOV    r15,qword [rsp+56]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  PUSH   qword [rbp]
  POP    rcx
  CALL   PB_PreferenceGroup
; 
; If IsUTF8
  CMP    qword [rsp+96],0
  JE    _EndIf331
; For StringIndex = LanguageGroups(Group)\GroupStart To LanguageGroups(Group)\GroupEnd
  MOV    r15,qword [rsp+56]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  MOVSXD rax,dword [rbp+8]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+64],rax
  JMP   _ForSkipDebug332
_For332:
_ForSkipDebug332:
  MOV    r15,qword [rsp+56]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  MOVSXD rax,dword [rbp+12]
  CMP    rax,qword [rsp+64]
  JL    _Next333
; LanguageStrings(StringIndex) = ReadPreferenceString(LanguageNames(StringIndex), LanguageStrings(StringIndex))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+88]
  MOV    rbp,qword [a_LanguageStrings]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  MOV    r15,qword [rsp+96]
  MOV    rbp,qword [a_LanguageNames]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ReadPreferenceString
  ADD    rsp,40
  MOV    r15,qword [rsp+72]
  MOV    rbp,qword [a_LanguageStrings]
  SAL    r15,3
  LEA    rcx,[rbp+r15]
  POP    rdx
  CALL   SYS_AllocateString4
; Next StringIndex
_NextContinue333:
  INC    qword [rsp+64]
  JNO   _For332
_Next333:
; Else 
  JMP   _EndIf330
_EndIf331:
; For StringIndex = LanguageGroups(Group)\GroupStart To LanguageGroups(Group)\GroupEnd
  MOV    r15,qword [rsp+56]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  MOVSXD rax,dword [rbp+8]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+64],rax
  JMP   _ForSkipDebug335
_For335:
_ForSkipDebug335:
  MOV    r15,qword [rsp+56]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  MOVSXD rax,dword [rbp+12]
  CMP    rax,qword [rsp+64]
  JL    _Next336
; LanguageStrings(StringIndex) = ReadLanguageEntry(LanguageNames(StringIndex), LanguageStrings(StringIndex))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+80]
  MOV    rbp,qword [a_LanguageStrings]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  MOV    r15,qword [rsp+88]
  MOV    rbp,qword [a_LanguageNames]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure202
  ADD    rsp,40
  MOV    r15,qword [rsp+72]
  MOV    rbp,qword [a_LanguageStrings]
  SAL    r15,3
  LEA    rcx,[rbp+r15]
  POP    rdx
  CALL   SYS_AllocateString4
; Next StringIndex
_NextContinue336:
  INC    qword [rsp+64]
  JNO   _For335
_Next336:
; EndIf
_EndIf330:
; 
; EndIf
_EndIf329:
; Next Group
_NextContinue327:
  INC    qword [rsp+56]
  JNO   _For326
_Next327:
; ClosePreferences()    
  CALL   PB_ClosePreferences
; EndIf    
_EndIf325:
; Else
  JMP   _EndIf318
_EndIf319:
; If CommandlineBuild = 0
  MOV    r15,qword [rsp+112]
  AND    r15,r15
  JNE   _EndIf339
; MessageRequester(#ProductName$, "The language '"+CurrentLanguage$+"' cannot be found!"+#NewLine+"The default language will be used.", #FLAG_Error)      
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 16
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S56
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [v_CurrentLanguage$]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S57
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S46
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_MessageRequester2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; ElseIf QuietBuild = 0
  JMP   _EndIf338
_EndIf339:
  MOV    r15,qword [rsp+120]
  AND    r15,r15
  JNE   _EndIf340
; PrintN("-- The language '"+CurrentLanguage$+"' cannot be found!")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S58
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [v_CurrentLanguage$]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S59
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   qword [PB_PrintN]
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; PrintN("-- The Default language will be used.")       
  MOV    rax,_S60
  PUSH   rax
  POP    rcx
  CALL   qword [PB_PrintN]
; EndIf
_EndIf338:
_EndIf340:
; CurrentLanguage$ = "English"
  MOV    rdx,_S41
  LEA    rcx,[v_CurrentLanguage$]
  CALL   SYS_FastAllocateStringFree4
; EndIf
_EndIf318:
; EndIf
_EndIf307:
; 
; BuildShortcutNamesTable() 
  CALL  _Procedure82
; 
; EndProcedure
_EndProcedureZero205:
  XOR    rax,rax
_EndProcedure205:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,128
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure StringToAscii(String$)
_Procedure190:
  MOV    qword [rsp+8],rcx
  PUSH   r15
  PS190=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS190+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; 
; *Buffer = AllocateMemory(StringByteLength(String$, #PB_Ascii) + 1)
  PUSH   qword 24
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_StringByteLength2
  MOV    r15,rax
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+48],rax
; If *Buffer
  CMP    qword [rsp+48],0
  JE    _EndIf247
; PokeS(*Buffer, String$, -1, #PB_Ascii)
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_PokeS3
; EndIf
_EndIf247:
; 
; ProcedureReturn *Buffer
  MOV    rax,qword [rsp+48]
  JMP   _EndProcedure191
; EndProcedure
_EndProcedureZero191:
  XOR    rax,rax
_EndProcedure191:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,64
  POP    r15
  RET
; Procedure Profiler_ClipToViewport(*x.INTEGER, *y.INTEGER, *Area.ProfilerDrawing)
_Procedure568:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS568=80
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; If *x\i < *Area\x
  MOV    rbp,qword [rsp+PS568+0]
  MOV    r15,qword [rbp]
  MOV    rbp,qword [rsp+PS568+16]
  MOVSXD rax,dword [rbp]
  CMP    r15,rax
  JGE   _EndIf2846
; *x\i = *Area\x
  MOV    rbp,qword [rsp+PS568+16]
  MOVSXD rax,dword [rbp]
  PUSH   rax
  MOV    rbp,qword [rsp+PS568+8]
  POP    rax
  MOV    qword [rbp],rax
; ElseIf *x\i >= *Area\x + *Area\w
  JMP   _EndIf2845
_EndIf2846:
  MOV    rbp,qword [rsp+PS568+0]
  MOV    r15,qword [rbp]
  MOV    rbp,qword [rsp+PS568+16]
  MOVSXD r14,dword [rbp]
  MOV    rbp,qword [rsp+PS568+16]
  MOVSXD rax,dword [rbp+8]
  ADD    r14,rax
  CMP    r15,r14
  JL    _EndIf2847
; *x\i = *Area\x + *Area\w - 1
  MOV    rbp,qword [rsp+PS568+16]
  MOVSXD r15,dword [rbp]
  MOV    rbp,qword [rsp+PS568+16]
  MOVSXD rax,dword [rbp+8]
  ADD    r15,rax
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS568+8]
  POP    rax
  MOV    qword [rbp],rax
; EndIf
_EndIf2845:
_EndIf2847:
; 
; If *y\i < *Area\y
  MOV    rbp,qword [rsp+PS568+8]
  MOV    r15,qword [rbp]
  MOV    rbp,qword [rsp+PS568+16]
  MOVSXD rax,dword [rbp+4]
  CMP    r15,rax
  JGE   _EndIf2849
; *y\i = *Area\y
  MOV    rbp,qword [rsp+PS568+16]
  MOVSXD rax,dword [rbp+4]
  PUSH   rax
  MOV    rbp,qword [rsp+PS568+16]
  POP    rax
  MOV    qword [rbp],rax
; ElseIf *y\i >= *Area\y + *Area\h
  JMP   _EndIf2848
_EndIf2849:
  MOV    rbp,qword [rsp+PS568+8]
  MOV    r15,qword [rbp]
  MOV    rbp,qword [rsp+PS568+16]
  MOVSXD r14,dword [rbp+4]
  MOV    rbp,qword [rsp+PS568+16]
  MOVSXD rax,dword [rbp+12]
  ADD    r14,rax
  CMP    r15,r14
  JL    _EndIf2850
; *y\i = *Area\y + *Area\h - 1
  MOV    rbp,qword [rsp+PS568+16]
  MOVSXD r15,dword [rbp+4]
  MOV    rbp,qword [rsp+PS568+16]
  MOVSXD rax,dword [rbp+12]
  ADD    r15,rax
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS568+16]
  POP    rax
  MOV    qword [rbp],rax
; EndIf
_EndIf2848:
_EndIf2850:
; EndProcedure
_EndProcedureZero569:
  XOR    rax,rax
_EndProcedure569:
  ADD    rsp,48
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure StringToCodePage(CodePage, String$)
_Procedure194:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   r15
  PS194=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS194+8]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; If CodePage = #SC_CP_UTF8
  MOV    r15,qword [rsp+PS194+0]
  CMP    r15,65001
  JNE   _EndIf252
; Format = #PB_UTF8
  MOV    qword [rsp+48],2
; Else
  JMP   _EndIf251
_EndIf252:
; Format = #PB_Ascii
  MOV    qword [rsp+48],24
; EndIf
_EndIf251:
; 
; *Buffer = AllocateMemory(StringByteLength(String$, Format) + 1)
  PUSH   qword [rsp+48]
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_StringByteLength2
  MOV    r15,rax
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+56],rax
; If *Buffer
  CMP    qword [rsp+56],0
  JE    _EndIf255
; PokeS(*Buffer, String$, -1, Format)
  PUSH   qword [rsp+48]
  PUSH   qword -1
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_PokeS3
; EndIf
_EndIf255:
; 
; ProcedureReturn *Buffer
  MOV    rax,qword [rsp+56]
  JMP   _EndProcedure195
; EndProcedure
_EndProcedureZero195:
  XOR    rax,rax
_EndProcedure195:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,64
  POP    r15
  RET
; Procedure VariableGadget_SortProc(*data1.ListIconData, *data2.ListIconData, *Gadget.VariableGadget)
_Procedure268:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS268=64
  SUB    rsp,40
; If *data1 = 0 Or *data2 = 0
  MOV    r15,qword [rsp+PS268+0]
  AND    r15,r15
  JE     Ok152
  MOV    r15,qword [rsp+PS268+8]
  AND    r15,r15
  JE     Ok152
  JMP    No152
Ok152:
  MOV    rax,1
  JMP    End152
No152:
  XOR    rax,rax
End152:
  AND    rax,rax
  JE    _EndIf811
; ProcedureReturn 0 
  XOR    rax,rax
  JMP   _EndProcedure269
; Else
  JMP   _EndIf810
_EndIf811:
; ProcedureReturn VariableGadget_Compare(*Gadget, *data1\UserData, *data2\UserData)
  MOV    rbp,qword [rsp+PS268+8]
  PUSH   qword [rbp]
  MOV    rbp,qword [rsp+PS268+8]
  PUSH   qword [rbp]
  PUSH   qword [rsp+PS268+32]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure266
  JMP   _EndProcedure269
; EndIf    
_EndIf810:
; EndProcedure    
_EndProcedureZero269:
  XOR    rax,rax
_EndProcedure269:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure SetupHighlighting()
_Procedure662:
  PS662=64
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; EnableColoring = 1        
  MOV    qword [v_EnableColoring],1
; EnableCaseCorrection = 1
  MOV    qword [v_EnableCaseCorrection],1
; 
; 
; LoadHighlightingFiles = 0 
  MOV    qword [rsp+40],0
; 
; CompilerIf #CompileLinux
; EditorBoldFontName$ = EditorFontName$
  MOV    rcx,qword [v_EditorFontName$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[v_EditorBoldFontName$]
  POP    rdx
  CALL   SYS_AllocateString4
; CompilerEndIf
; 
; 
; *NormalTextColor    = 1
  MOV    qword [p_NormalTextColor],1
; *BasicKeywordColor  = 2
  MOV    qword [p_BasicKeywordColor],2
; *CommentColor       = 3
  MOV    qword [p_CommentColor],3
; *ConstantColor      = 4
  MOV    qword [p_ConstantColor],4
; *StringColor        = 5
  MOV    qword [p_StringColor],5
; *PureKeywordColor   = 6
  MOV    qword [p_PureKeywordColor],6
; *ASMKeywordColor    = 7
  MOV    qword [p_ASMKeywordColor],7
; *OperatorColor      = 8
  MOV    qword [p_OperatorColor],8
; *StructureColor     = 9
  MOV    qword [p_StructureColor],9
; *NumberColor        = 10
  MOV    qword [p_NumberColor],10
; *PointerColor       = 11
  MOV    qword [p_PointerColor],11
; *SeparatorColor     = 12
  MOV    qword [p_SeparatorColor],12
; *LabelColor         = 13  
  MOV    qword [p_LabelColor],13
; *CustomKeywordColor = 14
  MOV    qword [p_CustomKeywordColor],14
; *ModuleColor        = 15
  MOV    qword [p_ModuleColor],15
; *BadEscapeColor     = 16
  MOV    qword [p_BadEscapeColor],16
; 
; InitSyntaxCheckArrays()
  CALL  _Procedure218
; InitSyntaxHighlighting()
  CALL  _Procedure220
; EndProcedure
_EndProcedureZero663:
  XOR    rax,rax
_EndProcedure663:
  ADD    rsp,56
  RET
; Procedure UpdateAsmWindowState(*Debugger.DebuggerData)
_Procedure452:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS452=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; If *Debugger\ProgramState = 3 Or *Debugger\ProgramState = 7 Or *Debugger\ProgramState = 8 Or *Debugger\ProgramState = 9
  MOV    rbp,qword [rsp+PS452+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,3
  JE     Ok215
  MOV    rbp,qword [rsp+PS452+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,7
  JE     Ok215
  MOV    rbp,qword [rsp+PS452+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,8
  JE     Ok215
  MOV    rbp,qword [rsp+PS452+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,9
  JE     Ok215
  JMP    No215
Ok215:
  MOV    rax,1
  JMP    End215
No215:
  XOR    rax,rax
End215:
  AND    rax,rax
  JE    _EndIf1721
; 
; 
; 
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Message], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS452+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1032]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_ScrollArea], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS452+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1024]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_UpdateStack], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS452+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1016]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; 
; If *Debugger\RegisterCount = 0
  MOV    rbp,qword [rsp+PS452+0]
  MOVSXD r15,dword [rbp+160]
  AND    r15,r15
  JNE   _EndIf1723
; Command.CommandInfo\Command = #COMMAND_GetRegisterLayout 
  LEA    rbp,[rsp+40]
  MOV    dword [rbp],4
; Command\DataSize = 0
  MOV    dword [rbp+4],0
; SendDebuggerCommand(*Debugger, @Command)
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS452+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; EndIf
_EndIf1723:
; 
; 
; 
; Command.CommandInfo\Command = #COMMAND_GetRegister
  LEA    rbp,[rsp+40]
  MOV    dword [rbp],5
; Command\DataSize = 0
  MOV    dword [rbp+4],0
; SendDebuggerCommand(*Debugger, @Command)      
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS452+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; If AutoStackUpdate
  CMP    qword [v_AutoStackUpdate],0
  JE    _EndIf1725
; Command.CommandInfo\Command = #COMMAND_GetStack
  LEA    rbp,[rsp+40]
  MOV    dword [rbp],7
; Command\DataSize = 0
  MOV    dword [rbp+4],0
; SendDebuggerCommand(*Debugger, @Command)            
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS452+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; EndIf
_EndIf1725:
; 
; Else
  JMP   _EndIf1720
_EndIf1721:
; 
; 
; 
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Message], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS452+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1032]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_ScrollArea], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS452+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1024]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_UpdateStack], 1)  
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS452+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1016]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; EndIf
_EndIf1720:
; 
; EndProcedure
_EndProcedureZero453:
  XOR    rax,rax
_EndProcedure453:
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure OpenWatchlistWindow(*Debugger.DebuggerData)
_Procedure46:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS46=64
  SUB    rsp,40
; 
; If *Debugger\IsWatchListVisible = 0    
  MOV    rbp,qword [rsp+PS46+0]
  MOVSXD r15,dword [rbp+132]
  AND    r15,r15
  JNE   _EndIf2587
; 
; EnsureWindowOnDesktop(*Debugger\Windows[#DEBUGGER_WINDOW_WatchList])
  MOV    rbp,qword [rsp+PS46+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+872]
  POP    rcx
  CALL  _Procedure162
; HideWindow(*Debugger\Windows[#DEBUGGER_WINDOW_WatchList], 0) 
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS46+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+872]
  POP    rcx
  POP    rdx
  CALL   PB_HideWindow
; 
; 
; 
; If WatchListWindowWidth = 0 Or WatchListWindowHeight = 0
  MOV    r15,qword [v_WatchListWindowWidth]
  AND    r15,r15
  JE     Ok287
  MOV    r15,qword [v_WatchListWindowHeight]
  AND    r15,r15
  JE     Ok287
  JMP    No287
Ok287:
  MOV    rax,1
  JMP    End287
No287:
  XOR    rax,rax
End287:
  AND    rax,rax
  JE    _EndIf2589
; WatchListWindowX           = 50
  MOV    qword [v_WatchListWindowX],50
; WatchListWindowY           = 50
  MOV    qword [v_WatchListWindowY],50
; WatchListWindowWidth       = 700
  MOV    qword [v_WatchListWindowWidth],700
; WatchListWindowHeight      = 300     
  MOV    qword [v_WatchListWindowHeight],300
; EndIf
_EndIf2589:
; 
; ResizeWindow(*Debugger\Windows[#DEBUGGER_WINDOW_WatchList], WatchListWindowX, WatchListWindowY, WatchListWindowWidth, WatchListWindowHeight)
  SUB    rsp,8
  PUSH   qword [v_WatchListWindowHeight]
  PUSH   qword [v_WatchListWindowWidth]
  PUSH   qword [v_WatchListWindowY]
  PUSH   qword [v_WatchListWindowX]
  MOV    rbp,qword [rsp+PS46+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+872]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeWindow
  ADD    rsp,48
; WatchListWindowEvents(*Debugger, #PB_Event_SizeWindow) 
  PUSH   qword 13118
  PUSH   qword [rsp+PS46+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure524
; 
; 
; CompilerIf #CompileWindows
; SendMessage_(GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_List]), #LVM_SETCOLUMNWIDTH, 3, #LVSCW_AUTOSIZE_USEHEADER)      
  PUSH   qword -2
  PUSH   qword 3
  PUSH   qword 4126
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS46+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2672]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; CompilerEndIf
; 
; 
; SetWindowTitle(*Debugger\Windows[#DEBUGGER_WINDOW_WatchList], Language("Debugger","WatchListTitle") + " - " + DebuggerTitle(*Debugger\FileName$))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S284
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS46+48]
  PUSH   qword [rbp+80]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure260
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS46+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+872]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetWindowTitle
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; *Debugger\IsWatchListVisible = 1
  MOV    rbp,qword [rsp+PS46+0]
  MOV    dword [rbp+132],1
; EndIf  
_EndIf2587:
; 
; SetWindowForeground(*Debugger\Windows[#DEBUGGER_WINDOW_WatchList])
  MOV    rbp,qword [rsp+PS46+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+872]
  POP    rcx
  CALL  _Procedure106
; WatchListWindowEvents(*Debugger, #PB_Event_SizeWindow)
  PUSH   qword 13118
  PUSH   qword [rsp+PS46+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure524
; 
; EndProcedure
_EndProcedureZero47:
  XOR    rax,rax
_EndProcedure47:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure.s Network_ReadHeader(Socket, List Values$(), *pCommandData.INTEGER)
_Procedure378:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS378=128
  MOV    rax,8
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
  MOV    rax,[rsp+PS378+32]
  MOV    qword [PB_StringBasePosition],rax
  MOV    rax,qword [rsp+PS378+8]
  MOV    qword [rsp+40],rax
; ClearList(Values$())
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_ClearList
; *pCommandData\i = 0
  MOV    rbp,qword [rsp+PS378+16]
  MOV    qword [rbp],0
; 
; Header$ =  Network_ReadString(Socket)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS378+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure374
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; If Header$ <> "" And Header$ <> "-error-"
  PUSH   qword [rsp+48]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    No178
  PUSH   qword [rsp+48]
  MOV    rcx,_S107
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    No178
Ok178:
  MOV    rax,1
  JMP    End178
No178:
  XOR    rax,rax
End178:
  AND    rax,rax
  JE    _EndIf1188
; 
; 
; String$ = Trim(RemoveString(Header$, Chr(9)))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S26
  PUSH   rax
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_RemoveString
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; Header$ = ""
  MOV    rdx,_S3
  LEA    rcx,[rsp+48]
  CALL   SYS_FastAllocateStringFree4
; 
; While String$
_While1189:
  MOV    rcx,qword [rsp+56]
  XOR    rdx,rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _Wend1189
; Option$ = StringField(String$, 1, " ")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S25
  PUSH   rax
  PUSH   qword 1
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  LEA    rcx,[rsp+72]
  POP    rdx
  CALL   SYS_AllocateString4
; Header$ + Option$ + " "
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+72]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S25
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; String$ = LTrim(Right(String$, Len(String$)-Len(Option$)))      
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+104]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  SUB    rsp,8
  PUSH   qword [rsp+112]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  SUB    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_LTrim
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; Wend
  JMP   _While1189
_Wend1189:
; 
; Header$ = RTrim(Header$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_RTrim
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; 
; 
; Repeat
_Repeat1190:
; Pair$ = Network_ReadString(Socket)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS378+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure374
  ADD    rsp,40
  LEA    rcx,[rsp+80]
  POP    rdx
  CALL   SYS_AllocateString4
; If Pair$ = "-error-"
  PUSH   qword [rsp+72]
  MOV    rcx,_S107
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf1192
; ClearList(Values$())
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_ClearList
; ProcedureReturn "-error-"
  MOV    rcx,_S107
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure379
; ElseIf Pair$ <> ""
  JMP   _EndIf1191
_EndIf1192:
  PUSH   qword [rsp+72]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf1193
; Pair$ = RemoveString(Pair$, Chr(9))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S26
  PUSH   rax
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_RemoveString
  ADD    rsp,40
  LEA    rcx,[rsp+80]
  POP    rdx
  CALL   SYS_AllocateString4
; Separator = FindString(Pair$, ":", 1)
  PUSH   qword 1
  MOV    rax,_S13
  PUSH   rax
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_FindString2
  MOV    qword [rsp+80],rax
; If Separator <> 0
  MOV    r15,qword [rsp+80]
  AND    r15,r15
  JE    _EndIf1195
; AddElement(Values$())
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_AddElement
; Values$() = UCase(Trim(Left(Pair$, Separator-1)))+Chr(10)+Trim(Right(Pair$, Len(Pair$)-Separator))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+136]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+120]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  SUB    r15,qword [rsp+120]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+120]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,32
  POP    rax
  MOV    rax,[rsp+48]
  MOV    rbp,qword [rax+16]
  LEA    rcx,[rbp+16]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf        
_EndIf1195:
; EndIf
_EndIf1191:
_EndIf1193:
; Until Pair$ = ""
  PUSH   qword [rsp+72]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _Repeat1190
_Until1190:
; 
; LengthValue$ = Network_GetValue("Length", Values$())
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+56]
  MOV    rax,_S108
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure376
  ADD    rsp,40
  LEA    rcx,[rsp+96]
  POP    rdx
  CALL   SYS_AllocateString4
; If LengthValue$
  MOV    rcx,qword [rsp+88]
  XOR    rdx,rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf1197
; Length = Val(LengthValue$)      
  PUSH   qword [rsp+88]
  POP    rcx
  CALL   PB_Val
  MOV    qword [rsp+96],rax
; If Length > 0
  MOV    r15,qword [rsp+96]
  AND    r15,r15
  JLE   _EndIf1199
; *pCommandData\i = AllocateMemory(Length)
  PUSH   qword [rsp+96]
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS378+24]
  POP    rax
  MOV    qword [rbp],rax
; If *pCommandData\i
  MOV    rbp,qword [rsp+PS378+16]
  CMP    qword [rbp],0
  JE    _EndIf1201
; If Network_ReceiveData(Socket, *pCommandData\i, Length) = 0
  PUSH   qword [rsp+96]
  MOV    rbp,qword [rsp+PS378+24]
  PUSH   qword [rbp]
  PUSH   qword [rsp+PS378+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   Network_ReceiveData
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1203
; Header$ = "-error-"
  MOV    rdx,_S107
  LEA    rcx,[rsp+48]
  CALL   SYS_FastAllocateStringFree4
; ClearList(Values$())
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_ClearList
; FreeMemory(*pCommandData\i)
  MOV    rbp,qword [rsp+PS378+16]
  PUSH   qword [rbp]
  POP    rcx
  CALL   PB_FreeMemory
; *pCommandData\i = 0            
  MOV    rbp,qword [rsp+PS378+16]
  MOV    qword [rbp],0
; EndIf
_EndIf1203:
; EndIf
_EndIf1201:
; EndIf
_EndIf1199:
; EndIf             
_EndIf1197:
; EndIf
_EndIf1188:
; 
; ProcedureReturn Header$
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure379
; EndProcedure
_EndProcedureZero379:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure379:
  PUSH   rax
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+80]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+96]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+72]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,104
  POP    r15
  POP    rbp
  RET
; Procedure Xml_RecursiveAdd(Node, Gadget, Sublevel)
_Procedure636:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   r15
  PS636=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; NewIndex = CountGadgetItems(Gadget)
  PUSH   qword [rsp+PS636+8]
  POP    rcx
  CALL   PB_CountGadgetItems
  MOV    qword [rsp+40],rax
; 
; Select XMLNodeType(Node)
  PUSH   qword [rsp+PS636+0]
  POP    rcx
  CALL   PB_XMLNodeType
  MOV    rax,rax
  PUSH   rax
; Case #PB_XML_Comment
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case308
; AddGadgetItem(Gadget, NewIndex, "#comment", 0, Sublevel)
  PUSH   qword [rsp+PS636+24]
  PUSH   qword 0
  MOV    rax,_S343
  PUSH   rax
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+PS636+48]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem3
  ADD    rsp,40
; SetGadgetItemData(Gadget, NewIndex, Node) 
  SUB    rsp,8
  PUSH   qword [rsp+PS636+16]
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+PS636+40]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetItemData
  ADD    rsp,40
; 
; Case #PB_XML_CData
  JMP   _EndSelect49
_Case308:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case309
; AddGadgetItem(Gadget, NewIndex, "#cdata", 0, Sublevel)
  PUSH   qword [rsp+PS636+24]
  PUSH   qword 0
  MOV    rax,_S344
  PUSH   rax
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+PS636+48]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem3
  ADD    rsp,40
; SetGadgetItemData(Gadget, NewIndex, Node) 
  SUB    rsp,8
  PUSH   qword [rsp+PS636+16]
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+PS636+40]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetItemData
  ADD    rsp,40
; 
; Case #PB_XML_DTD
  JMP   _EndSelect49
_Case309:
  MOV    r15,4
  CMP    r15,[rsp]
  JNE   _Case310
; AddGadgetItem(Gadget, NewIndex, "#dtd", 0, Sublevel)
  PUSH   qword [rsp+PS636+24]
  PUSH   qword 0
  MOV    rax,_S345
  PUSH   rax
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+PS636+48]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem3
  ADD    rsp,40
; SetGadgetItemData(Gadget, NewIndex, Node) 
  SUB    rsp,8
  PUSH   qword [rsp+PS636+16]
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+PS636+40]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetItemData
  ADD    rsp,40
; 
; Case #PB_XML_Instruction
  JMP   _EndSelect49
_Case310:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case311
; AddGadgetItem(Gadget, NewIndex, "#instruction: "+GetXMLNodeName(Node), 0, Sublevel)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS636+40]
  PUSH   qword 0
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S346
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS636+72]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetXMLNodeName
  ADD    rsp,40
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+PS636+64]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem3
  ADD    rsp,48
  POP    qword [PB_StringBasePosition]
; SetGadgetItemData(Gadget, NewIndex, Node) 
  SUB    rsp,8
  PUSH   qword [rsp+PS636+16]
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+PS636+40]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetItemData
  ADD    rsp,40
; 
; Case #PB_XML_Normal
  JMP   _EndSelect49
_Case311:
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case312
; Text$ = GetXMLNodeName(Node)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS636+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetXMLNodeName
  ADD    rsp,32
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; If ExamineXMLAttributes(Node)
  SUB    rsp,8
  PUSH   qword [rsp+PS636+16]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ExamineXMLAttributes
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf3348
; While NextXMLAttribute(Node)
_While3349:
  SUB    rsp,8
  PUSH   qword [rsp+PS636+16]
  POP    rcx
  SUB    rsp,32
  CALL   PB_NextXMLAttribute
  ADD    rsp,40
  AND    rax,rax
  JE    _Wend3349
; If LCase(XMLAttributeName(Node)) = "id"
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS636+40]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_XMLAttributeName
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_LCase
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S347
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _EndIf3351
; Text$ + "  (" + XMLAttributeName(Node) + "=" + XMLAttributeValue(Node) + ")"
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S348
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS636+40]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_XMLAttributeName
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S194
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS636+40]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_XMLAttributeValue
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S29
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Break
  JMP   _Wend3349
; EndIf
_EndIf3351:
; Wend
  JMP   _While3349
_Wend3349:
; EndIf      
_EndIf3348:
; 
; AddGadgetItem(Gadget, NewIndex, Text$, 0, Sublevel)
  PUSH   qword [rsp+PS636+24]
  PUSH   qword 0
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+PS636+48]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem3
  ADD    rsp,40
; SetGadgetItemData(Gadget, NewIndex, Node) 
  SUB    rsp,8
  PUSH   qword [rsp+PS636+16]
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+PS636+40]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetItemData
  ADD    rsp,40
; 
; Child = ChildXMLNode(Node)
  SUB    rsp,8
  PUSH   qword [rsp+PS636+16]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ChildXMLNode
  ADD    rsp,40
  MOV    qword [rsp+64],rax
; While Child
_While3352:
  CMP    qword [rsp+64],0
  JE    _Wend3352
; Xml_RecursiveAdd(Child, Gadget, Sublevel+1)
  SUB    rsp,8
  MOV    r15,qword [rsp+PS636+32]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+PS636+32]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure636
  ADD    rsp,40
; Child = NextXMLNode(Child)
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_NextXMLNode
  ADD    rsp,40
  MOV    qword [rsp+64],rax
; Wend
  JMP   _While3352
_Wend3352:
; 
; 
; SetGadgetItemState(Gadget, NewIndex, #PB_Tree_Expanded)
  SUB    rsp,8
  PUSH   qword 2
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+PS636+40]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetItemState
  ADD    rsp,40
; 
; EndSelect
_Case312:
_EndSelect49:
  POP    rax
; 
; EndProcedure
_EndProcedureZero637:
  XOR    rax,rax
_EndProcedure637:
  PUSH   rax
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,64
  POP    r15
  RET
; Procedure Standalone_LoadPreferences()
_Procedure646:
  PUSH   rbp
  PUSH   r15
  PS646=128
  MOV    rax,8
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; Protected NewList TempList.s()
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_FreeList
  MOV    r9,8
  MOV    r8,s_s
  LEA    rdx,[rsp+40]
  MOV    rcx,8
  CALL   PB_NewList
; 
; 
; 
; 
; 
; 
; 
; 
; 
; OpenPreferences(PreferenceFile$)
  PUSH   qword [v_PreferenceFile$]
  POP    rcx
  CALL   PB_OpenPreferences
; 
; PreferenceGroup("Global")
  MOV    rax,_S76
  PUSH   rax
  POP    rcx
  CALL   PB_PreferenceGroup
; CurrentLanguage$            = ReadPreferenceString("CurrentLanguage"   , "English")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S41
  PUSH   rax
  MOV    rax,_S364
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ReadPreferenceString
  ADD    rsp,40
  LEA    rcx,[v_CurrentLanguage$]
  POP    rdx
  CALL   SYS_AllocateString4
; LanguageFile$               = ReadPreferenceString("LanguageFile", "")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S3
  PUSH   rax
  MOV    rax,_S365
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ReadPreferenceString
  ADD    rsp,40
  LEA    rcx,[v_LanguageFile$]
  POP    rdx
  CALL   SYS_AllocateString4
; EnableKeywordBolding        = ReadPreferenceLong  ("EnableKeywordBolding", 1)        
  PUSH   qword 1
  MOV    rax,_S366
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_EnableKeywordBolding],rax
; TabLength                   = ReadPreferenceLong  ("TabLength"         , 2)
  PUSH   qword 2
  MOV    rax,_S367
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_TabLength],rax
; DisplayFullPath             = ReadPreferenceLong  ("DisplayFullPath", 0)
  PUSH   qword 0
  MOV    rax,_S368
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DisplayFullPath],rax
; ShowWhiteSpace              = ReadPreferenceLong  ("ShowWhiteSpace"    , 0)    
  PUSH   qword 0
  MOV    rax,_S369
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_ShowWhitespace],rax
; ShowIndentGuides            = ReadPreferenceLong  ("ShowIndentGuides"  , 0)    
  PUSH   qword 0
  MOV    rax,_S370
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_ShowIndentGuides],rax
; 
; 
; PreferenceGroup("Editor")
  MOV    rax,_S371
  PUSH   rax
  POP    rcx
  CALL   PB_PreferenceGroup
; BackgroundColor     = ReadPreferenceLong("BackgroundColor"  ,  $DFFFFF)
  PUSH   qword 14680063
  MOV    rax,_S372
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_BackgroundColor],rax
; NormalTextColor     = ReadPreferenceLong("NormalTextColor"  ,  0)
  PUSH   qword 0
  MOV    rax,_S373
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_NormalTextColor],rax
; CursorColor         = ReadPreferenceLong("CursorColor"      , 0)
  PUSH   qword 0
  MOV    rax,_S374
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_CursorColor],rax
; SelectionColor      = ReadPreferenceLong("SelectionColor"   , $C0C0C0)
  PUSH   qword 12632256
  MOV    rax,_S375
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_SelectionColor],rax
; SelectionFrontColor = ReadPreferenceLong("SelectionFrontColor", $000000)
  PUSH   qword 0
  MOV    rax,_S376
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_SelectionFrontColor],rax
; 
; If ReadPreferenceLong("ASMKeywordColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S377
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3371
; ASMKeywordColor   = ReadPreferenceLong("ASMKeywordColor", $724B92)
  PUSH   qword 7490450
  MOV    rax,_S378
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_ASMKeywordColor],rax
; Else
  JMP   _EndIf3370
_EndIf3371:
; ASMKeywordColor   = NormalTextColor
  PUSH   qword [v_NormalTextColor]
  POP    rax
  MOV    qword [v_ASMKeywordColor],rax
; EndIf
_EndIf3370:
; 
; If ReadPreferenceLong("BasicKeywordColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S379
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3374
; BasicKeywordColor   = ReadPreferenceLong("BasicKeywordColor", $666600)
  PUSH   qword 6710784
  MOV    rax,_S380
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_BasicKeywordColor],rax
; Else
  JMP   _EndIf3373
_EndIf3374:
; BasicKeywordColor   = NormalTextColor
  PUSH   qword [v_NormalTextColor]
  POP    rax
  MOV    qword [v_BasicKeywordColor],rax
; EndIf
_EndIf3373:
; 
; If ReadPreferenceLong("CustomKeywordColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S381
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3377
; CustomKeywordColor   = ReadPreferenceLong("CustomKeywordColor", $666600)
  PUSH   qword 6710784
  MOV    rax,_S382
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_CustomKeywordColor],rax
; Else
  JMP   _EndIf3376
_EndIf3377:
; CustomKeywordColor   = BasicKeywordColor
  PUSH   qword [v_BasicKeywordColor]
  POP    rax
  MOV    qword [v_CustomKeywordColor],rax
; EndIf      
_EndIf3376:
; 
; If ReadPreferenceLong("CommentColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S383
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3380
; CommentColor   = ReadPreferenceLong("CommentColor", $AAAA00)
  PUSH   qword 11184640
  MOV    rax,_S384
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_CommentColor],rax
; Else
  JMP   _EndIf3379
_EndIf3380:
; CommentColor   = NormalTextColor
  PUSH   qword [v_NormalTextColor]
  POP    rax
  MOV    qword [v_CommentColor],rax
; EndIf
_EndIf3379:
; 
; If ReadPreferenceLong("ConstantColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S385
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3383
; ConstantColor   = ReadPreferenceLong("ConstantColor", $724B92)
  PUSH   qword 7490450
  MOV    rax,_S386
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_ConstantColor],rax
; Else
  JMP   _EndIf3382
_EndIf3383:
; ConstantColor   = NormalTextColor
  PUSH   qword [v_NormalTextColor]
  POP    rax
  MOV    qword [v_ConstantColor],rax
; EndIf
_EndIf3382:
; 
; If ReadPreferenceLong("LabelColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S387
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3386
; LabelColor   = ReadPreferenceLong("LabelColor", 0)
  PUSH   qword 0
  MOV    rax,_S388
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_LabelColor],rax
; Else
  JMP   _EndIf3385
_EndIf3386:
; LabelColor   = NormalTextColor
  PUSH   qword [v_NormalTextColor]
  POP    rax
  MOV    qword [v_LabelColor],rax
; EndIf
_EndIf3385:
; 
; If ReadPreferenceLong("NumberColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S389
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3389
; NumberColor   = ReadPreferenceLong("NumberColor", 0)
  PUSH   qword 0
  MOV    rax,_S390
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_NumberColor],rax
; Else
  JMP   _EndIf3388
_EndIf3389:
; NumberColor   = NormalTextColor
  PUSH   qword [v_NormalTextColor]
  POP    rax
  MOV    qword [v_NumberColor],rax
; EndIf
_EndIf3388:
; 
; If ReadPreferenceLong("OperatorColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S391
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3392
; OperatorColor   = ReadPreferenceLong("OperatorColor", 0)
  PUSH   qword 0
  MOV    rax,_S392
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_OperatorColor],rax
; Else
  JMP   _EndIf3391
_EndIf3392:
; OperatorColor   = NormalTextColor
  PUSH   qword [v_NormalTextColor]
  POP    rax
  MOV    qword [v_OperatorColor],rax
; EndIf
_EndIf3391:
; 
; If ReadPreferenceLong("PointerColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S393
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3395
; PointerColor   = ReadPreferenceLong("PointerColor", 0)
  PUSH   qword 0
  MOV    rax,_S394
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_PointerColor],rax
; Else
  JMP   _EndIf3394
_EndIf3395:
; PointerColor   = NormalTextColor
  PUSH   qword [v_NormalTextColor]
  POP    rax
  MOV    qword [v_PointerColor],rax
; EndIf
_EndIf3394:
; 
; If ReadPreferenceLong("PureKeywordColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S395
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3398
; PureKeywordColor   = ReadPreferenceLong("PureKeywordColor", $666600)
  PUSH   qword 6710784
  MOV    rax,_S396
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_PureKeywordColor],rax
; Else
  JMP   _EndIf3397
_EndIf3398:
; PureKeywordColor   = NormalTextColor
  PUSH   qword [v_NormalTextColor]
  POP    rax
  MOV    qword [v_PureKeywordColor],rax
; EndIf
_EndIf3397:
; 
; If ReadPreferenceLong("SeparatorColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S397
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3401
; SeparatorColor   = ReadPreferenceLong("SeparatorColor", 0)
  PUSH   qword 0
  MOV    rax,_S398
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_SeparatorColor],rax
; Else
  JMP   _EndIf3400
_EndIf3401:
; SeparatorColor   = NormalTextColor
  PUSH   qword [v_NormalTextColor]
  POP    rax
  MOV    qword [v_SeparatorColor],rax
; EndIf
_EndIf3400:
; 
; If ReadPreferenceLong("StringColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S399
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3404
; StringColor   = ReadPreferenceLong("StringColor", 0)
  PUSH   qword 0
  MOV    rax,_S400
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_StringColor],rax
; Else
  JMP   _EndIf3403
_EndIf3404:
; StringColor   = NormalTextColor
  PUSH   qword [v_NormalTextColor]
  POP    rax
  MOV    qword [v_StringColor],rax
; EndIf
_EndIf3403:
; 
; If ReadPreferenceLong("StructureColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S401
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3407
; StructureColor   = ReadPreferenceLong("StructureColor", 0)
  PUSH   qword 0
  MOV    rax,_S402
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_StructureColor],rax
; Else
  JMP   _EndIf3406
_EndIf3407:
; StructureColor   = NormalTextColor
  PUSH   qword [v_NormalTextColor]
  POP    rax
  MOV    qword [v_StructureColor],rax
; EndIf
_EndIf3406:
; 
; If ReadPreferenceLong("LineNumberColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S403
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3410
; LineNumberColor   = ReadPreferenceLong("LineNumberColor", $808080)
  PUSH   qword 8421504
  MOV    rax,_S404
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_LineNumberColor],rax
; Else
  JMP   _EndIf3409
_EndIf3410:
; LineNumberColor   = NormalTextColor
  PUSH   qword [v_NormalTextColor]
  POP    rax
  MOV    qword [v_LineNumberColor],rax
; EndIf
_EndIf3409:
; 
; If ReadPreferenceLong("LineNumberBackColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S405
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3413
; LineNumberBackColor   = ReadPreferenceLong("LineNumberBackColor", $D7FFFF)
  PUSH   qword 14155775
  MOV    rax,_S406
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_LineNumberBackColor],rax
; Else
  JMP   _EndIf3412
_EndIf3413:
; LineNumberBackColor   = BackgroundColor
  PUSH   qword [v_BackgroundColor]
  POP    rax
  MOV    qword [v_LineNumberBackColor],rax
; EndIf
_EndIf3412:
; 
; If ReadPreferenceLong("CurrentLineColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S407
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3416
; CurrentLineColor   = ReadPreferenceLong("CurrentLineColor", $B7FFFF)
  PUSH   qword 12058623
  MOV    rax,_S408
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_CurrentLineColor],rax
; Else
  JMP   _EndIf3415
_EndIf3416:
; CurrentLineColor   = BackgroundColor
  PUSH   qword [v_BackgroundColor]
  POP    rax
  MOV    qword [v_CurrentLineColor],rax
; EndIf
_EndIf3415:
; 
; If ReadPreferenceLong("Debugger_LineColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S409
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3419
; DebuggerLineColor   = ReadPreferenceLong("Debugger_LineColor", $FFE8E8)
  PUSH   qword 16771304
  MOV    rax,_S410
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebuggerLineColor],rax
; Else
  JMP   _EndIf3418
_EndIf3419:
; DebuggerLineColor   = BackgroundColor
  PUSH   qword [v_BackgroundColor]
  POP    rax
  MOV    qword [v_DebuggerLineColor],rax
; EndIf
_EndIf3418:
; 
; If ReadPreferenceLong("Debugger_ErrorColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S411
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3422
; DebuggerErrorColor   = ReadPreferenceLong("Debugger_ErrorColor", $0000FF)
  PUSH   qword 255
  MOV    rax,_S412
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebuggerErrorColor],rax
; Else
  JMP   _EndIf3421
_EndIf3422:
; DebuggerErrorColor   = BackgroundColor
  PUSH   qword [v_BackgroundColor]
  POP    rax
  MOV    qword [v_DebuggerErrorColor],rax
; EndIf
_EndIf3421:
; 
; If ReadPreferenceLong("Debugger_BreakPointColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S413
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3425
; DebuggerBreakPointColor   = ReadPreferenceLong("Debugger_BreakPointColor", $00D0FF)
  PUSH   qword 53503
  MOV    rax,_S414
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebuggerBreakPointColor],rax
; Else
  JMP   _EndIf3424
_EndIf3425:
; DebuggerBreakPointColor   = BackgroundColor
  PUSH   qword [v_BackgroundColor]
  POP    rax
  MOV    qword [v_DebuggerBreakPointColor],rax
; EndIf
_EndIf3424:
; 
; If ReadPreferenceLong("Debugger_LineSymbolColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S415
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3428
; DebuggerLineSymbolColor   = ReadPreferenceLong("Debugger_LineSymbolColor", $FFE8E8)
  PUSH   qword 16771304
  MOV    rax,_S416
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebuggerLineSymbolColor],rax
; Else
  JMP   _EndIf3427
_EndIf3428:
; DebuggerLineSymbolColor   = NormalTextColor
  PUSH   qword [v_NormalTextColor]
  POP    rax
  MOV    qword [v_DebuggerLineSymbolColor],rax
; EndIf
_EndIf3427:
; 
; If ReadPreferenceLong("Debugger_ErrorSymbolColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S417
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3431
; DebuggerErrorSymbolColor   = ReadPreferenceLong("Debugger_ErrorSymbolColor", $0000FF)
  PUSH   qword 255
  MOV    rax,_S418
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebuggerErrorSymbolColor],rax
; Else
  JMP   _EndIf3430
_EndIf3431:
; DebuggerErrorSymbolColor   = NormalTextColor
  PUSH   qword [v_NormalTextColor]
  POP    rax
  MOV    qword [v_DebuggerErrorSymbolColor],rax
; EndIf
_EndIf3430:
; 
; If ReadPreferenceLong("Debugger_BreakpoinSymbolColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S419
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3434
; DebuggerBreakpointSymbolColor   = ReadPreferenceLong("Debugger_BreakpoinSymbolColor", $00D0FF)
  PUSH   qword 53503
  MOV    rax,_S420
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebuggerBreakpointSymbolColor],rax
; Else
  JMP   _EndIf3433
_EndIf3434:
; DebuggerBreakpointSymbolColor   = NormalTextColor
  PUSH   qword [v_NormalTextColor]
  POP    rax
  MOV    qword [v_DebuggerBreakpointSymbolColor],rax
; EndIf
_EndIf3433:
; 
; If ReadPreferenceLong("Debugger_WarningColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S421
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3437
; DebuggerWarningColor   = ReadPreferenceLong("Debugger_WarningColor", $00D0FF)
  PUSH   qword 53503
  MOV    rax,_S422
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebuggerWarningColor],rax
; Else
  JMP   _EndIf3436
_EndIf3437:
; DebuggerWarningColor   = BackgroundColor
  PUSH   qword [v_BackgroundColor]
  POP    rax
  MOV    qword [v_DebuggerWarningColor],rax
; EndIf
_EndIf3436:
; 
; If ReadPreferenceLong("Debugger_WarningSymbolColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S423
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3440
; DebuggerWarningSymbolColor   = ReadPreferenceLong("Debugger_WarningSymbolColor", $00D0FF)
  PUSH   qword 53503
  MOV    rax,_S424
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebuggerWarningSymbolColor],rax
; Else
  JMP   _EndIf3439
_EndIf3440:
; DebuggerWarningSymbolColor   = NormalTextColor
  PUSH   qword [v_NormalTextColor]
  POP    rax
  MOV    qword [v_DebuggerWarningSymbolColor],rax
; EndIf
_EndIf3439:
; 
; If ReadPreferenceLong("IndentColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S425
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3443
; WhitespaceColor = ReadPreferenceLong("IndentColor", $AAAA00)
  PUSH   qword 11184640
  MOV    rax,_S426
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_WhitespaceColor],rax
; Else
  JMP   _EndIf3442
_EndIf3443:
; WhitespaceColor = CommentColor
  PUSH   qword [v_CommentColor]
  POP    rax
  MOV    qword [v_WhitespaceColor],rax
; EndIf
_EndIf3442:
; 
; If ReadPreferenceLong("ModuleColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S427
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3446
; ModuleColor   = ReadPreferenceLong("ModuleColor", $000000)
  PUSH   qword 0
  MOV    rax,_S428
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_ModuleColor],rax
; Else
  JMP   _EndIf3445
_EndIf3446:
; ModuleColor   = NormalTextColor
  PUSH   qword [v_NormalTextColor]
  POP    rax
  MOV    qword [v_ModuleColor],rax
; EndIf
_EndIf3445:
; 
; If ReadPreferenceLong("BadBraceColor_Disabled", 0) = 0
  PUSH   qword 0
  MOV    rax,_S429
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3449
; BadBraceColor   = ReadPreferenceLong("BadBraceColor", $000000)
  PUSH   qword 0
  MOV    rax,_S430
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_BadBraceColor],rax
; Else
  JMP   _EndIf3448
_EndIf3449:
; BadBraceColor   = SeparatorColor
  PUSH   qword [v_SeparatorColor]
  POP    rax
  MOV    qword [v_BadBraceColor],rax
; EndIf
_EndIf3448:
; 
; EditorFontName$   = ReadPreferenceString("EditorFontName", DefaultEditorFontName$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [v_DefaultEditorFontName$]
  MOV    rax,_S431
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ReadPreferenceString
  ADD    rsp,40
  LEA    rcx,[v_EditorFontName$]
  POP    rdx
  CALL   SYS_AllocateString4
; EditorFontSize    = ReadPreferenceLong  ("EditorFontSize", 10)
  PUSH   qword 10
  MOV    rax,_S432
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_EditorFontSize],rax
; EditorFontStyle$  = ReadPreferenceString("EditorFontStyle","None")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S434
  PUSH   rax
  MOV    rax,_S433
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ReadPreferenceString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; EditorFontStyle = 0
  MOV    qword [v_EditorFontStyle],0
; If FindString(UCase(EditorFontStyle$),"BOLD",1)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 1
  MOV    rax,_S435
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_FindString2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  AND    rax,rax
  JE    _EndIf3452
; EditorFontStyle | #PB_Font_Bold
  MOV    r15,qword [v_EditorFontStyle]
  OR     r15,256
  MOV    qword [v_EditorFontStyle],r15
; EndIf
_EndIf3452:
; If FindString(UCase(EditorFontStyle$),"ITALIC",1)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 1
  MOV    rax,_S436
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_FindString2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  AND    rax,rax
  JE    _EndIf3454
; EditorFontStyle | #PB_Font_Italic
  MOV    r15,qword [v_EditorFontStyle]
  OR     r15,512
  MOV    qword [v_EditorFontStyle],r15
; EndIf
_EndIf3454:
; 
; 
; EditorFontID = LoadFont(0, EditorFontName$, EditorFontSize, EditorFontStyle)
  PUSH   qword [v_EditorFontStyle]
  PUSH   qword [v_EditorFontSize]
  PUSH   qword [v_EditorFontName$]
  PUSH   qword 0
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_LoadFont2
  MOV    qword [v_EditorFontID],rax
; 
; PreferenceGroup("Shortcuts")
  MOV    rax,_S437
  PUSH   rax
  POP    rcx
  CALL   PB_PreferenceGroup
; Shortcut_Run      = ReadPreferenceLong("Run", #PB_Shortcut_F7)
  PUSH   qword 118
  MOV    rax,_S438
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_Shortcut_Run],rax
; Shortcut_Stop     = ReadPreferenceLong("Stop", #PB_Shortcut_F6)
  PUSH   qword 117
  MOV    rax,_S325
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_Shortcut_Stop],rax
; Shortcut_Step     = ReadPreferenceLong("Step", #PB_Shortcut_F8)
  PUSH   qword 119
  MOV    rax,_S439
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_Shortcut_Step],rax
; Shortcut_StepOver = ReadPreferenceLong("StepOver", #PB_Shortcut_F10)
  PUSH   qword 121
  MOV    rax,_S440
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_Shortcut_StepOver],rax
; Shortcut_StepOut  = ReadPreferenceLong("StepOut", #PB_Shortcut_F11)
  PUSH   qword 122
  MOV    rax,_S441
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_Shortcut_StepOut],rax
; 
; PreferenceGroup("Debugger")
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  CALL   PB_PreferenceGroup
; DebuggerMemorizeWindows    = ReadPreferenceLong("MemorizeWindows", 1)
  PUSH   qword 1
  MOV    rax,_S442
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebuggerMemorizeWindows],rax
; IsDebuggerMaximized        = ReadPreferenceLong("IsDebuggerMaximized", 0)
  PUSH   qword 0
  MOV    rax,_S443
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_IsDebuggerMaximized],rax
; DebuggerOnTop              = ReadPreferenceLong("StayOnTop", #DEFAULT_DebuggerStayOnTop)
  PUSH   qword 1
  MOV    rax,_S444
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebuggerOnTop],rax
; DebuggerBringToTop         = ReadPreferenceLong("AutoBringToTop", #DEFAULT_DebuggerBringToTop) 
  PUSH   qword 0
  MOV    rax,_S445
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebuggerBringToTop],rax
; CallDebuggerOnStart        = ReadPreferenceLong("CallOnStart", 0)
  PUSH   qword 0
  MOV    rax,_S446
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_CallDebuggerOnStart],rax
; CallDebuggerOnEnd          = ReadPreferenceLong("CallOnEnd", 0)
  PUSH   qword 0
  MOV    rax,_S447
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_CallDebuggerOnEnd],rax
; LogTimeStamp               = ReadPreferenceLong("LogTimeStamp", 1)
  PUSH   qword 1
  MOV    rax,_S448
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_LogTimeStamp],rax
; WarningMode                = ReadPreferenceLong("WarningMode", 1)
  PUSH   qword 1
  MOV    rax,_S449
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_WarningMode],rax
; DebuggerTimeout            = ReadPreferenceLong("StartupTimeout", 10000)
  PUSH   qword 10000
  MOV    rax,_S450
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebuggerTimeout],rax
; 
; DebugTimeStamp             = ReadPreferenceLong("DebugTimeStamp", 0)
  PUSH   qword 0
  MOV    rax,_S451
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebugTimeStamp],rax
; DebugIsHex                 = ReadPreferenceLong("DebugIsHex", 0)
  PUSH   qword 0
  MOV    rax,_S452
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebugIsHex],rax
; DebugSystemMessages        = ReadPreferenceLong("DebugSystemMessages", 0)
  PUSH   qword 0
  MOV    rax,_S453
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebugSystemMessages],rax
; DebugOutputToErrorLog      = ReadPreferenceLong("DebugOutputToErrorLog", 0)
  PUSH   qword 0
  MOV    rax,_S454
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebugOutputToErrorLog],rax
; DebugOutUseFont            = ReadPreferenceLong("DebugOutUseFont", 0)
  PUSH   qword 0
  MOV    rax,_S455
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebugOutUseFont],rax
; DebugOutFont$              = ReadPreferenceString("DebugOutFont", "")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S3
  PUSH   rax
  MOV    rax,_S456
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ReadPreferenceString
  ADD    rsp,40
  LEA    rcx,[v_DebugOutFont$]
  POP    rdx
  CALL   SYS_AllocateString4
; DebugOutFontSize           = ReadPreferenceLong("DebugOutFontSize", 12)
  PUSH   qword 12
  MOV    rax,_S457
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebugOutFontSize],rax
; DebugOutFontStyle$         = ReadPreferenceString("DebugOutFontStyle", "None")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S434
  PUSH   rax
  MOV    rax,_S458
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ReadPreferenceString
  ADD    rsp,40
  LEA    rcx,[rsp+72]
  POP    rdx
  CALL   SYS_AllocateString4
; DebugWindowX               = ReadPreferenceLong("DebugWindowX", 50)
  PUSH   qword 50
  MOV    rax,_S459
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebugWindowX],rax
; DebugWindowY               = ReadPreferenceLong("DebugWindowY", 50)
  PUSH   qword 50
  MOV    rax,_S460
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebugWindowY],rax
; DebugWindowWidth           = ReadPreferenceLong("DebugWindowWidth", 300)
  PUSH   qword 300
  MOV    rax,_S461
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebugWindowWidth],rax
; DebugWindowHeight          = ReadPreferenceLong("DebugWindowHeight", 300)
  PUSH   qword 300
  MOV    rax,_S462
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebugWindowHeight],rax
; DebugWindowMaximize        = ReadPreferenceLong("DebugWindowMaximize", 0)
  PUSH   qword 0
  MOV    rax,_S463
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebugWindowMaximize],rax
; 
; DebugOutFontStyle = 0
  MOV    qword [v_DebugOutFontStyle],0
; If FindString(UCase(DebugOutFontStyle$),"BOLD",1)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 1
  MOV    rax,_S435
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+120]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_FindString2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  AND    rax,rax
  JE    _EndIf3456
; DebugOutFontStyle | #PB_Font_Bold
  MOV    r15,qword [v_DebugOutFontStyle]
  OR     r15,256
  MOV    qword [v_DebugOutFontStyle],r15
; EndIf
_EndIf3456:
; If FindString(UCase(DebugOutFontStyle$),"ITALIC",1)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 1
  MOV    rax,_S436
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+120]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_FindString2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  AND    rax,rax
  JE    _EndIf3458
; DebugOutFontStyle | #PB_Font_Italic
  MOV    r15,qword [v_DebugOutFontStyle]
  OR     r15,512
  MOV    qword [v_DebugOutFontStyle],r15
; EndIf      
_EndIf3458:
; 
; If DebugOutFont$ = "" Or DebugOutUseFont = 0
  PUSH   qword [v_DebugOutFont$]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    Ok347
  MOV    r15,qword [v_DebugOutUseFont]
  AND    r15,r15
  JE     Ok347
  JMP    No347
Ok347:
  MOV    rax,1
  JMP    End347
No347:
  XOR    rax,rax
End347:
  AND    rax,rax
  JE    _EndIf3460
; DebugOutFontID = #PB_Default
  MOV    qword [v_DebugOutFontID],-1
; Else
  JMP   _EndIf3459
_EndIf3460:
; DebugOutFontID = FontID(LoadFont(#PB_Any, DebugOutFont$, DebugOutFontSize, DebugOutFontStyle))
  PUSH   qword [v_DebugOutFontStyle]
  PUSH   qword [v_DebugOutFontSize]
  PUSH   qword [v_DebugOutFont$]
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_LoadFont2
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_FontID
  MOV    qword [v_DebugOutFontID],rax
; EndIf           
_EndIf3459:
; 
; RegisterIsHex              = ReadPreferenceLong("RegisterIsHex", 0)
  PUSH   qword 0
  MOV    rax,_S464
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_RegisterIsHex],rax
; StackIsHex                 = ReadPreferenceLong("StackIsHex", 0)
  PUSH   qword 0
  MOV    rax,_S465
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_StackIsHex],rax
; AutoStackUpdate            = ReadPreferenceLong("AutoStackUpdate", 1)
  PUSH   qword 1
  MOV    rax,_S466
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_AutoStackUpdate],rax
; AsmWindowX                 = ReadPreferenceLong("AsmWindowX", 50)
  PUSH   qword 50
  MOV    rax,_S467
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_AsmWindowX],rax
; AsmWindowY                 = ReadPreferenceLong("AsmWindowY", 50)
  PUSH   qword 50
  MOV    rax,_S468
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_AsmWindowY],rax
; AsmWindowWidth             = ReadPreferenceLong("AsmWindowWidth", 370)
  PUSH   qword 370
  MOV    rax,_S469
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_AsmWindowWidth],rax
; AsmWindowHeight            = ReadPreferenceLong("AsmWindowHeight", 370)
  PUSH   qword 370
  MOV    rax,_S470
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_AsmWindowHeight],rax
; AsmWindowMaximize          = ReadPreferenceLong("AsmWindowMaximize", 0)
  PUSH   qword 0
  MOV    rax,_S471
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_AsmWindowMaximize],rax
; 
; MemoryDisplayType          = ReadPreferenceLong("MemoryDisplayType", 0)
  PUSH   qword 0
  MOV    rax,_S472
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_MemoryDisplayType],rax
; MemoryIsHex                = ReadPreferenceLong("MemoryIsHex", 0)
  PUSH   qword 0
  MOV    rax,_S473
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_MemoryIsHex],rax
; MemoryOneColumnOnly        = ReadPreferenceLong("MemoryOneColumnOnly", 0)
  PUSH   qword 0
  MOV    rax,_S474
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_MemoryOneColumnOnly],rax
; MemoryViewerX              = ReadPreferenceLong("MemoryViewerX", 50)
  PUSH   qword 50
  MOV    rax,_S475
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_MemoryViewerX],rax
; MemoryViewerY              = ReadPreferenceLong("MemoryViewerY", 50)
  PUSH   qword 50
  MOV    rax,_S476
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_MemoryViewerY],rax
; MemoryViewerWidth          = ReadPreferenceLong("MemoryViewerWidth", 700)
  PUSH   qword 700
  MOV    rax,_S477
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_MemoryViewerWidth],rax
; MemoryViewerHeight         = ReadPreferenceLong("MemoryViewerHeight", 300) 
  PUSH   qword 300
  MOV    rax,_S478
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_MemoryViewerHeight],rax
; MemoryViewerMaximize       = ReadPreferenceLong("MemoryViewerMaximize", 0) 
  PUSH   qword 0
  MOV    rax,_S479
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_MemoryViewerMaximize],rax
; 
; VariableIsHex              = ReadPreferenceLong("VariableIsHex", 0)
  PUSH   qword 0
  MOV    rax,_S480
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_VariableIsHex],rax
; VariableWindowX            = ReadPreferenceLong("VariableWindowX", 100)
  PUSH   qword 100
  MOV    rax,_S481
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_VariableWindowX],rax
; VariableWindowY            = ReadPreferenceLong("VariableWindowY", 100)
  PUSH   qword 100
  MOV    rax,_S482
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_VariableWindowY],rax
; VariableWindowWidth        = ReadPreferenceLong("VariableWindowWidth", 600)
  PUSH   qword 600
  MOV    rax,_S483
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_VariableWindowWidth],rax
; VariableWindowHeight       = ReadPreferenceLong("VariableWindowHeight", 400)
  PUSH   qword 400
  MOV    rax,_S484
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_VariableWindowHeight],rax
; VariableViewerMaximize     = ReadPreferenceLong("VariableViewerMaximize", 0)
  PUSH   qword 0
  MOV    rax,_S485
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_VariableViewerMaximize],rax
; 
; HistoryWindowX             = ReadPreferenceLong("HistoryWindowX", 80)
  PUSH   qword 80
  MOV    rax,_S486
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_HistoryWindowX],rax
; HistoryWindowY             = ReadPreferenceLong("HistoryWindowY", 80)
  PUSH   qword 80
  MOV    rax,_S487
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_HistoryWindowY],rax
; HistoryWindowWidth         = ReadPreferenceLong("HistoryWindowWidth", 500)
  PUSH   qword 500
  MOV    rax,_S488
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_HistoryWindowWidth],rax
; HistoryWindowHeight        = ReadPreferenceLong("HistoryWindowHeight", 500)
  PUSH   qword 500
  MOV    rax,_S489
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_HistoryWindowHeight],rax
; HistoryMaximize            = ReadPreferenceLong("HistoryMaximize", 0)
  PUSH   qword 0
  MOV    rax,_S490
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_HistoryMaximize],rax
; 
; WatchListWindowX           = ReadPreferenceLong("WatchListWindowX", 50)
  PUSH   qword 50
  MOV    rax,_S491
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_WatchListWindowX],rax
; WatchListWindowY           = ReadPreferenceLong("WatchListWindowY", 50)
  PUSH   qword 50
  MOV    rax,_S492
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_WatchListWindowY],rax
; WatchListWindowWidth       = ReadPreferenceLong("WatchListWindowWidth", 700)
  PUSH   qword 700
  MOV    rax,_S493
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_WatchListWindowWidth],rax
; WatchListWindowHeight      = ReadPreferenceLong("WatchListWindowHeight", 300) 
  PUSH   qword 300
  MOV    rax,_S494
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_WatchListWindowHeight],rax
; WatchListWindowMaximize    = ReadPreferenceLong("WatchListWindowMaximize", 0)
  PUSH   qword 0
  MOV    rax,_S495
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_WatchListWindowMaximize],rax
; 
; LibraryViewerX             = ReadPreferenceLong("LibraryViewerX", 20)
  PUSH   qword 20
  MOV    rax,_S496
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_LibraryViewerX],rax
; LibraryViewerY             = ReadPreferenceLong("LibraryViewerY", 20)
  PUSH   qword 20
  MOV    rax,_S497
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_LibraryViewerY],rax
; LibraryViewerWidth         = ReadPreferenceLong("LibraryViewerWidth", 600)
  PUSH   qword 600
  MOV    rax,_S498
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_LibraryViewerWidth],rax
; LibraryViewerHeight        = ReadPreferenceLong("LibraryViewerHeight", 440) 
  PUSH   qword 440
  MOV    rax,_S499
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_LibraryViewerHeight],rax
; LibraryViewerSplitter2     = ReadPreferenceLong("LibraryViewerSplitter1", 300)
  PUSH   qword 300
  MOV    rax,_S500
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_LibraryViewerSplitter2],rax
; LibraryViewerSplitter3     = ReadPreferenceLong("LibraryViewerSplitter2", 130)        
  PUSH   qword 130
  MOV    rax,_S501
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [rsp+72],rax
; LibraryViewerMaximize      = ReadPreferenceLong("LibraryViewerMaximize", 0)        
  PUSH   qword 0
  MOV    rax,_S502
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_LibraryViewerMaximize],rax
; 
; IsMiniDebugger             = ReadPreferenceLong("IsMiniDebugger", 0)
  PUSH   qword 0
  MOV    rax,_S503
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_IsMiniDebugger],rax
; DebuggerMainWindowX        = ReadPreferenceLong("DebuggerMainWindowX", 80)
  PUSH   qword 80
  MOV    rax,_S504
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebuggerMainWindowX],rax
; DebuggerMainWindowY        = ReadPreferenceLong("DebuggerMainWindowY", 80)
  PUSH   qword 80
  MOV    rax,_S505
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebuggerMainWindowY],rax
; DebuggerMainWindowWidth    = ReadPreferenceLong("DebuggerMainWindowWidth", 600)
  PUSH   qword 600
  MOV    rax,_S506
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebuggerMainWindowWidth],rax
; DebuggerMainWindowHeight   = ReadPreferenceLong("DebuggerMainWindowHeight", 500)          
  PUSH   qword 500
  MOV    rax,_S507
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DebuggerMainWindowHeight],rax
; 
; AutoOpenDebugOutput        = ReadPreferenceLong("AutoOpenDebugOutput", 0)
  PUSH   qword 0
  MOV    rax,_S508
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_AutoOpenDebugOutput],rax
; AutoOpenAsmWindow          = ReadPreferenceLong("AutoOpenAsmWindow", 0)
  PUSH   qword 0
  MOV    rax,_S509
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_AutoOpenAsmWindow],rax
; AutoOpenMemoryViewer       = ReadPreferenceLong("AutoOpenMemoryViewer", 0)
  PUSH   qword 0
  MOV    rax,_S510
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_AutoOpenMemoryViewer],rax
; AutoOpenVariableViewer     = ReadPreferenceLong("AutoOpenVariableViewer", 0)
  PUSH   qword 0
  MOV    rax,_S511
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_AutoOpenVariableViewer],rax
; AutoOpenHistory            = ReadPreferenceLong("AutoOpenHistory", 0)
  PUSH   qword 0
  MOV    rax,_S512
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_AutoOpenHistory],rax
; AutoOpenWatchlist          = ReadPreferenceLong("AutoOpenWatchlist", 0)
  PUSH   qword 0
  MOV    rax,_S513
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_AutoOpenWatchlist],rax
; AutoOpenLibraryViewer      = ReadPreferenceLong("AutoOpenLibraryViewer", 0)
  PUSH   qword 0
  MOV    rax,_S514
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_AutoOpenLibraryViewer],rax
; AutoOpenDataBreakpoints    = ReadPreferenceLong("AutoOpenDataBreakpoints", 0)
  PUSH   qword 0
  MOV    rax,_S515
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_AutoOpenDataBreakpoints],rax
; AutoOpenPurifier           = ReadPreferenceLong("AutoOpenPurifier", 0)
  PUSH   qword 0
  MOV    rax,_S516
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_AutoOpenPurifier],rax
; 
; AutoOpenProfiler           = ReadPreferenceLong("AutoOpenProfiler", 0)
  PUSH   qword 0
  MOV    rax,_S517
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_AutoOpenProfiler],rax
; ProfilerRunAtStart         = ReadPreferenceLong("ProfilerRunAtStart", 1)
  PUSH   qword 1
  MOV    rax,_S518
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_ProfilerRunAtStart],rax
; ProfilerX                  = ReadPreferenceLong("ProfilerX", 50)
  PUSH   qword 50
  MOV    rax,_S519
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_ProfilerX],rax
; ProfilerY                  = ReadPreferenceLong("ProfilerY", 50)
  PUSH   qword 50
  MOV    rax,_S520
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_ProfilerY],rax
; ProfilerWidth              = ReadPreferenceLong("ProfilerWidth", 600)
  PUSH   qword 600
  MOV    rax,_S521
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_ProfilerWidth],rax
; ProfilerHeight             = ReadPreferenceLong("ProfilerHeight", 400)
  PUSH   qword 400
  MOV    rax,_S522
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_ProfilerHeight],rax
; ProfilerSplitter           = ReadPreferenceLong("ProfilerSplitter", 340)
  PUSH   qword 340
  MOV    rax,_S523
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_ProfilerSplitter],rax
; ProfilerMaximize           = ReadPreferenceLong("ProfilerMaximize", 0)
  PUSH   qword 0
  MOV    rax,_S524
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_ProfilerMaximize],rax
; 
; DataBreakpointWindowX      = ReadPreferenceLong("DataBreakpointWindowX", 75)
  PUSH   qword 75
  MOV    rax,_S525
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DataBreakpointWindowX],rax
; DataBreakpointWindowY      = ReadPreferenceLong("DataBreakpointWindowY", 75)
  PUSH   qword 75
  MOV    rax,_S526
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DataBreakpointWindowY],rax
; DataBreakpointWindowWidth  = ReadPreferenceLong("DataBreakpointWindowWidth", 700)
  PUSH   qword 700
  MOV    rax,_S527
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DataBreakpointWindowWidth],rax
; DataBreakpointWindowHeight = ReadPreferenceLong("DataBreakpointWindowHeight", 300)
  PUSH   qword 300
  MOV    rax,_S528
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DataBreakpointWindowHeight],rax
; DataBreakpointWindowMaximize = ReadPreferenceLong("DataBreakpointWindowMaximize", 0)
  PUSH   qword 0
  MOV    rax,_S529
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_DataBreakpointWindowMaximize],rax
; 
; PurifierWindowX            = ReadPreferenceLong("PurifierWindowX", 50)
  PUSH   qword 50
  MOV    rax,_S530
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_PurifierWindowX],rax
; PurifierWindowY            = ReadPreferenceLong("PurifierWindowY", 50)
  PUSH   qword 50
  MOV    rax,_S531
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [v_PurifierWindowY],rax
; 
; 
; PreferenceGroup("CustomKeywords")
  MOV    rax,_S532
  PUSH   rax
  POP    rcx
  CALL   PB_PreferenceGroup
; CustomKeywordFile$         = ReadPreferenceString("File", "")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S3
  PUSH   rax
  MOV    rax,_S270
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ReadPreferenceString
  ADD    rsp,40
  LEA    rcx,[v_CustomKeywordFile$]
  POP    rdx
  CALL   SYS_AllocateString4
; Count                      = ReadPreferenceLong  ("Count", 0)
  PUSH   qword 0
  MOV    rax,_S533
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_ReadPreferenceLong
  MOV    qword [rsp+80],rax
; 
; ClearList(CustomKeywordList())
  PUSH   qword [t_CustomKeywordList]
  POP    rcx
  CALL   PB_ClearList
; For i = 1 To count
  MOV    qword [rsp+88],1
  JMP   _ForSkipDebug3462
_For3462:
_ForSkipDebug3462:
  MOV    rax,qword [rsp+80]
  CMP    rax,qword [rsp+88]
  JL    _Next3463
; AddElement(CustomKeywordList())
  PUSH   qword [t_CustomKeywordList]
  POP    rcx
  CALL   PB_AddElement
; CustomKeywordList() = ReadPreferenceString("W"+Str(i), "")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S534
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+144]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ReadPreferenceString
  ADD    rsp,40
  MOV    rbp,qword [t_CustomKeywordList+8]
  LEA    rcx,[rbp+16]
  POP    rdx
  CALL   SYS_AllocateString4
; Next i
_NextContinue3463:
  INC    qword [rsp+88]
  JNO   _For3462
_Next3463:
; 
; BuildCustomKeywordTable()
  CALL  _Procedure222
; 
; 
; ClosePreferences()
  CALL   PB_ClosePreferences
; 
; EndProcedure
_EndProcedureZero647:
  XOR    rax,rax
_EndProcedure647:
  PUSH   rax
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+72]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  PUSH   qword [rsp+48]
  POP    rcx
  SUB    rsp,40
  CALL   PB_FreeList
  ADD    rsp,40
  POP    rax
  ADD    rsp,104
  POP    r15
  POP    rbp
  RET
; Procedure.s VariableListElement(*Debugger.DebuggerData, Gadget, index)
_Procedure496:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS496=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS496+32]
  MOV    qword [PB_StringBasePosition],rax
; Shared *VariableGadget_Used.VariableGadget 
; 
; If Gadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global] Or Gadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Local] Or Gadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer]
  MOV    r15,qword [rsp+PS496+8]
  MOV    rbp,qword [rsp+PS496+0]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2352]
  JE     Ok236
  MOV    r15,qword [rsp+PS496+8]
  MOV    rbp,qword [rsp+PS496+0]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2360]
  JE     Ok236
  MOV    r15,qword [rsp+PS496+8]
  MOV    rbp,qword [rsp+PS496+0]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2472]
  JE     Ok236
  JMP    No236
Ok236:
  MOV    rax,1
  JMP    End236
No236:
  XOR    rax,rax
End236:
  AND    rax,rax
  JE    _EndIf2029
; 
; 
; index = VariableGadget_GadgetIndexToReal(Gadget, index)
  PUSH   qword [rsp+PS496+16]
  PUSH   qword [rsp+PS496+16]
  POP    rcx
  POP    rdx
  CALL  _Procedure302
  MOV    qword [rsp+PS496+16],rax
; VariableGadget_Use(Gadget)
  PUSH   qword [rsp+PS496+8]
  POP    rcx
  CALL  _Procedure290
; *items.VariableGadget_ItemList = *VariableGadget_Used\Items   
  MOV    rbp,qword [p_VariableGadget_Used]
  PUSH   qword [rbp+16]
  POP    rax
  MOV    qword [rsp+40],rax
; 
; If *items\item[index]\Sublevel > 0 
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS496+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+4]
  AND    r15,r15
  JLE   _EndIf2031
; Subitem$ = "\" + StringField(Trim(*items\item[index]\Name$), 1, ".") 
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S4
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S52
  PUSH   rax
  PUSH   qword 1
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+PS496+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+10]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; If *items\item[index]\Kind <> 0
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS496+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,byte [rbp]
  AND    r15,r15
  JE    _EndIf2033
; 
; 
; Subitem$ + "()" 
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S244
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf      
_EndIf2033:
; 
; x = index
  PUSH   qword [rsp+PS496+16]
  POP    rax
  MOV    qword [rsp+56],rax
; While *items\item[x]\Sublevel > 0 And x >= 0                
_While2034:
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+64]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+4]
  AND    r15,r15
  JLE    No237
  MOV    r15,qword [rsp+56]
  AND    r15,r15
  JL     No237
Ok237:
  MOV    rax,1
  JMP    End237
No237:
  XOR    rax,rax
End237:
  AND    rax,rax
  JE    _Wend2034
; 
; Sublevel = *items\item[x]\Sublevel
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+64]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  rax,word [rbp+4]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+64],rax
; While *items\item[x]\Sublevel >= SubLevel And x >= 0: x - 1: Wend              
_While2035:
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+64]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+4]
  CMP    r15,qword [rsp+64]
  JL     No238
  MOV    r15,qword [rsp+56]
  AND    r15,r15
  JL     No238
Ok238:
  MOV    rax,1
  JMP    End238
No238:
  XOR    rax,rax
End238:
  AND    rax,rax
  JE    _Wend2035
  MOV    r15,qword [rsp+56]
  DEC    r15
  MOV    qword [rsp+56],r15
  JMP   _While2035
_Wend2035:
; If x <> -1
  MOV    r15,qword [rsp+56]
  CMP    r15,-1
  JE    _EndIf2037
; If *items\item[x]\Sublevel = 0 
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+64]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+4]
  AND    r15,r15
  JNE   _EndIf2039
; 
; BaseItem$ = Trim(*items\item[x]\Name$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+10]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,40
  LEA    rcx,[rsp+80]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf2038
_EndIf2039:
; Subitem$ = "\" + StringField(Trim(*items\item[x]\Name$), 1, ".") + Subitem$
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S4
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S52
  PUSH   rax
  PUSH   qword 1
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+120]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+10]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,32
  POP    rax
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf2038:
; EndIf
_EndIf2037:
; Wend     
  JMP   _While2034
_Wend2034:
; Else
  JMP   _EndIf2030
_EndIf2031:
; BaseItem$ = Trim(*items\item[index]\Name$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+PS496+48]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+10]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,40
  LEA    rcx,[rsp+80]
  POP    rdx
  CALL   SYS_AllocateString4
; SubItem$ = ""
  MOV    rdx,_S3
  LEA    rcx,[rsp+48]
  CALL   SYS_FastAllocateStringFree4
; EndIf
_EndIf2030:
; 
; If FindString(BaseItem$, "(", 1) = 0
  PUSH   qword 1
  MOV    rax,_S93
  PUSH   rax
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_FindString2
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf2043
; 
; BaseItem$ = StringField(BaseItem$, 1, ".")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S52
  PUSH   rax
  PUSH   qword 1
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  LEA    rcx,[rsp+80]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf2043:
; 
; Debug "Resolved element name: " + BaseItem$ + SubItem$
; ProcedureReturn BaseItem$ + SubItem$ 
  MOV    rcx,qword [rsp+72]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure497
; 
; Else
  JMP   _EndIf2028
_EndIf2029:
; 
; 
; Name$ = GetGadgetItemText(Gadget, index, 1)   
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+PS496+48]
  PUSH   qword [rsp+PS496+48]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_GetGadgetItemText2
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; Name$ = Left(Name$, FindString(Name$, "(", 0)-1)  
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  MOV    rax,_S93
  PUSH   rax
  PUSH   qword [rsp+128]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_FindString2
  ADD    rsp,40
  MOV    r15,rax
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; If FindString(Name$, ".", 1) 
  PUSH   qword 1
  MOV    rax,_S52
  PUSH   rax
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_FindString2
  AND    rax,rax
  JE    _EndIf2046
; Name$ = Left(Name$, FindString(Name$, ".", 0)-1)  
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  MOV    rax,_S52
  PUSH   rax
  PUSH   qword [rsp+128]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_FindString2
  ADD    rsp,40
  MOV    r15,rax
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf2046:
; Name$ + "()" 
  MOV    rcx,qword [rsp+80]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S244
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; ProcedureReturn Name$
  MOV    rcx,qword [rsp+80]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure497
; EndIf
_EndIf2028:
; 
; EndProcedure
_EndProcedureZero497:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure497:
  PUSH   rax
  MOV    rcx,qword [rsp+88]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+80]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure IsAPIFunction(*Word, length)
_Procedure224:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS224=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Result = -1
  MOV    qword [rsp+40],-1
; 
; If length > 2 And PeekB(*Word+length-1) = '_'
  MOV    r15,qword [rsp+PS224+8]
  CMP    r15,2
  JLE    No26
  MOV    r15,qword [rsp+PS224+0]
  ADD    r15,qword [rsp+PS224+8]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_PeekB
  MOV    r15,rax
  CMP    r15,95
  JNE    No26
Ok26:
  MOV    rax,1
  JMP    End26
No26:
  XOR    rax,rax
End26:
  AND    rax,rax
  JE    _EndIf432
; length - 1
  MOV    r15,qword [rsp+PS224+8]
  DEC    r15
  MOV    qword [rsp+PS224+8],r15
; 
; k = APIFunctionsHT(ByteUcase(PeekB(*Word)))  
  PUSH   qword [rsp+PS224+0]
  POP    rcx
  CALL   PB_PeekB
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure216
  MOV    r15,rax
  MOV    rbp,qword [a_APIFunctionsHT]
  SAL    r15,2
  MOVSXD rax,dword [rbp+r15]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+48],rax
; If k
  CMP    qword [rsp+48],0
  JE    _EndIf434
; k-1
  MOV    r15,qword [rsp+48]
  DEC    r15
  MOV    qword [rsp+48],r15
; While Quit = 0 And k < NbAPIFunctions
_While435:
  MOV    r15,qword [rsp+56]
  AND    r15,r15
  JNE    No27
  MOV    r15,qword [rsp+48]
  CMP    r15,qword [v_NbApiFunctions]
  JGE    No27
Ok27:
  MOV    rax,1
  JMP    End27
No27:
  XOR    rax,rax
End27:
  AND    rax,rax
  JE    _Wend435
; If APIFunctions(k)\Name$ = ""
  MOV    r15,qword [rsp+48]
  MOV    rbp,qword [a_APIFunctions]
  IMUL   r15,280
  ADD    rbp,r15
  PUSH   qword [rbp]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf437
; Quit = 1
  MOV    qword [rsp+56],1
; Else
  JMP   _EndIf436
_EndIf437:
; Compare = CompareMemoryString(APIFunctions(k)\Ascii, *Word, 1, length, #PB_Ascii)  
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+PS224+24]
  PUSH   qword 1
  PUSH   qword [rsp+PS224+32]
  MOV    r15,qword [rsp+88]
  MOV    rbp,qword [a_APIFunctions]
  IMUL   r15,280
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_CompareMemoryString4
  ADD    rsp,48
  MOV    qword [rsp+64],rax
; 
; If Compare <= 0
  MOV    r15,qword [rsp+64]
  AND    r15,r15
  JG    _EndIf440
; If Compare = 0 And length = MemoryAsciiLength(APIFunctions(k)\Ascii) 
  MOV    r15,qword [rsp+64]
  AND    r15,r15
  JNE    No28
  MOV    r15,qword [rsp+PS224+8]
  PUSH   qword 24
  MOV    r14,qword [rsp+56]
  MOV    rbp,qword [a_APIFunctions]
  IMUL   r14,280
  ADD    rbp,r14
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  CALL   PB_MemoryStringLength2
  CMP    r15,rax
  JNE    No28
Ok28:
  MOV    rax,1
  JMP    End28
No28:
  XOR    rax,rax
End28:
  AND    rax,rax
  JE    _EndIf442
; Result = k
  PUSH   qword [rsp+48]
  POP    rax
  MOV    qword [rsp+40],rax
; Quit   = 1
  MOV    qword [rsp+56],1
; EndIf
_EndIf442:
; Else
  JMP   _EndIf439
_EndIf440:
; Quit = 1
  MOV    qword [rsp+56],1
; EndIf
_EndIf439:
; EndIf
_EndIf436:
; 
; k+1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; Wend
  JMP   _While435
_Wend435:
; EndIf
_EndIf434:
; 
; EndIf
_EndIf432:
; 
; ProcedureReturn Result
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure225
; EndProcedure
_EndProcedureZero225:
  XOR    rax,rax
_EndProcedure225:
  ADD    rsp,80
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure FindBreakpoint(Line)
_Procedure688:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS688=64
  SUB    rsp,40
; ForEach BreakPoints()
  MOV    rcx,qword [t_Breakpoints]
  CALL   PB_ResetList
_ForEach3617:
  MOV    rcx,qword [t_Breakpoints]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next3617
; If Breakpoints() = Line
  MOV    rbp,qword [t_Breakpoints+8]
  MOVSXD r15,dword [rbp+16]
  CMP    r15,qword [rsp+PS688+0]
  JNE   _EndIf3619
; ProcedureReturn 1
  MOV    rax,1
  JMP   _EndProcedure689
; EndIf
_EndIf3619:
; Next Breakpoints()
  JMP   _ForEach3617
_Next3617:
; 
; ProcedureReturn 0  
  XOR    rax,rax
  JMP   _EndProcedure689
; EndProcedure
_EndProcedureZero689:
  XOR    rax,rax
_EndProcedure689:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure UpdatePurifierLines(*Debugger.DebuggerData)
_Procedure610:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS610=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Modified = 0
  MOV    qword [rsp+40],0
; 
; State = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarGlobal])
  MOV    rbp,qword [rsp+PS610+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3040]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    qword [rsp+48],rax
; Select State
  PUSH   qword [rsp+48]
; Case 0
  XOR    r15,r15
  CMP    r15,[rsp]
  JNE   _Case266
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesGlobal], Language("Debugger","CheckAlways"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S328
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS610+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3048]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Case #MAX_PurifierState
  JMP   _EndSelect40
_Case266:
  MOV    r15,14
  CMP    r15,[rsp]
  JNE   _Case267
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesGlobal], Language("Debugger","CheckNever"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S329
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS610+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3048]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Default
  JMP   _EndSelect40
_Case267:
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesGlobal], ReplaceString(Language("Debugger","CheckLines"), "%lines%", Str(1<<State)))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+104]
  MOV    rcx,r15
  MOV    rax,1
  SAL    rax,cl
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S331
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S330
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ReplaceString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS610+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3048]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; EndSelect
_Case268:
_EndSelect40:
  POP    rax
; 
; If GranularityFromState(State) <> *Debugger\PurifierGlobal
  PUSH   qword [rsp+48]
  POP    rcx
  CALL  _Procedure606
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS610+0]
  MOVSXD rax,dword [rbp+756]
  CMP    r15,rax
  JE    _EndIf3233
; Modified = 1
  MOV    qword [rsp+40],1
; EndIf    
_EndIf3233:
; 
; State = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarLocal])
  MOV    rbp,qword [rsp+PS610+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3064]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    qword [rsp+48],rax
; Select State
  PUSH   qword [rsp+48]
; Case 0
  XOR    r15,r15
  CMP    r15,[rsp]
  JNE   _Case269
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesLocal], Language("Debugger","CheckAlways"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S328
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS610+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3072]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Case #MAX_PurifierState
  JMP   _EndSelect41
_Case269:
  MOV    r15,14
  CMP    r15,[rsp]
  JNE   _Case270
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesLocal], Language("Debugger","CheckNever"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S329
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS610+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3072]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Default
  JMP   _EndSelect41
_Case270:
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesLocal], ReplaceString(Language("Debugger","CheckLines"), "%lines%", Str(1<<State)))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+104]
  MOV    rcx,r15
  MOV    rax,1
  SAL    rax,cl
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S331
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S330
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ReplaceString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS610+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3072]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; EndSelect
_Case271:
_EndSelect41:
  POP    rax
; 
; If GranularityFromState(State) <> *Debugger\PurifierLocal
  PUSH   qword [rsp+48]
  POP    rcx
  CALL  _Procedure606
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS610+0]
  MOVSXD rax,dword [rbp+760]
  CMP    r15,rax
  JE    _EndIf3235
; Modified = 1
  MOV    qword [rsp+40],1
; EndIf
_EndIf3235:
; 
; State = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarString])
  MOV    rbp,qword [rsp+PS610+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3088]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    qword [rsp+48],rax
; Select State
  PUSH   qword [rsp+48]
; Case 0
  XOR    r15,r15
  CMP    r15,[rsp]
  JNE   _Case272
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesString], Language("Debugger","CheckAlways"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S328
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS610+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3096]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Case #MAX_PurifierState
  JMP   _EndSelect42
_Case272:
  MOV    r15,14
  CMP    r15,[rsp]
  JNE   _Case273
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesString], Language("Debugger","CheckNever"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S329
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS610+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3096]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Default
  JMP   _EndSelect42
_Case273:
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesString], ReplaceString(Language("Debugger","CheckLines"), "%lines%", Str(1<<State)))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+104]
  MOV    rcx,r15
  MOV    rax,1
  SAL    rax,cl
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S331
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S330
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ReplaceString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS610+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3096]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; EndSelect
_Case274:
_EndSelect42:
  POP    rax
; 
; If GranularityFromState(State) <> *Debugger\PurifierString
  PUSH   qword [rsp+48]
  POP    rcx
  CALL  _Procedure606
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS610+0]
  MOVSXD rax,dword [rbp+764]
  CMP    r15,rax
  JE    _EndIf3237
; Modified = 1
  MOV    qword [rsp+40],1
; EndIf
_EndIf3237:
; 
; State = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarDynamic])
  MOV    rbp,qword [rsp+PS610+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3112]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    qword [rsp+48],rax
; Select State
  PUSH   qword [rsp+48]
; Case 0 
  XOR    r15,r15
  CMP    r15,[rsp]
  JNE   _Case275
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesDynamic], Language("Debugger","CheckAlways"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S328
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS610+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3120]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Case #MAX_PurifierState
  JMP   _EndSelect43
_Case275:
  MOV    r15,14
  CMP    r15,[rsp]
  JNE   _Case276
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesDynamic], Language("Debugger","CheckNever"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S329
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS610+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3120]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Default
  JMP   _EndSelect43
_Case276:
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesDynamic], ReplaceString(Language("Debugger","CheckLines"), "%lines%", Str(1<<State)))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+104]
  MOV    rcx,r15
  MOV    rax,1
  SAL    rax,cl
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S331
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S330
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ReplaceString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS610+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3120]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; EndSelect
_Case277:
_EndSelect43:
  POP    rax
; 
; If GranularityFromState(State) <> *Debugger\PurifierDynamic
  PUSH   qword [rsp+48]
  POP    rcx
  CALL  _Procedure606
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS610+0]
  MOVSXD rax,dword [rbp+768]
  CMP    r15,rax
  JE    _EndIf3239
; Modified = 1
  MOV    qword [rsp+40],1
; EndIf
_EndIf3239:
; 
; If Modified
  CMP    qword [rsp+40],0
  JE    _EndIf3241
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Apply], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS610+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3144]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; Else
  JMP   _EndIf3240
_EndIf3241:
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Apply], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS610+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3144]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; EndIf
_EndIf3240:
; EndProcedure
_EndProcedureZero611:
  XOR    rax,rax
_EndProcedure611:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure StopGadgetFlickerFix(Gadget)
_Procedure132:
  MOV    qword [rsp+8],rcx
  PS132=48
  SUB    rsp,40
; SendMessage_(GadgetID(Gadget), #WM_SETREDRAW, #True, 0)
  PUSH   qword 0
  PUSH   qword 1
  PUSH   qword 11
  SUB    rsp,8
  PUSH   qword [rsp+PS132+32]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; InvalidateRect_(GadgetID(Gadget), #Null, #True)
  PUSH   qword 1
  PUSH   qword 0
  PUSH   qword [rsp+PS132+16]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   InvalidateRect
; EndProcedure
_EndProcedureZero133:
  XOR    rax,rax
_EndProcedure133:
  ADD    rsp,40
  RET
; Procedure Network_SendError(Socket, Key$, Message$)
_Procedure380:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PS380=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS380+8]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
  MOV    rdx,[rsp+PS380+16]
  LEA    rcx,[rsp+48]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; Response$ = "ERROR " + Str(#PB_Compiler_Version) + " " + Key$ + #LF$
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S109
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 570
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S25
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; Response$ + "  Message: " + Message$ + #LF$
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S110
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; Response$ + #LF$
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; Network_SendString(Socket, Response$)
  SUB    rsp,8
  SUB    rsp,8
  MOV    rcx,qword [rsp+72]
  SUB    rsp,32
  CALL   SYS_ToAscii
  ADD    rsp,32
  PUSH   rax
  MOV    qword [rsp+16],rax
  PUSH   qword [rsp+PS380+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   Network_SendString
  ADD    rsp,40
  PUSH   rax
  MOV    rcx,[rsp+8]
  SUB    rsp,32
  CALL   SYS_FreeStringNoCheck
  ADD    rsp,32
  POP    rax
  ADD    rsp,8
; EndProcedure
_EndProcedureZero381:
  XOR    rax,rax
_EndProcedure381:
  PUSH   rax
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,72
  RET
; Procedure ResizePurifierWindow(*Debugger.DebuggerData)
_Procedure620:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS620=160
  MOV    rax,11
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; 
; 
; FrameOffset = Frame3DTopOffset(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Frame])
  MOV    rbp,qword [rsp+PS620+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3024]
  POP    rcx
  CALL  _Procedure94
  MOV    qword [rsp+40],rax
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TextGlobal], @TextWidth, @TextHeight)
  PUSH   qword 0
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS620+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3032]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; TextWidth = Max(TextWidth, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TextLocal]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS620+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3056]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+48],rax
; TextWidth = Max(TextWidth, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TextString]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS620+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3080]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+48],rax
; TextWidth = Max(TextWidth, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TextDynamic]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS620+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3104]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+48],rax
; LinesWidth = Max(GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesGlobal]), GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesLocal]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS620+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3072]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS620+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3048]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure90
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+64],rax
; LinesWidth = Max(LinesWidth, 80)
  PUSH   qword 80
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+64],rax
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Ok], @ButtonWidth, @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+88]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+88]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS620+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3128]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; ButtonWidth = Max(ButtonWidth, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Cancel]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS620+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3136]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+72],rax
; ButtonWidth = Max(ButtonWidth, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Apply]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS620+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3144]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+72],rax
; ButtonWidth = Max(ButtonWidth, 90)
  PUSH   qword 90
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+72],rax
; TrackbarHeight = Max(TextHeight, 30)
  PUSH   qword 30
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+88],rax
; 
; Width  = 350 + LinesWidth + 40           
  MOV    r15,qword [rsp+64]
  ADD    r15,390
  MOV    qword [rsp+96],r15
; Width  = Max(Width, TextWidth + 40)      
  MOV    r15,qword [rsp+48]
  ADD    r15,40
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+96],rax
; Width  = Max(Width, ButtonWidth * 3 + 30)
  MOV    r15,qword [rsp+72]
  IMUL   r15,3
  ADD    r15,30
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+96],rax
; Height = 65 + FrameOffset + (TextHeight + TrackbarHeight + 15) * 4 + ButtonHeight
  MOV    r15,qword [rsp+40]
  MOV    r14,qword [rsp+56]
  ADD    r14,qword [rsp+88]
  ADD    r14,15
  SAL    r14,2
  ADD    r15,r14
  ADD    r15,qword [rsp+80]
  ADD    r15,65
  MOV    qword [rsp+104],r15
; 
; ResizeWindow(*Debugger\Windows[#DEBUGGER_WINDOW_Purifier], #PB_Ignore, #PB_Ignore, Width, Height)
  SUB    rsp,8
  PUSH   qword [rsp+112]
  PUSH   qword [rsp+112]
  PUSH   qword -65535
  PUSH   qword -65535
  MOV    rbp,qword [rsp+PS620+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+904]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeWindow
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Frame], 10, 10, Width-20, Height-40-ButtonHeight)
  SUB    rsp,8
  MOV    r15,qword [rsp+112]
  SUB    r15,qword [rsp+88]
  ADD    r15,-40
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+112]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS620+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3024]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; Top = 25 + FrameOffset
  MOV    r15,qword [rsp+40]
  ADD    r15,25
  MOV    qword [rsp+112],r15
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TextGlobal], 20, Top, Width-40, TextHeight)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  MOV    r15,qword [rsp+112]
  ADD    r15,-40
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword 20
  MOV    rbp,qword [rsp+PS620+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3032]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarGlobal], 20, Top+TextHeight+5, Width-45-LinesWidth, TrackbarHeight)
  SUB    rsp,8
  PUSH   qword [rsp+96]
  MOV    r15,qword [rsp+112]
  SUB    r15,qword [rsp+80]
  ADD    r15,-45
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+136]
  ADD    r15,qword [rsp+80]
  ADD    r15,5
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 20
  MOV    rbp,qword [rsp+PS620+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3040]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesGlobal], Width-20-LinesWidth, Top+TextHeight+5, LinesWidth, TrackbarHeight)
  SUB    rsp,8
  PUSH   qword [rsp+96]
  PUSH   qword [rsp+80]
  MOV    r15,qword [rsp+136]
  ADD    r15,qword [rsp+80]
  ADD    r15,5
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+128]
  SUB    r15,qword [rsp+96]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS620+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3048]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; Top + TextHeight + TrackbarHeight + 15
  MOV    r15,qword [rsp+112]
  ADD    r15,qword [rsp+56]
  ADD    r15,qword [rsp+88]
  ADD    r15,15
  MOV    qword [rsp+112],r15
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TextLocal], 20, Top, Width-40, TextHeight)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  MOV    r15,qword [rsp+112]
  ADD    r15,-40
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword 20
  MOV    rbp,qword [rsp+PS620+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3056]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarLocal], 20, Top+TextHeight+5, Width-45-LinesWidth, TrackbarHeight)
  SUB    rsp,8
  PUSH   qword [rsp+96]
  MOV    r15,qword [rsp+112]
  SUB    r15,qword [rsp+80]
  ADD    r15,-45
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+136]
  ADD    r15,qword [rsp+80]
  ADD    r15,5
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 20
  MOV    rbp,qword [rsp+PS620+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3064]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesLocal], Width-20-LinesWidth, Top+TextHeight+5, LinesWidth, TrackbarHeight)
  SUB    rsp,8
  PUSH   qword [rsp+96]
  PUSH   qword [rsp+80]
  MOV    r15,qword [rsp+136]
  ADD    r15,qword [rsp+80]
  ADD    r15,5
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+128]
  SUB    r15,qword [rsp+96]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS620+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3072]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; Top + TextHeight + TrackbarHeight + 15
  MOV    r15,qword [rsp+112]
  ADD    r15,qword [rsp+56]
  ADD    r15,qword [rsp+88]
  ADD    r15,15
  MOV    qword [rsp+112],r15
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TextString], 20, Top, Width-40, TextHeight)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  MOV    r15,qword [rsp+112]
  ADD    r15,-40
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword 20
  MOV    rbp,qword [rsp+PS620+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3080]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarString], 20, Top+TextHeight+5, Width-45-LinesWidth, TrackbarHeight)
  SUB    rsp,8
  PUSH   qword [rsp+96]
  MOV    r15,qword [rsp+112]
  SUB    r15,qword [rsp+80]
  ADD    r15,-45
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+136]
  ADD    r15,qword [rsp+80]
  ADD    r15,5
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 20
  MOV    rbp,qword [rsp+PS620+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3088]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesString], Width-20-LinesWidth, Top+TextHeight+5, LinesWidth, TrackbarHeight)
  SUB    rsp,8
  PUSH   qword [rsp+96]
  PUSH   qword [rsp+80]
  MOV    r15,qword [rsp+136]
  ADD    r15,qword [rsp+80]
  ADD    r15,5
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+128]
  SUB    r15,qword [rsp+96]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS620+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3096]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; Top + TextHeight + TrackbarHeight + 15
  MOV    r15,qword [rsp+112]
  ADD    r15,qword [rsp+56]
  ADD    r15,qword [rsp+88]
  ADD    r15,15
  MOV    qword [rsp+112],r15
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TextDynamic], 20, Top, Width-40, TextHeight)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  MOV    r15,qword [rsp+112]
  ADD    r15,-40
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword 20
  MOV    rbp,qword [rsp+PS620+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3104]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarDynamic], 20, Top+TextHeight+5, Width-45-LinesWidth, TrackbarHeight)
  SUB    rsp,8
  PUSH   qword [rsp+96]
  MOV    r15,qword [rsp+112]
  SUB    r15,qword [rsp+80]
  ADD    r15,-45
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+136]
  ADD    r15,qword [rsp+80]
  ADD    r15,5
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 20
  MOV    rbp,qword [rsp+PS620+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3112]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesDynamic], Width-20-LinesWidth, Top+TextHeight+5, LinesWidth, TrackbarHeight)         
  SUB    rsp,8
  PUSH   qword [rsp+96]
  PUSH   qword [rsp+80]
  MOV    r15,qword [rsp+136]
  ADD    r15,qword [rsp+80]
  ADD    r15,5
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+128]
  SUB    r15,qword [rsp+96]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS620+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3120]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Ok], Width-20-ButtonWidth*3, Height-15-ButtonHeight, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+88]
  MOV    r15,qword [rsp+128]
  SUB    r15,qword [rsp+104]
  ADD    r15,-15
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+128]
  MOV    r14,qword [rsp+104]
  IMUL   r14,3
  SUB    r15,r14
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS620+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3128]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Cancel], Width-15-ButtonWidth*2, Height-15-ButtonHeight, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+88]
  MOV    r15,qword [rsp+128]
  SUB    r15,qword [rsp+104]
  ADD    r15,-15
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+128]
  MOV    r14,qword [rsp+104]
  ADD    r14,r14
  SUB    r15,r14
  ADD    r15,-15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS620+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3136]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Apply], Width-10-ButtonWidth, Height-15-ButtonHeight, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+88]
  MOV    r15,qword [rsp+128]
  SUB    r15,qword [rsp+104]
  ADD    r15,-15
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+128]
  SUB    r15,qword [rsp+104]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS620+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3144]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; EndProcedure
_EndProcedureZero621:
  XOR    rax,rax
_EndProcedure621:
  ADD    rsp,128
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure GetValueSize(type, *Pointer, Is64bit)
_Procedure246:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   r15
  PUSH   r14
  PS246=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; If IS_POINTER(type) Or IS_INTEGER(type)
  MOV    r15,qword [rsp+PS246+0]
  AND    r15,128
  AND    r15,r15
  JNE    Ok145
  MOV    r15,qword [rsp+PS246+0]
  AND    r15,63
  CMP    r15,21
  JE     Ok145
  JMP    No145
Ok145:
  MOV    rax,1
  JMP    End145
No145:
  XOR    rax,rax
End145:
  AND    rax,rax
  JE    _EndIf687
; If Is64bit
  CMP    qword [rsp+PS246+16],0
  JE    _EndIf689
; ProcedureReturn 8
  MOV    rax,8
  JMP   _EndProcedure247
; Else
  JMP   _EndIf688
_EndIf689:
; ProcedureReturn 4
  MOV    rax,4
  JMP   _EndProcedure247
; EndIf
_EndIf688:
; Else
  JMP   _EndIf686
_EndIf687:
; Select type & #TYPEMASK
  MOV    r15,qword [rsp+PS246+0]
  AND    r15,63
  MOV    rax,r15
  PUSH   rax
; Case #TYPE_BYTE, #TYPE_ASCII:   ProcedureReturn 1
  MOV    r15,1
  CMP    r15,[rsp]
  JE    _Case13
  MOV    r15,24
  CMP    r15,[rsp]
  JNE   _Case14
_Case13:
  MOV    rax,1
  ADD    rsp,8
  JMP   _EndProcedure247
; Case #TYPE_WORD, #TYPE_UNICODE: ProcedureReturn 2
  JMP   _EndSelect4
_Case14:
  MOV    r15,3
  CMP    r15,[rsp]
  JE    _Case15
  MOV    r15,25
  CMP    r15,[rsp]
  JNE   _Case16
_Case15:
  MOV    rax,2
  ADD    rsp,8
  JMP   _EndProcedure247
; Case #TYPE_LONG:      ProcedureReturn 4
  JMP   _EndSelect4
_Case16:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case17
  MOV    rax,4
  ADD    rsp,8
  JMP   _EndProcedure247
; Case #TYPE_STRUCTURE: ProcedureReturn 0 
  JMP   _EndSelect4
_Case17:
  MOV    r15,7
  CMP    r15,[rsp]
  JNE   _Case18
  XOR    rax,rax
  ADD    rsp,8
  JMP   _EndProcedure247
; Case #TYPE_FLOAT:     ProcedureReturn 4
  JMP   _EndSelect4
_Case18:
  MOV    r15,9
  CMP    r15,[rsp]
  JNE   _Case19
  MOV    rax,4
  ADD    rsp,8
  JMP   _EndProcedure247
; Case #TYPE_CHARACTER: ProcedureReturn 4 
  JMP   _EndSelect4
_Case19:
  MOV    r15,11
  CMP    r15,[rsp]
  JNE   _Case20
  MOV    rax,4
  ADD    rsp,8
  JMP   _EndProcedure247
; Case #TYPE_DOUBLE:    ProcedureReturn 8
  JMP   _EndSelect4
_Case20:
  MOV    r15,12
  CMP    r15,[rsp]
  JNE   _Case21
  MOV    rax,8
  ADD    rsp,8
  JMP   _EndProcedure247
; Case #TYPE_QUAD:      ProcedureReturn 8
  JMP   _EndSelect4
_Case21:
  MOV    r15,13
  CMP    r15,[rsp]
  JNE   _Case22
  MOV    rax,8
  ADD    rsp,8
  JMP   _EndProcedure247
; 
; 
; Case #TYPE_FIXEDSTRING,  #TYPE_STRING
  JMP   _EndSelect4
_Case22:
  MOV    r15,10
  CMP    r15,[rsp]
  JE    _Case23
  MOV    r15,8
  CMP    r15,[rsp]
  JNE   _Case24
_Case23:
; ProcedureReturn MemoryStringLengthBytes(*Pointer) + #CharSize
  SUB    rsp,8
  PUSH   qword [rsp+PS246+24]
  POP    rcx
  SUB    rsp,32
  CALL   PB_MemoryStringLength
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,r15
  ADD    r15,2
  MOV    rax,r15
  ADD    rsp,8
  JMP   _EndProcedure247
; 
; Case #TYPE_ARRAY
  JMP   _EndSelect4
_Case24:
  MOV    r15,15
  CMP    r15,[rsp]
  JNE   _Case25
; 
; ProcedureReturn MemoryAsciiLength(*Pointer) + 1 
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+PS246+32]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  MOV    r15,rax
  INC    r15
  MOV    rax,r15
  ADD    rsp,8
  JMP   _EndProcedure247
; 
; Case #TYPE_LINKEDLIST
  JMP   _EndSelect4
_Case25:
  MOV    r15,14
  CMP    r15,[rsp]
  JNE   _Case26
; 
; If Is64bit
  CMP    qword [rsp+PS246+24],0
  JE    _EndIf693
; ProcedureReturn 8*2
  MOV    rax,16
  ADD    rsp,8
  JMP   _EndProcedure247
; Else
  JMP   _EndIf692
_EndIf693:
; ProcedureReturn 4*2
  MOV    rax,8
  ADD    rsp,8
  JMP   _EndProcedure247
; EndIf
_EndIf692:
; 
; Case #TYPE_MAP        
  JMP   _EndSelect4
_Case26:
  MOV    r15,22
  CMP    r15,[rsp]
  JNE   _Case27
; 
; If Is64bit
  CMP    qword [rsp+PS246+24],0
  JE    _EndIf696
; Size = 8
  MOV    qword [rsp+48],8
; Else
  JMP   _EndIf695
_EndIf696:
; Size = 4
  MOV    qword [rsp+48],4
; EndIf
_EndIf695:
; If PeekB(*Pointer + Size)  
  SUB    rsp,8
  MOV    r15,qword [rsp+PS246+24]
  ADD    r15,qword [rsp+56]
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf699
; ProcedureReturn Size + 1 + MemoryStringLengthBytes(*Pointer + Size + 1) + #CharSize
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  MOV    r14,qword [rsp+PS246+24]
  ADD    r14,qword [rsp+56]
  INC    r14
  MOV    rax,r14
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_MemoryStringLength
  ADD    rsp,40
  MOV    r14,rax
  ADD    r14,r14
  ADD    r15,r14
  ADD    r15,3
  MOV    rax,r15
  ADD    rsp,8
  JMP   _EndProcedure247
; Else
  JMP   _EndIf698
_EndIf699:
; ProcedureReturn Size + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    rax,r15
  ADD    rsp,8
  JMP   _EndProcedure247
; EndIf
_EndIf698:
; 
; EndSelect
_Case27:
_EndSelect4:
  POP    rax
; EndIf
_EndIf686:
; EndProcedure
_EndProcedureZero247:
  XOR    rax,rax
_EndProcedure247:
  ADD    rsp,56
  POP    r14
  POP    r15
  RET
; Procedure IsWindowMaximized(Window)
_Procedure102:
  MOV    qword [rsp+8],rcx
  PS102=48
  SUB    rsp,40
; 
; ProcedureReturn IsZoomed_(WindowID(Window))
  PUSH   qword [rsp+PS102+0]
  POP    rcx
  CALL   PB_WindowID
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   IsZoomed
  JMP   _EndProcedure103
; 
; EndProcedure
_EndProcedureZero103:
  XOR    rax,rax
_EndProcedure103:
  ADD    rsp,40
  RET
; Procedure Network_CreateHandshakeBlock(*This.Network_Communication)
_Procedure370:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS370=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; *Block      = AllocateMemory(#EncryptionHandshakeSize * 2)  
  PUSH   qword 64
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+40],rax
; *BlockPlain = *Block + #EncryptionHandshakeSize 
  MOV    r15,qword [rsp+40]
  ADD    r15,32
  MOV    qword [rsp+48],r15
; 
; If *Block  
  CMP    qword [rsp+40],0
  JE    _EndIf1161
; 
; 
; 
; For i = 0 To (#EncryptionHandshakeSize/4)-1
  MOV    qword [rsp+56],0
  JMP   _ForSkipDebug1162
_For1162:
_ForSkipDebug1162:
  MOV    rax,7
  CMP    rax,qword [rsp+56]
  JL    _Next1163
; PokeL(*BlockPlain + i*4, Random($FFFFFFFF))
  MOV    rax,4294967295
  PUSH   rax
  POP    rcx
  CALL   PB_Random
  MOV    rax,rax
  PUSH   rax
  MOV    r15,qword [rsp+56]
  MOV    r14,qword [rsp+64]
  SAL    r14,2
  ADD    r15,r14
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_PokeL
; Next i
_NextContinue1163:
  INC    qword [rsp+56]
  JNO   _For1162
_Next1163:
; 
; CompilerIf #PB_Compiler_Debugger
; 
; 
; *This\EncryptionHash$ = Fingerprint(*BlockPlain, #EncryptionHandshakeSize, #PB_Cipher_MD5)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword 32
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Fingerprint
  ADD    rsp,40
  MOV    rbp,qword [rsp+PS370+8]
  LEA    rcx,[rbp+132]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; 
; rijndael_ecb_encrypt(@*This\CryptContext, *BlockPlain, *Block, #EncryptionHandshakeSize)
  PUSH   qword 32
  PUSH   qword [rsp+48]
  PUSH   qword [rsp+64]
  MOV    rbp,qword [rsp+PS370+24]
  LEA    rax,[rbp+148]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   rijndael_ecb_encrypt
  MOVSXD rax,eax
; 
; CompilerIf #PB_Compiler_Debugger
; EndIf
_EndIf1161:
; 
; ProcedureReturn *Block
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure371
; EndProcedure
_EndProcedureZero371:
  XOR    rax,rax
_EndProcedure371:
  ADD    rsp,64
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure Network_Close(*This.Network_Communication) 
_Procedure416:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS416=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; LockMutex(Network_Mutex)
  PUSH   qword [v_Network_Mutex]
  POP    rcx
  CALL   qword [PB_LockMutex]
; Network_CloseSocket(*This\Socket)  
  MOV    rbp,qword [rsp+PS416+0]
  PUSH   qword [rbp+60]
  POP    rcx
  CALL   Network_CloseSocket
; 
; 
; For i = 0 To *This\StackCount-1
  MOV    qword [rsp+40],0
  JMP   _ForSkipDebug1376
_For1376:
_ForSkipDebug1376:
  MOV    rbp,qword [rsp+PS416+0]
  MOVSXD r15,dword [rbp+756]
  DEC    r15
  CMP    r15,qword [rsp+40]
  JL    _Next1377
; If *This\Stack[i]\CommandData
  MOV    rbp,qword [rsp+PS416+0]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  CMP    qword [rbp+780],0
  JE    _EndIf1379
; FreeMemory(*This\Stack[i]\CommandData)
  MOV    rbp,qword [rsp+PS416+0]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+780]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf1379:
; Next i
_NextContinue1377:
  INC    qword [rsp+40]
  JNO   _For1376
_Next1377:
; 
; 
; FreeMutex(Network_Data()\StackMutex)
  MOV    rbp,qword [t_Network_Data+8]
  PUSH   qword [rbp+84]
  POP    rcx
  CALL   PB_FreeMutex
; 
; ChangeCurrentElement(Network_Data(), *This)
  PUSH   qword [rsp+PS416+0]
  PUSH   qword [t_Network_Data]
  POP    rcx
  POP    rdx
  CALL   PB_ChangeCurrentElement
; DeleteElement(Network_Data())  
  PUSH   qword [t_Network_Data]
  POP    rcx
  CALL   PB_DeleteElement
; UnlockMutex(Network_Mutex)
  PUSH   qword [v_Network_Mutex]
  POP    rcx
  CALL   qword [PB_UnlockMutex]
; EndProcedure
_EndProcedureZero417:
  XOR    rax,rax
_EndProcedure417:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure Standalone_ResizeGUI()
_Procedure664:
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS664=240
  MOV    rax,21
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; Width = WindowWidth(#WINDOW_Main)
  PUSH   qword 1
  POP    rcx
  CALL   PB_WindowWidth
  MOV    qword [rsp+40],rax
; Height = WindowHeight(#WINDOW_Main) - StatusbarHeight
  PUSH   qword 1
  POP    rcx
  CALL   PB_WindowHeight
  MOV    r15,rax
  SUB    r15,qword [v_StatusbarHeight]
  MOV    qword [rsp+48],r15
; 
; CompilerIf #CompilePPC
; NbGadgets = 9
  MOV    qword [rsp+56],9
; CompilerEndIf
; 
; Dim ButtonWidth.l(NbGadgets) 
  MOV    rax,qword [rsp+56]
  INC    rax
  SUB    rsp,24
  MOV    rdx,rax
  LEA    rax,[rsp+88]
  PUSH   rax
  XOR    r9,r9
  MOV    r8,5
  MOV    rcx,4
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [rsp+64],rax
; 
; If IsMiniDebugger
  CMP    qword [v_IsMiniDebugger],0
  JE    _EndIf3590
; 
; GetRequiredSize(#GADGET_Run, @ButtonWidth(1), @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+88]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+80]
  LEA    rax,[rbp+4]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; ButtonWidth(2) = GetRequiredWidth(#GADGET_Stop)
  PUSH   qword 0
  PUSH   qword 2
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+72]
  POP    rax
  MOV    dword [rbp+8],eax
; ButtonWidth(3) = GetRequiredWidth(#GADGET_Step)
  PUSH   qword 0
  PUSH   qword 3
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+72]
  POP    rax
  MOV    dword [rbp+12],eax
; ButtonWidth(4) = GetRequiredWidth(#GADGET_StepOver)
  PUSH   qword 0
  PUSH   qword 5
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+72]
  POP    rax
  MOV    dword [rbp+16],eax
; ButtonWidth(5) = GetRequiredWidth(#GADGET_StepOut)
  PUSH   qword 0
  PUSH   qword 6
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+72]
  POP    rax
  MOV    dword [rbp+20],eax
; ButtonWidth(6) = 70
  MOV    dword [rbp+24],70
; ButtonWidth(7) = GetRequiredWidth(#GADGET_Quit)
  PUSH   qword 0
  PUSH   qword 7
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+72]
  POP    rax
  MOV    dword [rbp+28],eax
; 
; Total = 80
  MOV    qword [rsp+88],80
; For i = 1 To 7
  MOV    qword [rsp+96],1
  JMP   _ForSkipDebug3591
_For3591:
_ForSkipDebug3591:
  MOV    rax,7
  CMP    rax,qword [rsp+96]
  JL    _Next3592
; Total + ButtonWidth(i)
  MOV    r15,qword [rsp+88]
  MOV    r14,qword [rsp+96]
  MOV    rbp,qword [rsp+64]
  SAL    r14,2
  MOVSXD rax,dword [rbp+r14]
  ADD    r15,rax
  MOV    qword [rsp+88],r15
; Next i
_NextContinue3592:
  INC    qword [rsp+96]
  JNO   _For3591
_Next3592:
; Extra = (Width-Total) / NbGadgets
  MOV    r15,qword [rsp+40]
  SUB    r15,qword [rsp+88]
  PUSH   qword [rsp+56]
  MOV    rax,r15
  POP    rcx
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    qword [rsp+104],r15
; 
; Top = 10
  MOV    qword [rsp+112],10
; Left = 10    
  MOV    qword [rsp+120],10
; ResizeGadget(#GADGET_Run,      Left, Top, ButtonWidth(1)+Extra, ButtonHeight): Left + ButtonWidth(1)+Extra + 10
  SUB    rsp,8
  PUSH   qword [rsp+88]
  MOV    rbp,qword [rsp+80]
  MOVSXD r15,dword [rbp+4]
  ADD    r15,qword [rsp+120]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+152]
  PUSH   qword 1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
  MOV    r15,qword [rsp+120]
  MOVSXD rax,dword [rbp+4]
  ADD    r15,rax
  ADD    r15,qword [rsp+104]
  ADD    r15,10
  MOV    qword [rsp+120],r15
; ResizeGadget(#GADGET_Stop,      Left, Top, ButtonWidth(2)+Extra, ButtonHeight): Left + ButtonWidth(2)+Extra + 10
  SUB    rsp,8
  PUSH   qword [rsp+88]
  MOVSXD r15,dword [rbp+8]
  ADD    r15,qword [rsp+120]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+152]
  PUSH   qword 2
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
  MOV    r15,qword [rsp+120]
  MOVSXD rax,dword [rbp+8]
  ADD    r15,rax
  ADD    r15,qword [rsp+104]
  ADD    r15,10
  MOV    qword [rsp+120],r15
; ResizeGadget(#GADGET_Step,      Left, Top, ButtonWidth(3)+Extra, ButtonHeight): Left + ButtonWidth(3)+Extra + 10
  SUB    rsp,8
  PUSH   qword [rsp+88]
  MOVSXD r15,dword [rbp+12]
  ADD    r15,qword [rsp+120]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+152]
  PUSH   qword 3
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
  MOV    r15,qword [rsp+120]
  MOVSXD rax,dword [rbp+12]
  ADD    r15,rax
  ADD    r15,qword [rsp+104]
  ADD    r15,10
  MOV    qword [rsp+120],r15
; ResizeGadget(#GADGET_StepOver,  Left, Top, ButtonWidth(4)+Extra, ButtonHeight): Left + ButtonWidth(4)+Extra + 10
  SUB    rsp,8
  PUSH   qword [rsp+88]
  MOVSXD r15,dword [rbp+16]
  ADD    r15,qword [rsp+120]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+152]
  PUSH   qword 5
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
  MOV    r15,qword [rsp+120]
  MOVSXD rax,dword [rbp+16]
  ADD    r15,rax
  ADD    r15,qword [rsp+104]
  ADD    r15,10
  MOV    qword [rsp+120],r15
; ResizeGadget(#GADGET_StepOut,   Left, Top, ButtonWidth(5)+Extra, ButtonHeight): Left + ButtonWidth(5)+Extra + 10
  SUB    rsp,8
  PUSH   qword [rsp+88]
  MOVSXD r15,dword [rbp+20]
  ADD    r15,qword [rsp+120]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+152]
  PUSH   qword 6
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
  MOV    r15,qword [rsp+120]
  MOVSXD rax,dword [rbp+20]
  ADD    r15,rax
  ADD    r15,qword [rsp+104]
  ADD    r15,10
  MOV    qword [rsp+120],r15
; ResizeGadget(#GADGET_StepCount, Left, Top, ((ButtonWidth(6)+Extra)*2)/3, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+88]
  MOVSXD r15,dword [rbp+24]
  ADD    r15,qword [rsp+120]
  ADD    r15,r15
  MOV    rax,r15
  MOV    rcx,3
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+152]
  PUSH   qword 4
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(#GADGET_Quit,      Width-10-ButtonWidth(7)-Extra, Top, ButtonWidth(7)+Extra, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+88]
  MOVSXD r15,dword [rbp+28]
  ADD    r15,qword [rsp+120]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  MOV    r15,qword [rsp+72]
  MOVSXD rax,dword [rbp+28]
  SUB    r15,rax
  SUB    r15,qword [rsp+136]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 7
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; Top + ButtonHeight + 10
  MOV    r15,qword [rsp+112]
  ADD    r15,qword [rsp+80]
  ADD    r15,10
  MOV    qword [rsp+112],r15
; SizeGadget = #GADGET_Maximize
  MOV    qword [rsp+128],24
; Else
  JMP   _EndIf3589
_EndIf3590:
; 
; Top = 10  
  MOV    qword [rsp+112],10
; GetRequiredSize(#GADGET_Run, @ColWidth1, @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+88]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+152]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; ColumnWidth1 = Max(ColumnWidth1, 70)
  PUSH   qword 70
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+144],rax
; ColumnWidth1 = Max(ColumnWidth1, GetRequiredWidth(#GADGET_Step))
  PUSH   qword 0
  PUSH   qword 3
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+144],rax
; ColumnWidth1 = Max(ColumnWidth1, GetRequiredWidth(#GADGET_StepOver))    
  PUSH   qword 0
  PUSH   qword 5
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+144],rax
; ColumnWidth2 = Max(70, GetRequiredWidth(#GADGET_Stop))
  PUSH   qword 0
  PUSH   qword 2
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 70
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+152],rax
; ColumnWidth2 = Max(ColumnWidth2, GetRequiredWidth(#GADGET_StepOut))
  PUSH   qword 0
  PUSH   qword 6
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+160]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+152],rax
; 
; ResizeGadget(#GADGET_Run,  10, Top, ColumnWidth1, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+160]
  PUSH   qword [rsp+136]
  PUSH   qword 10
  PUSH   qword 1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(#GADGET_Stop, 20+ColumnWidth1, Top, ColumnWidth2, ButtonHeight): Top + ButtonHeight + 10
  SUB    rsp,8
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+168]
  PUSH   qword [rsp+136]
  MOV    r15,qword [rsp+176]
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 2
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
  MOV    r15,qword [rsp+112]
  ADD    r15,qword [rsp+80]
  ADD    r15,10
  MOV    qword [rsp+112],r15
; ResizeGadget(#GADGET_Step,  10, Top, ColumnWidth1, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+160]
  PUSH   qword [rsp+136]
  PUSH   qword 10
  PUSH   qword 3
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(#GADGET_StepCount, 20+ColumnWidth1, Top, ColumnWidth2, ButtonHeight): Top + ButtonHeight + 10
  SUB    rsp,8
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+168]
  PUSH   qword [rsp+136]
  MOV    r15,qword [rsp+176]
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 4
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
  MOV    r15,qword [rsp+112]
  ADD    r15,qword [rsp+80]
  ADD    r15,10
  MOV    qword [rsp+112],r15
; ResizeGadget(#GADGET_StepOver,  10, Top, ColumnWidth1, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+160]
  PUSH   qword [rsp+136]
  PUSH   qword 10
  PUSH   qword 5
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(#GADGET_StepOut, 20+ColumnWidth1, Top, ColumnWidth2, ButtonHeight): Top + ButtonHeight + 10
  SUB    rsp,8
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+168]
  PUSH   qword [rsp+136]
  MOV    r15,qword [rsp+176]
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 6
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
  MOV    r15,qword [rsp+112]
  ADD    r15,qword [rsp+80]
  ADD    r15,10
  MOV    qword [rsp+112],r15
; ResizeGadget(#GADGET_Quit, 10, Top, 10+ColumnWidth1+ColumnWidth2, ButtonHeight): Top + ButtonHeight
  SUB    rsp,8
  PUSH   qword [rsp+88]
  MOV    r15,qword [rsp+160]
  ADD    r15,qword [rsp+168]
  ADD    r15,10
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword 10
  PUSH   qword 7
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
  MOV    r15,qword [rsp+112]
  ADD    r15,qword [rsp+80]
  MOV    qword [rsp+112],r15
; ResizeGadget(#GADGET_Log, 30+ColumnWidth1+ColumnWidth2, 10, Width-40-ColumnWidth1-ColumnWidth2, Top-10)
  SUB    rsp,8
  MOV    r15,qword [rsp+120]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+56]
  SUB    r15,qword [rsp+160]
  SUB    r15,qword [rsp+168]
  ADD    r15,-40
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    r15,qword [rsp+176]
  ADD    r15,qword [rsp+184]
  ADD    r15,30
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 8
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; Top + 10
  MOV    r15,qword [rsp+112]
  ADD    r15,10
  MOV    qword [rsp+112],r15
; SizeGadget = #GADGET_Minimize
  MOV    qword [rsp+128],23
; EndIf
_EndIf3589:
; 
; ButtonHeight2    = Max(ButtonHeight, GetRequiredHeight(#GADGET_SelectSource))
  PUSH   qword 0
  PUSH   qword 22
  POP    rcx
  POP    rdx
  CALL  _Procedure92
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+160],rax
; BreakSetWidth    = Max(120, GetRequiredWidth(#GADGET_BreakSet))
  PUSH   qword 0
  PUSH   qword 19
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 120
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+168],rax
; BreakRemoveWidth = Max(120, GetRequiredWidth(#GADGET_BreakClear))
  PUSH   qword 0
  PUSH   qword 20
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 120
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+176],rax
; BreakClearWidth  = Max(120, GetRequiredWidth(#GADGET_DataBreak))
  PUSH   qword 0
  PUSH   qword 21
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 120
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+184],rax
; 
; ResizeGadget(#GADGET_SelectSource, 10, Top, Width-85-BreakClearWidth-BreakRemoveWidth-BreakSetWidth, ButtonHeight2)
  SUB    rsp,8
  PUSH   qword [rsp+168]
  MOV    r15,qword [rsp+56]
  SUB    r15,qword [rsp+200]
  SUB    r15,qword [rsp+192]
  SUB    r15,qword [rsp+184]
  ADD    r15,-85
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword 10
  PUSH   qword 22
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(#GADGET_BreakSet    , Width-65-BreakClearWidth-BreakRemoveWidth-BreakSetWidth, Top, BreakSetWidth, ButtonHeight2)
  SUB    rsp,8
  PUSH   qword [rsp+168]
  PUSH   qword [rsp+184]
  PUSH   qword [rsp+136]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+216]
  SUB    r15,qword [rsp+208]
  SUB    r15,qword [rsp+200]
  ADD    r15,-65
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 19
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(#GADGET_BreakClear , Width-55-BreakClearWidth-BreakRemoveWidth, Top, BreakRemoveWidth, ButtonHeight2)
  SUB    rsp,8
  PUSH   qword [rsp+168]
  PUSH   qword [rsp+192]
  PUSH   qword [rsp+136]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+216]
  SUB    r15,qword [rsp+208]
  ADD    r15,-55
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 20
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(#GADGET_DataBreak  , Width-45-BreakClearWidth, Top, BreakClearWidth, ButtonHeight2)
  SUB    rsp,8
  PUSH   qword [rsp+168]
  PUSH   qword [rsp+200]
  PUSH   qword [rsp+136]
  MOV    r15,qword [rsp+72]
  SUB    r15,qword [rsp+216]
  ADD    r15,-45
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 21
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(SizeGadget          , Width-35 , Top, 25, ButtonHeight2)
  SUB    rsp,8
  PUSH   qword [rsp+168]
  PUSH   qword 25
  PUSH   qword [rsp+136]
  MOV    r15,qword [rsp+72]
  ADD    r15,-35
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+168]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; Top + ButtonHeight2 + 10
  MOV    r15,qword [rsp+112]
  ADD    r15,qword [rsp+160]
  ADD    r15,10
  MOV    qword [rsp+112],r15
; 
; EditHeight = Height-Top-ButtonHeight-20
  MOV    r15,qword [rsp+48]
  SUB    r15,qword [rsp+112]
  SUB    r15,qword [rsp+80]
  ADD    r15,-20
  MOV    qword [rsp+192],r15
; If EditHeight < 0
  MOV    r15,qword [rsp+192]
  AND    r15,r15
  JGE   _EndIf3595
; EditHeight = 0
  MOV    qword [rsp+192],0
; EditTop    = Height + 10 
  MOV    r15,qword [rsp+48]
  ADD    r15,10
  MOV    qword [rsp+200],r15
; Else
  JMP   _EndIf3594
_EndIf3595:
; EditTop    = Top
  PUSH   qword [rsp+112]
  POP    rax
  MOV    qword [rsp+200],rax
; EndIf
_EndIf3594:
; 
; If SourceFiles(CurrentSource)\IsLoaded
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  CMP    dword [rbp+8],0
  JE    _EndIf3598
; ResizeGadget(SourceFiles(CurrentSource)\Gadget, 10, EditTop, Width-20, EditHeight)
  SUB    rsp,8
  PUSH   qword [rsp+200]
  MOV    r15,qword [rsp+56]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+224]
  PUSH   qword 10
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; Else
  JMP   _EndIf3597
_EndIf3598:
; ResizeGadget(#GADGET_Waiting, 10, EditTop, Width-20, EditHeight)
  SUB    rsp,8
  PUSH   qword [rsp+200]
  MOV    r15,qword [rsp+56]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+224]
  PUSH   qword 10
  PUSH   qword 18
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; EndIf    
_EndIf3597:
; 
; Top = Height - 10 - ButtonHeight
  MOV    r15,qword [rsp+48]
  SUB    r15,qword [rsp+80]
  ADD    r15,-10
  MOV    qword [rsp+112],r15
; ButtonWidth(1) = GetRequiredWidth(#GADGET_Debug)
  PUSH   qword 0
  PUSH   qword 9
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+72]
  POP    rax
  MOV    dword [rbp+4],eax
; ButtonWidth(2) = GetRequiredWidth(#GADGET_Variables)  
  PUSH   qword 0
  PUSH   qword 11
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+72]
  POP    rax
  MOV    dword [rbp+8],eax
; ButtonWidth(3) = GetRequiredWidth(#GADGET_Watchlist)
  PUSH   qword 0
  PUSH   qword 10
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+72]
  POP    rax
  MOV    dword [rbp+12],eax
; ButtonWidth(4) = GetRequiredWidth(#GADGET_Profiler)  
  PUSH   qword 0
  PUSH   qword 12
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+72]
  POP    rax
  MOV    dword [rbp+16],eax
; ButtonWidth(5) = GetRequiredWidth(#GADGET_History)
  PUSH   qword 0
  PUSH   qword 13
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+72]
  POP    rax
  MOV    dword [rbp+20],eax
; ButtonWidth(6) = GetRequiredWidth(#GADGET_Memory)
  PUSH   qword 0
  PUSH   qword 14
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+72]
  POP    rax
  MOV    dword [rbp+24],eax
; ButtonWidth(7) = GetRequiredWidth(#GADGET_Library)
  PUSH   qword 0
  PUSH   qword 16
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+72]
  POP    rax
  MOV    dword [rbp+28],eax
; CompilerIf #CompilePPC = 0
; ButtonWidth(8) = GetRequiredWidth(#GADGET_Assembly)
  PUSH   qword 0
  PUSH   qword 15
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+72]
  POP    rax
  MOV    dword [rbp+32],eax
; ButtonWidth(9) = GetRequiredWidth(#GADGET_Purifier)
  PUSH   qword 0
  PUSH   qword 17
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+72]
  POP    rax
  MOV    dword [rbp+36],eax
; CompilerElse
; 
; Total = 10+5*(NbGadgets-1)
  MOV    r15,qword [rsp+56]
  DEC    r15
  IMUL   r15,5
  ADD    r15,10
  MOV    qword [rsp+88],r15
; For i = 1 To NbGadgets
  MOV    qword [rsp+96],1
  JMP   _ForSkipDebug3600
_For3600:
_ForSkipDebug3600:
  MOV    rax,qword [rsp+56]
  CMP    rax,qword [rsp+96]
  JL    _Next3601
; Total + ButtonWidth(i)
  MOV    r15,qword [rsp+88]
  MOV    r14,qword [rsp+96]
  MOV    rbp,qword [rsp+64]
  SAL    r14,2
  MOVSXD rax,dword [rbp+r14]
  ADD    r15,rax
  MOV    qword [rsp+88],r15
; Next i
_NextContinue3601:
  INC    qword [rsp+96]
  JNO   _For3600
_Next3601:
; Extra = (Width-Total) / NbGadgets
  MOV    r15,qword [rsp+40]
  SUB    r15,qword [rsp+88]
  PUSH   qword [rsp+56]
  MOV    rax,r15
  POP    rcx
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    qword [rsp+104],r15
; 
; Left = 10    
  MOV    qword [rsp+120],10
; ResizeGadget(#GADGET_Debug,     Left, Top, ButtonWidth(1)+Extra, ButtonHeight): Left + ButtonWidth(1)+Extra + 5
  SUB    rsp,8
  PUSH   qword [rsp+88]
  MOV    rbp,qword [rsp+80]
  MOVSXD r15,dword [rbp+4]
  ADD    r15,qword [rsp+120]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+152]
  PUSH   qword 9
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
  MOV    r15,qword [rsp+120]
  MOVSXD rax,dword [rbp+4]
  ADD    r15,rax
  ADD    r15,qword [rsp+104]
  ADD    r15,5
  MOV    qword [rsp+120],r15
; ResizeGadget(#GADGET_Variables, Left, Top, ButtonWidth(2)+Extra, ButtonHeight): Left + ButtonWidth(2)+Extra + 5 
  SUB    rsp,8
  PUSH   qword [rsp+88]
  MOVSXD r15,dword [rbp+8]
  ADD    r15,qword [rsp+120]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+152]
  PUSH   qword 11
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
  MOV    r15,qword [rsp+120]
  MOVSXD rax,dword [rbp+8]
  ADD    r15,rax
  ADD    r15,qword [rsp+104]
  ADD    r15,5
  MOV    qword [rsp+120],r15
; ResizeGadget(#GADGET_Watchlist, Left, Top, ButtonWidth(3)+Extra, ButtonHeight): Left + ButtonWidth(3)+Extra + 5
  SUB    rsp,8
  PUSH   qword [rsp+88]
  MOVSXD r15,dword [rbp+12]
  ADD    r15,qword [rsp+120]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+152]
  PUSH   qword 10
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
  MOV    r15,qword [rsp+120]
  MOVSXD rax,dword [rbp+12]
  ADD    r15,rax
  ADD    r15,qword [rsp+104]
  ADD    r15,5
  MOV    qword [rsp+120],r15
; ResizeGadget(#GADGET_Profiler,  Left, Top, ButtonWidth(4)+Extra, ButtonHeight): Left + ButtonWidth(4)+Extra + 5
  SUB    rsp,8
  PUSH   qword [rsp+88]
  MOVSXD r15,dword [rbp+16]
  ADD    r15,qword [rsp+120]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+152]
  PUSH   qword 12
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
  MOV    r15,qword [rsp+120]
  MOVSXD rax,dword [rbp+16]
  ADD    r15,rax
  ADD    r15,qword [rsp+104]
  ADD    r15,5
  MOV    qword [rsp+120],r15
; ResizeGadget(#GADGET_History,   Left, Top, ButtonWidth(5)+Extra, ButtonHeight): Left + ButtonWidth(5)+Extra + 5
  SUB    rsp,8
  PUSH   qword [rsp+88]
  MOVSXD r15,dword [rbp+20]
  ADD    r15,qword [rsp+120]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+152]
  PUSH   qword 13
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
  MOV    r15,qword [rsp+120]
  MOVSXD rax,dword [rbp+20]
  ADD    r15,rax
  ADD    r15,qword [rsp+104]
  ADD    r15,5
  MOV    qword [rsp+120],r15
; ResizeGadget(#GADGET_Memory,    Left, Top, ButtonWidth(6)+Extra, ButtonHeight): Left + ButtonWidth(6)+Extra + 5
  SUB    rsp,8
  PUSH   qword [rsp+88]
  MOVSXD r15,dword [rbp+24]
  ADD    r15,qword [rsp+120]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+152]
  PUSH   qword 14
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
  MOV    r15,qword [rsp+120]
  MOVSXD rax,dword [rbp+24]
  ADD    r15,rax
  ADD    r15,qword [rsp+104]
  ADD    r15,5
  MOV    qword [rsp+120],r15
; ResizeGadget(#GADGET_Library,   Left, Top, ButtonWidth(7)+Extra, ButtonHeight): Left + ButtonWidth(7)+Extra + 5
  SUB    rsp,8
  PUSH   qword [rsp+88]
  MOVSXD r15,dword [rbp+28]
  ADD    r15,qword [rsp+120]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+152]
  PUSH   qword 16
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
  MOV    r15,qword [rsp+120]
  MOVSXD rax,dword [rbp+28]
  ADD    r15,rax
  ADD    r15,qword [rsp+104]
  ADD    r15,5
  MOV    qword [rsp+120],r15
; CompilerIf #CompilePPC = 0
; ResizeGadget(#GADGET_Assembly, Left, Top, ButtonWidth(8)+Extra, ButtonHeight): Left + ButtonWidth(8)+Extra + 5
  SUB    rsp,8
  PUSH   qword [rsp+88]
  MOVSXD r15,dword [rbp+32]
  ADD    r15,qword [rsp+120]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+152]
  PUSH   qword 15
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
  MOV    r15,qword [rsp+120]
  MOVSXD rax,dword [rbp+32]
  ADD    r15,rax
  ADD    r15,qword [rsp+104]
  ADD    r15,5
  MOV    qword [rsp+120],r15
; ResizeGadget(#GADGET_Purifier, Left, Top, ButtonWidth(9)+Extra, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+88]
  MOVSXD r15,dword [rbp+36]
  ADD    r15,qword [rsp+120]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+152]
  PUSH   qword 17
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; CompilerElse
; 
; EndProcedure
_EndProcedureZero665:
  XOR    rax,rax
_EndProcedure665:
  PUSH   rax
  MOV    rcx,qword [rsp+72]
  SUB    rsp,40
  CALL   SYS_FreeArray
  ADD    rsp,40
  POP    rax
  ADD    rsp,208
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure WinPipe_Disconnect(*This.WinPipe_Communication)
_Procedure318:
  MOV    qword [rsp+8],rcx
  PS318=48
  SUB    rsp,40
; 
; EndProcedure
_EndProcedureZero319:
  XOR    rax,rax
_EndProcedure319:
  ADD    rsp,40
  RET
; Procedure MarkBreakPoint() 
_Procedure676:
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS676=80
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; If SourceFiles(CurrentSource)\IsLoaded
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  CMP    dword [rbp+8],0
  JE    _EndIf3572
; Line = ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_LINEFROMPOSITION, ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_GETCURRENTPOS, 0, 0), 0)
  PUSH   qword 0
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 2008
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 2166
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
  MOV    qword [rsp+40],rax
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_MARKERADD, Line, 7)
  PUSH   qword 7
  PUSH   qword [rsp+48]
  PUSH   qword 2043
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_MARKERADD, Line, 8)
  PUSH   qword 8
  PUSH   qword [rsp+48]
  PUSH   qword 2043
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; RedrawGadget(SourceFiles(CurrentSource)\Gadget)
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  CALL  _Procedure122
; ProcedureReturn Line | (CurrentSource<< 24)
  MOV    r15,qword [rsp+40]
  MOV    r14,qword [v_CurrentSource]
  SAL    r14,24
  OR     r15,r14
  MOV    rax,r15
  JMP   _EndProcedure677
; Else
  JMP   _EndIf3571
_EndIf3572:
; ProcedureReturn -1
  MOV    rax,-1
  JMP   _EndProcedure677
; EndIf
_EndIf3571:
; 
; EndProcedure
_EndProcedureZero677:
  XOR    rax,rax
_EndProcedure677:
  ADD    rsp,48
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure LoadSource(FileName$)
_Procedure660:
  MOV    qword [rsp+8],rcx
  PUSH   r15
  PS660=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS660+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; Result = 0    
  MOV    qword [rsp+48],0
; 
; If ReadFile(0, FileName$)
  PUSH   qword [rsp+40]
  PUSH   qword 0
  POP    rcx
  POP    rdx
  CALL   PB_ReadFile
  AND    rax,rax
  JE    _EndIf3546
; Format = ReadStringFormat(0) 
  PUSH   qword 0
  POP    rcx
  CALL   PB_ReadStringFormat
  MOV    qword [rsp+56],rax
; Length = Lof(0)-Loc(0)
  PUSH   qword 0
  POP    rcx
  CALL   PB_Lof
  MOV    r15,rax
  PUSH   qword 0
  POP    rcx
  CALL   PB_Loc
  SUB    r15,rax
  MOV    qword [rsp+64],r15
; 
; *Buffer = AllocateMemory(Length+1) 
  MOV    r15,qword [rsp+64]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+72],rax
; If *Buffer
  CMP    qword [rsp+72],0
  JE    _EndIf3548
; Length = ReadData(0, *Buffer, Length)      
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+80]
  PUSH   qword 0
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_ReadData
  MOV    qword [rsp+64],rax
; Result = LoadSourceBuffer(*Buffer, Length, Format)
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure658
  MOV    qword [rsp+48],rax
; 
; FreeMemory(*Buffer)
  PUSH   qword [rsp+72]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf    
_EndIf3548:
; CloseFile(0)
  PUSH   qword 0
  POP    rcx
  CALL   PB_CloseFile
; EndIf
_EndIf3546:
; 
; ProcedureReturn Result
  MOV    rax,qword [rsp+48]
  JMP   _EndProcedure661
; EndProcedure
_EndProcedureZero661:
  XOR    rax,rax
_EndProcedure661:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,80
  POP    r15
  RET
; Procedure VariableGadget_SyncItem(ListIndex)
_Procedure296:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS296=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Shared *VariableGadget_Used.VariableGadget
; 
; *items.VariableGadget_ItemList = *VariableGadget_Used\Items  
  MOV    rbp,qword [p_VariableGadget_Used]
  PUSH   qword [rbp+16]
  POP    rax
  MOV    qword [rsp+40],rax
; If *items
  CMP    qword [rsp+40],0
  JE    _EndIf997
; Gadget = *VariableGadget_Used\Gadget
  MOV    rbp,qword [p_VariableGadget_Used]
  PUSH   qword [rbp]
  POP    rax
  MOV    qword [rsp+48],rax
; Last   = CountGadgetItems(Gadget) - 1
  PUSH   qword [rsp+48]
  POP    rcx
  CALL   PB_CountGadgetItems
  MOV    r15,rax
  DEC    r15
  MOV    qword [rsp+56],r15
; 
; For i = 0 To Last
  MOV    qword [rsp+64],0
  JMP   _ForSkipDebug998
_For998:
_ForSkipDebug998:
  MOV    rax,qword [rsp+56]
  CMP    rax,qword [rsp+64]
  JL    _Next999
; index = GetGadgetItemData(Gadget, i)
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemData
  MOV    qword [rsp+72],rax
; If index = ListIndex 
  MOV    r15,qword [rsp+72]
  CMP    r15,qword [rsp+PS296+0]
  JNE   _EndIf1001
; If *items\item[index]\Kind = #TYPE_ARRAY
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,byte [rbp]
  CMP    r15,15
  JNE   _EndIf1003
; 
; SetGadgetItemText(Gadget, i, *items\item[index]\Name$ + "(" + *items\item[index]\Value$ + ")", *VariableGadget_Used\ExtraColumns)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rbp,qword [p_VariableGadget_Used]
  MOVSXD rax,dword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+104]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+10]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S93
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rbp,qword [rsp+72]
  PUSH   rbp
  MOV    rax,qword [rsp+112]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S29
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+96]
  PUSH   qword [rsp+88]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Else      
  JMP   _EndIf1002
_EndIf1003:
; SetGadgetItemText(Gadget, i, *items\item[index]\Value$, *VariableGadget_Used\ExtraColumns+1)
  MOV    rbp,qword [p_VariableGadget_Used]
  MOVSXD r15,dword [rbp+8]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+18]
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_SetGadgetItemText2
; EndIf
_EndIf1002:
; Break
  JMP   _Next999
; EndIf
_EndIf1001:
; Next i  
_NextContinue999:
  INC    qword [rsp+64]
  JNO   _For998
_Next999:
; EndIf
_EndIf997:
; EndProcedure
_EndProcedureZero297:
  XOR    rax,rax
_EndProcedure297:
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure Debugger_ProcessEvents(EventWindowID, EventID)
_Procedure14:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS14=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Processed = 0
  MOV    qword [rsp+40],0
; 
; 
; 
; 
; Index = ListIndex(RunningDebuggers())  
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  CALL   PB_ListIndex
  MOV    qword [rsp+48],rax
; 
; ForEach RunningDebuggers()
  MOV    rcx,qword [t_RunningDebuggers]
  CALL   PB_ResetList
_ForEach3305:
  MOV    rcx,qword [t_RunningDebuggers]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next3305
; 
; For i = 0 To #DEBUGGER_WINDOW_LAST-1
  MOV    qword [rsp+56],0
  JMP   _ForSkipDebug3306
_For3306:
_ForSkipDebug3306:
  MOV    rax,10
  CMP    rax,qword [rsp+56]
  JL    _Next3307
; If RunningDebuggers()\Windows[i] = EventWindowID
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   rbp
  MOV    rax,qword [rsp+64]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  MOV    r15,qword [rbp+840]
  CMP    r15,qword [rsp+PS14+0]
  JNE   _EndIf3309
; Processed = 1
  MOV    qword [rsp+40],1
; 
; If EventID = #PB_Event_ActivateWindow 
  MOV    r15,qword [rsp+PS14+8]
  CMP    r15,13104
  JNE   _EndIf3311
; 
; If DebuggerBringToTop And DebuggerOnTop = 0
  CMP    qword [v_DebuggerBringToTop],0
  JE     No339
  MOV    r15,qword [v_DebuggerOnTop]
  AND    r15,r15
  JNE    No339
Ok339:
  MOV    rax,1
  JMP    End339
No339:
  XOR    rax,rax
End339:
  AND    rax,rax
  JE    _EndIf3313
; 
; 
; 
; If DebuggerMainWindow 
  CMP    qword [v_DebuggerMainWindow],0
  JE    _EndIf3315
; SetWindowForeground_NoActivate(DebuggerMainWindow)
  PUSH   qword [v_DebuggerMainWindow]
  POP    rcx
  CALL  _Procedure108
; EndIf
_EndIf3315:
; 
; For x = 0 To #DEBUGGER_WINDOW_LAST-1
  MOV    qword [rsp+64],0
  JMP   _ForSkipDebug3316
_For3316:
_ForSkipDebug3316:
  MOV    rax,10
  CMP    rax,qword [rsp+64]
  JL    _Next3317
; If x <> i And RunningDebuggers()\Windows[x] <> 0
  MOV    r15,qword [rsp+64]
  CMP    r15,qword [rsp+56]
  JE     No340
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  MOV    r15,qword [rbp+840]
  AND    r15,r15
  JE     No340
Ok340:
  MOV    rax,1
  JMP    End340
No340:
  XOR    rax,rax
End340:
  AND    rax,rax
  JE    _EndIf3319
; 
; If (x <> #DEBUGGER_WINDOW_Debug Or RunningDebuggers()\IsDebugOutputVisible) And (x <> #DEBUGGER_WINDOW_Watchlist Or RunningDebuggers()\IsWatchlistVisible)
  MOV    r15,qword [rsp+64]
  CMP    r15,1
  JNE    Ok341
  MOV    rbp,qword [t_RunningDebuggers+8]
  CMP    dword [rbp+144],0
  JNE    Ok341
  JMP    No341
Ok341:
  MOV    rax,1
  JMP    End341
No341:
  XOR    rax,rax
End341:
  AND    rax,rax
  JE     No342
  MOV    r15,qword [rsp+64]
  CMP    r15,6
  JNE    Ok343
  MOV    rbp,qword [t_RunningDebuggers+8]
  CMP    dword [rbp+148],0
  JNE    Ok343
  JMP    No343
Ok343:
  MOV    rax,1
  JMP    End343
No343:
  XOR    rax,rax
End343:
  AND    rax,rax
  JE     No342
Ok342:
  MOV    rax,1
  JMP    End342
No342:
  XOR    rax,rax
End342:
  AND    rax,rax
  JE    _EndIf3321
; SetWindowForeground_NoActivate(RunningDebuggers()\Windows[x])
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+840]
  POP    rcx
  CALL  _Procedure108
; EndIf
_EndIf3321:
; EndIf
_EndIf3319:
; Next x
_NextContinue3317:
  INC    qword [rsp+64]
  JNO   _For3316
_Next3317:
; 
; 
; SetWindowForeground_NoActivate(RunningDebuggers()\Windows[i])
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   rbp
  MOV    rax,qword [rsp+64]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+840]
  POP    rcx
  CALL  _Procedure108
; 
; EndIf
_EndIf3313:
; EndIf
_EndIf3311:
; 
; 
; 
; Select i
  PUSH   qword [rsp+56]
; 
; Case #DEBUGGER_WINDOW_Debug
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case297
; DebugWindowEvents(@RunningDebuggers(), EventID)
  SUB    rsp,8
  PUSH   qword [rsp+PS14+24]
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure440
  ADD    rsp,40
; 
; Case #DEBUGGER_WINDOW_Asm
  JMP   _EndSelect48
_Case297:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case298
; AsmWindowEvents(@RunningDebuggers(), EventID)
  SUB    rsp,8
  PUSH   qword [rsp+PS14+24]
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure450
  ADD    rsp,40
; 
; Case #DEBUGGER_WINDOW_Memory
  JMP   _EndSelect48
_Case298:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case299
; MemoryViewerWindowEvents(@RunningDebuggers(), EventID)
  SUB    rsp,8
  PUSH   qword [rsp+PS14+24]
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure484
  ADD    rsp,40
; 
; Case #DEBUGGER_WINDOW_Variable
  JMP   _EndSelect48
_Case299:
  MOV    r15,4
  CMP    r15,[rsp]
  JNE   _Case300
; VariableWindowEvents(@RunningDebuggers(), EventID)
  SUB    rsp,8
  PUSH   qword [rsp+PS14+24]
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure498
  ADD    rsp,40
; 
; Case #DEBUGGER_WINDOW_History
  JMP   _EndSelect48
_Case300:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case301
; HistoryWindowEvents(@RunningDebuggers(), EventID)
  SUB    rsp,8
  PUSH   qword [rsp+PS14+24]
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure504
  ADD    rsp,40
; 
; Case #DEBUGGER_WINDOW_WatchList
  JMP   _EndSelect48
_Case301:
  MOV    r15,6
  CMP    r15,[rsp]
  JNE   _Case302
; WatchListWindowEvents(@RunningDebuggers(), EventID)
  SUB    rsp,8
  PUSH   qword [rsp+PS14+24]
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure524
  ADD    rsp,40
; 
; Case #DEBUGGER_WINDOW_Library
  JMP   _EndSelect48
_Case302:
  MOV    r15,7
  CMP    r15,[rsp]
  JNE   _Case303
; LibraryViewerEvents(@RunningDebuggers(), EventID)
  SUB    rsp,8
  PUSH   qword [rsp+PS14+24]
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure560
  ADD    rsp,40
; 
; Case #DEBUGGER_WINDOW_Profiler
  JMP   _EndSelect48
_Case303:
  MOV    r15,8
  CMP    r15,[rsp]
  JNE   _Case304
; ProfilerWindowEvents(@RunningDebuggers(), EventID)
  SUB    rsp,8
  PUSH   qword [rsp+PS14+24]
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure602
  ADD    rsp,40
; 
; Case #DEBUGGER_WINDOW_DataBreakpoints
  JMP   _EndSelect48
_Case304:
  MOV    r15,9
  CMP    r15,[rsp]
  JNE   _Case305
; DataBreakpointWindowEvents(@RunningDebuggers(), EventID)
  SUB    rsp,8
  PUSH   qword [rsp+PS14+24]
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure516
  ADD    rsp,40
; 
; Case #DEBUGGER_WINDOW_Purifier
  JMP   _EndSelect48
_Case305:
  MOV    r15,10
  CMP    r15,[rsp]
  JNE   _Case306
; PurifierWindowEvents(@RunningDebuggers(), EventID)
  SUB    rsp,8
  PUSH   qword [rsp+PS14+24]
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure616
  ADD    rsp,40
; 
; Default 
  JMP   _EndSelect48
_Case306:
; Processed = 0
  MOV    qword [rsp+48],0
; 
; EndSelect      
_Case307:
_EndSelect48:
  POP    rax
; 
; Break 2
  JMP   _Next3305
; EndIf
_EndIf3309:
; Next i
_NextContinue3307:
  INC    qword [rsp+56]
  JNO   _For3306
_Next3307:
; 
; Next RunningDebuggers()
  JMP   _ForEach3305
_Next3305:
; 
; If Index = -1
  MOV    r15,qword [rsp+48]
  CMP    r15,-1
  JNE   _EndIf3323
; ResetList(RunningDebuggers())
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  CALL   PB_ResetList
; Else
  JMP   _EndIf3322
_EndIf3323:
; SelectElement(RunningDebuggers(), Index)
  PUSH   qword [rsp+48]
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  POP    rdx
  CALL   PB_SelectElement
; EndIf
_EndIf3322:
; 
; ProcedureReturn Processed
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure15
; EndProcedure
_EndProcedureZero15:
  XOR    rax,rax
_EndProcedure15:
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure Plugin_Image_GetObjectHeight(*Object)
_Procedure632:
  MOV    qword [rsp+8],rcx
  PS632=48
  SUB    rsp,40
; ProcedureReturn ImageHeight(*Object)
  PUSH   qword [rsp+PS632+0]
  POP    rcx
  CALL   PB_ImageHeight
  JMP   _EndProcedure633
; EndProcedure
_EndProcedureZero633:
  XOR    rax,rax
_EndProcedure633:
  ADD    rsp,40
  RET
; Procedure History_DebuggerEvent(*Debugger.DebuggerData)
_Procedure24:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS24=208
  MOV    rax,17
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; If *Debugger\Command\Command = #COMMAND_ControlCallstack
  MOV    rbp,qword [rsp+PS24+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,47
  JNE   _EndIf2474
; OpenHistoryWindow(*Debugger)
  PUSH   qword [rsp+PS24+0]
  POP    rcx
  CALL  _Procedure44
; ProcedureReturn     
  JMP   _EndProcedure25
; EndIf
_EndIf2474:
; 
; 
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_History] = 0
  MOV    rbp,qword [rsp+PS24+0]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+864]
  AND    r15,r15
  JNE   _EndIf2476
; ProcedureReturn 
  JMP   _EndProcedure25
; EndIf
_EndIf2476:
; 
; Select *Debugger\Command\Command
  MOV    rbp,qword [rsp+PS24+0]
  MOVSXD rax,dword [rbp+52]
  PUSH   rax
; 
; Case #COMMAND_History
  MOV    r15,22
  CMP    r15,[rsp]
  JNE   _Case212
; 
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Updating], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS24+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2632]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_ScrollArea], 1)
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS24+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2584]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Update], 1)
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS24+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2592]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; 
; 
; 
; If *Debugger\History
  MOV    rbp,qword [rsp+PS24+8]
  CMP    qword [rbp+624],0
  JE    _EndIf2478
; *history.Debugger_History = *Debugger\History
  MOV    rbp,qword [rsp+PS24+8]
  PUSH   qword [rbp+624]
  POP    rax
  MOV    qword [rsp+48],rax
; For i = 0 To *Debugger\HistorySize - 1
  MOV    qword [rsp+56],0
  JMP   _ForSkipDebug2479
_For2479:
_ForSkipDebug2479:
  MOV    rbp,qword [rsp+PS24+8]
  MOVSXD r15,dword [rbp+620]
  DEC    r15
  CMP    r15,qword [rsp+56]
  JL    _Next2480
; VariableGadget_Free(*history\item[i]\Variables)
  SUB    rsp,8
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+40]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure276
  ADD    rsp,40
; FreeGadget(*history\item[i]\Container)
  SUB    rsp,8
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FreeGadget
  ADD    rsp,40
; Next i
_NextContinue2480:
  INC    qword [rsp+56]
  JNO   _For2479
_Next2480:
; FreeMemory(*Debugger\History)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS24+16]
  PUSH   qword [rbp+624]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FreeMemory
  ADD    rsp,40
; *Debugger\History = 0
  MOV    rbp,qword [rsp+PS24+8]
  MOV    qword [rbp+624],0
; *Debugger\HistorySize = 0
  MOV    rbp,qword [rsp+PS24+8]
  MOV    dword [rbp+620],0
; EndIf  
_EndIf2478:
; 
; If *Debugger\Command\Value1 > 0
  MOV    rbp,qword [rsp+PS24+8]
  MOVSXD r15,dword [rbp+60]
  AND    r15,r15
  JLE   _EndIf2482
; *Debugger\HistorySize = *Debugger\Command\Value1
  MOV    rbp,qword [rsp+PS24+8]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
  MOV    rbp,qword [rsp+PS24+16]
  POP    rax
  MOV    dword [rbp+620],eax
; *Debugger\History = AllocateMemory(*Debugger\HistorySize * SizeOf(Debugger_HistoryData))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS24+16]
  MOVSXD r15,dword [rbp+620]
  IMUL   r15,48
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_AllocateMemory
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS24+16]
  POP    rax
  MOV    qword [rbp+624],rax
; If *Debugger\History 
  MOV    rbp,qword [rsp+PS24+8]
  CMP    qword [rbp+624],0
  JE    _EndIf2484
; *history.Debugger_History = *Debugger\History
  MOV    rbp,qword [rsp+PS24+8]
  PUSH   qword [rbp+624]
  POP    rax
  MOV    qword [rsp+48],rax
; *pointer = *Debugger\CommandData
  MOV    rbp,qword [rsp+PS24+8]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+64],rax
; 
; OpenGadgetList(*Debugger\Gadgets[#DEBUGGER_GADGET_History_ScrollArea])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS24+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2584]
  POP    rcx
  SUB    rsp,32
  CALL   PB_OpenGadgetList
  ADD    rsp,40
; 
; For i = 0 To *Debugger\HistorySize-1
  MOV    qword [rsp+56],0
  JMP   _ForSkipDebug2485
_For2485:
_ForSkipDebug2485:
  MOV    rbp,qword [rsp+PS24+8]
  MOVSXD r15,dword [rbp+620]
  DEC    r15
  CMP    r15,qword [rsp+56]
  JL    _Next2486
; Line = PeekL(*Pointer): *Pointer + 4
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    qword [rsp+72],rax
  MOV    r15,qword [rsp+64]
  ADD    r15,4
  MOV    qword [rsp+64],r15
; Call$ = PeekS(*Pointer): *Pointer + MemoryStringLengthBytes(*Pointer) + #CharSize 
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,32
  LEA    rcx,[rsp+88]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
  MOV    r15,qword [rsp+64]
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_MemoryStringLength
  ADD    rsp,40
  MOV    r14,rax
  ADD    r14,r14
  ADD    r15,r14
  ADD    r15,2
  MOV    qword [rsp+64],r15
; 
; *history\item[i]\Container   = ContainerGadget(#PB_Any, 0, 0, 0, 0, #PB_Container_Single)
  SUB    rsp,8
  PUSH   qword 4
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ContainerGadget2
  ADD    rsp,56
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    qword [rbp],rax
; *history\item[i]\Line      = TextGadget(#PB_Any, 5, 5, 0, 25, Language("Debugger","Line")+": "+Str((Line & $FFFFFF)+1))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S269
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+104]
  AND    r15,16777215
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 25
  PUSH   qword 0
  PUSH   qword 5
  PUSH   qword 5
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget
  ADD    rsp,48
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    qword [rbp+8],rax
; *history\item[i]\File      = TextGadget(#PB_Any, 5, 35, 0, 25, Language("Debugger","File")+": "+GetDebuggerRelativeFile(*Debugger, Line))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S270
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+112]
  PUSH   qword [rsp+PS24+56]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure250
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 25
  PUSH   qword 0
  PUSH   qword 35
  PUSH   qword 5
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget
  ADD    rsp,48
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    qword [rbp+16],rax
; *history\item[i]\Show      = ButtonGadget(#PB_Any, 0, 5, 110, 25, Language("Debugger","ShowVariables"), #PB_Button_Toggle)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 4099
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S271
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 25
  PUSH   qword 110
  PUSH   qword 5
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget2
  ADD    rsp,64
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    qword [rbp+24],rax
; *history\item[i]\Call      = StringGadget(#PB_Any, 5, 65, 0, 25, Call$, #PB_String_ReadOnly)
  PUSH   qword 2048
  PUSH   qword [rsp+88]
  PUSH   qword 25
  PUSH   qword 0
  PUSH   qword 65
  PUSH   qword 5
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringGadget2
  ADD    rsp,56
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    qword [rbp+32],rax
; *history\item[i]\Variables = VariableGadget_Create(#PB_Any, 5, 100, 0, 195, Language("Debugger","Scope"), #True, #False)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  PUSH   qword 1
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S250
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 195
  PUSH   qword 0
  PUSH   qword 100
  PUSH   qword 5
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure274
  ADD    rsp,64
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    qword [rbp+40],rax
; CloseGadgetList()  
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_CloseGadgetList
  ADD    rsp,40
; 
; Command.CommandInfo\Command = #COMMAND_GetHistoryLocals
  LEA    rbp,[rsp+88]
  MOV    dword [rbp],17
; Command\Value1 = i
  PUSH   qword [rsp+56]
  POP    rax
  MOV    dword [rbp+8],eax
; SendDebuggerCommand(*Debugger, @Command)  
  SUB    rsp,8
  LEA    rax,[rsp+96]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS24+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; Next i
_NextContinue2486:
  INC    qword [rsp+56]
  JNO   _For2485
_Next2486:
; 
; CloseGadgetList()
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_CloseGadgetList
  ADD    rsp,40
; 
; EndIf
_EndIf2484:
; EndIf
_EndIf2482:
; 
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_History_CurrentLine], Language("Debugger","Line")+": "+Str((*Debugger\Command\Value2 & $FFFFFF) + 1))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S269
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS24+40]
  MOVSXD r15,dword [rbp+64]
  AND    r15,16777215
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS24+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2600]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_History_CurrentFile], Language("Debugger","File")+": "+GetDebuggerRelativeFile(*Debugger, *Debugger\Command\Value2))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S270
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS24+48]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS24+56]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure250
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS24+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2608]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; 
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Updating], 1)
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS24+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2632]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_ScrollArea], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS24+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2584]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Update], 0)    
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS24+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2592]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; 
; HistoryWindowEvents(*Debugger, #PB_Event_SizeWindow)  
  SUB    rsp,8
  PUSH   qword 13118
  PUSH   qword [rsp+PS24+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure504
  ADD    rsp,40
; 
; 
; Case  #COMMAND_HistoryLocals
  JMP   _EndSelect29
_Case212:
  MOV    r15,23
  CMP    r15,[rsp]
  JNE   _Case213
; 
; If *Debugger\History
  MOV    rbp,qword [rsp+PS24+8]
  CMP    qword [rbp+624],0
  JE    _EndIf2488
; *history.Debugger_History = *Debugger\History
  MOV    rbp,qword [rsp+PS24+8]
  PUSH   qword [rbp+624]
  POP    rax
  MOV    qword [rsp+48],rax
; If *Debugger\Command\Value1 < *Debugger\HistorySize
  MOV    rbp,qword [rsp+PS24+8]
  MOVSXD r15,dword [rbp+60]
  MOV    rbp,qword [rsp+PS24+8]
  CMP    r15d,dword [rbp+620]
  JGE   _EndIf2490
; 
; VariableGadget_Lock(*history\item[*Debugger\Command\Value1]\Variables)
  SUB    rsp,8
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rbp,qword [rsp+PS24+24]
  MOVSXD rax,dword [rbp+60]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+40]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure278
  ADD    rsp,40
; VariableGadget_Allocate(*history\item[*Debugger\Command\Value1]\Variables, *Debugger\Command\Value2)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS24+16]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rbp,qword [rsp+PS24+32]
  MOVSXD rax,dword [rbp+60]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+40]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure286
  ADD    rsp,40
; VariableGadget_Use(*history\item[*Debugger\Command\Value1]\Variables)
  SUB    rsp,8
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rbp,qword [rsp+PS24+24]
  MOVSXD rax,dword [rbp+60]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+40]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure290
  ADD    rsp,40
; 
; *Pointer = *Debugger\CommandData
  MOV    rbp,qword [rsp+PS24+8]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+64],rax
; For i = 1 To *Debugger\Command\Value2
  MOV    qword [rsp+56],1
  JMP   _ForSkipDebug2491
_For2491:
_ForSkipDebug2491:
  MOV    rbp,qword [rsp+PS24+8]
  MOVSXD rax,dword [rbp+64]
  CMP    rax,qword [rsp+56]
  JL    _Next2492
; type = PeekB(*Pointer) & ~(1<<6) 
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,-65
  MOV    qword [rsp+112],r15
; *Pointer + 1
  MOV    r15,qword [rsp+64]
  INC    r15
  MOV    qword [rsp+64],r15
; dynamictype = PeekB(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+120],rax
; *Pointer + 1
  MOV    r15,qword [rsp+64]
  INC    r15
  MOV    qword [rsp+64],r15
; scope = PeekB(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+128],rax
; *Pointer + 1
  MOV    r15,qword [rsp+64]
  INC    r15
  MOV    qword [rsp+64],r15
; sublevel = PeekL(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    qword [rsp+136],rax
; *Pointer + 4
  MOV    r15,qword [rsp+64]
  ADD    r15,4
  MOV    qword [rsp+64],r15
; name$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+152]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1
  MOV    r15,qword [rsp+64]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+64],r15
; 
; Select scope
  PUSH   qword [rsp+128]
; Case #SCOPE_GLOBAL: ScopeName$ = ""
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case214
  MOV    rdx,_S3
  LEA    rcx,[rsp+160]
  SUB    rsp,32
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,32
; Case #SCOPE_LOCAL:  ScopeName$ = "Local"
  JMP   _EndSelect30
_Case214:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case215
  MOV    rdx,_S79
  LEA    rcx,[rsp+160]
  SUB    rsp,32
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,32
; Case #SCOPE_STATIC: ScopeName$ = "Static"
  JMP   _EndSelect30
_Case215:
  MOV    r15,4
  CMP    r15,[rsp]
  JNE   _Case216
  MOV    rdx,_S80
  LEA    rcx,[rsp+160]
  SUB    rsp,32
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,32
; Case #SCOPE_SHARED: ScopeName$ = "Shared"
  JMP   _EndSelect30
_Case216:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case217
  MOV    rdx,_S81
  LEA    rcx,[rsp+160]
  SUB    rsp,32
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,32
; EndSelect          
_Case217:
_EndSelect30:
  POP    rax
; 
; VariableGadget_Add(type, dynamictype, sublevel, ScopeName$, name$, "", *Pointer, *Debugger\Is64bit)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS24+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+80]
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword [rsp+176]
  PUSH   qword [rsp+192]
  PUSH   qword [rsp+184]
  PUSH   qword [rsp+176]
  PUSH   qword [rsp+176]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure292
  ADD    rsp,72
; *Pointer + GetValueSize(type, *Pointer, *Debugger\Is64bit)                                                               
  MOV    r15,qword [rsp+64]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS24+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure246
  ADD    rsp,40
  ADD    r15,rax
  MOV    qword [rsp+64],r15
; Next i   
_NextContinue2492:
  INC    qword [rsp+56]
  JNO   _For2491
_Next2492:
; 
; VariableGadget_Unlock(*history\item[*Debugger\Command\Value1]\Variables) 
  SUB    rsp,8
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rbp,qword [rsp+PS24+24]
  MOVSXD rax,dword [rbp+60]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+40]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure280
  ADD    rsp,40
; VariableGadget_Sort(*history\item[*Debugger\Command\Value1]\Variables)
  SUB    rsp,8
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rbp,qword [rsp+PS24+24]
  MOVSXD rax,dword [rbp+60]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+40]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure272
  ADD    rsp,40
; 
; EndIf
_EndIf2490:
; EndIf
_EndIf2488:
; 
; Case #COMMAND_Procedures
  JMP   _EndSelect29
_Case213:
  MOV    r15,24
  CMP    r15,[rsp]
  JNE   _Case218
; If *Debugger\Procedures
  MOV    rbp,qword [rsp+PS24+8]
  CMP    qword [rbp+104],0
  JE    _EndIf2494
; ClearGadgetItems(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Stats])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS24+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2640]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ClearGadgetItems
  ADD    rsp,40
; *Pointer = *Debugger\Procedures
  MOV    rbp,qword [rsp+PS24+8]
  PUSH   qword [rbp+104]
  POP    rax
  MOV    qword [rsp+64],rax
; For i = 1 To *Debugger\NbPRocedures
  MOV    qword [rsp+56],1
  JMP   _ForSkipDebug2495
_For2495:
_ForSkipDebug2495:
  MOV    rbp,qword [rsp+PS24+8]
  MOVSXD rax,dword [rbp+100]
  CMP    rax,qword [rsp+56]
  JL    _Next2496
; Name$ = PeekAscii(*Pointer) + "()"
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  MOV    rcx,_S244
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+152]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1
  MOV    r15,qword [rsp+64]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+64],r15
; ModName$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+168]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1
  MOV    r15,qword [rsp+64]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+64],r15
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Stats], -1, ModuleName(Name$, ModName$))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+184]
  PUSH   qword [rsp+176]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure68
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS24+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2640]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Next i
_NextContinue2496:
  INC    qword [rsp+56]
  JNO   _For2495
_Next2496:
; 
; Command.CommandInfo\Command = #COMMAND_GetPRocedureStats
  LEA    rbp,[rsp+88]
  MOV    dword [rbp],19
; SendDebuggerCommand(*Debugger, @Command)         
  SUB    rsp,8
  LEA    rax,[rsp+96]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS24+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; EndIf    
_EndIf2494:
; 
; Case #COMMAND_ProcedureStats
  JMP   _EndSelect29
_Case218:
  MOV    r15,25
  CMP    r15,[rsp]
  JNE   _Case219
; *stats.ProcedureStats_List = *Debugger\CommandData     
  MOV    rbp,qword [rsp+PS24+8]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+168],rax
; For i = 0 To *Debugger\Command\Value1 - 1
  MOV    qword [rsp+56],0
  JMP   _ForSkipDebug2497
_For2497:
_ForSkipDebug2497:
  MOV    rbp,qword [rsp+PS24+8]
  MOVSXD r15,dword [rbp+60]
  DEC    r15
  CMP    r15,qword [rsp+56]
  JL    _Next2498
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Stats], i, Str(*stats\callcount[i]), 1)      
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+200]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp]
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  MOV    rbp,qword [rsp+PS24+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2640]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Next i
_NextContinue2498:
  INC    qword [rsp+56]
  JNO   _For2497
_Next2498:
; 
; EndSelect
_Case219:
_EndSelect29:
  POP    rax
; 
; EndProcedure
_EndProcedureZero25:
  XOR    rax,rax
_EndProcedure25:
  PUSH   rax
  MOV    rcx,qword [rsp+152]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+144]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+160]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+80]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,176
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure UpdateGadgetStates()
_Procedure686:
  PUSH   rbp
  PUSH   r15
  PS686=64
  SUB    rsp,40
; 
; If *DebuggerData\ProgramState = -1  
  MOV    rbp,qword [p_DebuggerData]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JNE   _EndIf3610
; DisableGadget(#GADGET_BreakSet, 1)    
  PUSH   qword 1
  PUSH   qword 19
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_BreakClear, 1)    
  PUSH   qword 1
  PUSH   qword 20
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_DataBreak, 1)
  PUSH   qword 1
  PUSH   qword 21
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; Else
  JMP   _EndIf3609
_EndIf3610:
; DisableGadget(#GADGET_BreakSet, 0)
  PUSH   qword 0
  PUSH   qword 19
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_BreakClear, 0) 
  PUSH   qword 0
  PUSH   qword 20
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_DataBreak, 0) 
  PUSH   qword 0
  PUSH   qword 21
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; EndIf 
_EndIf3609:
; 
; If *DebuggerData\ProgramState = -1 
  MOV    rbp,qword [p_DebuggerData]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JNE   _EndIf3613
; DisableGadget(#GADGET_Run, 1)
  PUSH   qword 1
  PUSH   qword 1
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_Stop, 1)
  PUSH   qword 1
  PUSH   qword 2
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_Step, 1)
  PUSH   qword 1
  PUSH   qword 3
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_StepCount, 1)     
  PUSH   qword 1
  PUSH   qword 4
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_StepOver, 1)
  PUSH   qword 1
  PUSH   qword 5
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_StepOut, 1)
  PUSH   qword 1
  PUSH   qword 6
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; ElseIf *DebuggerData\ProgramState = 0 
  JMP   _EndIf3612
_EndIf3613:
  MOV    rbp,qword [p_DebuggerData]
  MOVSXD r15,dword [rbp+112]
  AND    r15,r15
  JNE   _EndIf3614
; DisableGadget(#GADGET_Run, 1)
  PUSH   qword 1
  PUSH   qword 1
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_Stop, 0)
  PUSH   qword 0
  PUSH   qword 2
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_Step, 1)
  PUSH   qword 1
  PUSH   qword 3
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_StepCount, 1)  
  PUSH   qword 1
  PUSH   qword 4
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_StepOver, 1)
  PUSH   qword 1
  PUSH   qword 5
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_StepOut, 1)
  PUSH   qword 1
  PUSH   qword 6
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; ElseIf *DebuggerData\ProgramState = 6 
  JMP   _EndIf3612
_EndIf3614:
  MOV    rbp,qword [p_DebuggerData]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,6
  JNE   _EndIf3615
; DisableGadget(#GADGET_Run, 1)
  PUSH   qword 1
  PUSH   qword 1
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_Stop, 1)
  PUSH   qword 1
  PUSH   qword 2
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_Step, 1)
  PUSH   qword 1
  PUSH   qword 3
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_StepCount, 1)  
  PUSH   qword 1
  PUSH   qword 4
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_StepOver, 1)
  PUSH   qword 1
  PUSH   qword 5
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_StepOut, 1)      
  PUSH   qword 1
  PUSH   qword 6
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; Else 
  JMP   _EndIf3612
_EndIf3615:
; DisableGadget(#GADGET_Run, 0)
  PUSH   qword 0
  PUSH   qword 1
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_Stop, 1)
  PUSH   qword 1
  PUSH   qword 2
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_Step, 0)
  PUSH   qword 0
  PUSH   qword 3
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_StepCount, 0) 
  PUSH   qword 0
  PUSH   qword 4
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_StepOver, 0)
  PUSH   qword 0
  PUSH   qword 5
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(#GADGET_StepOut, 0)      
  PUSH   qword 0
  PUSH   qword 6
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; EndIf   
_EndIf3612:
; 
; EndProcedure
_EndProcedureZero687:
  XOR    rax,rax
_EndProcedure687:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure WinPipe_ReceiveThread(Dummy)
_Procedure312:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS312=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; 
; 
; 
; Protected Command.CommandInfo
; Protected *CommandData    
; 
; Repeat
_Repeat1101:
; LockMutex(WinPipe_Mutex)  
  PUSH   qword [v_WinPipe_Mutex]
  POP    rcx
  CALL   qword [PB_LockMutex]
; 
; TotalCount = 0
  MOV    qword [rsp+72],0
; ForEach WinPipe_Data()
  MOV    rcx,qword [t_WinPipe_Data]
  CALL   PB_ResetList
_ForEach1102:
  MOV    rcx,qword [t_WinPipe_Data]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next1102
; 
; 
; 
; While WinPipe_Data()\EndReceived = 0 And WinPipe_Data()\IsFatalError = 0
_While1103:
  MOV    rbp,qword [t_WinPipe_Data+8]
  MOVSXD r15,dword [rbp+88]
  AND    r15,r15
  JNE    No170
  MOVSXD r15,dword [rbp+76]
  AND    r15,r15
  JNE    No170
Ok170:
  MOV    rax,1
  JMP    End170
No170:
  XOR    rax,rax
End170:
  AND    rax,rax
  JE    _Wend1103
; 
; 
; If WinPipe_Data()\StackCount >= #MAX_COMMANDSTACK 
  MOV    rbp,qword [t_WinPipe_Data+8]
  MOVSXD r15,dword [rbp+104]
  CMP    r15,800
  JL    _EndIf1105
; 
; 
; Break
  JMP   _Wend1103
; EndIf         
_EndIf1105:
; 
; 
; If WinPipe_ReadCommand(@WinPipe_Data(), @Command, @*CommandData)
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [t_WinPipe_Data+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure310
  AND    rax,rax
  JE    _EndIf1107
; If WinPipe_Data()\IsFatalError = 0
  MOV    rbp,qword [t_WinPipe_Data+8]
  MOVSXD r15,dword [rbp+76]
  AND    r15,r15
  JNE   _EndIf1109
; 
; 
; 
; 
; LockMutex(WinPipe_Data()\StackMutex)
  MOV    rbp,qword [t_WinPipe_Data+8]
  PUSH   qword [rbp+96]
  POP    rcx
  CALL   qword [PB_LockMutex]
; 
; 
; CopyMemory(@Command, @WinPipe_Data()\Stack[WinPipe_Data()\StackCount]\Command, SizeOf(CommandInfo))
  PUSH   qword 20
  PUSH   rbp
  MOVSXD rax,dword [rbp+104]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  LEA    rax,[rbp+108]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CopyMemory
; WinPipe_Data()\Stack[WinPipe_Data()\StackCount]\CommandData = *CommandData
  PUSH   qword [rsp+64]
  MOV    rbp,qword [t_WinPipe_Data+8]
  PUSH   rbp
  MOVSXD rax,dword [rbp+104]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    qword [rbp+128],rax
; WinPipe_Data()\StackCount + 1  
  MOV    rbp,qword [t_WinPipe_Data+8]
  MOVSXD r15,dword [rbp+104]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rax
  MOV    dword [rbp+104],eax
; 
; UnlockMutex(WinPipe_Data()\StackMutex)
  PUSH   qword [rbp+96]
  POP    rcx
  CALL   qword [PB_UnlockMutex]
; 
; EndIf
_EndIf1109:
; 
; TotalCount + 1
  MOV    r15,qword [rsp+72]
  INC    r15
  MOV    qword [rsp+72],r15
; 
; 
; If TotalCount > 50 
  MOV    r15,qword [rsp+72]
  CMP    r15,50
  JLE   _EndIf1111
; Break 2
  JMP   _Next1102
; EndIf              
_EndIf1111:
; Else
  JMP   _EndIf1106
_EndIf1107:
; Break 
  JMP   _Wend1103
; EndIf
_EndIf1106:
; Wend  
  JMP   _While1103
_Wend1103:
; 
; Next WinPipe_Data()
  JMP   _ForEach1102
_Next1102:
; 
; UnlockMutex(WinPipe_Mutex)
  PUSH   qword [v_WinPipe_Mutex]
  POP    rcx
  CALL   qword [PB_UnlockMutex]
; 
; Delay(10) 
  PUSH   qword 10
  POP    rcx
  CALL   PB_Delay
; ForEver
  JMP   _Repeat1101
_Until1101:
; 
; EndProcedure
_EndProcedureZero313:
  XOR    rax,rax
_EndProcedure313:
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure IsBreakPoint()
_Procedure674:
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS674=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; If SourceFiles(CurrentSource)\IsLoaded
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  CMP    dword [rbp+8],0
  JE    _EndIf3568
; Line = ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_LINEFROMPOSITION, ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_GETCURRENTPOS, 0, 0), 0)
  PUSH   qword 0
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 2008
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 2166
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
  MOV    qword [rsp+40],rax
; Markers = ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_MARKERGET, Line)
  PUSH   qword [rsp+40]
  PUSH   qword 2046
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_ScintillaSendMessage2
  MOV    qword [rsp+48],rax
; 
; If Markers & (1 << 7)
  MOV    r15,qword [rsp+48]
  AND    r15,128
  AND    r15,r15
  JE    _EndIf3570
; ProcedureReturn #True
  MOV    rax,1
  JMP   _EndProcedure675
; EndIf
_EndIf3570:
; EndIf
_EndIf3568:
; 
; ProcedureReturn #False
  XOR    rax,rax
  JMP   _EndProcedure675
; EndProcedure
_EndProcedureZero675:
  XOR    rax,rax
_EndProcedure675:
  ADD    rsp,64
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure WatchList_AddItem(*Debugger.DebuggerData)
_Procedure522:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS522=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; Variable$ = GetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Variable])
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS522+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2712]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetText
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; If Variable$ <> ""
  PUSH   qword [rsp+40]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf2565
; Command.CommandInfo\Command = #COMMAND_WatchlistAdd
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],21
; Command\Value1 = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Procedure])-1
  MOV    rbp,qword [rsp+PS522+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2704]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    r15,rax
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  LEA    rbp,[rsp+56]
  POP    rax
  MOV    dword [rbp+8],eax
; Command\Value2 = 1 
  MOV    dword [rbp+12],1
; Command\DataSize = StringByteLength(Variable$, #PB_UTF8)+1
  PUSH   qword 2
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_StringByteLength2
  MOV    r15,rax
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rax
  MOV    dword [rbp+4],eax
; 
; *Buffer = AllocateMemory(Command\DataSize)
  MOVSXD rax,dword [rbp+4]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+72],rax
; If *Buffer
  CMP    qword [rsp+72],0
  JE    _EndIf2567
; PokeS(*Buffer, Variable$, -1, #PB_UTF8)
  PUSH   qword 2
  PUSH   qword -1
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_PokeS3
; SendDebuggerCommandWithData(*Debugger, @Command, *Buffer)
  PUSH   qword [rsp+72]
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS522+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure8
; FreeMemory(*Buffer)
  PUSH   qword [rsp+72]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf2567:
; 
; Command.CommandInfo\Command = #COMMAND_GetWatchlist
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],23
; SendDebuggerCommand(*Debugger, @Command)  
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS522+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Variable], "")        
  MOV    rax,_S3
  PUSH   rax
  MOV    rbp,qword [rsp+PS522+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2712]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetText
; EndIf
_EndIf2565:
; 
; EndProcedure
_EndProcedureZero523:
  XOR    rax,rax
_EndProcedure523:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure IsEqualFile(File1$, File2$)
_Procedure156:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PS156=64
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS156+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
  MOV    rdx,[rsp+PS156+8]
  LEA    rcx,[rsp+48]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; 
; File1$ = UniqueFilename(File1$)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure154
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; File2$ = UniqueFilename(File2$)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure154
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; 
; 
; If File1$ <> "" And File2$ <> ""
  PUSH   qword [rsp+40]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    No0
  PUSH   qword [rsp+48]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    No0
Ok0:
  MOV    rax,1
  JMP    End0
No0:
  XOR    rax,rax
End0:
  AND    rax,rax
  JE    _EndIf114
; 
; CompilerIf #PB_Compiler_OS = #PB_OS_Linux
; If UCase(File1$) = UCase(File2$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,32
  POP    rcx
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  ADD    rcx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf116
; ProcedureReturn #True
  MOV    rax,1
  JMP   _EndProcedure157
; EndIf
_EndIf116:
; 
; CompilerEndIf
; 
; EndIf
_EndIf114:
; 
; ProcedureReturn #False
  XOR    rax,rax
  JMP   _EndProcedure157
; EndProcedure
_EndProcedureZero157:
  XOR    rax,rax
_EndProcedure157:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,56
  RET
; Procedure Debugger_AddShortcuts(Window) 
_Procedure6:
  MOV    qword [rsp+8],rcx
  PS6=48
  SUB    rsp,40
; 
; AddKeyboardShortcut(Window, Shortcut_Run, #MENU_Run)
  PUSH   qword 266
  PUSH   qword [v_Shortcut_Run]
  PUSH   qword [rsp+PS6+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddKeyboardShortcut
; AddKeyboardShortcut(Window, Shortcut_Stop, #MENU_Stop)
  PUSH   qword 265
  PUSH   qword [v_Shortcut_Stop]
  PUSH   qword [rsp+PS6+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddKeyboardShortcut
; AddKeyboardShortcut(Window, Shortcut_Step, #MENU_Step)
  PUSH   qword 267
  PUSH   qword [v_Shortcut_Step]
  PUSH   qword [rsp+PS6+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddKeyboardShortcut
; 
; EndProcedure
_EndProcedureZero7:
  XOR    rax,rax
_EndProcedure7:
  ADD    rsp,40
  RET
; Procedure StartGadgetFlickerFix(Gadget)
_Procedure130:
  MOV    qword [rsp+8],rcx
  PS130=48
  SUB    rsp,40
; SendMessage_(GadgetID(Gadget), #WM_SETREDRAW, #False, 0)
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 11
  SUB    rsp,8
  PUSH   qword [rsp+PS130+32]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; EndProcedure
_EndProcedureZero131:
  XOR    rax,rax
_EndProcedure131:
  ADD    rsp,40
  RET
; Procedure UpdateMemoryViewerWindow(*Debugger.DebuggerData)
_Procedure488:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS488=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; SetWindowTitle(*Debugger\Windows[#DEBUGGER_WINDOW_Memory], Language("Debugger","MemoryWindowTitle") + " - " + GetFilePart(*Debugger\FileName$))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S224
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS488+40]
  PUSH   qword [rbp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetFilePart
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS488+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+848]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetWindowTitle
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Text], Language("Debugger","Range")+":")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S225
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS488+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2224]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Display], Language("Debugger","Display"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S204
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS488+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2256]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_CopyText], Language("Debugger","CopyText"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S226
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS488+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2296]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_SaveText], Language("Debugger","SaveText"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S227
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS488+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2304]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_SaveRaw], Language("Debugger","SaveRaw"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S228
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS488+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2312]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; type = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType])
  MOV    rbp,qword [rsp+PS488+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    qword [rsp+40],rax
; ClearGadgetItems(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType])
  MOV    rbp,qword [rsp+PS488+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  POP    rcx
  CALL   PB_ClearGadgetItems
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewHex"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S229
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS488+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewByte"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S230
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS488+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewChar"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S231
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS488+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewWord"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S232
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS488+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewLong"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S233
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS488+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewQuad"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S234
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS488+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewFloat"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S235
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS488+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewDouble"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S236
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS488+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewString") + " (Ascii)")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S237
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S238
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS488+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewString") + " (Unicode)")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S237
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S239
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS488+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewString") + " (Utf-8)")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S237
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S240
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS488+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], type)
  PUSH   qword [rsp+40]
  MOV    rbp,qword [rsp+PS488+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; 
; MemoryViewerWindowEvents(*Debugger, #PB_Event_SizeWindow) 
  PUSH   qword 13118
  PUSH   qword [rsp+PS488+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure484
; 
; EndProcedure
_EndProcedureZero489:
  XOR    rax,rax
_EndProcedure489:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure VariableGadget_Use(Gadget)
_Procedure290:
  MOV    qword [rsp+8],rcx
  PS290=48
  SUB    rsp,40
; Shared *VariableGadget_Used.VariableGadget 
; *VariableGadget_Used = GetGadgetData(Gadget)
  PUSH   qword [rsp+PS290+0]
  POP    rcx
  CALL   PB_GetGadgetData
  MOV    qword [p_VariableGadget_Used],rax
; EndProcedure
_EndProcedureZero291:
  XOR    rax,rax
_EndProcedure291:
  ADD    rsp,40
  RET
; Procedure UpdateVariableWindow(*Debugger.DebuggerData)
_Procedure502:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS502=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; SetWindowTitle(*Debugger\Windows[#DEBUGGER_WINDOW_Variable], Language("Debugger","VariableWindowTitle") + " - " + GetFilePart(*Debugger\FileName$))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S248
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS502+40]
  PUSH   qword [rbp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetFilePart
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS502+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetWindowTitle
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel], 0, Language("Debugger","Variables"), 0)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S249
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS502+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2320]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel], 1, Language("Debugger","Arrays"), 0)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S251
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS502+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2320]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel], 2, Language("Debugger","LinkedLists"), 0)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S252
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS502+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2320]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel], 3, Language("Debugger","Maps"), 0)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S253
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS502+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2320]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel], 4, Language("Debugger","ViewArrayList"), 0)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S246
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 4
  MOV    rbp,qword [rsp+PS502+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2320]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Update], Language("Debugger","Update"))  
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S220
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS502+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2368]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateArray], Language("Debugger","Update"))  
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S220
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS502+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2392]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateList], Language("Debugger","Update"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S220
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS502+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2424]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateMap], Language("Debugger","Update"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S220
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS502+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2456]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Text], Language("Debugger","ArrayListName")+":")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S254
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS502+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2528]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_AllItems], Language("Debugger","AllItems"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S255
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS502+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2480]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_NonZeroItems], Language("Debugger","NonZeroItems"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S256
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS502+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2488]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ItemRange], Language("Debugger","ItemRange")+":")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S257
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS502+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2496]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Display], Language("Debugger","Display"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S204
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS502+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2536]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Copy], Language("Debugger","Copy"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S206
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS502+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2544]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Save], Language("Debugger","Save"))  
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S207
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS502+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2552]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; VariableWindowEvents(*Debugger, #PB_Event_SizeWindow) 
  PUSH   qword 13118
  PUSH   qword [rsp+PS502+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure498
; 
; EndProcedure
_EndProcedureZero503:
  XOR    rax,rax
_EndProcedure503:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure Network_ConnectClient(*This.Network_Communication)
_Procedure394:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS394=176
  MOV    rax,14
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; Success = #False
  MOV    qword [rsp+40],0
; Connected = #False
  MOV    qword [rsp+48],0
; Protected NewList Values$()
  PUSH   qword [rsp+56]
  POP    rcx
  CALL   PB_FreeList
  MOV    r9,8
  MOV    r8,s_s
  LEA    rdx,[rsp+56]
  MOV    rcx,8
  CALL   PB_NewList
; Message$ = ""   
  MOV    rdx,_S3
  LEA    rcx,[rsp+72]
  CALL   SYS_FastAllocateStringFree4
; 
; Title$ = Language("NetworkDebugger", "ConnectTitle") + " " + *This\Host$ + " (" + Language("NetworkDebugger", "Port") + " " + Str(*This\Port) + ") ..."
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S157
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S25
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+PS394+8]
  MOV    rcx,qword [rbp+8]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S158
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S159
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  MOV    rcx,_S25
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS394+24]
  MOVSXD rax,dword [rbp+24]
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S160
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; Network_OpenWindow(*This, Title$)  
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+PS394+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure384
; Network_AddLog(*This, Language("NetworkDebugger", "Connect"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S161
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS394+24]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; If Network_ConnectSocketStart(*This\Socket, *This\Host$, *This\Port)
  SUB    rsp,8
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS394+16]
  MOVSXD rax,dword [rbp+24]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS394+24]
  MOV    rcx,qword [rbp+8]
  SUB    rsp,40
  CALL   SYS_ToAscii
  ADD    rsp,40
  PUSH   rax
  MOV    qword [rsp+24],rax
  MOV    rbp,qword [rsp+PS394+32]
  PUSH   qword [rbp+60]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   Network_ConnectSocketStart
  ADD    rsp,40
  PUSH   rax
  MOV    rcx,[rsp+8]
  SUB    rsp,32
  CALL   SYS_FreeStringNoCheck
  ADD    rsp,32
  POP    rax
  ADD    rsp,8
  AND    rax,rax
  JE    _EndIf1271
; Network_FlushWindowEvents(*This)
  PUSH   qword [rsp+PS394+0]
  POP    rcx
  CALL  _Procedure388
; 
; While *This\AbortPressed = #False And Connected = #False    
_While1272:
  MOV    rbp,qword [rsp+PS394+0]
  MOVSXD r15,dword [rbp+120]
  AND    r15,r15
  JNE    No190
  MOV    r15,qword [rsp+48]
  AND    r15,r15
  JNE    No190
Ok190:
  MOV    rax,1
  JMP    End190
No190:
  XOR    rax,rax
End190:
  AND    rax,rax
  JE    _Wend1272
; Select Network_ConnectSocketCheck(*This\Socket)
  MOV    rbp,qword [rsp+PS394+0]
  PUSH   qword [rbp+60]
  POP    rcx
  CALL   Network_ConnectSocketCheck
  MOV    rax,rax
  PUSH   rax
; 
; Case 0 
  XOR    r15,r15
  CMP    r15,[rsp]
  JNE   _Case86
; If Network_FlushWindowEvents(*This) = 0
  SUB    rsp,8
  PUSH   qword [rsp+PS394+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure388
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1274
; Delay(50)
  SUB    rsp,8
  PUSH   qword 50
  POP    rcx
  SUB    rsp,32
  CALL   PB_Delay
  ADD    rsp,40
; EndIf
_EndIf1274:
; 
; Case 1 
  JMP   _EndSelect13
_Case86:
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case87
; Connected = #True                    
  MOV    qword [rsp+56],1
; 
; Case 2 
  JMP   _EndSelect13
_Case87:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case88
; Network_AddLog(*This, Language("NetworkDebugger", "ConnectionFailed"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S162
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS394+24]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Break
  ADD    rsp,8
  JMP   _Wend1272
; 
; EndSelect
_Case88:
_EndSelect13:
  POP    rax
; Wend
  JMP   _While1272
_Wend1272:
; Else
  JMP   _EndIf1270
_EndIf1271:
; Network_AddLog(*This, Language("NetworkDebugger", "ConnectionFailed"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S162
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS394+24]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf 
_EndIf1270:
; 
; If Connected
  CMP    qword [rsp+48],0
  JE    _EndIf1277
; Network_AddLog(*This, Language("NetworkDebugger", "QueryStatus"))  
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S163
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS394+24]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; Request$ = "CONNECT " + Str(#PB_Compiler_Version) + " EXECUTABLE" + #LF$
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S164
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 570
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S165
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+96]
  POP    rdx
  CALL   SYS_AllocateString4
; Request$ + "  CallOnStart: "+Str(CallDebuggerOnStart) + #LF$
  MOV    rcx,qword [rsp+88]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S143
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [v_CallDebuggerOnStart]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+96]
  POP    rdx
  CALL   SYS_AllocateString4
; Request$ + "  CallOnEnd: "+Str(CallDebuggerOnEnd) + #LF$
  MOV    rcx,qword [rsp+88]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S144
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [v_CallDebuggerOnEnd]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+96]
  POP    rdx
  CALL   SYS_AllocateString4
; Request$ + "  Unicode: "+Str(#PB_Compiler_Unicode) + #LF$
  MOV    rcx,qword [rsp+88]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S145
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+96]
  POP    rdx
  CALL   SYS_AllocateString4
; Request$ + "  BigEndian: "+Str(#DEBUGGER_BigEndian) + #LF$
  MOV    rcx,qword [rsp+88]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S146
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+96]
  POP    rdx
  CALL   SYS_AllocateString4
; Request$ + #LF$
  MOV    rcx,qword [rsp+88]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+96]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; If Network_SendString(*This\Socket, Request$)
  SUB    rsp,8
  SUB    rsp,8
  MOV    rcx,qword [rsp+104]
  SUB    rsp,32
  CALL   SYS_ToAscii
  ADD    rsp,32
  PUSH   rax
  MOV    qword [rsp+16],rax
  MOV    rbp,qword [rsp+PS394+24]
  PUSH   qword [rbp+60]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   Network_SendString
  ADD    rsp,40
  PUSH   rax
  MOV    rcx,[rsp+8]
  SUB    rsp,32
  CALL   SYS_FreeStringNoCheck
  ADD    rsp,32
  POP    rax
  ADD    rsp,8
  AND    rax,rax
  JE    _EndIf1279
; Network_FlushWindowEvents(*This)
  PUSH   qword [rsp+PS394+0]
  POP    rcx
  CALL  _Procedure388
; 
; While *This\AbortPressed = #False
_While1280:
  MOV    rbp,qword [rsp+PS394+0]
  MOVSXD r15,dword [rbp+120]
  AND    r15,r15
  JNE   _Wend1280
; Select Network_CheckData(*This\Socket)
  MOV    rbp,qword [rsp+PS394+0]
  PUSH   qword [rbp+60]
  POP    rcx
  CALL   Network_CheckData
  MOV    rax,rax
  PUSH   rax
; 
; Case 0 
  XOR    r15,r15
  CMP    r15,[rsp]
  JNE   _Case89
; If Network_FlushWindowEvents(*This) = 0
  SUB    rsp,8
  PUSH   qword [rsp+PS394+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure388
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1282
; Delay(50)
  SUB    rsp,8
  PUSH   qword 50
  POP    rcx
  SUB    rsp,32
  CALL   PB_Delay
  ADD    rsp,40
; EndIf
_EndIf1282:
; 
; Case 1            
  JMP   _EndSelect14
_Case89:
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case90
; Header$   = Network_ReadHeader(*This\Socket, Values$(), @*CommandData)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  LEA    rax,[rsp+136]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+96]
  MOV    rbp,qword [rsp+PS394+48]
  PUSH   qword [rbp+60]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure378
  ADD    rsp,48
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; VersionNb = Val(StringField(Header$, 2, " "))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S25
  PUSH   rax
  PUSH   qword 2
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+120],rax
; 
; If Header$ = "-error-"      
  PUSH   qword [rsp+104]
  MOV    rcx,_S107
  POP    rdx
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _EndIf1284
; Network_AddLog(*This, Language("NetworkDebugger", "ConnectionLost"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S120
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS394+24]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Message$ = Language("NetworkDebugger", "ConnectionLost")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S120
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  LEA    rcx,[rsp+88]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Break 
  ADD    rsp,8
  JMP   _Wend1280
; 
; ElseIf VersionNb <> #PB_Compiler_Version
  JMP   _EndIf1283
_EndIf1284:
  MOV    r15,qword [rsp+120]
  CMP    r15,570
  JE    _EndIf1285
; Network_AddLog(*This, Language("Misc", "Error")+": "+Language("NetworkDebugger", "Error_WrongVersion"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S121
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S122
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS394+24]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Network_AddLog(*This, Language("NetworkDebugger", "ExeVersion")+": "+StrF(VersionNb / 100.0, 2))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S123
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  FILD   qword [rsp+160]
  FDIV   dword [F4]
  SUB    rsp,8
  FSTP   dword [rsp]
  MOVSS  xmm0,dword [rsp]
  ADD    rsp,8
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StrF2
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS394+24]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Network_AddLog(*This, Language("NetworkDebugger", "DebuggerVersion")+": "+StrF(#PB_Compiler_Version / 100.0, 2))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S124
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  FLD    dword [F5]
  SUB    rsp,8
  FSTP   dword [rsp]
  MOVSS  xmm0,dword [rsp]
  ADD    rsp,8
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StrF2
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS394+24]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Message$ = Language("NetworkDebugger", "Error_WrongVersion") + #NewLine + Language("NetworkDebugger", "ExeVersion")+": "+StrF(VersionNb / 100.0, 2) + #NewLine +Language("NetworkDebugger", "DebuggerVersion")+": "+StrF(#PB_Compiler_Version / 100.0, 2)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S122
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rcx,_S63
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S123
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S96
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  FILD   qword [rsp+160]
  FDIV   dword [F4]
  SUB    rsp,8
  FSTP   dword [rsp]
  MOVSS  xmm0,dword [rsp]
  ADD    rsp,8
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StrF2
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S63
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S124
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S96
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  FLD    dword [F5]
  SUB    rsp,8
  FSTP   dword [rsp]
  MOVSS  xmm0,dword [rsp]
  ADD    rsp,8
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StrF2
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+88]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Break
  ADD    rsp,8
  JMP   _Wend1280
; 
; Else
  JMP   _EndIf1283
_EndIf1285:
; Select UCase(StringField(Header$, 1, " "))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S25
  PUSH   rax
  PUSH   qword 1
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
; 
; Case "ACCEPT"
  MOV    rdx,_S166
  MOV    rcx,[rsp]
  ADD    rcx,[PB_StringBase]
  SUB    rsp,32
  CALL   SYS_StringEqual
  ADD    rsp,32
  OR     rax,rax
  JE    _Case91
; Network_AddLog(*This, Language("NetworkDebugger","ConnectionSuccess"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S148
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS394+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; 
; 
; Value$ = Network_GetValue("Encryption", Values$())
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+88]
  MOV    rax,_S167
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure376
  ADD    rsp,40
  LEA    rcx,[rsp+144]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; If Value$ And Val(Value$) <> 0
  MOV    rcx,qword [rsp+136]
  XOR    rdx,rdx
  SUB    rsp,32
  CALL   SYS_StringEqual
  ADD    rsp,32
  OR     rax,rax
  JNE    No191
  PUSH   qword [rsp+136]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,32
  MOV    r15,rax
  AND    r15,r15
  JE     No191
Ok191:
  MOV    rax,1
  JMP    End191
No191:
  XOR    rax,rax
End191:
  AND    rax,rax
  JE    _EndIf1288
; *This\EncryptStream = #True
  MOV    rbp,qword [rsp+PS394+16]
  MOV    dword [rbp+140],1
; EndIf
_EndIf1288:
; 
; Success = #True
  MOV    qword [rsp+56],1
; Break
  MOV    rax,[rsp+0]
  MOV    qword [PB_StringBasePosition],rax
  ADD    rsp,16
  JMP   _Wend1280
; 
; Case "ENCRYPTION"           
  JMP   _EndSelect15
_Case91:
  MOV    rdx,_S168
  MOV    rcx,[rsp]
  ADD    rcx,[PB_StringBase]
  SUB    rsp,32
  CALL   SYS_StringEqual
  ADD    rsp,32
  OR     rax,rax
  JE    _Case92
; 
; If *This\Password$ And *This\EncryptionDataSent = 0
  MOV    rbp,qword [rsp+PS394+16]
  MOV    rcx,qword [rbp+16]
  XOR    rdx,rdx
  SUB    rsp,32
  CALL   SYS_StringEqual
  ADD    rsp,32
  OR     rax,rax
  JNE    No192
  MOV    rbp,qword [rsp+PS394+16]
  MOVSXD r15,dword [rbp+144]
  AND    r15,r15
  JNE    No192
Ok192:
  MOV    rax,1
  JMP    End192
No192:
  XOR    rax,rax
End192:
  AND    rax,rax
  JE    _EndIf1290
; 
; Password$ = *This\Password$
  MOV    rbp,qword [rsp+PS394+16]
  MOV    rcx,qword [rbp+16]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+152]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Else
  JMP   _EndIf1289
_EndIf1290:
; If *This\EncryptionDataSent = 0
  MOV    rbp,qword [rsp+PS394+16]
  MOVSXD r15,dword [rbp+144]
  AND    r15,r15
  JNE   _EndIf1293
; Network_AddLog(*This, Language("NetworkDebugger","NeedPassword"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S169
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS394+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Else
  JMP   _EndIf1292
_EndIf1293:
; Network_AddLog(*This, Language("NetworkDebugger","WrongPassword"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S170
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS394+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf1292:
; 
; 
; Network_ShowPasswordEntry(*This, #True)                    
  PUSH   qword 1
  PUSH   qword [rsp+PS394+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure382
  ADD    rsp,32
; While *This\PasswordSet = #False And *This\AbortPressed = #False
_While1295:
  MOV    rbp,qword [rsp+PS394+16]
  MOVSXD r15,dword [rbp+116]
  AND    r15,r15
  JNE    No193
  MOV    rbp,qword [rsp+PS394+16]
  MOVSXD r15,dword [rbp+120]
  AND    r15,r15
  JNE    No193
Ok193:
  MOV    rax,1
  JMP    End193
No193:
  XOR    rax,rax
End193:
  AND    rax,rax
  JE    _Wend1295
; If Network_FlushWindowEvents(*This) = 0
  PUSH   qword [rsp+PS394+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure388
  ADD    rsp,32
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1297
; Delay(50)
  PUSH   qword 50
  POP    rcx
  SUB    rsp,32
  CALL   PB_Delay
  ADD    rsp,32
; EndIf
_EndIf1297:
; Wend
  JMP   _While1295
_Wend1295:
; Password$ = GetGadgetText(*This\PasswordGadget)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS394+40]
  PUSH   qword [rbp+92]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetText
  ADD    rsp,40
  LEA    rcx,[rsp+152]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Network_ShowPasswordEntry(*This, #False)
  PUSH   qword 0
  PUSH   qword [rsp+PS394+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure382
  ADD    rsp,32
; 
; If *This\AbortPressed
  MOV    rbp,qword [rsp+PS394+16]
  CMP    dword [rbp+120],0
  JE    _EndIf1299
; Break
  MOV    rax,[rsp+0]
  MOV    qword [PB_StringBasePosition],rax
  ADD    rsp,16
  JMP   _Wend1280
; EndIf
_EndIf1299:
; EndIf
_EndIf1289:
; 
; 
; Network_SetupEncryption(*This, Password$)
  PUSH   qword [rsp+144]
  PUSH   qword [rsp+PS394+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure368
  ADD    rsp,32
; 
; 
; Hash$ = Network_DecryptHandshakeBlock(*This, *CommandData, Val(Network_GetValue("Length", Values$())))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+120]
  MOV    rax,_S108
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure376
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+144]
  PUSH   qword [rsp+PS394+48]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure372
  ADD    rsp,40
  LEA    rcx,[rsp+160]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; 
; Request$ = "CONNECT " + Str(#PB_Compiler_Version) + " EXECUTABLE" + #LF$
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S164
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 570
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S165
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Request$ + "  CallOnStart: "+Str(CallDebuggerOnStart) + #LF$
  MOV    rcx,qword [rsp+104]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S143
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [v_CallDebuggerOnStart]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Request$ + "  CallOnEnd: "+Str(CallDebuggerOnEnd) + #LF$
  MOV    rcx,qword [rsp+104]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S144
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [v_CallDebuggerOnEnd]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Request$ + "  Unicode: "+Str(#PB_Compiler_Unicode) + #LF$
  MOV    rcx,qword [rsp+104]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S145
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Request$ + "  BigEndian: "+Str(#DEBUGGER_BigEndian) + #LF$
  MOV    rcx,qword [rsp+104]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S146
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Request$ + "  EncryptionHash: "+ Hash$ + #LF$
  MOV    rcx,qword [rsp+104]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S171
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+160]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Request$ + #LF$
  MOV    rcx,qword [rsp+104]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+112]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; 
; If Network_SendString(*This\Socket, Request$) = 0
  SUB    rsp,8
  SUB    rsp,8
  MOV    rcx,qword [rsp+120]
  SUB    rsp,32
  CALL   SYS_ToAscii
  ADD    rsp,32
  PUSH   rax
  MOV    qword [rsp+16],rax
  MOV    rbp,qword [rsp+PS394+40]
  PUSH   qword [rbp+60]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   Network_SendString
  ADD    rsp,40
  PUSH   rax
  MOV    rcx,[rsp+8]
  SUB    rsp,32
  CALL   SYS_FreeStringNoCheck
  ADD    rsp,32
  POP    rax
  ADD    rsp,8
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1301
; Network_AddLog(*This, Language("NetworkDebugger", "ConnectionLost"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S120
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS394+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Message$ = Language("NetworkDebugger", "ConnectionLost")
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S120
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  LEA    rcx,[rsp+96]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Break
  MOV    rax,[rsp+0]
  MOV    qword [PB_StringBasePosition],rax
  ADD    rsp,16
  JMP   _Wend1280
; EndIf
_EndIf1301:
; 
; *This\EncryptionDataSent + 1
  MOV    rbp,qword [rsp+PS394+16]
  MOVSXD r15,dword [rbp+144]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS394+24]
  POP    rax
  MOV    dword [rbp+144],eax
; 
; Case "ERROR"                
  JMP   _EndSelect15
_Case92:
  MOV    rdx,_S172
  MOV    rcx,[rsp]
  ADD    rcx,[PB_StringBase]
  SUB    rsp,32
  CALL   SYS_StringEqual
  ADD    rsp,32
  OR     rax,rax
  JE    _Case93
; Network_AddLog(*This, Language("Misc", "Error")+": "+Language("NetworkDebugger", "Error_"+StringField(Header$, 3, " ")))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S121
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S173
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S25
  PUSH   rax
  PUSH   qword 3
  PUSH   qword [rsp+200]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S114
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS394+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Network_AddLog(*This, Language("NetworkDebugger", "ConnectionFailed"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S162
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS394+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Message$ = Language("Misc", "Error")+": "+Language("NetworkDebugger", "Error_"+StringField(Header$, 3, " "))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S121
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S173
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S25
  PUSH   rax
  PUSH   qword 3
  PUSH   qword [rsp+184]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S114
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  LEA    rcx,[rsp+96]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Break
  MOV    rax,[rsp+0]
  MOV    qword [PB_StringBasePosition],rax
  ADD    rsp,16
  JMP   _Wend1280
; 
; Default
  JMP   _EndSelect15
_Case93:
; Network_AddLog(*This, Language("Misc", "Error")+": "+Language("NetworkDebugger", "Error_InvalidResponse"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S121
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S174
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS394+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Network_AddLog(*This, Language("NetworkDebugger", "ConnectionFailed"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S162
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS394+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Message$ = Language("Misc", "Error")+": "+Language("NetworkDebugger", "Error_InvalidResponse")
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S121
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S174
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  LEA    rcx,[rsp+96]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Break                  
  MOV    rax,[rsp+0]
  MOV    qword [PB_StringBasePosition],rax
  ADD    rsp,16
  JMP   _Wend1280
; 
; EndSelect
_Case94:
_EndSelect15:
  POP    qword [PB_StringBasePosition]
; 
; EndIf
_EndIf1283:
; 
; If *CommandData
  CMP    qword [rsp+112],0
  JE    _EndIf1303
; FreeMemory(*CommandData)
  SUB    rsp,8
  PUSH   qword [rsp+120]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FreeMemory
  ADD    rsp,40
; *CommandData = 0
  MOV    qword [rsp+112],0
; EndIf
_EndIf1303:
; 
; Case 2
  JMP   _EndSelect14
_Case90:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case95
; Network_AddLog(*This, Language("NetworkDebugger", "ConnectionLost"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S120
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS394+24]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure390
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Message$ = Language("NetworkDebugger", "ConnectionLost")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S120
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  LEA    rcx,[rsp+88]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Break
  ADD    rsp,8
  JMP   _Wend1280
; 
; EndSelect
_Case95:
_EndSelect14:
  POP    rax
; Wend
  JMP   _While1280
_Wend1280:
; 
; EndIf
_EndIf1279:
; EndIf
_EndIf1277:
; 
; If Success
  CMP    qword [rsp+40],0
  JE    _EndIf1305
; 
; 
; 
; *This\CommandReceived = 0 
  MOV    rbp,qword [rsp+PS394+0]
  MOV    dword [rbp+36],0
; *This\CommandTimeout  = ElapsedMilliseconds()    
  CALL   PB_ElapsedMilliseconds
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS394+8]
  POP    rax
  MOV    qword [rbp+40],rax
; 
; *This\Connected = 1 
  MOV    rbp,qword [rsp+PS394+0]
  MOV    dword [rbp+28],1
; 
; ElseIf *This\AbortPressed = #False  
  JMP   _EndIf1304
_EndIf1305:
  MOV    rbp,qword [rsp+PS394+0]
  MOVSXD r15,dword [rbp+120]
  AND    r15,r15
  JNE   _EndIf1306
; 
; HideWindow(*This\Window, 0) 
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS394+8]
  PUSH   qword [rbp+76]
  POP    rcx
  POP    rdx
  CALL   PB_HideWindow
; SetActiveWindow(*This\Window)       
  MOV    rbp,qword [rsp+PS394+0]
  PUSH   qword [rbp+76]
  POP    rcx
  CALL   PB_SetActiveWindow
; 
; MessageStart$ = Language("NetworkDebugger","ConnectFailed") + ":" + #NewLine + *This\Host$ + " (" + Language("NetworkDebugger","Port") + " " + Str(*This\Port) + ")"    
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S175
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S176
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+PS394+8]
  MOV    rcx,qword [rbp+8]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S158
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S159
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  MOV    rcx,_S25
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS394+24]
  MOVSXD rax,dword [rbp+24]
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S29
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+152]
  POP    rdx
  CALL   SYS_AllocateString4
; If Message$ <> ""
  PUSH   qword [rsp+72]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf1308
; MessageStart$ + #NewLine + #NewLine + Message$
  MOV    rcx,qword [rsp+144]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S177
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+80]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+152]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf1308:
; 
; MessageRequester("PureBasic Debugger", MessageStart$, #FLAG_Error)    
  PUSH   qword 16
  PUSH   qword [rsp+152]
  MOV    rax,_S156
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_MessageRequester2
; 
; EndIf  
_EndIf1304:
_EndIf1306:
; 
; Network_CloseWindow(*This)
  PUSH   qword [rsp+PS394+0]
  POP    rcx
  CALL  _Procedure386
; 
; ProcedureReturn Success
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure395
; EndProcedure
_EndProcedureZero395:
  XOR    rax,rax
_EndProcedure395:
  PUSH   rax
  MOV    rcx,qword [rsp+88]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+128]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+104]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+80]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+152]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+144]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+136]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+96]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,40
  CALL   PB_FreeList
  ADD    rsp,40
  POP    rax
  ADD    rsp,152
  POP    r15
  POP    rbp
  RET
; Procedure PurifierWindowEvents(*Debugger.DebuggerData, EventID)
_Procedure616:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS616=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Quit = 0
  MOV    qword [rsp+40],0
; 
; If EventID = #PB_Event_Menu
  MOV    r15,qword [rsp+PS616+8]
  CMP    r15,13101
  JNE   _EndIf3261
; Select EventMenu()
  CALL   PB_EventMenu
  MOV    rax,rax
  PUSH   rax
; 
; Case #DEBUGGER_MENU_Return
  XOR    r15,r15
  CMP    r15,[rsp]
  JNE   _Case278
; ApplyPurifierOptions(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS616+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure612
  ADD    rsp,40
; Quit = 1        
  MOV    qword [rsp+48],1
; 
; Case #DEBUGGER_MENU_Escape
  JMP   _EndSelect44
_Case278:
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case279
; Quit = 1
  MOV    qword [rsp+48],1
; 
; EndSelect
_Case279:
_EndSelect44:
  POP    rax
; 
; ElseIf EventID = #PB_Event_Gadget
  JMP   _EndIf3260
_EndIf3261:
  MOV    r15,qword [rsp+PS616+8]
  CMP    r15,13100
  JNE   _EndIf3262
; Select EventGadget()    
  CALL   PB_EventGadget
  MOV    rax,rax
  PUSH   rax
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarGlobal]  
  MOV    rbp,qword [rsp+PS616+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+3040]
  CMP    r15,[rsp]
  JNE   _Case280
; UpdatePurifierLines(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS616+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure610
  ADD    rsp,40
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarLocal]  
  JMP   _EndSelect45
_Case280:
  MOV    rbp,qword [rsp+PS616+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+3064]
  CMP    r15,[rsp]
  JNE   _Case281
; UpdatePurifierLines(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS616+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure610
  ADD    rsp,40
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarString]  
  JMP   _EndSelect45
_Case281:
  MOV    rbp,qword [rsp+PS616+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+3088]
  CMP    r15,[rsp]
  JNE   _Case282
; UpdatePurifierLines(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS616+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure610
  ADD    rsp,40
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarDynamic]  
  JMP   _EndSelect45
_Case282:
  MOV    rbp,qword [rsp+PS616+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+3112]
  CMP    r15,[rsp]
  JNE   _Case283
; UpdatePurifierLines(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS616+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure610
  ADD    rsp,40
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Ok]  
  JMP   _EndSelect45
_Case283:
  MOV    rbp,qword [rsp+PS616+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+3128]
  CMP    r15,[rsp]
  JNE   _Case284
; ApplyPurifierOptions(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS616+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure612
  ADD    rsp,40
; Quit = 1
  MOV    qword [rsp+48],1
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Cancel]  
  JMP   _EndSelect45
_Case284:
  MOV    rbp,qword [rsp+PS616+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+3136]
  CMP    r15,[rsp]
  JNE   _Case285
; Quit = 1
  MOV    qword [rsp+48],1
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Apply]  
  JMP   _EndSelect45
_Case285:
  MOV    rbp,qword [rsp+PS616+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+3144]
  CMP    r15,[rsp]
  JNE   _Case286
; ApplyPurifierOptions(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS616+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure612
  ADD    rsp,40
; 
; EndSelect
_Case286:
_EndSelect45:
  POP    rax
; 
; ElseIf EventID = #PB_Event_CloseWindow
  JMP   _EndIf3260
_EndIf3262:
  MOV    r15,qword [rsp+PS616+8]
  CMP    r15,13116
  JNE   _EndIf3263
; Quit = 1
  MOV    qword [rsp+40],1
; 
; EndIf  
_EndIf3260:
_EndIf3263:
; 
; If Quit
  CMP    qword [rsp+40],0
  JE    _EndIf3265
; If DebuggerMemorizeWindows
  CMP    qword [v_DebuggerMemorizeWindows],0
  JE    _EndIf3267
; PurifierWindowX = WindowX(*Debugger\Windows[#DEBUGGER_WINDOW_Purifier])
  MOV    rbp,qword [rsp+PS616+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+904]
  POP    rcx
  CALL   PB_WindowX
  MOV    qword [v_PurifierWindowX],rax
; PurifierWindowY = WindowY(*Debugger\Windows[#DEBUGGER_WINDOW_Purifier]) 
  MOV    rbp,qword [rsp+PS616+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+904]
  POP    rcx
  CALL   PB_WindowY
  MOV    qword [v_PurifierWindowY],rax
; EndIf    
_EndIf3267:
; 
; CloseWindow(*Debugger\Windows[#DEBUGGER_WINDOW_Purifier])
  MOV    rbp,qword [rsp+PS616+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+904]
  POP    rcx
  CALL   PB_CloseWindow
; *Debugger\Windows[#DEBUGGER_WINDOW_Purifier] = 0
  MOV    rbp,qword [rsp+PS616+0]
  PUSH   rbp
  POP    rbp
  MOV    qword [rbp+904],0
; Debugger_CheckDestroy(*Debugger)
  PUSH   qword [rsp+PS616+0]
  POP    rcx
  CALL  _Procedure426
; EndIf
_EndIf3265:
; 
; EndProcedure
_EndProcedureZero617:
  XOR    rax,rax
_EndProcedure617:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure.s DebuggerTitle(FileName$)
_Procedure260:
  MOV    qword [rsp+8],rcx
  PS260=64
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS260+32]
  MOV    qword [PB_StringBasePosition],rax
  MOV    rdx,[rsp+PS260+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; If DisplayFullPath
  CMP    qword [v_DisplayFullPath],0
  JE    _EndIf755
; ProcedureReturn FileName$
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure261
; Else
  JMP   _EndIf754
_EndIf755:
; ProcedureReturn GetFilePart(FileName$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetFilePart
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure261
; EndIf
_EndIf754:
; EndProcedure
_EndProcedureZero261:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure261:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,56
  RET
; Procedure DebugWindowEvents(*Debugger.DebuggerData, EventID)
_Procedure440:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS440=208
  MOV    rax,17
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; If EventID = #PB_Event_ActivateWindow
  MOV    r15,qword [rsp+PS440+8]
  CMP    r15,13104
  JNE   _EndIf1585
; CompilerIf #CompileWindows
; 
; 
; 
; CompilerEndIf
; 
; ElseIf EventID = #PB_Event_Menu   
  JMP   _EndIf1584
_EndIf1585:
  MOV    r15,qword [rsp+PS440+8]
  CMP    r15,13101
  JNE   _EndIf1586
; If EventMenu() = #DEBUGGER_MENU_Return
  CALL   PB_EventMenu
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1588
; If GetActiveGadget() = *Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Entry]
  CALL   PB_GetActiveGadget
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS440+0]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+984]
  JNE   _EndIf1590
; DebugOutput_EvaluateExpression(*Debugger)
  PUSH   qword [rsp+PS440+0]
  POP    rcx
  CALL  _Procedure438
; EndIf
_EndIf1590:
; EndIf
_EndIf1588:
; 
; ElseIf EventID = #PB_Event_Gadget
  JMP   _EndIf1584
_EndIf1586:
  MOV    r15,qword [rsp+PS440+8]
  CMP    r15,13100
  JNE   _EndIf1591
; Select EventGadget()
  CALL   PB_EventGadget
  MOV    rax,rax
  PUSH   rax
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Display]
  MOV    rbp,qword [rsp+PS440+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+992]
  CMP    r15,[rsp]
  JNE   _Case132
; DebugOutput_EvaluateExpression(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS440+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure438
  ADD    rsp,40
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Debug_List]
  JMP   _EndSelect19
_Case132:
  MOV    rbp,qword [rsp+PS440+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+944]
  CMP    r15,[rsp]
  JNE   _Case133
; If EventType() = #PB_EventType_DragStart
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_EventType
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,14002
  JNE   _EndIf1593
; DragText(DebugOutput_Selection(*Debugger), #PB_Drag_Copy)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS440+48]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure436
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DragText2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf1593:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Copy] 
  JMP   _EndSelect19
_Case133:
  MOV    rbp,qword [rsp+PS440+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+952]
  CMP    r15,[rsp]
  JNE   _Case134
; SetClipboardText(GetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_List])) 
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS440+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+944]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetText
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_SetClipboardText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Clear]
  JMP   _EndSelect19
_Case134:
  MOV    rbp,qword [rsp+PS440+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+960]
  CMP    r15,[rsp]
  JNE   _Case135
; ClearGadgetItems(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_List])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS440+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+944]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ClearGadgetItems
  ADD    rsp,40
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Save] 
  JMP   _EndSelect19
_Case135:
  MOV    rbp,qword [rsp+PS440+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+968]
  CMP    r15,[rsp]
  JNE   _Case136
; FileName$ = DebuggerOutputFile$  
  MOV    rcx,qword [v_DebuggerOutputFile$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+56]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Repeat  
_Repeat1594:
; FileName$ = SaveFileRequester(Language("Debugger","SaveFileTitle"), FileName$, Language("Debugger","SaveFilePattern"), 0)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S196
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+88]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S195
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SaveFileRequester
  ADD    rsp,48
  LEA    rcx,[rsp+56]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; If FileName$ = ""
  PUSH   qword [rsp+48]
  MOV    rcx,_S3
  POP    rdx
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _EndIf1596
; Break
  JMP   _Until1594
; EndIf
_EndIf1596:
; 
; 
; If GetExtensionPart(FileName$) = "" And SelectedFilePattern() = 0
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetExtensionPart
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S3
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE     No206
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_SelectedFilePattern
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,r15
  JNE    No206
Ok206:
  MOV    rax,1
  JMP    End206
No206:
  XOR    rax,rax
End206:
  AND    rax,rax
  JE    _EndIf1598
; FileName$ + ".txt"
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S197
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+56]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf1598:
; 
; If FileSize(FileName$) <> -1
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FileSize
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JE    _EndIf1600
; result = MessageRequester("PureBasic Debugger",Language("FileStuff","FileExists")+#NewLine+Language("FileStuff","OverWrite"), #FLAG_Warning|#PB_MessageRequester_YesNoCancel)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 51
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S198
  PUSH   rax
  MOV    rax,_S82
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rcx,_S63
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S199
  PUSH   rax
  MOV    rax,_S82
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S156
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_MessageRequester2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+56],rax
; If result = #PB_MessageRequester_Cancel
  MOV    r15,qword [rsp+56]
  CMP    r15,2
  JNE   _EndIf1602
; Break 
  JMP   _Until1594
; ElseIf result = #PB_MessageRequester_No
  JMP   _EndIf1601
_EndIf1602:
  MOV    r15,qword [rsp+56]
  CMP    r15,7
  JNE   _EndIf1603
; Continue 
  JMP   _Repeat_Test1594
; EndIf
_EndIf1601:
_EndIf1603:
; EndIf
_EndIf1600:
; 
; File = CreateFile(#PB_Any, FileName$)            
  SUB    rsp,8
  PUSH   qword [rsp+56]
  PUSH   qword -1
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_CreateFile
  ADD    rsp,40
  MOV    qword [rsp+64],rax
; If File
  CMP    qword [rsp+64],0
  JE    _EndIf1605
; max = CountGadgetItems(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_List])-1
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS440+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+944]
  POP    rcx
  SUB    rsp,32
  CALL   PB_CountGadgetItems
  ADD    rsp,40
  MOV    r15,rax
  DEC    r15
  MOV    qword [rsp+72],r15
; For i = 0 To max
  MOV    qword [rsp+80],0
  JMP   _ForSkipDebug1606
_For1606:
_ForSkipDebug1606:
  MOV    rax,qword [rsp+72]
  CMP    rax,qword [rsp+80]
  JL    _Next1607
; WriteStringN(File, GetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_List], i, 0))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  PUSH   qword [rsp+120]
  MOV    rbp,qword [rsp+PS440+56]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+944]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_GetGadgetItemText2
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_WriteStringN
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Next i
_NextContinue1607:
  INC    qword [rsp+80]
  JNO   _For1606
_Next1607:
; CloseFile(File)
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_CloseFile
  ADD    rsp,40
; DebuggerOutputFile$ = FileName$ 
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[v_DebuggerOutputFile$]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf1604
_EndIf1605:
; MessageRequester("PureBasic Debugger",ReplaceString(Language("Debugger","SaveError"), "%filename%", FileName$, 1), #FLAG_Error)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 16
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+96]
  MOV    rax,_S201
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S200
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ReplaceString2
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S156
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_MessageRequester2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf1604:
; 
; Break 
  JMP   _Until1594
; ForEver
_Repeat_Test1594:
  JMP   _Repeat1594
_Until1594:
; 
; EndSelect
_Case136:
_EndSelect19:
  POP    rax
; 
; ElseIf EventID = #PB_Event_SizeWindow
  JMP   _EndIf1584
_EndIf1591:
  MOV    r15,qword [rsp+PS440+8]
  CMP    r15,13118
  JNE   _EndIf1609
; Width =  WindowWidth (*Debugger\Windows[#DEBUGGER_WINDOW_Debug])
  MOV    rbp,qword [rsp+PS440+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  POP    rcx
  CALL   PB_WindowWidth
  MOV    qword [rsp+80],rax
; Height = WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_Debug])   
  MOV    rbp,qword [rsp+PS440+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  POP    rcx
  CALL   PB_WindowHeight
  MOV    qword [rsp+88],rax
; 
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Copy], @CopyWidth, @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+112]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+112]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS440+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+952]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Save], @SaveWidth, @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+112]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+128]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS440+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+968]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Clear], @ClearWidth, @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+112]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+136]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS440+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+960]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Display], @DisplayWidth, @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+112]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+144]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS440+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+992]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_Gadget_Debug_Text], @TextWidth, @TextHeight)
  PUSH   qword 0
  LEA    rax,[rsp+152]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+152]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS440+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+976]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; EntryHeight = GetRequiredHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Entry])
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS440+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+984]
  POP    rcx
  POP    rdx
  CALL  _Procedure92
  MOV    qword [rsp+152],rax
; StatusHeight = StatusBarHeight(*Debugger\OutputStatusbar)
  MOV    rbp,qword [rsp+PS440+0]
  PUSH   qword [rbp+772]
  POP    rcx
  CALL   PB_StatusBarHeight
  MOV    qword [rsp+160],rax
; 
; CopyWidth  = Max(120, CopyWidth)
  PUSH   qword [rsp+96]
  PUSH   qword 120
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+96],rax
; SaveWidth  = Max(120, SaveWidth)
  PUSH   qword [rsp+112]
  PUSH   qword 120
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+112],rax
; ClearWidth = Max(120, ClearWidth)
  PUSH   qword [rsp+120]
  PUSH   qword 120
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+120],rax
; DisplayWidth = Max(60, DisplayWidth)
  PUSH   qword [rsp+128]
  PUSH   qword 60
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+128],rax
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_List], 10, 20+ButtonHeight, Width-20, Height-35-ButtonHeight-EntryHeight-StatusHeight)
  SUB    rsp,8
  MOV    r15,qword [rsp+96]
  SUB    r15,qword [rsp+112]
  SUB    r15,qword [rsp+160]
  SUB    r15,qword [rsp+168]
  ADD    r15,-35
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+96]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+128]
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS440+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+944]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; Y = Height-10-EntryHeight-StatusHeight    
  MOV    r15,qword [rsp+88]
  SUB    r15,qword [rsp+152]
  SUB    r15,qword [rsp+160]
  ADD    r15,-10
  MOV    qword [rsp+168],r15
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Entry], 15+TextWidth, Y, Width-DisplayWidth-TextWidth-30, EntryHeight)    
  SUB    rsp,8
  PUSH   qword [rsp+160]
  MOV    r15,qword [rsp+96]
  SUB    r15,qword [rsp+144]
  SUB    r15,qword [rsp+152]
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+192]
  MOV    r15,qword [rsp+168]
  ADD    r15,15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS440+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+984]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Display], Width-10-DisplayWidth, Y, DisplayWidth, EntryHeight)   
  SUB    rsp,8
  PUSH   qword [rsp+160]
  PUSH   qword [rsp+144]
  PUSH   qword [rsp+192]
  MOV    r15,qword [rsp+112]
  SUB    r15,qword [rsp+160]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS440+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+992]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; CompilerIf #CompileWindows
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Text], 10, Y+2, TextWidth, TextHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  PUSH   qword [rsp+152]
  MOV    r15,qword [rsp+192]
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS440+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+976]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; CompilerElse
; 
; Y = 10
  MOV    qword [rsp+168],10
; If Width < CopyWidth+SaveWidth+ClearWidth+40
  MOV    r15,qword [rsp+80]
  MOV    r14,qword [rsp+96]
  ADD    r14,qword [rsp+112]
  ADD    r14,qword [rsp+120]
  ADD    r14,40
  CMP    r15,r14
  JGE   _EndIf1611
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Copy], 10, Y, (Width-40)/3, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+112]
  MOV    r15,qword [rsp+96]
  ADD    r15,-40
  MOV    rax,r15
  MOV    rcx,3
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+192]
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS440+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+952]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Save], 20+(Width-40)/3, Y, (Width-40)/3, ButtonHeight)        
  SUB    rsp,8
  PUSH   qword [rsp+112]
  MOV    r15,qword [rsp+96]
  ADD    r15,-40
  MOV    rax,r15
  MOV    rcx,3
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+192]
  MOV    r15,qword [rsp+112]
  ADD    r15,-40
  MOV    rax,r15
  MOV    rcx,3
  CQO
  IDIV   rcx
  MOV    r15,rax
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS440+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+968]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Clear], 30+((Width-40)*2)/3, Y, (Width-40)/3, ButtonHeight)    
  SUB    rsp,8
  PUSH   qword [rsp+112]
  MOV    r15,qword [rsp+96]
  ADD    r15,-40
  MOV    rax,r15
  MOV    rcx,3
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+192]
  MOV    r15,qword [rsp+112]
  ADD    r15,-40
  ADD    r15,r15
  MOV    rax,r15
  MOV    rcx,3
  CQO
  IDIV   rcx
  MOV    r15,rax
  ADD    r15,30
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS440+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+960]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; Else
  JMP   _EndIf1610
_EndIf1611:
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Copy], Width-30-ClearWidth-SaveWidth-CopyWidth, Y, CopyWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+112]
  PUSH   qword [rsp+112]
  PUSH   qword [rsp+192]
  MOV    r15,qword [rsp+112]
  SUB    r15,qword [rsp+152]
  SUB    r15,qword [rsp+144]
  SUB    r15,qword [rsp+128]
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS440+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+952]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Save], Width-20-ClearWidth-SaveWidth, Y, SaveWidth, ButtonHeight)        
  SUB    rsp,8
  PUSH   qword [rsp+112]
  PUSH   qword [rsp+128]
  PUSH   qword [rsp+192]
  MOV    r15,qword [rsp+112]
  SUB    r15,qword [rsp+152]
  SUB    r15,qword [rsp+144]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS440+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+968]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Clear],Width-10-ClearWidth, Y, ClearWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+112]
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+192]
  MOV    r15,qword [rsp+112]
  SUB    r15,qword [rsp+152]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS440+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+960]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; 
; 
; EndIf
_EndIf1610:
; 
; ElseIf EventID = #PB_Event_CloseWindow
  JMP   _EndIf1584
_EndIf1609:
  MOV    r15,qword [rsp+PS440+8]
  CMP    r15,13116
  JNE   _EndIf1613
; 
; If DebuggerMemorizeWindows And IsWindowMinimized(*Debugger\Windows[#DEBUGGER_WINDOW_Debug]) = 0
  CMP    qword [v_DebuggerMemorizeWindows],0
  JE     No207
  MOV    rbp,qword [rsp+PS440+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  POP    rcx
  CALL  _Procedure104
  MOV    r15,rax
  AND    r15,r15
  JNE    No207
Ok207:
  MOV    rax,1
  JMP    End207
No207:
  XOR    rax,rax
End207:
  AND    rax,rax
  JE    _EndIf1615
; DebugWindowMaximize = IsWindowMaximized(*Debugger\Windows[#DEBUGGER_WINDOW_Debug])
  MOV    rbp,qword [rsp+PS440+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  POP    rcx
  CALL  _Procedure102
  MOV    qword [v_DebugWindowMaximize],rax
; If DebugWindowMaximize = 0
  MOV    r15,qword [v_DebugWindowMaximize]
  AND    r15,r15
  JNE   _EndIf1617
; DebugWindowX = WindowX(*Debugger\Windows[#DEBUGGER_WINDOW_Debug])
  MOV    rbp,qword [rsp+PS440+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  POP    rcx
  CALL   PB_WindowX
  MOV    qword [v_DebugWindowX],rax
; DebugWindowY = WindowY(*Debugger\Windows[#DEBUGGER_WINDOW_Debug])
  MOV    rbp,qword [rsp+PS440+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  POP    rcx
  CALL   PB_WindowY
  MOV    qword [v_DebugWindowY],rax
; DebugWindowWidth  = WindowWidth (*Debugger\Windows[#DEBUGGER_WINDOW_Debug])
  MOV    rbp,qword [rsp+PS440+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  POP    rcx
  CALL   PB_WindowWidth
  MOV    qword [v_DebugWindowWidth],rax
; DebugWindowHeight = WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_Debug])
  MOV    rbp,qword [rsp+PS440+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  POP    rcx
  CALL   PB_WindowHeight
  MOV    qword [v_DebugWindowHeight],rax
; EndIf
_EndIf1617:
; EndIf
_EndIf1615:
; 
; *Debugger\IsDebugOutputVisible = 0  
  MOV    rbp,qword [rsp+PS440+0]
  MOV    dword [rbp+128],0
; HideWindow(*Debugger\Windows[#DEBUGGER_WINDOW_Debug], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS440+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  POP    rcx
  POP    rdx
  CALL   PB_HideWindow
; Debugger_CheckDestroy(*Debugger) 
  PUSH   qword [rsp+PS440+0]
  POP    rcx
  CALL  _Procedure426
; EndIf
_EndIf1584:
_EndIf1613:
; 
; EndProcedure
_EndProcedureZero441:
  XOR    rax,rax
_EndProcedure441:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,176
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure.s ScopeName(scope, type = 0)
_Procedure66:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   r15
  PS66=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS66+32]
  MOV    qword [PB_StringBasePosition],rax
; Select scope
  PUSH   qword [rsp+PS66+0]
; Case #SCOPE_MAIN
  XOR    r15,r15
  CMP    r15,[rsp]
  JNE   _Case28
; ProcedureReturn "Main"
  MOV    rax, [rsp+40+PS66]
  MOV    qword [PB_StringBasePosition],rax
  MOV    rcx,_S75
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  POP    rax
  ADD    rax,[PB_StringBase]
  ADD    rsp,8
  JMP   _EndProcedure67
; 
; Case #SCOPE_GLOBAL
  JMP   _EndSelect5
_Case28:
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case29
; ProcedureReturn "Global"
  MOV    rax, [rsp+40+PS66]
  MOV    qword [PB_StringBasePosition],rax
  MOV    rcx,_S76
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  POP    rax
  ADD    rax,[PB_StringBase]
  ADD    rsp,8
  JMP   _EndProcedure67
; 
; Case #SCOPE_THREADED
  JMP   _EndSelect5
_Case29:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case30
; ProcedureReturn "Threaded"
  MOV    rax, [rsp+40+PS66]
  MOV    qword [PB_StringBasePosition],rax
  MOV    rcx,_S77
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  POP    rax
  ADD    rax,[PB_StringBase]
  ADD    rsp,8
  JMP   _EndProcedure67
; 
; Case #SCOPE_LOCAL
  JMP   _EndSelect5
_Case30:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case31
; If IS_PARAMETER(type)
  MOV    r15,qword [rsp+PS66+16]
  AND    r15,64
  AND    r15,r15
  JE    _EndIf702
; ProcedureReturn "ByRef"
  MOV    rax, [rsp+40+PS66]
  MOV    qword [PB_StringBasePosition],rax
  MOV    rcx,_S78
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  POP    rax
  ADD    rax,[PB_StringBase]
  ADD    rsp,8
  JMP   _EndProcedure67
; Else
  JMP   _EndIf701
_EndIf702:
; ProcedureReturn "Local"
  MOV    rax, [rsp+40+PS66]
  MOV    qword [PB_StringBasePosition],rax
  MOV    rcx,_S79
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  POP    rax
  ADD    rax,[PB_StringBase]
  ADD    rsp,8
  JMP   _EndProcedure67
; EndIf
_EndIf701:
; 
; Case #SCOPE_STATIC
  JMP   _EndSelect5
_Case31:
  MOV    r15,4
  CMP    r15,[rsp]
  JNE   _Case32
; ProcedureReturn "Static"
  MOV    rax, [rsp+40+PS66]
  MOV    qword [PB_StringBasePosition],rax
  MOV    rcx,_S80
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  POP    rax
  ADD    rax,[PB_StringBase]
  ADD    rsp,8
  JMP   _EndProcedure67
; 
; Case #SCOPE_SHARED
  JMP   _EndSelect5
_Case32:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case33
; ProcedureReturn "Shared"
  MOV    rax, [rsp+40+PS66]
  MOV    qword [PB_StringBasePosition],rax
  MOV    rcx,_S81
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  POP    rax
  ADD    rax,[PB_StringBase]
  ADD    rsp,8
  JMP   _EndProcedure67
; 
; Case #SCOPE_PARAMETER
  JMP   _EndSelect5
_Case33:
  MOV    r15,6
  CMP    r15,[rsp]
  JNE   _Case34
; ProcedureReturn "ByRef"  
  MOV    rax, [rsp+40+PS66]
  MOV    qword [PB_StringBasePosition],rax
  MOV    rcx,_S78
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  POP    rax
  ADD    rax,[PB_StringBase]
  ADD    rsp,8
  JMP   _EndProcedure67
; 
; Default
  JMP   _EndSelect5
_Case34:
; ProcedureReturn ""
  MOV    rax, [rsp+40+PS66]
  MOV    qword [PB_StringBasePosition],rax
  MOV    rcx,_S3
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  POP    rax
  ADD    rax,[PB_StringBase]
  ADD    rsp,8
  JMP   _EndProcedure67
; EndSelect
_Case35:
_EndSelect5:
  POP    rax
; EndProcedure
_EndProcedureZero67:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure67:
  ADD    rsp,48
  POP    r15
  RET
; Procedure Profiler_DrawCross(*Debugger.DebuggerData, x, y)
_Procedure582:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS582=128
  MOV    rax,7
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; Profiler_CalculateViewport(*Debugger, @Area.ProfilerDrawing)
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS582+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure566
; 
; 
; 
; If x >= Area\x And x < Area\x+Area\w And y >= Area\y And y < Area\y+Area\h
  MOV    r15,qword [rsp+PS582+8]
  LEA    rbp,[rsp+40]
  MOVSXD rax,dword [rbp]
  CMP    r15,rax
  JL     No313
  MOV    r15,qword [rsp+PS582+8]
  MOVSXD r14,dword [rbp]
  MOVSXD rax,dword [rbp+8]
  ADD    r14,rax
  CMP    r15,r14
  JGE    No313
  MOV    r15,qword [rsp+PS582+16]
  MOVSXD rax,dword [rbp+4]
  CMP    r15,rax
  JL     No313
  MOV    r15,qword [rsp+PS582+16]
  MOVSXD r14,dword [rbp+4]
  MOVSXD rax,dword [rbp+12]
  ADD    r14,rax
  CMP    r15,r14
  JGE    No313
Ok313:
  MOV    rax,1
  JMP    End313
No313:
  XOR    rax,rax
End313:
  AND    rax,rax
  JE    _EndIf2963
; 
; If StartDrawing(ImageOutput(*Debugger\ProfilerImage))
  MOV    rbp,qword [rsp+PS582+0]
  PUSH   qword [rbp+712]
  POP    rcx
  CALL   PB_ImageOutput
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_StartDrawing
  AND    rax,rax
  JE    _EndIf2965
; DrawingMode(#PB_2DDrawing_XOr | #PB_2DDrawing_Transparent)
  PUSH   qword 3
  POP    rcx
  CALL   PB_DrawingMode
; 
; 
; 
; If y > Area\y + 6
  MOV    r15,qword [rsp+PS582+16]
  LEA    rbp,[rsp+40]
  MOVSXD r14,dword [rbp+4]
  ADD    r14,6
  CMP    r15,r14
  JLE   _EndIf2967
; Line(x, Area\y, 1, y - Area\y - 6, $FFFFFF)
  SUB    rsp,8
  PUSH   qword 16777215
  MOV    r15,qword [rsp+PS582+32]
  LEA    rbp,[rsp+56]
  MOVSXD rax,dword [rbp+4]
  SUB    r15,rax
  ADD    r15,-6
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 1
  MOVSXD rax,dword [rbp+4]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS582+48]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Line2
  ADD    rsp,48
; For i = Area\y To y - 6 Step 5
  MOVSXD rax,dword [rbp+4]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+72],rax
  JMP   _ForSkipDebug2968
_For2968:
_ForSkipDebug2968:
  MOV    r15,qword [rsp+PS582+16]
  ADD    r15,-6
  CMP    r15,qword [rsp+72]
  JL    _Next2969
; Plot(x, i, $FFFFFF)
  PUSH   qword 16777215
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+PS582+24]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_Plot2
; Next i
_NextContinue2969:
  ADD    qword [rsp+72],5
  JNO   _For2968
_Next2969:
; EndIf
_EndIf2967:
; If y < Area\y+Area\h - 6
  MOV    r15,qword [rsp+PS582+16]
  LEA    rbp,[rsp+40]
  MOVSXD r14,dword [rbp+4]
  MOVSXD rax,dword [rbp+12]
  ADD    r14,rax
  ADD    r14,-6
  CMP    r15,r14
  JGE   _EndIf2971
; Line(x, y+6, 1, Area\h - (y - Area\y) - 6, $FFFFFF)
  SUB    rsp,8
  PUSH   qword 16777215
  LEA    rbp,[rsp+56]
  MOVSXD r15,dword [rbp+12]
  MOV    r14,qword [rsp+PS582+32]
  MOVSXD rax,dword [rbp+4]
  SUB    r14,rax
  SUB    r15,r14
  ADD    r15,-6
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 1
  MOV    r15,qword [rsp+PS582+48]
  ADD    r15,6
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+PS582+48]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Line2
  ADD    rsp,48
; For i = y+6 To Area\y+Area\h Step 5
  MOV    r15,qword [rsp+PS582+16]
  ADD    r15,6
  MOV    qword [rsp+72],r15
  JMP   _ForSkipDebug2972
_For2972:
_ForSkipDebug2972:
  LEA    rbp,[rsp+40]
  MOVSXD r15,dword [rbp+4]
  MOVSXD rax,dword [rbp+12]
  ADD    r15,rax
  CMP    r15,qword [rsp+72]
  JL    _Next2973
; Plot(x, i, $FFFFFF)
  PUSH   qword 16777215
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+PS582+24]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_Plot2
; Next i        
_NextContinue2973:
  ADD    qword [rsp+72],5
  JNO   _For2972
_Next2973:
; EndIf    
_EndIf2971:
; 
; If x > Area\x + 6
  MOV    r15,qword [rsp+PS582+8]
  LEA    rbp,[rsp+40]
  MOVSXD r14,dword [rbp]
  ADD    r14,6
  CMP    r15,r14
  JLE   _EndIf2975
; Line(Area\x, y, x - Area\x - 6, 1, $FFFFFF)
  SUB    rsp,8
  PUSH   qword 16777215
  PUSH   qword 1
  MOV    r15,qword [rsp+PS582+32]
  LEA    rbp,[rsp+64]
  MOVSXD rax,dword [rbp]
  SUB    r15,rax
  ADD    r15,-6
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+PS582+48]
  MOVSXD rax,dword [rbp]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Line2
  ADD    rsp,48
; For i = Area\x To x - 6 Step 5
  MOVSXD rax,dword [rbp]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+72],rax
  JMP   _ForSkipDebug2976
_For2976:
_ForSkipDebug2976:
  MOV    r15,qword [rsp+PS582+8]
  ADD    r15,-6
  CMP    r15,qword [rsp+72]
  JL    _Next2977
; Plot(i, y, $FFFFFF)
  PUSH   qword 16777215
  PUSH   qword [rsp+PS582+24]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_Plot2
; Next i
_NextContinue2977:
  ADD    qword [rsp+72],5
  JNO   _For2976
_Next2977:
; EndIf
_EndIf2975:
; If x < Area\x+Area\w - 6
  MOV    r15,qword [rsp+PS582+8]
  LEA    rbp,[rsp+40]
  MOVSXD r14,dword [rbp]
  MOVSXD rax,dword [rbp+8]
  ADD    r14,rax
  ADD    r14,-6
  CMP    r15,r14
  JGE   _EndIf2979
; Line(x+6, y, Area\w - (x - Area\x) - 6, 1, $FFFFFF)
  SUB    rsp,8
  PUSH   qword 16777215
  PUSH   qword 1
  LEA    rbp,[rsp+64]
  MOVSXD r15,dword [rbp+8]
  MOV    r14,qword [rsp+PS582+32]
  MOVSXD rax,dword [rbp]
  SUB    r14,rax
  SUB    r15,r14
  ADD    r15,-6
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+PS582+48]
  MOV    r15,qword [rsp+PS582+48]
  ADD    r15,6
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Line2
  ADD    rsp,48
; For i = x+6 To Area\x+Area\w Step 5
  MOV    r15,qword [rsp+PS582+8]
  ADD    r15,6
  MOV    qword [rsp+72],r15
  JMP   _ForSkipDebug2980
_For2980:
_ForSkipDebug2980:
  LEA    rbp,[rsp+40]
  MOVSXD r15,dword [rbp]
  MOVSXD rax,dword [rbp+8]
  ADD    r15,rax
  CMP    r15,qword [rsp+72]
  JL    _Next2981
; Plot(i, y, $FFFFFF)
  PUSH   qword 16777215
  PUSH   qword [rsp+PS582+24]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_Plot2
; Next i  
_NextContinue2981:
  ADD    qword [rsp+72],5
  JNO   _For2980
_Next2981:
; EndIf 
_EndIf2979:
; 
; 
; 
; 
; count = 1+GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX]) + Int(Round((x - Area\x) / *Debugger\ProfilerRatioX, 0))
  MOV    rbp,qword [rsp+PS582+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    r15,rax
  PUSH   qword 0
  FILD   qword [rsp+PS582+16]
  LEA    rbp,[rsp+48]
  FISUB  dword [rbp]
  FADD   qword [D1]
  MOV    rbp,qword [rsp+PS582+8]
  FDIV   qword [rbp+724]
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  POP    rdx
  CALL   PB_Round_DOUBLE
  MOVSD  [rsp-8],xmm0
  FLD    qword [rsp-8]
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  CALL   PB_Int
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+80],r15
; line  = 1+GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY]) + Int(Round((y - Area\y) / *Debugger\ProfilerRatioY, 0))
  MOV    rbp,qword [rsp+PS582+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    r15,rax
  PUSH   qword 0
  FILD   qword [rsp+PS582+24]
  LEA    rbp,[rsp+48]
  FISUB  dword [rbp+4]
  FADD   qword [D1]
  MOV    rbp,qword [rsp+PS582+8]
  FDIV   qword [rbp+732]
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  POP    rdx
  CALL   PB_Round_DOUBLE
  MOVSD  [rsp-8],xmm0
  FLD    qword [rsp-8]
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  CALL   PB_Int
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+88],r15
; 
; Profiler_DrawNumber(Area\x+Area\w-2-Len(Str(line))*7, y-12, line, $FFFFFF)
  PUSH   qword -1
  PUSH   qword 0
  PUSH   qword 16777215
  PUSH   qword [rsp+112]
  MOV    r15,qword [rsp+PS582+48]
  ADD    r15,-12
  MOV    rax,r15
  PUSH   rax
  LEA    rbp,[rsp+80]
  MOVSXD r15,dword [rbp]
  MOVSXD rax,dword [rbp+8]
  ADD    r15,rax
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+160]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
  MOV    r14,rax
  IMUL   r14,7
  SUB    r15,r14
  ADD    r15,-2
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure572
  ADD    rsp,48
; Profiler_DrawNumber(x-2-Len(Str(count))*7, Area\y+3, count, $FFFFFF)      
  PUSH   qword -1
  PUSH   qword 0
  PUSH   qword 16777215
  PUSH   qword [rsp+104]
  LEA    rbp,[rsp+72]
  MOVSXD r15,dword [rbp+4]
  ADD    r15,3
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+PS582+48]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
  MOV    r14,rax
  IMUL   r14,7
  SUB    r15,r14
  ADD    r15,-2
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure572
  ADD    rsp,48
; 
; StopDrawing()    
  CALL   PB_StopDrawing
; EndIf
_EndIf2965:
; 
; EndIf
_EndIf2963:
; 
; EndProcedure
_EndProcedureZero583:
  XOR    rax,rax
_EndProcedure583:
  ADD    rsp,96
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure Network_ShowPasswordEntry(*This.Network_Communication, State)
_Procedure382:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS382=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; GetRequiredSize(*This\AbortGadget, @AbortWidth.l, @AbortHeight.l)
  PUSH   qword 0
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS382+24]
  PUSH   qword [rbp+100]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; GetRequiredSize(*This\OkGadget, @OkWidth.l, @OkHeight.l)
  PUSH   qword 0
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS382+24]
  PUSH   qword [rbp+108]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; OkHeight   = Max(OkHeight, GetRequiredHeight(*This\PasswordGadget))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS382+8]
  PUSH   qword [rbp+92]
  POP    rcx
  POP    rdx
  CALL  _Procedure92
  MOV    rax,rax
  PUSH   rax
  MOVSXD rax,dword [rsp+72]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    dword [rsp+64],eax
; OkWidth    = Max(OkWidth, 50)
  PUSH   qword 50
  MOVSXD rax,dword [rsp+64]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    dword [rsp+56],eax
; AbortWidth = Max(AbortWidth, 100)
  PUSH   qword 100
  MOVSXD rax,dword [rsp+48]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    dword [rsp+40],eax
; 
; If State
  CMP    qword [rsp+PS382+8],0
  JE    _EndIf1205
; HideGadget(*This\PasswordGadget, 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS382+8]
  PUSH   qword [rbp+92]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; HideGadget(*This\OkGadget, 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS382+8]
  PUSH   qword [rbp+108]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; ResizeGadget(*This\LogGadget, 10, 10, 330, 215-AbortHeight-OkHeight)
  SUB    rsp,8
  MOVSXD r15,dword [rsp+56]
  NEG    r15
  MOVSXD rax,dword [rsp+72]
  SUB    r15,rax
  ADD    r15,215
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 330
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS382+40]
  PUSH   qword [rbp+84]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*This\PasswordGadget, 10, 230-AbortHeight-OkHeight, 325-OkWidth, OkHeight)
  SUB    rsp,8
  MOVSXD rax,dword [rsp+72]
  MOV    rax,rax
  PUSH   rax
  MOVSXD r15,dword [rsp+72]
  NEG    r15
  ADD    r15,325
  MOV    rax,r15
  PUSH   rax
  MOVSXD r15,dword [rsp+72]
  NEG    r15
  MOVSXD rax,dword [rsp+88]
  SUB    r15,rax
  ADD    r15,230
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS382+40]
  PUSH   qword [rbp+92]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*This\OkGadget, 340-OkWidth, 230-AbortHeight-OkHeight, OkWidth, OkHeight)
  SUB    rsp,8
  MOVSXD rax,dword [rsp+72]
  MOV    rax,rax
  PUSH   rax
  MOVSXD rax,dword [rsp+72]
  MOV    rax,rax
  PUSH   rax
  MOVSXD r15,dword [rsp+72]
  NEG    r15
  MOVSXD rax,dword [rsp+88]
  SUB    r15,rax
  ADD    r15,230
  MOV    rax,r15
  PUSH   rax
  MOVSXD r15,dword [rsp+88]
  NEG    r15
  ADD    r15,340
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS382+40]
  PUSH   qword [rbp+108]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; 
; *This\PasswordSet = 0
  MOV    rbp,qword [rsp+PS382+0]
  MOV    dword [rbp+116],0
; HideWindow(*This\Window, 0) 
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS382+8]
  PUSH   qword [rbp+76]
  POP    rcx
  POP    rdx
  CALL   PB_HideWindow
; SetGadgetText(*This\PasswordGadget, "")
  MOV    rax,_S3
  PUSH   rax
  MOV    rbp,qword [rsp+PS382+8]
  PUSH   qword [rbp+92]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetText
; SetActiveWindow(*This\Window)
  MOV    rbp,qword [rsp+PS382+0]
  PUSH   qword [rbp+76]
  POP    rcx
  CALL   PB_SetActiveWindow
; SetActiveGadget(*This\PasswordGadget)
  MOV    rbp,qword [rsp+PS382+0]
  PUSH   qword [rbp+92]
  POP    rcx
  CALL   PB_SetActiveGadget
; Else
  JMP   _EndIf1204
_EndIf1205:
; HideGadget(*This\PasswordGadget, 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS382+8]
  PUSH   qword [rbp+92]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; HideGadget(*This\OkGadget, 1)    
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS382+8]
  PUSH   qword [rbp+108]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; ResizeGadget(*This\LogGadget, 10, 10, 330, 220-AbortHeight)
  SUB    rsp,8
  MOVSXD r15,dword [rsp+56]
  NEG    r15
  ADD    r15,220
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 330
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS382+40]
  PUSH   qword [rbp+84]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; EndIf
_EndIf1204:
; 
; ResizeGadget(*This\AbortGadget, (350-AbortWidth)/2, 240-AbortHeight, AbortWidth, AbortHeight)
  SUB    rsp,8
  MOVSXD rax,dword [rsp+56]
  MOV    rax,rax
  PUSH   rax
  MOVSXD rax,dword [rsp+56]
  MOV    rax,rax
  PUSH   rax
  MOVSXD r15,dword [rsp+72]
  NEG    r15
  ADD    r15,240
  MOV    rax,r15
  PUSH   rax
  MOVSXD r15,dword [rsp+72]
  NEG    r15
  ADD    r15,350
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS382+40]
  PUSH   qword [rbp+100]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; EndProcedure
_EndProcedureZero383:
  XOR    rax,rax
_EndProcedure383:
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure Debugger_ShowLine(*Debugger.DebuggerData, Line)
_Procedure2:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS2=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; If SourceFiles(CurrentSource)\IsLoaded
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  CMP    dword [rbp+8],0
  JE    _EndIf3578
; HideGadget(SourceFiles(CurrentSource)\Gadget, 1)
  PUSH   qword 1
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; EndIf
_EndIf3578:
; 
; CurrentSource = (Line >> 24) & $FF 
  MOV    r15,qword [rsp+PS2+8]
  SAR    r15,24
  AND    r15,255
  MOV    qword [v_CurrentSource],r15
; SetGadgetState(#GADGET_SelectSource, CurrentSource)  
  PUSH   qword [v_CurrentSource]
  PUSH   qword 22
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; 
; If SourceFiles(CurrentSource)\IsLoaded
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  CMP    dword [rbp+8],0
  JE    _EndIf3580
; HideGadget(SourceFiles(CurrentSource)\Gadget, 0)
  PUSH   qword 0
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; Else
  JMP   _EndIf3579
_EndIf3580:
; SourceFiles(CurrentSource)\Gadget = LoadSource(SourceFiles(CurrentSource)\FileName$)
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp]
  POP    rcx
  CALL  _Procedure660
  MOV    rax,rax
  PUSH   rax
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  POP    rax
  MOV    qword [rbp+16],rax
; If SourceFiles(CurrentSource)\Gadget
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  CMP    qword [rbp+16],0
  JE    _EndIf3583
; SourceFiles(CurrentSource)\IsLoaded = 1
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  MOV    dword [rbp+8],1
; Else
  JMP   _EndIf3582
_EndIf3583:
; HideGadget(#GADGET_Waiting, 0) 
  PUSH   qword 0
  PUSH   qword 18
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; 
; If *DebuggerData\IsNetwork And *DebuggerData\ProgramState <> -1 And SourceFiles(CurrentSource)\IsRequested = 0
  MOV    rbp,qword [p_DebuggerData]
  CMP    dword [rbp+40],0
  JE     No359
  MOV    rbp,qword [p_DebuggerData]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JE     No359
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  MOVSXD r15,dword [rbp+12]
  AND    r15,r15
  JNE    No359
Ok359:
  MOV    rax,1
  JMP    End359
No359:
  XOR    rax,rax
End359:
  AND    rax,rax
  JE    _EndIf3586
; Command.CommandInfo\Command = #COMMAND_GetFile
  LEA    rbp,[rsp+40]
  MOV    dword [rbp],38
; Command\Value1 = CurrentSource
  PUSH   qword [v_CurrentSource]
  POP    rax
  MOV    dword [rbp+8],eax
; SendDebuggerCommand(*DebuggerData, @Command)  
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [p_DebuggerData]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; SourceFiles(CurrentSource)\IsRequested = 1
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  MOV    dword [rbp+12],1
; EndIf
_EndIf3586:
; 
; ProcedureReturn
  JMP   _EndProcedure3
; EndIf
_EndIf3582:
; EndIf
_EndIf3579:
; 
; Standalone_ResizeGUI()
  CALL  _Procedure664
; 
; 
; Position = ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_POSITIONFROMLINE, Line & $FFFFFF, 0)
  PUSH   qword 0
  MOV    r15,qword [rsp+PS2+16]
  AND    r15,16777215
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 2167
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
  MOV    qword [rsp+64],rax
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_SETSEL, Position, Position)
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+72]
  PUSH   qword 2160
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_SCROLLCARET, 0, 0)
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 2169
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; 
; RedrawGadget(SourceFiles(CurrentSource)\Gadget)
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  CALL  _Procedure122
; SetWindowForeground(#WINDOW_Main)
  PUSH   qword 1
  POP    rcx
  CALL  _Procedure106
; SetActiveGadget(SourceFiles(CurrentSource)\Gadget)  
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  CALL   PB_SetActiveGadget
; 
; EndProcedure
_EndProcedureZero3:
  XOR    rax,rax
_EndProcedure3:
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure VariableGadget_Expand(Gadget)
_Procedure288:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS288=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; *VariableGadget.VariableGadget = GetGadgetData(Gadget)
  PUSH   qword [rsp+PS288+0]
  POP    rcx
  CALL   PB_GetGadgetData
  MOV    qword [rsp+40],rax
; ChangeCurrentElement(VariableGadget_List(), *VariableGadget)
  PUSH   qword [rsp+40]
  PUSH   qword [t_VariableGadget_List]
  POP    rcx
  POP    rdx
  CALL   PB_ChangeCurrentElement
; 
; If VariableGadget_List()\Items
  MOV    rbp,qword [t_VariableGadget_List+8]
  CMP    qword [rbp+32],0
  JE    _EndIf884
; ClearGadgetItems(Gadget)
  PUSH   qword [rsp+PS288+0]
  POP    rcx
  CALL   PB_ClearGadgetItems
; Index = 0
  MOV    qword [rsp+48],0
; 
; *items.VariableGadget_ItemList = VariableGadget_List()\Items
  MOV    rbp,qword [t_VariableGadget_List+8]
  PUSH   qword [rbp+32]
  POP    rax
  MOV    qword [rsp+56],rax
; For i = 0 To VariableGadget_List()\ItemCount-1
  MOV    qword [rsp+64],0
  JMP   _ForSkipDebug885
_For885:
_ForSkipDebug885:
  MOV    rbp,qword [t_VariableGadget_List+8]
  MOVSXD r15,dword [rbp+28]
  DEC    r15
  CMP    r15,qword [rsp+64]
  JL    _Next886
; 
; If *items\item[i]\sublevel < 2 
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+4]
  CMP    r15,2
  JGE   _EndIf888
; 
; If *items\item[i]\Node <> 0 And *items\item[i]\sublevel = 0
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+2]
  AND    r15,r15
  JE     No158
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+4]
  AND    r15,r15
  JNE    No158
Ok158:
  MOV    rax,1
  JMP    End158
No158:
  XOR    rax,rax
End158:
  AND    rax,rax
  JE    _EndIf890
; Image = VariableGadget_NodeClose
  PUSH   qword [v_VariableGadget_NodeClose]
  POP    rax
  MOV    qword [rsp+72],rax
; *items\item[i]\Node = 2
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    word [rbp+2],2
; ElseIf *items\item[i]\Node <> 0
  JMP   _EndIf889
_EndIf890:
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+2]
  AND    r15,r15
  JE    _EndIf891
; Image = VariableGadget_NodeOpen
  PUSH   qword [v_VariableGadget_NodeOpen]
  POP    rax
  MOV    qword [rsp+72],rax
; *items\item[i]\Node = 1
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    word [rbp+2],1
; Else
  JMP   _EndIf889
_EndIf891:
; Image = VariableGadget_Icons(*items\item[i]\Type & #TYPEMASK)
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,byte [rbp+1]
  AND    r15,63
  MOV    rbp,qword [a_VariableGadget_Icons]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rax
  MOV    qword [rsp+72],rax
; EndIf
_EndIf889:
; 
; AddGadgetItem(Gadget, Index, VariableGadget_EntryText(*VariableGadget, i), ImageID(Image))           
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+88]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+112]
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure282
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+PS288+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemData(Gadget, Index, i)
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+PS288+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetItemData
; Index + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; Else
  JMP   _EndIf887
_EndIf888:
; If *items\item[i]\Node <> 0 
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+2]
  AND    r15,r15
  JE    _EndIf895
; *items\item[i]\Node = 1
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    word [rbp+2],1
; EndIf              
_EndIf895:
; 
; EndIf
_EndIf887:
; 
; Next i
_NextContinue886:
  INC    qword [rsp+64]
  JNO   _For885
_Next886:
; 
; EndIf
_EndIf884:
; 
; 
; EndProcedure
_EndProcedureZero289:
  XOR    rax,rax
_EndProcedure289:
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure StateFromGranularity(Granularity)
_Procedure608:
  MOV    qword [rsp+8],rcx
  PUSH   r15
  PUSH   r14
  PS608=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; If Granularity <= 0 
  MOV    r15,qword [rsp+PS608+0]
  AND    r15,r15
  JG    _EndIf3226
; ProcedureReturn #MAX_PurifierState
  MOV    rax,14
  JMP   _EndProcedure609
; Else
  JMP   _EndIf3225
_EndIf3226:
; For State = 0 To #MAX_PurifierState-1
  MOV    qword [rsp+40],0
  JMP   _ForSkipDebug3228
_For3228:
_ForSkipDebug3228:
  MOV    rax,13
  CMP    rax,qword [rsp+40]
  JL    _Next3229
; If Granularity >= (1 << State) And Granularity < (1 << (State+1))
  MOV    r15,qword [rsp+PS608+0]
  MOV    r14,qword [rsp+40]
  MOV    rcx,r14
  MOV    rax,1
  SAL    rax,cl
  MOV    r14,rax
  CMP    r15,r14
  JL     No335
  MOV    r15,qword [rsp+PS608+0]
  MOV    r14,qword [rsp+40]
  INC    r14
  MOV    rcx,r14
  MOV    rax,1
  SAL    rax,cl
  MOV    r14,rax
  CMP    r15,r14
  JGE    No335
Ok335:
  MOV    rax,1
  JMP    End335
No335:
  XOR    rax,rax
End335:
  AND    rax,rax
  JE    _EndIf3231
; ProcedureReturn State
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure609
; EndIf
_EndIf3231:
; Next State
_NextContinue3229:
  INC    qword [rsp+40]
  JNO   _For3228
_Next3229:
; 
; ProcedureReturn #MAX_PurifierState-1
  MOV    rax,13
  JMP   _EndProcedure609
; EndIf
_EndIf3225:
; EndProcedure
_EndProcedureZero609:
  XOR    rax,rax
_EndProcedure609:
  ADD    rsp,56
  POP    r14
  POP    r15
  RET
; Procedure Debugger_NetworkConnect(Mode, Host$, Port, Password$)
_Procedure434:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PUSH   r15
  PS434=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS434+8]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
  MOV    rdx,[rsp+PS434+24]
  LEA    rcx,[rsp+48]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; 
; 
; 
; 
; 
; 
; 
; Debug "Debugger_NetworkConnect():"
; Debug Mode
; Debug Host$
; Debug Port
; Debug Password$
; 
; 
; 
; LastElement(RunningDebuggers())
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  CALL   PB_LastElement
; If AddElement(RunningDebuggers()) = 0
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  CALL   PB_AddElement
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1558
; Debug " -- Debugger_ConnectProgram() failed: AddElement()"
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure435
; EndIf
_EndIf1558:
; 
; 
; 
; RunningDebuggers()\ID = GetUniqueID()
  CALL  _Procedure164
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [t_RunningDebuggers+8]
  POP    rax
  MOV    qword [rbp+16],rax
; 
; RunningDebuggers()\Communication = CreateNetworkCommunication(Mode, Host$, Port, Password$)
  PUSH   qword [rsp+48]
  PUSH   qword [rsp+PS434+24]
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+PS434+24]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure418
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [t_RunningDebuggers+8]
  POP    rax
  MOV    qword [rbp+60],rax
; If RunningDebuggers()\Communication = 0
  MOV    r15,qword [rbp+60]
  AND    r15,r15
  JNE   _EndIf1560
; DeleteElement(RunningDebuggers())
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  CALL   PB_DeleteElement
; Debug " -- Debugger_ConnectProgram() failed: CreateNetworkClientCommunication()"
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure435
; EndIf
_EndIf1560:
; 
; RunningDebuggers()\IsNetwork = #True    
  MOV    rbp,qword [t_RunningDebuggers+8]
  MOV    dword [rbp+56],1
; 
; 
; 
; RunningDebuggers()\ProgramState = -1 
  MOV    dword [rbp+128],-1
; RunningDebuggers()\LastProgramState = -1  
  MOV    dword [rbp+132],-1
; 
; 
; 
; CreateWatchlistWindow(@RunningDebuggers())  
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure58
; CreateDebugWindow(@RunningDebuggers())
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure60
; CreateDataBreakpointWindow(@RunningDebuggers())
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure62
; 
; 
; RunningDebuggers()\PurifierGlobal = 1
  MOV    rbp,qword [t_RunningDebuggers+8]
  MOV    dword [rbp+772],1
; RunningDebuggers()\PurifierLocal  = 1
  MOV    dword [rbp+776],1
; RunningDebuggers()\PurifierString = 64
  MOV    dword [rbp+780],64
; RunningDebuggers()\PurifierDynamic = 1  
  MOV    dword [rbp+784],1
; 
; 
; 
; If RunningDebuggers()\Communication\Connect() = 0
  MOV    rbp,qword [rbp+60]
  PUSH   rbp
  SUB    rsp,8
  SUB    rsp,32
  MOV    rax,[rsp+40]
  MOV    rcx,rax
  MOV    rax,[rax]
  CALL   qword [rax+8]
  ADD    rsp,40
  ADD    rsp,8
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1562
; RunningDebuggers()\Communication\Close()  
  MOV    rbp,qword [t_RunningDebuggers+8]
  MOV    rbp,qword [rbp+60]
  PUSH   rbp
  SUB    rsp,8
  SUB    rsp,32
  MOV    rax,[rsp+40]
  MOV    rcx,rax
  MOV    rax,[rax]
  CALL   qword [rax+48]
  ADD    rsp,40
  ADD    rsp,8
; RunningDebuggers()\Communication = 0
  MOV    rbp,qword [t_RunningDebuggers+8]
  MOV    qword [rbp+60],0
; 
; 
; Debugger_ForceDestroy(@RunningDebuggers())
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure420
; 
; Debug " -- Debugger_ConnectProgram() failed: Communication\Connect()"
; ProcedureReturn 0        
  XOR    rax,rax
  JMP   _EndProcedure435
; EndIf    
_EndIf1562:
; 
; 
; 
; 
; CompilerIf #LOG_DEBUGGER_COMMANDS 
; 
; 
; 
; 
; ProcedureReturn @RunningDebuggers()
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  JMP   _EndProcedure435
; EndProcedure
_EndProcedureZero435:
  XOR    rax,rax
_EndProcedure435:
  PUSH   rax
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure SetWindowForeground_NoActivate(Window)
_Procedure108:
  MOV    qword [rsp+8],rcx
  PUSH   r15
  PS108=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; SetWindowPos_(WindowID(Window), #HWND_TOP, 0,0,0,0, #SWP_NOACTIVATE|#SWP_NOMOVE|#SWP_NOOWNERZORDER|#SWP_NOSIZE)
  SUB    rsp,8
  PUSH   qword 531
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  SUB    rsp,8
  PUSH   qword [rsp+PS108+64]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   SetWindowPos
  ADD    rsp,64
; 
; EndProcedure
_EndProcedureZero109:
  XOR    rax,rax
_EndProcedure109:
  ADD    rsp,48
  POP    r15
  RET
; Procedure LibraryViewer_DebuggerEvent(*Debugger.DebuggerData)
_Procedure28:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS28=192
  MOV    rax,16
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; Select *Debugger\Command\Command
  MOV    rbp,qword [rsp+PS28+0]
  MOVSXD rax,dword [rbp+52]
  PUSH   rax
; 
; Case #COMMAND_ControlLibraryViewer
  MOV    r15,44
  CMP    r15,[rsp]
  JNE   _Case245
; OpenLibraryViewerWindow(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS28+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure48
  ADD    rsp,40
; 
; If *Debugger\Command\Value2 <> -1 
  MOV    rbp,qword [rsp+PS28+8]
  MOVSXD r15,dword [rbp+64]
  CMP    r15,-1
  JE    _EndIf2749
; Library = *Debugger\Command\Value2 
  MOV    rbp,qword [rsp+PS28+8]
  MOVSXD rax,dword [rbp+64]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+48],rax
; Else
  JMP   _EndIf2748
_EndIf2749:
; Library = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2824]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    qword [rsp+48],rax
; EndIf
_EndIf2748:
; 
; 
; If Library <> *Debugger\CurrentLibrary 
  MOV    r15,qword [rsp+48]
  MOV    rbp,qword [rsp+PS28+8]
  MOVSXD rax,dword [rbp+660]
  CMP    r15,rax
  JE    _EndIf2752
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList], Library)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  MOV    rbp,qword [rsp+PS28+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2824]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; LibraryViewer_ClearDisplay(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS28+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure554
  ADD    rsp,40
; If Library <> -1
  MOV    r15,qword [rsp+48]
  CMP    r15,-1
  JE    _EndIf2754
; LibraryViewer_DisplayLibrary(*Debugger, Library)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+PS28+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure556
  ADD    rsp,40
; EndIf
_EndIf2754:
; Else
  JMP   _EndIf2751
_EndIf2752:
; Command.CommandInfo\Command = #COMMAND_GetLibraryInfo
  LEA    rbp,[rsp+56]
  MOV    dword [rbp],25
; Command\Value1 = *Debugger\CurrentLibrary
  MOV    rbp,qword [rsp+PS28+8]
  MOVSXD rax,dword [rbp+660]
  PUSH   rax
  LEA    rbp,[rsp+64]
  POP    rax
  MOV    dword [rbp+8],eax
; SendDebuggerCommand(*Debugger, @Command)
  SUB    rsp,8
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS28+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; EndIf
_EndIf2751:
; 
; 
; If *Debugger\Command\Value1 = 2 And *Debugger\CommandData
  MOV    rbp,qword [rsp+PS28+8]
  MOVSXD r15,dword [rbp+60]
  CMP    r15,2
  JNE    No294
  MOV    rbp,qword [rsp+PS28+8]
  CMP    qword [rbp+72],0
  JE     No294
Ok294:
  MOV    rax,1
  JMP    End294
No294:
  XOR    rax,rax
End294:
  AND    rax,rax
  JE    _EndIf2757
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS28+8]
  CMP    dword [rbp+32],0
  JE    _EndIf2759
; *Debugger\CurrentObjectID = PeekQ(*Debugger\CommandData)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  PUSH   qword [rbp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS28+16]
  POP    rax
  MOV    qword [rbp+668],rax
; Else
  JMP   _EndIf2758
_EndIf2759:
; *Debugger\CurrentObjectID = PeekL(*Debugger\CommandData)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  PUSH   qword [rbp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS28+16]
  POP    rax
  MOV    qword [rbp+668],rax
; EndIf
_EndIf2758:
; Else
  JMP   _EndIf2756
_EndIf2757:
; *Debugger\CurrentObjectID = -1
  MOV    rbp,qword [rsp+PS28+8]
  MOV    qword [rbp+668],-1
; EndIf    
_EndIf2756:
; 
; 
; Case #COMMAND_Libraries
  JMP   _EndSelect37
_Case245:
  MOV    r15,29
  CMP    r15,[rsp]
  JNE   _Case246
; 
; 
; 
; If *Debugger\LibraryList
  MOV    rbp,qword [rsp+PS28+8]
  CMP    qword [rbp+636],0
  JE    _EndIf2763
; *libraries.Debugger_LibraryList = *Debugger\LibraryList
  MOV    rbp,qword [rsp+PS28+8]
  PUSH   qword [rbp+636]
  POP    rax
  MOV    qword [rsp+80],rax
; For i = 0 To *Debugger\NbLibraries - 1
  MOV    qword [rsp+88],0
  JMP   _ForSkipDebug2764
_For2764:
_ForSkipDebug2764:
  MOV    rbp,qword [rsp+PS28+8]
  MOVSXD r15,dword [rbp+632]
  DEC    r15
  CMP    r15,qword [rsp+88]
  JL    _Next2765
; FreePBString(@*libraries\library[i]\LibraryID$)
  SUB    rsp,8
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+104]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  MOV    rax,qword [rbp]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure74
  ADD    rsp,40
; FreePBString(@*libraries\library[i]\Name$)
  SUB    rsp,8
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+104]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  MOV    rax,qword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure74
  ADD    rsp,40
; FreePBString(@*libraries\library[i]\TitleString$)
  SUB    rsp,8
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+104]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  MOV    rax,qword [rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure74
  ADD    rsp,40
; Next i
_NextContinue2765:
  INC    qword [rsp+88]
  JNO   _For2764
_Next2765:
; FreeMemory(*Debugger\LibraryList)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  PUSH   qword [rbp+636]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FreeMemory
  ADD    rsp,40
; *Debugger\LibraryList = 0
  MOV    rbp,qword [rsp+PS28+8]
  MOV    qword [rbp+636],0
; EndIf
_EndIf2763:
; 
; 
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Library]
  MOV    rbp,qword [rsp+PS28+8]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+880],0
  JE    _EndIf2767
; LibraryViewer_ClearDisplay(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS28+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure554
  ADD    rsp,40
; ClearGadgetItems(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList]) 
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2824]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ClearGadgetItems
  ADD    rsp,40
; *Debugger\CurrentLibrary = -1
  MOV    rbp,qword [rsp+PS28+8]
  MOV    dword [rbp+660],-1
; EndIf
_EndIf2767:
; 
; 
; 
; *Debugger\NbLibraries = *Debugger\Command\Value1
  MOV    rbp,qword [rsp+PS28+8]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
  MOV    rbp,qword [rsp+PS28+16]
  POP    rax
  MOV    dword [rbp+632],eax
; If *Debugger\NbLibraries > 0 And *Debugger\CommandData
  MOV    rbp,qword [rsp+PS28+8]
  MOVSXD r15,dword [rbp+632]
  AND    r15,r15
  JLE    No295
  MOV    rbp,qword [rsp+PS28+8]
  CMP    qword [rbp+72],0
  JE     No295
Ok295:
  MOV    rax,1
  JMP    End295
No295:
  XOR    rax,rax
End295:
  AND    rax,rax
  JE    _EndIf2769
; *libraries.Debugger_LibraryList = AllocateMemory(*Debugger\NbLibraries * SizeOf(Debugger_LibraryData))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  MOVSXD r15,dword [rbp+632]
  IMUL   r15,28
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_AllocateMemory
  ADD    rsp,40
  MOV    qword [rsp+80],rax
; If *libraries
  CMP    qword [rsp+80],0
  JE    _EndIf2771
; *Pointer = *Debugger\CommandData
  MOV    rbp,qword [rsp+PS28+8]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+96],rax
; For i = 0 To *Debugger\NbLibraries-1
  MOV    qword [rsp+88],0
  JMP   _ForSkipDebug2772
_For2772:
_ForSkipDebug2772:
  MOV    rbp,qword [rsp+PS28+8]
  MOVSXD r15,dword [rbp+632]
  DEC    r15
  CMP    r15,qword [rsp+88]
  JL    _Next2773
; *libraries\library[i]\LibraryID$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+128]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+104]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1
  MOV    r15,qword [rsp+96]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+96],r15
; *libraries\library[i]\Name$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+128]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+104]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+8]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1
  MOV    r15,qword [rsp+96]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+96],r15
; *libraries\library[i]\TitleString$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+128]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+104]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+16]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1
  MOV    r15,qword [rsp+96]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+96],r15
; *libraries\library[i]\FunctionMask = PeekL(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+104]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+104]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    dword [rbp+24],eax
; *Pointer + 4            
  MOV    r15,qword [rsp+96]
  ADD    r15,4
  MOV    qword [rsp+96],r15
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Library]
  MOV    rbp,qword [rsp+PS28+8]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+880],0
  JE    _EndIf2775
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList], -1, *libraries\library[i]\Name$)
  SUB    rsp,8
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+104]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+8]
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS28+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2824]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
; EndIf
_EndIf2775:
; Next i
_NextContinue2773:
  INC    qword [rsp+88]
  JNO   _For2772
_Next2773:
; 
; *Debugger\LibraryList = *libraries  
  PUSH   qword [rsp+80]
  MOV    rbp,qword [rsp+PS28+16]
  POP    rax
  MOV    qword [rbp+636],rax
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Library]
  MOV    rbp,qword [rsp+PS28+8]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+880],0
  JE    _EndIf2777
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS28+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2824]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; LibraryViewer_DisplayLibrary(*Debugger, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword [rsp+PS28+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure556
  ADD    rsp,40
; EndIf
_EndIf2777:
; EndIf
_EndIf2771:
; 
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Library]
  MOV    rbp,qword [rsp+PS28+8]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+880],0
  JE    _EndIf2779
; UpdateLibraryViewerState(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS28+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure562
  ADD    rsp,40
; EndIf
_EndIf2779:
; 
; Else
  JMP   _EndIf2768
_EndIf2769:
; If *Debugger\Windows[#DEBUGGER_WINDOW_Library]
  MOV    rbp,qword [rsp+PS28+8]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+880],0
  JE    _EndIf2782
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList], -1, Language("Debugger","NoLibraryInfo"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S317
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS28+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2824]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList], 0)       
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS28+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2824]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; EndIf
_EndIf2782:
; EndIf
_EndIf2768:
; 
; Case #COMMAND_LibraryInfo  
  JMP   _EndSelect37
_Case246:
  MOV    r15,30
  CMP    r15,[rsp]
  JNE   _Case247
; If *Debugger\Windows[#DEBUGGER_WINDOW_Library] And *Debugger\Command\Value1 = *Debugger\CurrentLibrary
  MOV    rbp,qword [rsp+PS28+8]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+880],0
  JE     No296
  MOV    rbp,qword [rsp+PS28+8]
  MOVSXD r15,dword [rbp+60]
  MOV    rbp,qword [rsp+PS28+8]
  CMP    r15d,dword [rbp+660]
  JNE    No296
Ok296:
  MOV    rax,1
  JMP    End296
No296:
  XOR    rax,rax
End296:
  AND    rax,rax
  JE    _EndIf2784
; ClearGadgetItems(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectList])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2832]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ClearGadgetItems
  ADD    rsp,40
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectText], "")
  SUB    rsp,8
  MOV    rax,_S3
  PUSH   rax
  MOV    rbp,qword [rsp+PS28+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2840]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
; LibraryViewer_FreeObject(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS28+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure552
  ADD    rsp,40
; 
; *Debugger\NbObjects = *Debugger\Command\Value2
  MOV    rbp,qword [rsp+PS28+8]
  MOVSXD rax,dword [rbp+64]
  PUSH   rax
  MOV    rbp,qword [rsp+PS28+16]
  POP    rax
  MOV    dword [rbp+648],eax
; *Pointer = *Debugger\CommandData
  MOV    rbp,qword [rsp+PS28+8]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+96],rax
; 
; lastIDIndex = -1
  MOV    qword [rsp+104],-1
; 
; If *Debugger\NbObjects > 0
  MOV    rbp,qword [rsp+PS28+8]
  MOVSXD r15,dword [rbp+648]
  AND    r15,r15
  JLE   _EndIf2786
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS28+8]
  CMP    dword [rbp+32],0
  JE    _EndIf2788
; *Debugger\ObjectList = AllocateMemory(*Debugger\NbObjects * SizeOf(QUAD))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  MOVSXD r15,dword [rbp+648]
  SAL    r15,3
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_AllocateMemory
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS28+16]
  POP    rax
  MOV    qword [rbp+652],rax
; Else
  JMP   _EndIf2787
_EndIf2788:
; *Debugger\ObjectList = AllocateMemory(*Debugger\NbObjects * SizeOf(LONG))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  MOVSXD r15,dword [rbp+648]
  SAL    r15,2
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_AllocateMemory
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS28+16]
  POP    rax
  MOV    qword [rbp+652],rax
; EndIf
_EndIf2787:
; 
; If *Debugger\ObjectList
  MOV    rbp,qword [rsp+PS28+8]
  CMP    qword [rbp+652],0
  JE    _EndIf2791
; *id.Local_Array = *Debugger\ObjectList
  MOV    rbp,qword [rsp+PS28+8]
  PUSH   qword [rbp+652]
  POP    rax
  MOV    qword [rsp+112],rax
; For i = 0 To *Debugger\NbObjects-1
  MOV    qword [rsp+88],0
  JMP   _ForSkipDebug2792
_For2792:
_ForSkipDebug2792:
  MOV    rbp,qword [rsp+PS28+8]
  MOVSXD r15,dword [rbp+648]
  DEC    r15
  CMP    r15,qword [rsp+88]
  JL    _Next2793
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS28+8]
  CMP    dword [rbp+32],0
  JE    _EndIf2795
; *id\q[i] = PeekQ(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+104]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+120]
  PUSH   rbp
  MOV    rax,qword [rsp+104]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    qword [rbp],rax
; *Pointer + 8
  MOV    r15,qword [rsp+96]
  ADD    r15,8
  MOV    qword [rsp+96],r15
; 
; 
; If *id\q[i] = *Debugger\CurrentObjectID And *Debugger\CurrentObjectID <> -1
  MOV    rbp,qword [rsp+112]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  MOV    r15,qword [rbp]
  MOV    rbp,qword [rsp+PS28+8]
  CMP    r15,qword [rbp+668]
  JNE    No297
  MOV    rbp,qword [rsp+PS28+8]
  MOV    r15,qword [rbp+668]
  CMP    r15,-1
  JE     No297
Ok297:
  MOV    rax,1
  JMP    End297
No297:
  XOR    rax,rax
End297:
  AND    rax,rax
  JE    _EndIf2797
; lastIDIndex = i
  PUSH   qword [rsp+88]
  POP    rax
  MOV    qword [rsp+104],rax
; EndIf              
_EndIf2797:
; Else
  JMP   _EndIf2794
_EndIf2795:
; *id\l[i] = PeekL(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+104]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+120]
  PUSH   rbp
  MOV    rax,qword [rsp+104]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    dword [rbp],eax
; *Pointer + 4
  MOV    r15,qword [rsp+96]
  ADD    r15,4
  MOV    qword [rsp+96],r15
; 
; 
; If *id\l[i] = *Debugger\CurrentObjectID And *Debugger\CurrentObjectID <> -1
  MOV    rbp,qword [rsp+112]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  MOVSXD r15,dword [rbp]
  MOV    rbp,qword [rsp+PS28+8]
  CMP    r15,qword [rbp+668]
  JNE    No298
  MOV    rbp,qword [rsp+PS28+8]
  MOV    r15,qword [rbp+668]
  CMP    r15,-1
  JE     No298
Ok298:
  MOV    rax,1
  JMP    End298
No298:
  XOR    rax,rax
End298:
  AND    rax,rax
  JE    _EndIf2800
; lastIDIndex = i
  PUSH   qword [rsp+88]
  POP    rax
  MOV    qword [rsp+104],rax
; EndIf
_EndIf2800:
; EndIf
_EndIf2794:
; 
; String$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+128]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+128]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1
  MOV    r15,qword [rsp+96]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+96],r15
; 
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectList], -1, ReplaceString(String$, Chr(9), Chr(10)))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S88
  PUSH   rax
  MOV    rax,_S26
  PUSH   rax
  PUSH   qword [rsp+168]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ReplaceString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS28+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2832]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Next i            
_NextContinue2793:
  INC    qword [rsp+88]
  JNO   _For2792
_Next2793:
; Else            
  JMP   _EndIf2790
_EndIf2791:
; 
; For i = 0 To *Debugger\NbObjects-1
  MOV    qword [rsp+88],0
  JMP   _ForSkipDebug2802
_For2802:
_ForSkipDebug2802:
  MOV    rbp,qword [rsp+PS28+8]
  MOVSXD r15,dword [rbp+648]
  DEC    r15
  CMP    r15,qword [rsp+88]
  JL    _Next2803
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS28+8]
  CMP    dword [rbp+32],0
  JE    _EndIf2805
; *Pointer + 8 
  MOV    r15,qword [rsp+96]
  ADD    r15,8
  MOV    qword [rsp+96],r15
; Else
  JMP   _EndIf2804
_EndIf2805:
; *Pointer + 4 
  MOV    r15,qword [rsp+96]
  ADD    r15,4
  MOV    qword [rsp+96],r15
; EndIf
_EndIf2804:
; *Pointer + MemoryAsciiLength(*Pointer) + 1 
  MOV    r15,qword [rsp+96]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+96],r15
; Next i          
_NextContinue2803:
  INC    qword [rsp+88]
  JNO   _For2802
_Next2803:
; *Debugger\NbObjects = 0
  MOV    rbp,qword [rsp+PS28+8]
  MOV    dword [rbp+648],0
; EndIf
_EndIf2790:
; EndIf
_EndIf2786:
; 
; 
; 
; 
; 
; *Debugger\CurrentObject = lastIDIndex
  PUSH   qword [rsp+104]
  MOV    rbp,qword [rsp+PS28+16]
  POP    rax
  MOV    dword [rbp+664],eax
; If lastIDIndex = -1 
  MOV    r15,qword [rsp+104]
  CMP    r15,-1
  JNE   _EndIf2808
; *Debugger\CurrentObjectID = -1
  MOV    rbp,qword [rsp+PS28+8]
  MOV    qword [rbp+668],-1
; Else
  JMP   _EndIf2807
_EndIf2808:
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectList], lastIDIndex)                                       
  SUB    rsp,8
  PUSH   qword [rsp+112]
  MOV    rbp,qword [rsp+PS28+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2832]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; CompilerIf #CompileWindows
; SendMessage_(GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectList]), #LVM_ENSUREVISIBLE, lastIDIndex, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword [rsp+120]
  PUSH   qword 4115
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+48]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2832]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   SendMessageW
  ADD    rsp,40
; CompilerEndIf
; 
; LibraryViewer_DisplayObject(*Debugger, lastIDIndex)          
  SUB    rsp,8
  PUSH   qword [rsp+112]
  PUSH   qword [rsp+PS28+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure558
  ADD    rsp,40
; EndIf
_EndIf2807:
; EndIf
_EndIf2784:
; 
; 
; 
; 
; Case #COMMAND_ObjectID
  JMP   _EndSelect37
_Case247:
  MOV    r15,31
  CMP    r15,[rsp]
  JNE   _Case248
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS28+8]
  CMP    dword [rbp+32],0
  JE    _EndIf2811
; *Debugger\CommandObjectID = PeekQ(@*Debugger\Command\Value1)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  LEA    rax,[rbp+60]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS28+16]
  POP    rax
  MOV    qword [rbp+676],rax
; Else
  JMP   _EndIf2810
_EndIf2811:
; *Debugger\CommandObjectID = PeekL(@*Debugger\Command\Value1)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  LEA    rax,[rbp+60]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS28+16]
  POP    rax
  MOV    qword [rbp+676],rax
; EndIf
_EndIf2810:
; 
; 
; Case #COMMAND_ObjectText
  JMP   _EndSelect37
_Case248:
  MOV    r15,32
  CMP    r15,[rsp]
  JNE   _Case249
; If *Debugger\Windows[#DEBUGGER_WINDOW_Library] And *Debugger\CommandObjectID = *Debugger\CurrentObjectID
  MOV    rbp,qword [rsp+PS28+8]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+880],0
  JE     No299
  MOV    rbp,qword [rsp+PS28+8]
  MOV    r15,qword [rbp+676]
  MOV    rbp,qword [rsp+PS28+8]
  CMP    r15,qword [rbp+668]
  JNE    No299
Ok299:
  MOV    rax,1
  JMP    End299
No299:
  XOR    rax,rax
End299:
  AND    rax,rax
  JE    _EndIf2814
; If *Debugger\Command\DataSize > 1
  MOV    rbp,qword [rsp+PS28+8]
  MOVSXD r15,dword [rbp+56]
  CMP    r15,1
  JLE   _EndIf2816
; StartGadgetFlickerFix(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectText])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2840]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure130
  ADD    rsp,40
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectText], PeekAscii(*Debugger\CommandData))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS28+56]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS28+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2840]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; 
; StopGadgetFlickerFix(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectText])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2840]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure132
  ADD    rsp,40
; Else
  JMP   _EndIf2815
_EndIf2816:
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectText], "")
  SUB    rsp,8
  MOV    rax,_S3
  PUSH   rax
  MOV    rbp,qword [rsp+PS28+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2840]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
; EndIf  
_EndIf2815:
; EndIf
_EndIf2814:
; 
; 
; Case #COMMAND_ObjectData      
  JMP   _EndSelect37
_Case249:
  MOV    r15,33
  CMP    r15,[rsp]
  JNE   _Case250
; 
; 
; 
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Library] And *Debugger\CommandObjectID = *Debugger\CurrentObjectID
  MOV    rbp,qword [rsp+PS28+8]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+880],0
  JE     No300
  MOV    rbp,qword [rsp+PS28+8]
  MOV    r15,qword [rbp+676]
  MOV    rbp,qword [rsp+PS28+8]
  CMP    r15,qword [rbp+668]
  JNE    No300
Ok300:
  MOV    rax,1
  JMP    End300
No300:
  XOR    rax,rax
End300:
  AND    rax,rax
  JE    _EndIf2819
; 
; OldObjectData = *Debugger\CurrentObjectData
  MOV    rbp,qword [rsp+PS28+8]
  PUSH   qword [rbp+684]
  POP    rax
  MOV    qword [rsp+128],rax
; OldContainer  = *Debugger\Gadgets[#DEBUGGER_GADGET_Library_Container]
  MOV    rbp,qword [rsp+PS28+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2864]
  POP    rax
  MOV    qword [rsp+136],rax
; 
; *Debugger\CurrentObjectData = 0
  MOV    rbp,qword [rsp+PS28+8]
  MOV    qword [rbp+684],0
; *Debugger\Gadgets[#DEBUGGER_GADGET_Library_Container] = 0
  MOV    rbp,qword [rsp+PS28+8]
  PUSH   rbp
  POP    rbp
  MOV    qword [rbp+2864],0
; 
; 
; 
; If *Debugger\Command\DataSize > 0 And *Debugger\CommandData
  MOV    rbp,qword [rsp+PS28+8]
  MOVSXD r15,dword [rbp+56]
  AND    r15,r15
  JLE    No301
  MOV    rbp,qword [rsp+PS28+8]
  CMP    qword [rbp+72],0
  JE     No301
Ok301:
  MOV    rax,1
  JMP    End301
No301:
  XOR    rax,rax
End301:
  AND    rax,rax
  JE    _EndIf2821
; *Plugin.LibraryViewerPLUGIN = LibraryViewer_GetCurrentPlugin(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS28+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure550
  ADD    rsp,40
  MOV    qword [rsp+144],rax
; If *Plugin 
  CMP    qword [rsp+144],0
  JE    _EndIf2823
; 
; 
; If *Plugin\SetObjectSize
  MOV    rbp,qword [rsp+144]
  CMP    qword [rbp+52],0
  JE    _EndIf2825
; OpenGadgetList(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectData2])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_OpenGadgetList
  ADD    rsp,40
; Else
  JMP   _EndIf2824
_EndIf2825:
; OpenGadgetList(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectData])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2848]
  POP    rcx
  SUB    rsp,32
  CALL   PB_OpenGadgetList
  ADD    rsp,40
; EndIf        
_EndIf2824:
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Library_Container] = ContainerGadget(#PB_Any, 0, 0, 0, 0)          
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ContainerGadget
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS28+16]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2864],rax
; *Debugger\CurrentObjectData = *Plugin\DisplayObject(GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Container]), *Debugger\CommandData, *Debugger\Command\DataSize)                    
  MOV    rbp,qword [rsp+144]
  PUSH   qword [rbp+20]
  MOV    rbp,qword [rsp+PS28+16]
  MOVSXD rax,dword [rbp+56]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS28+24]
  PUSH   qword [rbp+72]
  MOV    rbp,qword [rsp+PS28+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2864]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   qword [rsp+32]
  ADD    rsp,32
  ADD    rsp,8
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS28+16]
  POP    rax
  MOV    qword [rbp+684],rax
; CloseGadgetList()
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_CloseGadgetList
  ADD    rsp,40
; CloseGadgetList()
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_CloseGadgetList
  ADD    rsp,40
; 
; If *Debugger\CurrentObjectData
  MOV    rbp,qword [rsp+PS28+8]
  CMP    qword [rbp+684],0
  JE    _EndIf2828
; 
; If *Plugin\SetObjectSize
  MOV    rbp,qword [rsp+144]
  CMP    qword [rbp+52],0
  JE    _EndIf2830
; 
; 
; 
; If GadgetType(GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Splitter2], #PB_Splitter_SecondGadget)) <> #PB_GadgetType_Container
  SUB    rsp,8
  PUSH   qword 4
  MOV    rbp,qword [rsp+PS28+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2888]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetAttribute
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetType
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,11
  JE    _EndIf2832
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectData2], 0)                                
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS28+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2856]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Splitter2], #PB_Splitter_SecondGadget, *Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectData2])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2856]
  PUSH   qword 4
  MOV    rbp,qword [rsp+PS28+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2888]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetAttribute
  ADD    rsp,40
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectData], 1)
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS28+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2848]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; EndIf           
_EndIf2832:
; 
; Width  = GadgetWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectData2])   - 4
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetWidth
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,-4
  MOV    qword [rsp+152],r15
; Height = GadgetHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectData2]) - 4
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetHeight
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,-4
  MOV    qword [rsp+160],r15
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Container], 0, 0, Width, Height)
  PUSH   qword [rsp+160]
  PUSH   qword [rsp+160]
  PUSH   qword 0
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS28+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2864]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,40
; 
; 
; 
; 
; 
; 
; 
; *Plugin\SetObjectSize(*Debugger\CurrentObjectData, Width, Height)            
  MOV    rbp,qword [rsp+144]
  PUSH   qword [rbp+52]
  PUSH   qword [rsp+168]
  PUSH   qword [rsp+168]
  MOV    rbp,qword [rsp+PS28+32]
  PUSH   qword [rbp+684]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   qword [rsp+32]
  ADD    rsp,32
  ADD    rsp,8
; Else
  JMP   _EndIf2829
_EndIf2830:
; 
; 
; 
; If GadgetType(GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Splitter2], #PB_Splitter_SecondGadget)) <> #PB_GadgetType_ScrollArea              
  SUB    rsp,8
  PUSH   qword 4
  MOV    rbp,qword [rsp+PS28+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2888]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetAttribute
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetType
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,16
  JE    _EndIf2835
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectData], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS28+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2848]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Splitter2], #PB_Splitter_SecondGadget, *Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectData])                
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2848]
  PUSH   qword 4
  MOV    rbp,qword [rsp+PS28+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2888]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetAttribute
  ADD    rsp,40
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectData2], 1)                
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS28+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2856]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; EndIf            
_EndIf2835:
; 
; Width  = *Plugin\GetObjectWidth(*Debugger\CurrentObjectData)
  MOV    rbp,qword [rsp+144]
  PUSH   qword [rbp+36]
  MOV    rbp,qword [rsp+PS28+16]
  PUSH   qword [rbp+684]
  POP    rcx
  SUB    rsp,32
  CALL   qword [rsp+32]
  ADD    rsp,32
  ADD    rsp,8
  MOV    qword [rsp+152],rax
; Height = *Plugin\GetObjectHeight(*Debugger\CurrentObjectData)
  MOV    rbp,qword [rsp+144]
  PUSH   qword [rbp+44]
  MOV    rbp,qword [rsp+PS28+16]
  PUSH   qword [rbp+684]
  POP    rcx
  SUB    rsp,32
  CALL   qword [rsp+32]
  ADD    rsp,32
  ADD    rsp,8
  MOV    qword [rsp+160],rax
; 
; 
; 
; 
; 
; 
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Container], 0, 0, Width, Height)
  PUSH   qword [rsp+160]
  PUSH   qword [rsp+160]
  PUSH   qword 0
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS28+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2864]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,40
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectData], #PB_ScrollArea_InnerWidth, Width)
  SUB    rsp,8
  PUSH   qword [rsp+160]
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS28+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2848]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetAttribute
  ADD    rsp,40
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectData], #PB_ScrollArea_InnerHeight, Height)             
  SUB    rsp,8
  PUSH   qword [rsp+168]
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS28+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2848]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetAttribute
  ADD    rsp,40
; EndIf
_EndIf2829:
; 
; Else
  JMP   _EndIf2827
_EndIf2828:
; FreeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Container])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS28+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2864]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FreeGadget
  ADD    rsp,40
; EndIf                   
_EndIf2827:
; 
; EndIf
_EndIf2823:
; EndIf
_EndIf2821:
; 
; 
; If OldObjectData 
  CMP    qword [rsp+128],0
  JE    _EndIf2838
; 
; *Plugin.LibraryViewerPLUGIN = LibraryViewer_GetCurrentPlugin(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS28+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure550
  ADD    rsp,40
  MOV    qword [rsp+144],rax
; If *Plugin
  CMP    qword [rsp+144],0
  JE    _EndIf2840
; *Plugin\RemoveObject(OldObjectData)
  MOV    rbp,qword [rsp+144]
  PUSH   qword [rbp+28]
  PUSH   qword [rsp+136]
  POP    rcx
  SUB    rsp,32
  CALL   qword [rsp+32]
  ADD    rsp,32
  ADD    rsp,8
; EndIf 
_EndIf2840:
; 
; FreeGadget(OldContainer)          
  SUB    rsp,8
  PUSH   qword [rsp+144]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FreeGadget
  ADD    rsp,40
; EndIf
_EndIf2838:
; 
; EndIf
_EndIf2819:
; 
; 
; 
; EndSelect 
_Case250:
_EndSelect37:
  POP    rax
; 
; 
; EndProcedure
_EndProcedureZero29:
  XOR    rax,rax
_EndProcedure29:
  PUSH   rax
  MOV    rcx,qword [rsp+120]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,168
  POP    r15
  POP    rbp
  RET
; Procedure UpdateLibraryViewerState(*Debugger.DebuggerData)
_Procedure562:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS562=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; 
; 
; If *Debugger\ProgramState = 3 Or *Debugger\ProgramState = 7 Or *Debugger\ProgramState = 8 Or *Debugger\ProgramState = 9
  MOV    rbp,qword [rsp+PS562+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,3
  JE     Ok293
  MOV    rbp,qword [rsp+PS562+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,7
  JE     Ok293
  MOV    rbp,qword [rsp+PS562+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,8
  JE     Ok293
  MOV    rbp,qword [rsp+PS562+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,9
  JE     Ok293
  JMP    No293
Ok293:
  MOV    rax,1
  JMP    End293
No293:
  XOR    rax,rax
End293:
  AND    rax,rax
  JE    _EndIf2724
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS562+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2824]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectList], 0)  
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS562+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2832]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Update], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS562+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2872]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; 
; If *Debugger\CurrentLibrary <> -1 
  MOV    rbp,qword [rsp+PS562+0]
  MOVSXD r15,dword [rbp+660]
  CMP    r15,-1
  JE    _EndIf2726
; Command.CommandInfo\Command = #COMMAND_GetLibraryInfo
  LEA    rbp,[rsp+40]
  MOV    dword [rbp],25
; Command\Value1 = *Debugger\CurrentLibrary
  MOV    rbp,qword [rsp+PS562+0]
  MOVSXD rax,dword [rbp+660]
  PUSH   rax
  LEA    rbp,[rsp+48]
  POP    rax
  MOV    dword [rbp+8],eax
; SendDebuggerCommand(*Debugger, @Command)
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS562+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; EndIf    
_EndIf2726:
; 
; 
; 
; ElseIf *Debugger\ProgramState = -1
  JMP   _EndIf2723
_EndIf2724:
  MOV    rbp,qword [rsp+PS562+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JNE   _EndIf2727
; 
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS562+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2824]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectList], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS562+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2832]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Update], 1)    
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS562+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2872]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; 
; 
; Else
  JMP   _EndIf2723
_EndIf2727:
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS562+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2824]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectList], 0)  
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS562+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2832]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Update], 0)  
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS562+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2872]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; EndIf
_EndIf2723:
; 
; 
; EndProcedure
_EndProcedureZero563:
  XOR    rax,rax
_EndProcedure563:
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure MemoryViewerWindowEvents(*Debugger.DebuggerData, EventID)
_Procedure484:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS484=224
  MOV    rax,19
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; If EventID = #PB_Event_Gadget
  MOV    r15,qword [rsp+PS484+8]
  CMP    r15,13100
  JNE   _EndIf1878
; Select EventGadget()
  CALL   PB_EventGadget
  MOV    rax,rax
  PUSH   rax
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Display]    
  MOV    rbp,qword [rsp+PS484+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2256]
  CMP    r15,[rsp]
  JNE   _Case161
; Command.CommandInfo\Command = #COMMAND_GetMemory
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],8
; 
; AddrFrom$ = Trim(GetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Start]))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2240]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetText
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,32
  LEA    rcx,[rsp+80]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; AddrTo$   = Trim(GetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_End]))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2248]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetText
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,32
  LEA    rcx,[rsp+88]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; If Left(AddrTo$, 1) = "+"
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S223
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _EndIf1880
; AddrTo$ = Right(AddrTo$, Len(AddrTo$)-1)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+104]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,32
  LEA    rcx,[rsp+88]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Command\Value1 = 1 
  LEA    rbp,[rsp+48]
  MOV    dword [rbp+8],1
; Else
  JMP   _EndIf1879
_EndIf1880:
; Command\Value1 = 0 
  LEA    rbp,[rsp+48]
  MOV    dword [rbp+8],0
; EndIf
_EndIf1879:
; 
; All$ = AddrFrom$ + " " + AddrTo$
  MOV    rcx,qword [rsp+72]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S25
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+88]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+96]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; PokeC(@All$ + Len(AddrFrom$) * SizeOf(Character), 0) 
  SUB    rsp,8
  PUSH   qword 0
  MOV    rax,qword [rsp+104]
  MOV    r15,rax
  SUB    rsp,8
  PUSH   qword [rsp+96]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r14,rax
  ADD    r14,r14
  ADD    r15,r14
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PokeC
  ADD    rsp,40
; 
; Command\DataSize = (Len(AddrFrom$) + Len(AddrTo$) + 2) * SizeOf(Character)
  SUB    rsp,8
  PUSH   qword [rsp+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  SUB    rsp,8
  PUSH   qword [rsp+88]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  ADD    r15,rax
  ADD    r15,2
  ADD    r15,r15
  MOV    rax,r15
  PUSH   rax
  LEA    rbp,[rsp+56]
  POP    rax
  MOV    dword [rbp+4],eax
; SendDebuggerCommandWithData(*Debugger, @Command, @All$)
  SUB    rsp,8
  MOV    rax,qword [rsp+96]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS484+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure8
  ADD    rsp,40
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType]
  JMP   _EndSelect23
_Case161:
  MOV    rbp,qword [rsp+PS484+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2288]
  CMP    r15,[rsp]
  JNE   _Case162
; If *Debugger\MemoryDump 
  MOV    rbp,qword [rsp+PS484+8]
  CMP    qword [rbp+596],0
  JE    _EndIf1883
; MemoryViewer_Update(*Debugger, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [rsp+PS484+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure482
  ADD    rsp,40
; EndIf
_EndIf1883:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_CopyText]
  JMP   _EndSelect23
_Case162:
  MOV    rbp,qword [rsp+PS484+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2296]
  CMP    r15,[rsp]
  JNE   _Case163
; If *Debugger\MemoryDump 
  MOV    rbp,qword [rsp+PS484+8]
  CMP    qword [rbp+596],0
  JE    _EndIf1885
; MemoryViewer_Update(*Debugger, 1, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 1
  PUSH   qword [rsp+PS484+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure482
  ADD    rsp,40
; EndIf
_EndIf1885:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_SaveText]
  JMP   _EndSelect23
_Case163:
  MOV    rbp,qword [rsp+PS484+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2304]
  CMP    r15,[rsp]
  JNE   _Case164
; If *Debugger\MemoryDump 
  MOV    rbp,qword [rsp+PS484+8]
  CMP    qword [rbp+596],0
  JE    _EndIf1887
; FileName$ = CurrentDirectory$  
  MOV    rcx,qword [rsp+104]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+104]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Repeat  
_Repeat1888:
; FileName$ = SaveFileRequester(Language("Debugger","SaveFileTitle"), FileName$, Language("Debugger","SaveFilePattern"), 1)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S196
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+136]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S195
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SaveFileRequester
  ADD    rsp,48
  LEA    rcx,[rsp+104]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; If FileName$ = ""
  PUSH   qword [rsp+96]
  MOV    rcx,_S3
  POP    rdx
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _EndIf1890
; Break
  JMP   _Until1888
; EndIf
_EndIf1890:
; 
; If FileSize(FileName$) <> -1
  SUB    rsp,8
  PUSH   qword [rsp+104]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FileSize
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JE    _EndIf1892
; result = MessageRequester("PureBasic Debugger",Language("FileStuff","FileExists")+#NewLine+Language("FileStuff","OverWrite"), #FLAG_Warning|#PB_MessageRequester_YesNoCancel)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 51
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S198
  PUSH   rax
  MOV    rax,_S82
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rcx,_S63
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S199
  PUSH   rax
  MOV    rax,_S82
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S156
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_MessageRequester2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+112],rax
; If result = #PB_MessageRequester_Cancel
  MOV    r15,qword [rsp+112]
  CMP    r15,2
  JNE   _EndIf1894
; Break 
  JMP   _Until1888
; ElseIf result = #PB_MessageRequester_No
  JMP   _EndIf1893
_EndIf1894:
  MOV    r15,qword [rsp+112]
  CMP    r15,7
  JNE   _EndIf1895
; Continue 
  JMP   _Repeat_Test1888
; EndIf
_EndIf1893:
_EndIf1895:
; EndIf
_EndIf1892:
; 
; File = CreateFile(#PB_Any, FileName$)            
  SUB    rsp,8
  PUSH   qword [rsp+104]
  PUSH   qword -1
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_CreateFile
  ADD    rsp,40
  MOV    qword [rsp+120],rax
; If File
  CMP    qword [rsp+120],0
  JE    _EndIf1897
; MemoryViewer_Update(*Debugger, 2, File)
  SUB    rsp,8
  PUSH   qword [rsp+128]
  PUSH   qword 2
  PUSH   qword [rsp+PS484+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure482
  ADD    rsp,40
; CloseFile(File)
  SUB    rsp,8
  PUSH   qword [rsp+128]
  POP    rcx
  SUB    rsp,32
  CALL   PB_CloseFile
  ADD    rsp,40
; Else
  JMP   _EndIf1896
_EndIf1897:
; MessageRequester("PureBasic Debugger",ReplaceString(Language("Debugger","SaveError"), "%filename%", FileName$, 1), #FLAG_Error)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 16
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+144]
  MOV    rax,_S201
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S200
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ReplaceString2
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S156
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_MessageRequester2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf1896:
; 
; Break 
  JMP   _Until1888
; ForEver          
_Repeat_Test1888:
  JMP   _Repeat1888
_Until1888:
; EndIf      
_EndIf1887:
; 
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_SaveRaw]
  JMP   _EndSelect23
_Case164:
  MOV    rbp,qword [rsp+PS484+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2312]
  CMP    r15,[rsp]
  JNE   _Case165
; If *Debugger\MemoryDump 
  MOV    rbp,qword [rsp+PS484+8]
  CMP    qword [rbp+596],0
  JE    _EndIf1900
; FileName$ = MemoryViewerFile$  
  MOV    rcx,qword [v_MemoryViewerFile$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+104]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Repeat  
_Repeat1901:
; FileName$ = SaveFileRequester(Language("Debugger","SaveFileTitle"), FileName$, Language("Debugger","SaveFilePattern"), 1)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S196
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+136]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S195
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SaveFileRequester
  ADD    rsp,48
  LEA    rcx,[rsp+104]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; If FileName$ = ""
  PUSH   qword [rsp+96]
  MOV    rcx,_S3
  POP    rdx
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _EndIf1903
; Break
  JMP   _Until1901
; EndIf
_EndIf1903:
; 
; 
; If GetExtensionPart(FileName$) = "" And SelectedFilePattern() = 0
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetExtensionPart
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S3
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE     No231
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_SelectedFilePattern
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,r15
  JNE    No231
Ok231:
  MOV    rax,1
  JMP    End231
No231:
  XOR    rax,rax
End231:
  AND    rax,rax
  JE    _EndIf1905
; FileName$ + ".txt"
  MOV    rcx,qword [rsp+96]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S197
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+104]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf1905:
; 
; If FileSize(FileName$) <> -1
  SUB    rsp,8
  PUSH   qword [rsp+104]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FileSize
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JE    _EndIf1907
; result = MessageRequester("PureBasic Debugger",Language("FileStuff","FileExists")+#NewLine+Language("FileStuff","OverWrite"), #FLAG_Warning|#PB_MessageRequester_YesNoCancel)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 51
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S198
  PUSH   rax
  MOV    rax,_S82
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rcx,_S63
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S199
  PUSH   rax
  MOV    rax,_S82
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S156
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_MessageRequester2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+112],rax
; If result = #PB_MessageRequester_Cancel
  MOV    r15,qword [rsp+112]
  CMP    r15,2
  JNE   _EndIf1909
; Break 
  JMP   _Until1901
; ElseIf result = #PB_MessageRequester_No
  JMP   _EndIf1908
_EndIf1909:
  MOV    r15,qword [rsp+112]
  CMP    r15,7
  JNE   _EndIf1910
; Continue 
  JMP   _Repeat_Test1901
; EndIf
_EndIf1908:
_EndIf1910:
; EndIf
_EndIf1907:
; 
; File = CreateFile(#PB_Any, FileName$)            
  SUB    rsp,8
  PUSH   qword [rsp+104]
  PUSH   qword -1
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_CreateFile
  ADD    rsp,40
  MOV    qword [rsp+120],rax
; If File
  CMP    qword [rsp+120],0
  JE    _EndIf1912
; WriteData(File, *Debugger\MemoryDump, *Debugger\MemoryDumpSize)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS484+16]
  PUSH   qword [rbp+604]
  MOV    rbp,qword [rsp+PS484+24]
  PUSH   qword [rbp+596]
  PUSH   qword [rsp+144]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_WriteData
  ADD    rsp,40
; CloseFile(File)
  SUB    rsp,8
  PUSH   qword [rsp+128]
  POP    rcx
  SUB    rsp,32
  CALL   PB_CloseFile
  ADD    rsp,40
; MemoryViewerFile$ = FileName$ 
  MOV    rcx,qword [rsp+96]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[v_MemoryViewerFile$]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf1911
_EndIf1912:
; MessageRequester("PureBasic Debugger",ReplaceString(Language("Debugger","SaveError"), "%filename%", FileName$, 1), #FLAG_Error)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 16
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+144]
  MOV    rax,_S201
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S200
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ReplaceString2
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S156
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_MessageRequester2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf1911:
; 
; Break 
  JMP   _Until1901
; ForEver                    
_Repeat_Test1901:
  JMP   _Repeat1901
_Until1901:
; EndIf      
_EndIf1900:
; 
; EndSelect
_Case165:
_EndSelect23:
  POP    rax
; 
; ElseIf EventID = #PB_Event_SizeWindow
  JMP   _EndIf1877
_EndIf1878:
  MOV    r15,qword [rsp+PS484+8]
  CMP    r15,13118
  JNE   _EndIf1914
; Width  = WindowWidth (*Debugger\Windows[#DEBUGGER_WINDOW_Memory])
  MOV    rbp,qword [rsp+PS484+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+848]
  POP    rcx
  CALL   PB_WindowWidth
  MOV    qword [rsp+120],rax
; Height = WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_Memory])
  MOV    rbp,qword [rsp+PS484+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+848]
  POP    rcx
  CALL   PB_WindowHeight
  MOV    qword [rsp+128],rax
; 
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Display], @DisplayWidth, @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+152]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+152]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS484+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2256]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; DisplayWidth = Max(DisplayWidth, 100)
  PUSH   qword 100
  PUSH   qword [rsp+144]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+136],rax
; TextWidth    = Max(65, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Text]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS484+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2224]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 65
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+152],rax
; 
; ButtonHeight = Max(ButtonHeight, GetRequiredHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS484+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  POP    rcx
  POP    rdx
  CALL  _Procedure92
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+144],rax
; CopyWidth    = Max(100, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_CopyText]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS484+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2296]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 100
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+160],rax
; SaveWidth    = Max(100, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_SaveText]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS484+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2304]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 100
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+168],rax
; SaveRawWidth = Max(100, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_SaveRaw]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS484+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2312]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 100
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+176],rax
; 
; If Width >= TextWidth+DisplayWidth+335
  MOV    r15,qword [rsp+120]
  MOV    r14,qword [rsp+152]
  ADD    r14,qword [rsp+136]
  ADD    r14,335
  CMP    r15,r14
  JL    _EndIf1916
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Text],    10, 10, TextWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  PUSH   qword [rsp+168]
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2224]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Start],   15+TextWidth, 10, 140, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  PUSH   qword 140
  PUSH   qword 10
  MOV    r15,qword [rsp+184]
  ADD    r15,15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2240]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_To],      155+TextWidth, 10, 20, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  PUSH   qword 20
  PUSH   qword 10
  MOV    r15,qword [rsp+184]
  ADD    r15,155
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2232]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_End],     175+TextWidth, 10, 140, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  PUSH   qword 140
  PUSH   qword 10
  MOV    r15,qword [rsp+184]
  ADD    r15,175
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2248]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Display], 325+TextWidth, 10, DisplayWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  PUSH   qword [rsp+152]
  PUSH   qword 10
  MOV    r15,qword [rsp+184]
  ADD    r15,325
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2256]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; Else
  JMP   _EndIf1915
_EndIf1916:
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Text],     10, 10, (Width-50)/7-5, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  MOV    r15,qword [rsp+136]
  ADD    r15,-50
  MOV    rax,r15
  MOV    rcx,7
  CQO
  IDIV   rcx
  MOV    r15,rax
  ADD    r15,-5
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2224]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Start],    10+(Width-50)/7, 10, ((Width-50)*2)/7, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  MOV    r15,qword [rsp+136]
  ADD    r15,-50
  ADD    r15,r15
  MOV    rax,r15
  MOV    rcx,7
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    r15,qword [rsp+152]
  ADD    r15,-50
  MOV    rax,r15
  MOV    rcx,7
  CQO
  IDIV   rcx
  MOV    r15,rax
  ADD    r15,10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2240]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_To],       10+((Width-50)*3)/7, 10, 20, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  PUSH   qword 20
  PUSH   qword 10
  MOV    r15,qword [rsp+152]
  ADD    r15,-50
  IMUL   r15,3
  MOV    rax,r15
  MOV    rcx,7
  CQO
  IDIV   rcx
  MOV    r15,rax
  ADD    r15,10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2232]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_End],      30+((Width-50)*3)/7, 10, ((Width-50)*2)/7, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  MOV    r15,qword [rsp+136]
  ADD    r15,-50
  ADD    r15,r15
  MOV    rax,r15
  MOV    rcx,7
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    r15,qword [rsp+152]
  ADD    r15,-50
  IMUL   r15,3
  MOV    rax,r15
  MOV    rcx,7
  CQO
  IDIV   rcx
  MOV    r15,rax
  ADD    r15,30
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2248]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Display],  40+((Width-50)*5)/7, 10, ((Width-50)*2)/7, ButtonHeight)    
  SUB    rsp,8
  PUSH   qword [rsp+152]
  MOV    r15,qword [rsp+136]
  ADD    r15,-50
  ADD    r15,r15
  MOV    rax,r15
  MOV    rcx,7
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    r15,qword [rsp+152]
  ADD    r15,-50
  IMUL   r15,5
  MOV    rax,r15
  MOV    rcx,7
  CQO
  IDIV   rcx
  MOV    r15,rax
  ADD    r15,40
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2256]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; EndIf    
_EndIf1915:
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Editor], 10, 20+ButtonHeight, Width-20, Height-40-2*ButtonHeight)
  SUB    rsp,8
  MOV    r15,qword [rsp+136]
  MOV    r14,qword [rsp+152]
  ADD    r14,r14
  SUB    r15,r14
  ADD    r15,-40
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+136]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+168]
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2264]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Container], 10, 20+ButtonHeight, Width-20, Height-40-2*ButtonHeight)
  SUB    rsp,8
  MOV    r15,qword [rsp+136]
  MOV    r14,qword [rsp+152]
  ADD    r14,r14
  SUB    r15,r14
  ADD    r15,-40
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+136]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+168]
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2272]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_List], 0, 0, Width-20, Height-40-2*ButtonHeight)
  SUB    rsp,8
  MOV    r15,qword [rsp+136]
  MOV    r14,qword [rsp+152]
  ADD    r14,r14
  SUB    r15,r14
  ADD    r15,-40
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+136]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2280]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; Y = Height - 10 - ButtonHeight
  MOV    r15,qword [rsp+128]
  SUB    r15,qword [rsp+144]
  ADD    r15,-10
  MOV    qword [rsp+184],r15
; If Width >= CopyWidth+SaveWidth+SaveRawWidth+250
  MOV    r15,qword [rsp+120]
  MOV    r14,qword [rsp+160]
  ADD    r14,qword [rsp+168]
  ADD    r14,qword [rsp+176]
  ADD    r14,250
  CMP    r15,r14
  JL    _EndIf1919
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], 10, Y, 200, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  PUSH   qword 200
  PUSH   qword [rsp+208]
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_CopyText], Width-30-SaveRawWidth-SaveWidth-CopyWidth, Y, CopyWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  PUSH   qword [rsp+176]
  PUSH   qword [rsp+208]
  MOV    r15,qword [rsp+152]
  SUB    r15,qword [rsp+208]
  SUB    r15,qword [rsp+200]
  SUB    r15,qword [rsp+192]
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2296]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_SaveText], Width-20-SaveRawWidth-SaveWidth, Y, SaveWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  PUSH   qword [rsp+184]
  PUSH   qword [rsp+208]
  MOV    r15,qword [rsp+152]
  SUB    r15,qword [rsp+208]
  SUB    r15,qword [rsp+200]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2304]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_SaveRaw], Width-10-SaveRawWidth, Y, SaveRawWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  PUSH   qword [rsp+192]
  PUSH   qword [rsp+208]
  MOV    r15,qword [rsp+152]
  SUB    r15,qword [rsp+208]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2312]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; Else
  JMP   _EndIf1918
_EndIf1919:
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], 10, Y, (Width-50)/4, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  MOV    r15,qword [rsp+136]
  ADD    r15,-50
  MOV    rax,r15
  MOV    rcx,4
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+208]
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_CopyText], 20+(Width-50)/4, Y, (Width-50)/4, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  MOV    r15,qword [rsp+136]
  ADD    r15,-50
  MOV    rax,r15
  MOV    rcx,4
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+208]
  MOV    r15,qword [rsp+152]
  ADD    r15,-50
  MOV    rax,r15
  MOV    rcx,4
  CQO
  IDIV   rcx
  MOV    r15,rax
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2296]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_SaveText], 30+((Width-50)*2)/4, Y, (Width-50)/4, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  MOV    r15,qword [rsp+136]
  ADD    r15,-50
  MOV    rax,r15
  MOV    rcx,4
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+208]
  MOV    r15,qword [rsp+152]
  ADD    r15,-50
  ADD    r15,r15
  MOV    rax,r15
  MOV    rcx,4
  CQO
  IDIV   rcx
  MOV    r15,rax
  ADD    r15,30
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2304]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_SaveRaw], 40+((Width-50)*3)/4, Y, (Width-50)/4, ButtonHeight)    
  SUB    rsp,8
  PUSH   qword [rsp+152]
  MOV    r15,qword [rsp+136]
  ADD    r15,-50
  MOV    rax,r15
  MOV    rcx,4
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+208]
  MOV    r15,qword [rsp+152]
  ADD    r15,-50
  IMUL   r15,3
  MOV    rax,r15
  MOV    rcx,4
  CQO
  IDIV   rcx
  MOV    r15,rax
  ADD    r15,40
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS484+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2312]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; EndIf    
_EndIf1918:
; 
; ElseIf EventID = #PB_Event_CloseWindow
  JMP   _EndIf1877
_EndIf1914:
  MOV    r15,qword [rsp+PS484+8]
  CMP    r15,13116
  JNE   _EndIf1921
; 
; If DebuggerMemorizeWindows And IsWindowMinimized(*Debugger\Windows[#DEBUGGER_WINDOW_Memory]) = 0
  CMP    qword [v_DebuggerMemorizeWindows],0
  JE     No232
  MOV    rbp,qword [rsp+PS484+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+848]
  POP    rcx
  CALL  _Procedure104
  MOV    r15,rax
  AND    r15,r15
  JNE    No232
Ok232:
  MOV    rax,1
  JMP    End232
No232:
  XOR    rax,rax
End232:
  AND    rax,rax
  JE    _EndIf1923
; MemoryViewerMaximize = IsWindowMaximized(*Debugger\Windows[#DEBUGGER_WINDOW_Memory])
  MOV    rbp,qword [rsp+PS484+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+848]
  POP    rcx
  CALL  _Procedure102
  MOV    qword [v_MemoryViewerMaximize],rax
; If MemoryViewerMaximize = 0
  MOV    r15,qword [v_MemoryViewerMaximize]
  AND    r15,r15
  JNE   _EndIf1925
; MemoryViewerX = WindowX(*Debugger\Windows[#DEBUGGER_WINDOW_Memory])
  MOV    rbp,qword [rsp+PS484+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+848]
  POP    rcx
  CALL   PB_WindowX
  MOV    qword [v_MemoryViewerX],rax
; MemoryViewerY = WindowY(*Debugger\Windows[#DEBUGGER_WINDOW_Memory])
  MOV    rbp,qword [rsp+PS484+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+848]
  POP    rcx
  CALL   PB_WindowY
  MOV    qword [v_MemoryViewerY],rax
; MemoryViewerWidth  = WindowWidth (*Debugger\Windows[#DEBUGGER_WINDOW_Memory])        
  MOV    rbp,qword [rsp+PS484+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+848]
  POP    rcx
  CALL   PB_WindowWidth
  MOV    qword [v_MemoryViewerWidth],rax
; MemoryViewerHeight = WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_Memory])
  MOV    rbp,qword [rsp+PS484+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+848]
  POP    rcx
  CALL   PB_WindowHeight
  MOV    qword [v_MemoryViewerHeight],rax
; EndIf
_EndIf1925:
; EndIf
_EndIf1923:
; MemoryDisplayType = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType])
  MOV    rbp,qword [rsp+PS484+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    qword [v_MemoryDisplayType],rax
; 
; If *Debugger\MemoryDump  
  MOV    rbp,qword [rsp+PS484+0]
  CMP    qword [rbp+596],0
  JE    _EndIf1927
; FreeMemory(*Debugger\MemoryDump)
  MOV    rbp,qword [rsp+PS484+0]
  PUSH   qword [rbp+596]
  POP    rcx
  CALL   PB_FreeMemory
; *Debugger\MemoryDump = 0
  MOV    rbp,qword [rsp+PS484+0]
  MOV    qword [rbp+596],0
; EndIf
_EndIf1927:
; 
; CloseWindow(*Debugger\Windows[#DEBUGGER_WINDOW_Memory])
  MOV    rbp,qword [rsp+PS484+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+848]
  POP    rcx
  CALL   PB_CloseWindow
; *Debugger\Windows[#DEBUGGER_WINDOW_Memory] = 0
  MOV    rbp,qword [rsp+PS484+0]
  PUSH   rbp
  POP    rbp
  MOV    qword [rbp+848],0
; Debugger_CheckDestroy(*Debugger)
  PUSH   qword [rsp+PS484+0]
  POP    rcx
  CALL  _Procedure426
; 
; EndIf
_EndIf1877:
_EndIf1921:
; 
; EndProcedure
_EndProcedureZero485:
  XOR    rax,rax
_EndProcedure485:
  PUSH   rax
  MOV    rcx,qword [rsp+88]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+72]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+80]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+96]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+104]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,192
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure IsKnownConstant(Word$)
_Procedure232:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS232=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS232+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; ascii = Asc(UCase(Mid(Word$, 2, 1))) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword 2
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Asc
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+48],rax
; If ascii = '_'
  MOV    r15,qword [rsp+48]
  CMP    r15,95
  JNE   _EndIf461
; char = 27
  MOV    qword [rsp+56],27
; ElseIf ascii >= 'A' And ascii <= 'Z' 
  JMP   _EndIf460
_EndIf461:
  MOV    r15,qword [rsp+48]
  CMP    r15,65
  JL     No31
  MOV    r15,qword [rsp+48]
  CMP    r15,90
  JG     No31
Ok31:
  MOV    rax,1
  JMP    End31
No31:
  XOR    rax,rax
End31:
  AND    rax,rax
  JE    _EndIf462
; char = ascii - 'A' + 1
  MOV    r15,qword [rsp+48]
  ADD    r15,-64
  MOV    qword [rsp+56],r15
; Else
  JMP   _EndIf460
_EndIf462:
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure233
; EndIf
_EndIf460:
; 
; For i = ConstantHT(char, 0) To ConstantHT(char, 1)     
  MOV    rdx,qword [a_ConstantHT+8]
  IMUL   rdx,qword [rsp+56]
  MOV    rbp,rdx
  PUSH   rbp
  XOR    rax,rax
  POP    rbp
  ADD    rbp,rax
  SAL    rbp,2
  ADD    rbp,qword [a_ConstantHT]
  MOVSXD rax,dword [rbp]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+64],rax
  JMP   _ForSkipDebug464
_For464:
_ForSkipDebug464:
  MOV    rdx,qword [a_ConstantHT+8]
  IMUL   rdx,qword [rsp+56]
  MOV    rbp,rdx
  PUSH   rbp
  MOV    rax,1
  POP    rbp
  ADD    rbp,rax
  SAL    rbp,2
  ADD    rbp,qword [a_ConstantHT]
  MOVSXD rax,dword [rbp]
  CMP    rax,qword [rsp+64]
  JL    _Next465
; If CompareMemoryString(@Word$, @ConstantList(i), #PB_String_NoCase) = 0
  PUSH   qword 1
  MOV    r15,qword [rsp+72]
  MOV    rbp,qword [a_ConstantList]
  SAL    r15,3
  MOV    rax,qword [rbp+r15]
  MOV    rax,rax
  PUSH   rax
  MOV    rax,qword [rsp+56]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CompareMemoryString2
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf467
; KnownConstant$ = ConstantList(i)
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [a_ConstantList]
  SAL    r15,3
  MOV    rcx,qword [rbp+r15]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[v_KnownConstant$]
  POP    rdx
  CALL   SYS_AllocateString4
; ProcedureReturn 1
  MOV    rax,1
  JMP   _EndProcedure233
; EndIf
_EndIf467:
; Next i
_NextContinue465:
  INC    qword [rsp+64]
  JNO   _For464
_Next465:
; 
; EndProcedure
_EndProcedureZero233:
  XOR    rax,rax
_EndProcedure233:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure.s ResolveRelativePath(BasePath$, FileName$)
_Procedure160:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   r15
  PS160=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS160+32]
  MOV    qword [PB_StringBasePosition],rax
  MOV    rdx,[rsp+PS160+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
  MOV    rdx,[rsp+PS160+8]
  LEA    rcx,[rsp+48]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; 
; 
; If BasePath$ <> "" 
  PUSH   qword [rsp+40]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf141
; BasePath$ = UniqueFilename(BasePath$)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure154
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; If Right(BasePath$, 1) <> #Separator
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S4
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf143
; BasePath$ + #Separator
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S4
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf143:
; 
; If FindString(FileName$, #Separator, 1) = 0
  PUSH   qword 1
  MOV    rax,_S4
  PUSH   rax
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_FindString2
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf145
; FileName$ = BasePath$ + FileName$
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; CompilerIf #PB_Compiler_OS = #PB_OS_Windows    
; ElseIf Left(FileName$, 2) = "\\"  
  JMP   _EndIf144
_EndIf145:
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S14
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf146
; 
; CompilerEndIf
; 
; ElseIf Left(FileName$, 1) = #Separator
  JMP   _EndIf144
_EndIf146:
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S4
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf147
; CompilerIf #PB_Compiler_OS = #PB_OS_Windows
; FileName$ = Left(BasePath$, 2) + FileName$
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; CompilerEndIf
; 
; 
; CompilerIf #PB_Compiler_OS = #PB_OS_Windows
; ElseIf Mid(FileName$, 2, 1) = ":"
  JMP   _EndIf144
_EndIf147:
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword 2
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S13
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf148
; 
; CompilerEndIf
; 
; Else
  JMP   _EndIf144
_EndIf148:
; FileName$ = BasePath$ + FileName$
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; EndIf
_EndIf144:
; 
; EndIf
_EndIf141:
; 
; 
; 
; 
; 
; ProcedureReturn UniqueFilename(FileName$)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure154
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure161
; EndProcedure
_EndProcedureZero161:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure161:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,64
  POP    r15
  RET
; Procedure IsAfterStructure(Keyword, *LineStart, *Cursor.HighlightPTR)
_Procedure234:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS234=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; 
; *Cursor - 1 
  MOV    r15,qword [rsp+PS234+16]
  DEC    r15
  MOV    qword [rsp+PS234+16],r15
; 
; 
; While *Cursor > *LineStart And (*Cursor\b = ' ' Or *Cursor\b = 9)
_While468:
  MOV    r15,qword [rsp+PS234+16]
  CMP    r15,qword [rsp+PS234+8]
  JLE    No32
  MOV    rbp,qword [rsp+PS234+16]
  MOVSX  r15,byte [rbp]
  CMP    r15,32
  JE     Ok33
  MOV    rbp,qword [rsp+PS234+16]
  MOVSX  r15,byte [rbp]
  CMP    r15,9
  JE     Ok33
  JMP    No33
Ok33:
  MOV    rax,1
  JMP    End33
No33:
  XOR    rax,rax
End33:
  AND    rax,rax
  JE     No32
Ok32:
  MOV    rax,1
  JMP    End32
No32:
  XOR    rax,rax
End32:
  AND    rax,rax
  JE    _Wend468
; *Cursor - 1
  MOV    r15,qword [rsp+PS234+16]
  DEC    r15
  MOV    qword [rsp+PS234+16],r15
; Wend
  JMP   _While468
_Wend468:
; 
; 
; While *Cursor > *LineStart And ValidCharacters(*Cursor\a)
_While469:
  MOV    r15,qword [rsp+PS234+16]
  CMP    r15,qword [rsp+PS234+8]
  JLE    No34
  MOV    rbp,qword [rsp+PS234+16]
  MOVZX  r15,byte [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  CMP    byte [rbp+r15],0
  JE     No34
Ok34:
  MOV    rax,1
  JMP    End34
No34:
  XOR    rax,rax
End34:
  AND    rax,rax
  JE    _Wend469
; *Cursor - 1
  MOV    r15,qword [rsp+PS234+16]
  DEC    r15
  MOV    qword [rsp+PS234+16],r15
; Wend
  JMP   _While469
_Wend469:
; 
; 
; While *Cursor > *LineStart And (*Cursor\b = ' ' Or *Cursor\b = 9)
_While470:
  MOV    r15,qword [rsp+PS234+16]
  CMP    r15,qword [rsp+PS234+8]
  JLE    No35
  MOV    rbp,qword [rsp+PS234+16]
  MOVSX  r15,byte [rbp]
  CMP    r15,32
  JE     Ok36
  MOV    rbp,qword [rsp+PS234+16]
  MOVSX  r15,byte [rbp]
  CMP    r15,9
  JE     Ok36
  JMP    No36
Ok36:
  MOV    rax,1
  JMP    End36
No36:
  XOR    rax,rax
End36:
  AND    rax,rax
  JE     No35
Ok35:
  MOV    rax,1
  JMP    End35
No35:
  XOR    rax,rax
End35:
  AND    rax,rax
  JE    _Wend470
; *Cursor - 1
  MOV    r15,qword [rsp+PS234+16]
  DEC    r15
  MOV    qword [rsp+PS234+16],r15
; Wend
  JMP   _While470
_Wend470:
; 
; 
; *WordEnd = *Cursor + 1
  MOV    r15,qword [rsp+PS234+16]
  INC    r15
  MOV    qword [rsp+40],r15
; While *Cursor > *LineStart And ValidCharacters(*Cursor\a)
_While471:
  MOV    r15,qword [rsp+PS234+16]
  CMP    r15,qword [rsp+PS234+8]
  JLE    No37
  MOV    rbp,qword [rsp+PS234+16]
  MOVZX  r15,byte [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  CMP    byte [rbp+r15],0
  JE     No37
Ok37:
  MOV    rax,1
  JMP    End37
No37:
  XOR    rax,rax
End37:
  AND    rax,rax
  JE    _Wend471
; *Cursor - 1
  MOV    r15,qword [rsp+PS234+16]
  DEC    r15
  MOV    qword [rsp+PS234+16],r15
; Wend
  JMP   _While471
_Wend471:
; 
; 
; 
; If ValidCharacters(*Cursor\a) = 0
  MOV    rbp,qword [rsp+PS234+16]
  MOVZX  r15,byte [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  MOVSX  r15,byte [rbp+r15]
  AND    r15,r15
  JNE   _EndIf473
; *Cursor + 1
  MOV    r15,qword [rsp+PS234+16]
  INC    r15
  MOV    qword [rsp+PS234+16],r15
; EndIf
_EndIf473:
; 
; Length = *WordEnd - *Cursor
  MOV    r15,qword [rsp+40]
  SUB    r15,qword [rsp+PS234+16]
  MOV    qword [rsp+48],r15
; If Length = 9 And CompareMemoryString(*Cursor, *KeywordStructure, #PB_String_NoCase, 9, #PB_Ascii) = #PB_String_Equal
  MOV    r15,qword [rsp+48]
  CMP    r15,9
  JNE    No38
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword 9
  PUSH   qword 1
  PUSH   qword [p_KeywordStructure]
  PUSH   qword [rsp+PS234+56]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_CompareMemoryString4
  ADD    rsp,48
  MOV    r15,rax
  AND    r15,r15
  JNE    No38
Ok38:
  MOV    rax,1
  JMP    End38
No38:
  XOR    rax,rax
End38:
  AND    rax,rax
  JE    _EndIf475
; 
; ProcedureReturn #True
  MOV    rax,1
  JMP   _EndProcedure235
; ElseIf Keyword = #KEYWORD_Extends And Length = 9 And CompareMemoryString(*Cursor, *KeywordInterface, #PB_String_NoCase, 9, #PB_Ascii) = #PB_String_Equal
  JMP   _EndIf474
_EndIf475:
  MOV    r15,qword [rsp+PS234+0]
  CMP    r15,55
  JNE    No39
  MOV    r15,qword [rsp+48]
  CMP    r15,9
  JNE    No39
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword 9
  PUSH   qword 1
  PUSH   qword [p_KeywordInterface]
  PUSH   qword [rsp+PS234+56]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_CompareMemoryString4
  ADD    rsp,48
  MOV    r15,rax
  AND    r15,r15
  JNE    No39
Ok39:
  MOV    rax,1
  JMP    End39
No39:
  XOR    rax,rax
End39:
  AND    rax,rax
  JE    _EndIf476
; 
; ProcedureReturn #True
  MOV    rax,1
  JMP   _EndProcedure235
; ElseIf Keyword = #KEYWORD_Align And Length = 7 And CompareMemoryString(*Cursor, *KeywordExtends, #PB_String_NoCase, 7, #PB_Ascii) = #PB_String_Equal
  JMP   _EndIf474
_EndIf476:
  MOV    r15,qword [rsp+PS234+0]
  CMP    r15,1
  JNE    No40
  MOV    r15,qword [rsp+48]
  CMP    r15,7
  JNE    No40
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword 7
  PUSH   qword 1
  PUSH   qword [p_KeywordExtends]
  PUSH   qword [rsp+PS234+56]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_CompareMemoryString4
  ADD    rsp,48
  MOV    r15,rax
  AND    r15,r15
  JNE    No40
Ok40:
  MOV    rax,1
  JMP    End40
No40:
  XOR    rax,rax
End40:
  AND    rax,rax
  JE    _EndIf477
; 
; ProcedureReturn #True
  MOV    rax,1
  JMP   _EndProcedure235
; Else
  JMP   _EndIf474
_EndIf477:
; ProcedureReturn #False
  XOR    rax,rax
  JMP   _EndProcedure235
; EndIf
_EndIf474:
; EndProcedure
_EndProcedureZero235:
  XOR    rax,rax
_EndProcedure235:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure MemoryViewer_Table(*Debugger.DebuggerData, VariableSize, PeekVal.MemoryViewer_PeekVal)
_Procedure474:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PUSH   r13
  PS474=128
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; If MemoryOneColumnOnly
  CMP    qword [v_MemoryOneColumnOnly],0
  JE    _EndIf1783
; *Pointer = *Debugger\MemoryDump  
  MOV    rbp,qword [rsp+PS474+0]
  PUSH   qword [rbp+596]
  POP    rax
  MOV    qword [rsp+40],rax
; *BufferEnd = *Debugger\MemoryDump + *Debugger\MemoryDumpSize - (VariableSize - 1)
  MOV    rbp,qword [rsp+PS474+0]
  MOV    r15,qword [rbp+596]
  MOV    rbp,qword [rsp+PS474+0]
  ADD    r15,qword [rbp+604]
  MOV    r14,qword [rsp+PS474+8]
  DEC    r14
  SUB    r15,r14
  MOV    qword [rsp+48],r15
; 
; While *Pointer < *BufferEnd
_While1784:
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+48]
  JGE   _Wend1784
; 
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_List], -1, RSet(Hex(*Pointer-*Debugger\MemoryDump), 8, "0")+":   " + PeekVal(*Pointer))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S84
  PUSH   rax
  PUSH   qword 8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+112]
  MOV    rbp,qword [rsp+PS474+72]
  SUB    r15,qword [rbp+596]
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Hex
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_RSet2
  ADD    rsp,40
  MOV    rcx,_S221
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+88]
  POP    rcx
  SUB    rsp,32
  CALL   qword [rsp+PS474+96]
  MOVSX  rax,ax
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS474+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2280]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; *Pointer + VariableSize
  MOV    r15,qword [rsp+40]
  ADD    r15,qword [rsp+PS474+8]
  MOV    qword [rsp+40],r15
; Wend    
  JMP   _While1784
_Wend1784:
; 
; Else
  JMP   _EndIf1782
_EndIf1783:
; 
; columns = (16 / VariableSize)
  MOV    r15,qword [rsp+PS474+8]
  MOV    rax,16
  CQO
  IDIV   r15
  MOV    r15, rax
  MOV    qword [rsp+56],r15
; width   = (GadgetWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_List]) - 110) / columns
  MOV    rbp,qword [rsp+PS474+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2280]
  POP    rcx
  CALL   PB_GadgetWidth
  MOV    r15,rax
  ADD    r15,-110
  PUSH   qword [rsp+56]
  MOV    rax,r15
  POP    rcx
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    qword [rsp+64],r15
; If width < 40
  MOV    r15,qword [rsp+64]
  CMP    r15,40
  JGE   _EndIf1787
; width = 40
  MOV    qword [rsp+64],40
; EndIf
_EndIf1787:
; 
; For i = 0 To columns-1
  MOV    qword [rsp+72],0
  JMP   _ForSkipDebug1788
_For1788:
_ForSkipDebug1788:
  MOV    r15,qword [rsp+56]
  DEC    r15
  CMP    r15,qword [rsp+72]
  JL    _Next1789
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_List], i+1, Hex(i * VariableSize), width)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+80]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+112]
  IMUL   r15,qword [rsp+PS474+48]
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Hex
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    r15,qword [rsp+104]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS474+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2280]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Next i   
_NextContinue1789:
  INC    qword [rsp+72]
  JNO   _For1788
_Next1789:
; 
; *Pointer = *Debugger\MemoryDump  
  MOV    rbp,qword [rsp+PS474+0]
  PUSH   qword [rbp+596]
  POP    rax
  MOV    qword [rsp+40],rax
; *BufferEnd = *Debugger\MemoryDump + *Debugger\MemoryDumpSize   
  MOV    rbp,qword [rsp+PS474+0]
  MOV    r15,qword [rbp+596]
  MOV    rbp,qword [rsp+PS474+0]
  ADD    r15,qword [rbp+604]
  MOV    qword [rsp+48],r15
; 
; 
; 
; While *Pointer < *BufferEnd - 15
_While1790:
  MOV    r15,qword [rsp+40]
  MOV    r14,qword [rsp+48]
  ADD    r14,-15
  CMP    r15,r14
  JGE   _Wend1790
; Line$ = RSet(Hex(*Pointer-*Debugger\MemoryDump), 8, "0")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S84
  PUSH   rax
  PUSH   qword 8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+96]
  MOV    rbp,qword [rsp+PS474+56]
  SUB    r15,qword [rbp+596]
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Hex
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_RSet2
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; For i = 1 To columns
  MOV    qword [rsp+72],1
  JMP   _ForSkipDebug1791
_For1791:
_ForSkipDebug1791:
  MOV    rax,qword [rsp+56]
  CMP    rax,qword [rsp+72]
  JL    _Next1792
; Line$ + Chr(10) + PeekVal(*Pointer)
  MOV    rcx,qword [rsp+80]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   qword [rsp+PS474+80]
  MOVSX  rax,ax
  ADD    rsp,48
  POP    rax
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; *Pointer + VariableSize
  MOV    r15,qword [rsp+40]
  ADD    r15,qword [rsp+PS474+8]
  MOV    qword [rsp+40],r15
; Next i
_NextContinue1792:
  INC    qword [rsp+72]
  JNO   _For1791
_Next1792:
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_List], -1, Line$)     
  PUSH   qword [rsp+80]
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS474+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2280]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddGadgetItem
; Wend
  JMP   _While1790
_Wend1790:
; 
; 
; If *Pointer < *BufferEnd - (VariableSize - 1)
  MOV    r15,qword [rsp+40]
  MOV    r14,qword [rsp+48]
  MOV    r13,qword [rsp+PS474+8]
  DEC    r13
  SUB    r14,r13
  CMP    r15,r14
  JGE   _EndIf1794
; Line$ = RSet(Hex(*Pointer-*Debugger\MemoryDump), 8, "0")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S84
  PUSH   rax
  PUSH   qword 8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+96]
  MOV    rbp,qword [rsp+PS474+56]
  SUB    r15,qword [rbp+596]
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Hex
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_RSet2
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; While *Pointer < *BufferEnd - (VariableSize - 1)
_While1795:
  MOV    r15,qword [rsp+40]
  MOV    r14,qword [rsp+48]
  MOV    r13,qword [rsp+PS474+8]
  DEC    r13
  SUB    r14,r13
  CMP    r15,r14
  JGE   _Wend1795
; Line$ + Chr(10) + PeekVal(*Pointer)
  MOV    rcx,qword [rsp+80]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL   qword [rsp+PS474+80]
  MOVSX  rax,ax
  ADD    rsp,48
  POP    rax
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; *Pointer + VariableSize
  MOV    r15,qword [rsp+40]
  ADD    r15,qword [rsp+PS474+8]
  MOV    qword [rsp+40],r15
; Wend  
  JMP   _While1795
_Wend1795:
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_List], -1, Line$)      
  PUSH   qword [rsp+80]
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS474+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2280]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddGadgetItem
; EndIf
_EndIf1794:
; 
; EndIf
_EndIf1782:
; 
; EndProcedure
_EndProcedureZero475:
  XOR    rax,rax
_EndProcedure475:
  PUSH   rax
  MOV    rcx,qword [rsp+88]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,88
  POP    r13
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure Profiler_LButtonUp(*Debugger.DebuggerData)
_Procedure588:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS588=128
  MOV    rax,7
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; If Profiler_CaptureMode = 1 Or Profiler_CaptureMode = 2
  MOV    r15,qword [v_Profiler_CaptureMode]
  CMP    r15,1
  JE     Ok315
  MOV    r15,qword [v_Profiler_CaptureMode]
  CMP    r15,2
  JE     Ok315
  JMP    No315
Ok315:
  MOV    rax,1
  JMP    End315
No315:
  XOR    rax,rax
End315:
  AND    rax,rax
  JE    _EndIf2994
; Profiler_ReleaseMouse()
  CALL   ReleaseCapture
; 
; If Profiler_CaptureMode = 2            
  MOV    r15,qword [v_Profiler_CaptureMode]
  CMP    r15,2
  JNE   _EndIf2996
; Profiler_CalculateViewport(*Debugger, @Area.ProfilerDrawing)
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS588+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure566
; Profiler_ClipToViewport(@Profiler_DownX, @Profiler_DownY, @Area)
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[v_Profiler_DownY]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[v_Profiler_DownX]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure568
; Profiler_ClipToViewport(@Profiler_OldX,  @Profiler_OldY,  @Area)
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[v_Profiler_OldY]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[v_Profiler_OldX]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure568
; 
; If Profiler_DownX > Profiler_OldX
  MOV    r15,qword [v_Profiler_DownX]
  CMP    r15,qword [v_Profiler_OldX]
  JLE   _EndIf2998
; Swap Profiler_DownX, Profiler_OldX
  MOV    rax,qword [v_Profiler_OldX]
  MOV    rdx,qword [v_Profiler_DownX]
  MOV    qword [v_Profiler_OldX],rdx
  MOV    qword [v_Profiler_DownX],rax
; EndIf
_EndIf2998:
; 
; If Profiler_DownY > Profiler_OldY
  MOV    r15,qword [v_Profiler_DownY]
  CMP    r15,qword [v_Profiler_OldY]
  JLE   _EndIf3000
; Swap Profiler_DownY, Profiler_OldY
  MOV    rax,qword [v_Profiler_OldY]
  MOV    rdx,qword [v_Profiler_DownY]
  MOV    qword [v_Profiler_OldY],rdx
  MOV    qword [v_Profiler_DownY],rax
; EndIf       
_EndIf3000:
; 
; 
; 
; countStart = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX]) + (Profiler_DownX - Area\x) / *Debugger\ProfilerRatioX
  MOV    rbp,qword [rsp+PS588+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    r15,rax
  MOV    r14,qword [v_Profiler_DownX]
  LEA    rbp,[rsp+40]
  MOVSXD rax,dword [rbp]
  SUB    r14,rax
  MOV    rbp,qword [rsp+PS588+0]
  MOV    [rsp-8],r14
  FILD   qword [rsp-8]
  FDIV   qword [rbp+724]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FADDP  st1,st0
  FADD   qword [D1]
  FISTP  qword [rsp+72]
; lineStart  = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY]) + (Profiler_DownY - Area\y) / *Debugger\ProfilerRatioY
  MOV    rbp,qword [rsp+PS588+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    r15,rax
  MOV    r14,qword [v_Profiler_DownY]
  LEA    rbp,[rsp+40]
  MOVSXD rax,dword [rbp+4]
  SUB    r14,rax
  MOV    rbp,qword [rsp+PS588+0]
  MOV    [rsp-8],r14
  FILD   qword [rsp-8]
  FDIV   qword [rbp+732]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FADDP  st1,st0
  FADD   qword [D1]
  FISTP  qword [rsp+80]
; 
; 
; 
; If Profiler_OldX > Profiler_DownX+1 And Profiler_OldY > Profiler_DownY+1
  MOV    r15,qword [v_Profiler_OldX]
  MOV    r14,qword [v_Profiler_DownX]
  INC    r14
  CMP    r15,r14
  JLE    No316
  MOV    r15,qword [v_Profiler_OldY]
  MOV    r14,qword [v_Profiler_DownY]
  INC    r14
  CMP    r15,r14
  JLE    No316
Ok316:
  MOV    rax,1
  JMP    End316
No316:
  XOR    rax,rax
End316:
  AND    rax,rax
  JE    _EndIf3002
; *Debugger\ProfilerRatioX / ((Profiler_OldX-Profiler_DownX) / Area\w)
  MOV    rbp,qword [rsp+PS588+0]
  FLD    qword [rbp+724]
  FILD   qword [v_Profiler_OldX]
  FILD   qword [v_Profiler_DownX]
  FSUBP  st1,st0
  FADD   qword [D1]
  LEA    rbp,[rsp+40]
  FIDIV  dword [rbp+8]
  FDIVP  st1,st0
  MOV    rbp,qword [rsp+PS588+0]
  FSTP   qword [rbp+724]
; *Debugger\ProfilerRatioY / ((Profiler_OldY-Profiler_DownY) / Area\h)            
  MOV    rbp,qword [rsp+PS588+0]
  FLD    qword [rbp+732]
  FILD   qword [v_Profiler_OldY]
  FILD   qword [v_Profiler_DownY]
  FSUBP  st1,st0
  FADD   qword [D1]
  LEA    rbp,[rsp+40]
  FIDIV  dword [rbp+12]
  FDIVP  st1,st0
  MOV    rbp,qword [rsp+PS588+0]
  FSTP   qword [rbp+732]
; If *Debugger\ProfilerRatioX > 30.0: *Debugger\ProfilerRatioX = 30.0: EndIf
  MOV    rbp,qword [rsp+PS588+0]
  FLD    qword [rbp+724]
  FCOMP  qword [D7]
  FNSTSW ax
  TEST   ah,41h
  JNE   _EndIf3004
  MOV    rbp,qword [rsp+PS588+0]
  FLD    qword [D7]
  FSTP   qword [rbp+724]
_EndIf3004:
; If *Debugger\ProfilerRatioY > 30.0: *Debugger\ProfilerRatioY = 30.0: EndIf             
  MOV    rbp,qword [rsp+PS588+0]
  FLD    qword [rbp+732]
  FCOMP  qword [D7]
  FNSTSW ax
  TEST   ah,41h
  JNE   _EndIf3006
  MOV    rbp,qword [rsp+PS588+0]
  FLD    qword [D7]
  FSTP   qword [rbp+732]
_EndIf3006:
; EndIf
_EndIf3002:
; 
; Profiler_UpdatePageLength(*Debugger)
  PUSH   qword [rsp+PS588+0]
  POP    rcx
  CALL  _Procedure578
; 
; 
; 
; maxStart = GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], #PB_ScrollBar_Maximum) - GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], #PB_ScrollBar_PageLength)
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS588+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  MOV    r15,rax
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS588+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  SUB    r15,rax
  MOV    qword [rsp+88],r15
; If maxStart > 0
  MOV    r15,qword [rsp+88]
  AND    r15,r15
  JLE   _EndIf3008
; If countStart < 0
  MOV    r15,qword [rsp+72]
  AND    r15,r15
  JGE   _EndIf3010
; countStart = 0
  MOV    qword [rsp+72],0
; ElseIf countStart > maxStart
  JMP   _EndIf3009
_EndIf3010:
  MOV    r15,qword [rsp+72]
  CMP    r15,qword [rsp+88]
  JLE   _EndIf3011
; countStart = maxStart
  PUSH   qword [rsp+88]
  POP    rax
  MOV    qword [rsp+72],rax
; EndIf
_EndIf3009:
_EndIf3011:
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], countStart)
  PUSH   qword [rsp+72]
  MOV    rbp,qword [rsp+PS588+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; EndIf
_EndIf3008:
; 
; maxStart = GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], #PB_ScrollBar_Maximum) - GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], #PB_ScrollBar_PageLength)
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS588+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  MOV    r15,rax
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS588+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  SUB    r15,rax
  MOV    qword [rsp+88],r15
; If maxStart > 0
  MOV    r15,qword [rsp+88]
  AND    r15,r15
  JLE   _EndIf3013
; If lineStart < 0
  MOV    r15,qword [rsp+80]
  AND    r15,r15
  JGE   _EndIf3015
; lineStart = 0
  MOV    qword [rsp+80],0
; ElseIf lineStart > maxStart
  JMP   _EndIf3014
_EndIf3015:
  MOV    r15,qword [rsp+80]
  CMP    r15,qword [rsp+88]
  JLE   _EndIf3016
; lineStart = maxStart
  PUSH   qword [rsp+88]
  POP    rax
  MOV    qword [rsp+80],rax
; EndIf          
_EndIf3014:
_EndIf3016:
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], lineStart)
  PUSH   qword [rsp+80]
  MOV    rbp,qword [rsp+PS588+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; EndIf  
_EndIf3013:
; 
; Profiler_DrawAll(*Debugger)                         
  PUSH   qword [rsp+PS588+0]
  POP    rcx
  CALL  _Procedure576
; EndIf          
_EndIf2996:
; 
; Profiler_CaptureMode = 0 
  MOV    qword [v_Profiler_CaptureMode],0
; EndIf 
_EndIf2994:
; EndProcedure
_EndProcedureZero589:
  XOR    rax,rax
_EndProcedure589:
  ADD    rsp,96
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure WinPipe_Close(*This.WinPipe_Communication) 
_Procedure326:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS326=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; LockMutex(WinPipe_Mutex)
  PUSH   qword [v_WinPipe_Mutex]
  POP    rcx
  CALL   qword [PB_LockMutex]
; If *This\InPipeHandle
  MOV    rbp,qword [rsp+PS326+0]
  CMP    qword [rbp+24],0
  JE    _EndIf1131
; CloseHandle_(*This\InPipeHandle)
  MOV    rbp,qword [rsp+PS326+0]
  PUSH   qword [rbp+24]
  POP    rcx
  CALL   CloseHandle
; EndIf
_EndIf1131:
; 
; If *This\OutPipeHandle
  MOV    rbp,qword [rsp+PS326+0]
  CMP    qword [rbp+32],0
  JE    _EndIf1133
; CloseHandle_(*This\OutPipeHandle)
  MOV    rbp,qword [rsp+PS326+0]
  PUSH   qword [rbp+32]
  POP    rcx
  CALL   CloseHandle
; EndIf
_EndIf1133:
; 
; If *This\IsNamedPipe = 0
  MOV    rbp,qword [rsp+PS326+0]
  MOVSXD r15,dword [rbp+40]
  AND    r15,r15
  JNE   _EndIf1135
; 
; 
; 
; 
; 
; If *This\DebuggerInPipeHandle
  MOV    rbp,qword [rsp+PS326+0]
  CMP    qword [rbp+44],0
  JE    _EndIf1137
; CloseHandle_(*This\DebuggerInPipeHandle)
  MOV    rbp,qword [rsp+PS326+0]
  PUSH   qword [rbp+44]
  POP    rcx
  CALL   CloseHandle
; EndIf
_EndIf1137:
; If *This\DebuggerOutPipeHandle
  MOV    rbp,qword [rsp+PS326+0]
  CMP    qword [rbp+52],0
  JE    _EndIf1139
; CloseHandle_(*This\DebuggerOutPipeHandle)
  MOV    rbp,qword [rsp+PS326+0]
  PUSH   qword [rbp+52]
  POP    rcx
  CALL   CloseHandle
; EndIf
_EndIf1139:
; EndIf
_EndIf1135:
; 
; 
; For i = 0 To *This\StackCount-1
  MOV    qword [rsp+40],0
  JMP   _ForSkipDebug1140
_For1140:
_ForSkipDebug1140:
  MOV    rbp,qword [rsp+PS326+0]
  MOVSXD r15,dword [rbp+88]
  DEC    r15
  CMP    r15,qword [rsp+40]
  JL    _Next1141
; If *This\Stack[i]\CommandData
  MOV    rbp,qword [rsp+PS326+0]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  CMP    qword [rbp+112],0
  JE    _EndIf1143
; FreeMemory(*This\Stack[i]\CommandData)
  MOV    rbp,qword [rsp+PS326+0]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+112]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf1143:
; Next i
_NextContinue1141:
  INC    qword [rsp+40]
  JNO   _For1140
_Next1141:
; 
; 
; FreeMutex(*This\StackMutex)
  MOV    rbp,qword [rsp+PS326+0]
  PUSH   qword [rbp+80]
  POP    rcx
  CALL   PB_FreeMutex
; 
; ChangeCurrentElement(WinPipe_Data(), *This)
  PUSH   qword [rsp+PS326+0]
  PUSH   qword [t_WinPipe_Data]
  POP    rcx
  POP    rdx
  CALL   PB_ChangeCurrentElement
; DeleteElement(WinPipe_Data())  
  PUSH   qword [t_WinPipe_Data]
  POP    rcx
  CALL   PB_DeleteElement
; UnlockMutex(WinPipe_Mutex)
  PUSH   qword [v_WinPipe_Mutex]
  POP    rcx
  CALL   qword [PB_UnlockMutex]
; EndProcedure
_EndProcedureZero327:
  XOR    rax,rax
_EndProcedure327:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure AsmWindowEvents(*Debugger.DebuggerData, EventID)
_Procedure450:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS450=160
  MOV    rax,11
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; If EventID = #PB_Event_Gadget
  MOV    r15,qword [rsp+PS450+8]
  CMP    r15,13100
  JNE   _EndIf1700
; EventGadgetID = EventGadget()
  CALL   PB_EventGadget
  MOV    qword [rsp+40],rax
; If EventGadgetID = *Debugger\Gadgets[#DEBUGGER_GADGET_Asm_UpdateStack]
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [rsp+PS450+0]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+1016]
  JNE   _EndIf1702
; 
; Command.CommandInfo\Command = #COMMAND_GetStack
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],7
; Command\Value1 = StackIsHex
  PUSH   qword [v_StackIsHex]
  POP    rax
  MOV    dword [rbp+8],eax
; Command\DataSize = 0
  MOV    dword [rbp+4],0
; SendDebuggerCommand(*Debugger, @Command)
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS450+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Else
  JMP   _EndIf1701
_EndIf1702:
; For i = 0 To *Debugger\RegisterCount-1
  MOV    qword [rsp+72],0
  JMP   _ForSkipDebug1704
_For1704:
_ForSkipDebug1704:
  MOV    rbp,qword [rsp+PS450+0]
  MOVSXD r15,dword [rbp+160]
  DEC    r15
  CMP    r15,qword [rsp+72]
  JL    _Next1705
; If EventGadgetID = *Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Set0+i]
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [rsp+PS450+0]
  PUSH   rbp
  MOV    r14,qword [rsp+80]
  ADD    r14,90
  MOV    rax,r14
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  CMP    r15,qword [rbp+912]
  JNE   _EndIf1707
; 
; Command.CommandInfo\Command = #COMMAND_SetRegister
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],6
; Command\Value1 = *Debugger\RegisterIndex[i] & ~#RegisterHasString
  MOV    rbp,qword [rsp+PS450+0]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  MOVSXD r15,dword [rbp+164]
  AND    r15,-32769
  MOV    rax,r15
  PUSH   rax
  LEA    rbp,[rsp+56]
  POP    rax
  MOV    dword [rbp+8],eax
; 
; 
; 
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS450+0]
  CMP    dword [rbp+32],0
  JE    _EndIf1709
; Value_q.q = Val(GetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Value0+i]))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS450+40]
  PUSH   rbp
  MOV    r15,qword [rsp+120]
  ADD    r15,53
  MOV    rax,r15
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+912]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetText
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+80],rax
; Command\DataSize = 8
  LEA    rbp,[rsp+48]
  MOV    dword [rbp+4],8
; SendDebuggerCommandWithData(*Debugger, @Command, @Value_q)          
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS450+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure8
; Else
  JMP   _EndIf1708
_EndIf1709:
; Value_l.l = Val(GetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Value0+i]))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS450+40]
  PUSH   rbp
  MOV    r15,qword [rsp+120]
  ADD    r15,53
  MOV    rax,r15
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+912]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetText
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    dword [rsp+88],eax
; Command\DataSize = 4
  LEA    rbp,[rsp+48]
  MOV    dword [rbp+4],4
; SendDebuggerCommandWithData(*Debugger, @Command, @Value_l)   
  LEA    rax,[rsp+88]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS450+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure8
; EndIf
_EndIf1708:
; 
; 
; 
; Command.CommandInfo\Command = #COMMAND_GetRegister
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],5
; Command\DataSize = 0
  MOV    dword [rbp+4],0
; SendDebuggerCommand(*Debugger, @Command) 
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS450+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Break
  JMP   _Next1705
; EndIf
_EndIf1707:
; Next i
_NextContinue1705:
  INC    qword [rsp+72]
  JNO   _For1704
_Next1705:
; EndIf
_EndIf1701:
; 
; ElseIf EventID = #PB_Event_SizeWindow
  JMP   _EndIf1699
_EndIf1700:
  MOV    r15,qword [rsp+PS450+8]
  CMP    r15,13118
  JNE   _EndIf1711
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Panel], 10, 10, WindowWidth(*Debugger\Windows[#DEBUGGER_WINDOW_Asm])-20, WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_Asm])-20)
  SUB    rsp,8
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS450+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+840]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowHeight
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS450+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+840]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowWidth
  ADD    rsp,32
  MOV    r15,rax
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS450+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1000]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; CompilerIf #CompileLinux
; 
; Width  = GetPanelWidth (*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Panel])
  MOV    rbp,qword [rsp+PS450+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1000]
  POP    rcx
  CALL  _Procedure114
  MOV    qword [rsp+96],rax
; Height = GetPanelHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Panel])
  MOV    rbp,qword [rsp+PS450+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1000]
  POP    rcx
  CALL  _Procedure116
  MOV    qword [rsp+104],rax
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_ScrollArea], 0, 0, Width, Height)
  SUB    rsp,8
  PUSH   qword [rsp+112]
  PUSH   qword [rsp+112]
  PUSH   qword 0
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS450+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1024]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Message], 10, 10, Width-20, Height-20)
  SUB    rsp,8
  MOV    r15,qword [rsp+112]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+112]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS450+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1032]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; If AutoStackUpdate
  CMP    qword [v_AutoStackUpdate],0
  JE    _EndIf1713
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Stack], 10, 10, Width-20, Height-20)
  SUB    rsp,8
  MOV    r15,qword [rsp+112]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+112]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS450+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1008]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; Else
  JMP   _EndIf1712
_EndIf1713:
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_UpdateStack], @ButtonWidth, @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+128]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+128]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS450+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1016]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; ButtonWidth = Max(120, ButtonWidth)
  PUSH   qword [rsp+112]
  PUSH   qword 120
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+112],rax
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Stack], 10, 10, Width-20, Height-30-ButtonHeight)
  SUB    rsp,8
  MOV    r15,qword [rsp+112]
  SUB    r15,qword [rsp+128]
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+112]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS450+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1008]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_UpdateStack], Width-10-ButtonWidth, Height-10-ButtonHeight, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+128]
  PUSH   qword [rsp+128]
  MOV    r15,qword [rsp+128]
  SUB    r15,qword [rsp+144]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+128]
  SUB    r15,qword [rsp+144]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS450+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1016]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; EndIf
_EndIf1712:
; 
; ElseIf EventID = #PB_Event_CloseWindow
  JMP   _EndIf1699
_EndIf1711:
  MOV    r15,qword [rsp+PS450+8]
  CMP    r15,13116
  JNE   _EndIf1715
; If DebuggerMemorizeWindows And IsWindowMinimized(*Debugger\Windows[#DEBUGGER_WINDOW_Asm]) = 0
  CMP    qword [v_DebuggerMemorizeWindows],0
  JE     No214
  MOV    rbp,qword [rsp+PS450+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+840]
  POP    rcx
  CALL  _Procedure104
  MOV    r15,rax
  AND    r15,r15
  JNE    No214
Ok214:
  MOV    rax,1
  JMP    End214
No214:
  XOR    rax,rax
End214:
  AND    rax,rax
  JE    _EndIf1717
; AsmWindowMaximize = IsWindowMaximized(*Debugger\Windows[#DEBUGGER_WINDOW_Asm])
  MOV    rbp,qword [rsp+PS450+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+840]
  POP    rcx
  CALL  _Procedure102
  MOV    qword [v_AsmWindowMaximize],rax
; If AsmWindowMaximize = 0
  MOV    r15,qword [v_AsmWindowMaximize]
  AND    r15,r15
  JNE   _EndIf1719
; AsmWindowX = WindowX(*Debugger\Windows[#DEBUGGER_WINDOW_Asm])
  MOV    rbp,qword [rsp+PS450+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+840]
  POP    rcx
  CALL   PB_WindowX
  MOV    qword [v_AsmWindowX],rax
; AsmWindowY = WindowY(*Debugger\Windows[#DEBUGGER_WINDOW_Asm])
  MOV    rbp,qword [rsp+PS450+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+840]
  POP    rcx
  CALL   PB_WindowY
  MOV    qword [v_AsmWindowY],rax
; AsmWindowWidth  = WindowWidth(*Debugger\Windows[#DEBUGGER_WINDOW_Asm])
  MOV    rbp,qword [rsp+PS450+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+840]
  POP    rcx
  CALL   PB_WindowWidth
  MOV    qword [v_AsmWindowWidth],rax
; AsmWindowHeight = WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_Asm])
  MOV    rbp,qword [rsp+PS450+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+840]
  POP    rcx
  CALL   PB_WindowHeight
  MOV    qword [v_AsmWindowHeight],rax
; EndIf
_EndIf1719:
; EndIf
_EndIf1717:
; 
; CloseWindow(*Debugger\Windows[#DEBUGGER_WINDOW_Asm])
  MOV    rbp,qword [rsp+PS450+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+840]
  POP    rcx
  CALL   PB_CloseWindow
; *Debugger\Windows[#DEBUGGER_WINDOW_Asm] = 0
  MOV    rbp,qword [rsp+PS450+0]
  PUSH   rbp
  POP    rbp
  MOV    qword [rbp+840],0
; Debugger_CheckDestroy(*Debugger)
  PUSH   qword [rsp+PS450+0]
  POP    rcx
  CALL  _Procedure426
; 
; EndIf
_EndIf1699:
_EndIf1715:
; 
; EndProcedure
_EndProcedureZero451:
  XOR    rax,rax
_EndProcedure451:
  ADD    rsp,128
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure IsLineStart(*LineStart, *Cursor.BYTE)
_Procedure240:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS240=64
  SUB    rsp,40
; *Cursor - 1 
  MOV    r15,qword [rsp+PS240+8]
  DEC    r15
  MOV    qword [rsp+PS240+8],r15
; 
; While *Cursor > *LineStart
_While500:
  MOV    r15,qword [rsp+PS240+8]
  CMP    r15,qword [rsp+PS240+0]
  JLE   _Wend500
; If *Cursor\b <> ' ' And *Cursor\b <> 9
  MOV    rbp,qword [rsp+PS240+8]
  MOVSX  r15,byte [rbp]
  CMP    r15,32
  JE     No47
  MOV    rbp,qword [rsp+PS240+8]
  MOVSX  r15,byte [rbp]
  CMP    r15,9
  JE     No47
Ok47:
  MOV    rax,1
  JMP    End47
No47:
  XOR    rax,rax
End47:
  AND    rax,rax
  JE    _EndIf502
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure241
; EndIf
_EndIf502:
; *Cursor - 1
  MOV    r15,qword [rsp+PS240+8]
  DEC    r15
  MOV    qword [rsp+PS240+8],r15
; Wend
  JMP   _While500
_Wend500:
; 
; ProcedureReturn 1
  MOV    rax,1
  JMP   _EndProcedure241
; EndProcedure
_EndProcedureZero241:
  XOR    rax,rax
_EndProcedure241:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure BreakPoint_AddItem(*Debugger.DebuggerData)
_Procedure514:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS514=128
  MOV    rax,8
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; Condition$ = GetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Condition])
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS514+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2784]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetText
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; If Condition$ <> ""
  PUSH   qword [rsp+40]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf2510
; *Point.DataBreakPoint = AllocateMemory(SizeOf(DataBreakPoint))
  PUSH   qword 40
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+48],rax
; *Buffer               = AllocateMemory(StringByteLength(Condition$)+SizeOf(Character) + SizeOf(Long))
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_StringByteLength
  MOV    r15,rax
  ADD    r15,6
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+56],rax
; If *Point And *Buffer
  CMP    qword [rsp+48],0
  JE     No281
  CMP    qword [rsp+56],0
  JE     No281
Ok281:
  MOV    rax,1
  JMP    End281
No281:
  XOR    rax,rax
End281:
  AND    rax,rax
  JE    _EndIf2512
; 
; 
; ProcedureIndex = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Procedure])-2
  MOV    rbp,qword [rsp+PS514+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2776]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    r15,rax
  ADD    r15,-2
  MOV    qword [rsp+64],r15
; 
; If ProcedureIndex = -2
  MOV    r15,qword [rsp+64]
  CMP    r15,-2
  JNE   _EndIf2514
; *Point\ProcedureName$ = ""
  MOV    rbp,qword [rsp+48]
  MOV    rdx,_S3
  LEA    rcx,[rbp+24]
  CALL   SYS_FastAllocateStringFree4
; Else
  JMP   _EndIf2513
_EndIf2514:
; *Point\ProcedureName$ = GetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Procedure], ProcedureIndex+2)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+88]
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS514+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2776]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_GetGadgetItemText
  ADD    rsp,40
  MOV    rbp,qword [rsp+56]
  LEA    rcx,[rbp+24]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf2513:
; 
; *Point\Condition$     = Condition$       
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+56]
  LEA    rcx,[rbp+16]
  POP    rdx
  CALL   SYS_AllocateString4
; *Point\ID             = NextDataBreakPointID    
  PUSH   qword [v_NextDataBreakPointID]
  MOV    rbp,qword [rsp+56]
  POP    rax
  MOV    dword [rbp+36],eax
; NextDataBreakPointID + 1
  MOV    r15,qword [v_NextDataBreakPointID]
  INC    r15
  MOV    qword [v_NextDataBreakPointID],r15
; 
; 
; *Point\Previous = 0
  MOV    rbp,qword [rsp+48]
  MOV    qword [rbp+8],0
; *Point\Next     = *Debugger\FirstDataBreakPoint      
  MOV    rbp,qword [rsp+PS514+0]
  PUSH   qword [rbp+140]
  MOV    rbp,qword [rsp+56]
  POP    rax
  MOV    qword [rbp],rax
; If *Debugger\FirstDataBreakPoint
  MOV    rbp,qword [rsp+PS514+0]
  CMP    qword [rbp+140],0
  JE    _EndIf2517
; *Debugger\FirstDataBreakPoint\Previous = *Point
  PUSH   qword [rsp+48]
  MOV    rbp,qword [rsp+PS514+8]
  MOV    rbp,qword [rbp+140]
  POP    rax
  MOV    qword [rbp+8],rax
; EndIf      
_EndIf2517:
; *Debugger\FirstDataBreakPoint = *Point
  PUSH   qword [rsp+48]
  MOV    rbp,qword [rsp+PS514+8]
  POP    rax
  MOV    qword [rbp+140],rax
; 
; Command.CommandInfo\Command = #COMMAND_BreakPoint
  LEA    rbp,[rsp+72]
  MOV    dword [rbp],3
; Command\Value1   = 4 
  MOV    dword [rbp+8],4
; Command\Value2   = ProcedureIndex
  PUSH   qword [rsp+64]
  POP    rax
  MOV    dword [rbp+12],eax
; Command\DataSize = StringByteLength(Condition$)+SizeOf(Character)+SizeOf(Long)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_StringByteLength
  MOV    r15,rax
  ADD    r15,6
  MOV    rax,r15
  PUSH   rax
  POP    rax
  MOV    dword [rbp+4],eax
; PokeL(*Buffer, *Point\ID)
  MOV    rbp,qword [rsp+48]
  MOVSXD rax,dword [rbp+36]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL   PB_PokeL
; PokeS(*Buffer+SizeOf(Long), Condition$)
  PUSH   qword [rsp+40]
  MOV    r15,qword [rsp+64]
  ADD    r15,4
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_PokeS
; SendDebuggerCommandWithData(*Debugger, @Command, *Buffer)
  PUSH   qword [rsp+56]
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS514+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure8
; FreeMemory(*Buffer)
  PUSH   qword [rsp+56]
  POP    rcx
  CALL   PB_FreeMemory
; 
; 
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Condition], "")       
  MOV    rax,_S3
  PUSH   rax
  MOV    rbp,qword [rsp+PS514+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2784]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetText
; EndIf     
_EndIf2512:
; EndIf
_EndIf2510:
; 
; EndProcedure
_EndProcedureZero515:
  XOR    rax,rax
_EndProcedure515:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,104
  POP    r15
  POP    rbp
  RET
; Procedure Profiler_LButtonDown(*Debugger.DebuggerData, x, y, *GrabWindow)
_Procedure586:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PUSH   r15
  PS586=64
  SUB    rsp,40
; 
; If Profiler_CaptureMode = 3
  MOV    r15,qword [v_Profiler_CaptureMode]
  CMP    r15,3
  JNE   _EndIf2988
; Profiler_DrawCross(*Debugger, Profiler_OldX, Profiler_OldY)
  PUSH   qword [v_Profiler_OldY]
  PUSH   qword [v_Profiler_OldX]
  PUSH   qword [rsp+PS586+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure582
; Else
  JMP   _EndIf2987
_EndIf2988:
; Profiler_GrabMouse(*GrabWindow)
  PUSH   qword [rsp+PS586+24]
  POP    rcx
  CALL   SetCapture
; EndIf
_EndIf2987:
; 
; Profiler_DownX = x
  PUSH   qword [rsp+PS586+8]
  POP    rax
  MOV    qword [v_Profiler_DownX],rax
; Profiler_DownY = y
  PUSH   qword [rsp+PS586+16]
  POP    rax
  MOV    qword [v_Profiler_DownY],rax
; Profiler_OldX  = Profiler_DownX
  PUSH   qword [v_Profiler_DownX]
  POP    rax
  MOV    qword [v_Profiler_OldX],rax
; Profiler_OldY  = Profiler_DownY
  PUSH   qword [v_Profiler_DownY]
  POP    rax
  MOV    qword [v_Profiler_OldY],rax
; 
; If GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Select]) = 0
  MOV    rbp,qword [rsp+PS586+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3008]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf2991
; Profiler_CaptureMode = 1          
  MOV    qword [v_Profiler_CaptureMode],1
; Else
  JMP   _EndIf2990
_EndIf2991:
; Profiler_CaptureMode = 2
  MOV    qword [v_Profiler_CaptureMode],2
; Profiler_DrawSelect(*Debugger, Profiler_DownX, Profiler_DownY, Profiler_OldX, Profiler_OldY)            
  SUB    rsp,8
  PUSH   qword [v_Profiler_OldY]
  PUSH   qword [v_Profiler_OldX]
  PUSH   qword [v_Profiler_DownY]
  PUSH   qword [v_Profiler_DownX]
  PUSH   qword [rsp+PS586+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure580
  ADD    rsp,48
; EndIf          
_EndIf2990:
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Image], ImageID(*Debugger\ProfilerImage))
  MOV    rbp,qword [rsp+PS586+0]
  PUSH   qword [rbp+712]
  POP    rcx
  CALL   PB_ImageID
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS586+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2952]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; EndProcedure
_EndProcedureZero587:
  XOR    rax,rax
_EndProcedure587:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure.s Network_GetValue(Key$, List Values$())
_Procedure376:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PS376=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS376+32]
  MOV    qword [PB_StringBasePosition],rax
  MOV    rdx,[rsp+PS376+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
  MOV    rax,qword [rsp+PS376+8]
  MOV    qword [rsp+48],rax
; Key$ = UCase(Key$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; ForEach Values$()
  MOV    rcx,qword [rsp+48]
  CALL   PB_ResetList
_ForEach1184:
  MOV    rcx,qword [rsp+48]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next1184
; If StringField(Values$(), 1, Chr(10)) = Key$
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S88
  PUSH   rax
  PUSH   qword 1
  MOV    rax,[rsp+88]
  MOV    rbp,qword [rax+16]
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,qword [rsp+48]
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf1186
; ProcedureReturn StringField(Values$(), 2, Chr(10))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S88
  PUSH   rax
  PUSH   qword 2
  MOV    rax,[rsp+88]
  MOV    rbp,qword [rax+16]
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure377
; EndIf
_EndIf1186:
; Next Values$()
  JMP   _ForEach1184
_Next1184:
; 
; ProcedureReturn ""
  MOV    rcx,_S3
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure377
; EndProcedure
_EndProcedureZero377:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure377:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,64
  POP    rbp
  RET
; Procedure MemoryViewer_Unicode(*Debugger.DebuggerData)
_Procedure480:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS480=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; 
; 
; Size = *Debugger\MemoryDumpSize / 2
  MOV    rbp,qword [rsp+PS480+0]
  MOV    r15,qword [rbp+604]
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    qword [rsp+40],r15
; *Pointer.WORD = *Debugger\MemoryDump
  MOV    rbp,qword [rsp+PS480+0]
  PUSH   qword [rbp+596]
  POP    rax
  MOV    qword [rsp+48],rax
; *BufferEnd    = *Debugger\MemoryDump + *Debugger\MemoryDumpSize
  MOV    rbp,qword [rsp+PS480+0]
  MOV    r15,qword [rbp+596]
  MOV    rbp,qword [rsp+PS480+0]
  ADD    r15,qword [rbp+604]
  MOV    qword [rsp+56],r15
; 
; If *Debugger\MemoryDumpSize % 2 = 1 
  MOV    rbp,qword [rsp+PS480+0]
  MOV    r15,qword [rbp+604]
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rdx
  CMP    r15,1
  JNE   _EndIf1833
; *BufferEnd - 1
  MOV    r15,qword [rsp+56]
  DEC    r15
  MOV    qword [rsp+56],r15
; EndIf
_EndIf1833:
; 
; While *Pointer < *BufferEnd
_While1834:
  MOV    r15,qword [rsp+48]
  CMP    r15,qword [rsp+56]
  JGE   _Wend1834
; If *Pointer\w >= 0 And *Pointer\w < 32 
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,word [rbp]
  AND    r15,r15
  JL     No224
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,word [rbp]
  CMP    r15,32
  JGE    No224
Ok224:
  MOV    rax,1
  JMP    End224
No224:
  XOR    rax,rax
End224:
  AND    rax,rax
  JE    _EndIf1836
; Size + Len(MemoryViewer_Chars(*Pointer\w)) - 1 
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [rsp+48]
  MOVSX  r14,word [rbp]
  MOV    rbp,qword [a_MemoryViewer_Chars]
  SAL    r14,3
  PUSH   qword [rbp+r14]
  POP    rcx
  CALL   PB_Len
  ADD    r15,rax
  DEC    r15
  MOV    qword [rsp+40],r15
; If *Pointer\w = 0 Or *Pointer\w = 10 Or *Pointer\w = 13
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,word [rbp]
  AND    r15,r15
  JE     Ok225
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,word [rbp]
  CMP    r15,10
  JE     Ok225
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,word [rbp]
  CMP    r15,13
  JE     Ok225
  JMP    No225
Ok225:
  MOV    rax,1
  JMP    End225
No225:
  XOR    rax,rax
End225:
  AND    rax,rax
  JE    _EndIf1838
; Size + Len(#NewLine) 
  MOV    r15,qword [rsp+40]
  MOV    rax,_S63
  PUSH   rax
  POP    rcx
  CALL   PB_Len
  ADD    r15,rax
  MOV    qword [rsp+40],r15
; EndIf      
_EndIf1838:
; EndIf
_EndIf1836:
; *Pointer + 2
  MOV    r15,qword [rsp+48]
  ADD    r15,2
  MOV    qword [rsp+48],r15
; Wend
  JMP   _While1834
_Wend1834:
; 
; *Buffer = AllocateMemory(Size * 2 + 2) 
  MOV    r15,qword [rsp+40]
  ADD    r15,r15
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+64],rax
; 
; 
; 
; If *Buffer
  CMP    qword [rsp+64],0
  JE    _EndIf1840
; *Pointer      = *Debugger\MemoryDump
  MOV    rbp,qword [rsp+PS480+0]
  PUSH   qword [rbp+596]
  POP    rax
  MOV    qword [rsp+48],rax
; *Output.WORD  = *Buffer
  PUSH   qword [rsp+64]
  POP    rax
  MOV    qword [rsp+72],rax
; 
; While *Pointer < *BufferEnd    
_While1841:
  MOV    r15,qword [rsp+48]
  CMP    r15,qword [rsp+56]
  JGE   _Wend1841
; If *Pointer\w >= 0 And *Pointer\w < 32 
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,word [rbp]
  AND    r15,r15
  JL     No226
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,word [rbp]
  CMP    r15,32
  JGE    No226
Ok226:
  MOV    rax,1
  JMP    End226
No226:
  XOR    rax,rax
End226:
  AND    rax,rax
  JE    _EndIf1843
; PokeS(*Output, MemoryViewer_Chars(*Pointer\w), -1, #PB_Unicode)
  PUSH   qword 25
  PUSH   qword -1
  MOV    rbp,qword [rsp+64]
  MOVSX  r15,word [rbp]
  MOV    rbp,qword [a_MemoryViewer_Chars]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_PokeS3
; *Output + Len(MemoryViewer_Chars(*Pointer\w)) * 2
  MOV    r15,qword [rsp+72]
  MOV    rbp,qword [rsp+48]
  MOVSX  r14,word [rbp]
  MOV    rbp,qword [a_MemoryViewer_Chars]
  SAL    r14,3
  PUSH   qword [rbp+r14]
  POP    rcx
  CALL   PB_Len
  MOV    r14,rax
  ADD    r14,r14
  ADD    r15,r14
  MOV    qword [rsp+72],r15
; 
; 
; If *Pointer\w = 0 Or *Pointer\w = 10 Or (*Pointer\w = 13 And PeekW(*Pointer+1) <> 10)
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,word [rbp]
  AND    r15,r15
  JE     Ok227
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,word [rbp]
  CMP    r15,10
  JE     Ok227
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,word [rbp]
  CMP    r15,13
  JNE    No228
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_PeekW
  MOV    r15,rax
  CMP    r15,10
  JE     No228
Ok228:
  MOV    rax,1
  JMP    End228
No228:
  XOR    rax,rax
End228:
  AND    rax,rax
  JNE    Ok227
  JMP    No227
Ok227:
  MOV    rax,1
  JMP    End227
No227:
  XOR    rax,rax
End227:
  AND    rax,rax
  JE    _EndIf1845
; PokeS(*Output, #NewLine, -1, #PB_Unicode)
  PUSH   qword 25
  PUSH   qword -1
  MOV    rax,_S63
  PUSH   rax
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_PokeS3
; *Output + Len(#NewLine) * 2
  MOV    r15,qword [rsp+72]
  MOV    rax,_S63
  PUSH   rax
  POP    rcx
  CALL   PB_Len
  MOV    r14,rax
  ADD    r14,r14
  ADD    r15,r14
  MOV    qword [rsp+72],r15
; EndIf            
_EndIf1845:
; Else
  JMP   _EndIf1842
_EndIf1843:
; *Output\w = *Pointer\w
  MOV    rbp,qword [rsp+48]
  MOVSX  rax,word [rbp]
  PUSH   rax
  MOV    rbp,qword [rsp+80]
  POP    rax
  MOV    word [rbp],ax
; *Output + 2
  MOV    r15,qword [rsp+72]
  ADD    r15,2
  MOV    qword [rsp+72],r15
; EndIf
_EndIf1842:
; 
; *Pointer + 2
  MOV    r15,qword [rsp+48]
  ADD    r15,2
  MOV    qword [rsp+48],r15
; Wend
  JMP   _While1841
_Wend1841:
; *Output\w = 0
  MOV    rbp,qword [rsp+72]
  MOV    word [rbp],0
; 
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Editor], PeekS(*Buffer, -1, #PB_Unicode))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 25
  PUSH   qword -1
  PUSH   qword [rsp+120]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS480+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2264]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; FreeMemory(*Buffer)
  PUSH   qword [rsp+64]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf1840:
; 
; EndProcedure
_EndProcedureZero481:
  XOR    rax,rax
_EndProcedure481:
  ADD    rsp,80
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure FlushEvents()
_Procedure4:
  PS4=48
  SUB    rsp,40
; While ProcessEvent(WindowEvent())
_While3754:
  CALL   PB_WindowEvent
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure690
  AND    rax,rax
  JE    _Wend3754
; Wend
  JMP   _While3754
_Wend3754:
; EndProcedure
_EndProcedureZero5:
  XOR    rax,rax
_EndProcedure5:
  ADD    rsp,40
  RET
; Procedure PurifierWindowCallback(Window, Message, wParam, lParam)
_Procedure614:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PUSH   r15
  PS614=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; If Message = #WM_HSCROLL
  MOV    r15,qword [rsp+PS614+8]
  CMP    r15,276
  JNE   _EndIf3255
; *Debugger.DebuggerData = GetWindowLongPtr_(Window, #GWL_USERDATA)
  PUSH   qword -21
  PUSH   qword [rsp+PS614+8]
  POP    rcx
  POP    rdx
  CALL   GetWindowLongPtrW
  MOV    qword [rsp+40],rax
; If *Debugger    
  CMP    qword [rsp+40],0
  JE    _EndIf3257
; If lParam = GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarGlobal]) Or lParam = GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarLocal]) Or lParam = GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarString]) Or lParam = GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarDynamic])
  MOV    r15,qword [rsp+PS614+24]
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3040]
  POP    rcx
  CALL   PB_GadgetID
  CMP    r15,rax
  JE     Ok337
  MOV    r15,qword [rsp+PS614+24]
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3064]
  POP    rcx
  CALL   PB_GadgetID
  CMP    r15,rax
  JE     Ok337
  MOV    r15,qword [rsp+PS614+24]
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3088]
  POP    rcx
  CALL   PB_GadgetID
  CMP    r15,rax
  JE     Ok337
  MOV    r15,qword [rsp+PS614+24]
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3112]
  POP    rcx
  CALL   PB_GadgetID
  CMP    r15,rax
  JE     Ok337
  JMP    No337
Ok337:
  MOV    rax,1
  JMP    End337
No337:
  XOR    rax,rax
End337:
  AND    rax,rax
  JE    _EndIf3259
; UpdatePurifierLines(*Debugger)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure610
; EndIf
_EndIf3259:
; EndIf
_EndIf3257:
; EndIf
_EndIf3255:
; 
; ProcedureReturn #PB_ProcessPureBasicEvents
  MOV    rax,-522133279
  JMP   _EndProcedure615
; EndProcedure
_EndProcedureZero615:
  XOR    rax,rax
_EndProcedure615:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure IsWindowMinimized(Window)
_Procedure104:
  MOV    qword [rsp+8],rcx
  PS104=48
  SUB    rsp,40
; 
; ProcedureReturn IsIconic_(WindowID(Window))
  PUSH   qword [rsp+PS104+0]
  POP    rcx
  CALL   PB_WindowID
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   IsIconic
  JMP   _EndProcedure105
; 
; EndProcedure
_EndProcedureZero105:
  XOR    rax,rax
_EndProcedure105:
  ADD    rsp,40
  RET
; Procedure SendDebuggerCommandWithData(*Debugger.DebuggerData, *Command.CommandInfo, *CommandData)
_Procedure8:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS8=64
  SUB    rsp,40
; CompilerIf #PRINT_DEBUGGER_COMMANDS
; 
; *Command\TimeStamp = Date()
  CALL   PB_Date
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS8+16]
  POP    rax
  MOV    dword [rbp+16],eax
; 
; CompilerIf #LOG_DEBUGGER_COMMANDS
; 
; If *Debugger\Communication And *Debugger\ProgramState <> -1 
  MOV    rbp,qword [rsp+PS8+0]
  CMP    qword [rbp+44],0
  JE     No201
  MOV    rbp,qword [rsp+PS8+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JE     No201
Ok201:
  MOV    rax,1
  JMP    End201
No201:
  XOR    rax,rax
End201:
  AND    rax,rax
  JE    _EndIf1487
; *Debugger\Communication\Send(*Command, *CommandData)
  MOV    rbp,qword [rsp+PS8+0]
  MOV    rbp,qword [rbp+44]
  PUSH   rbp
  SUB    rsp,8
  PUSH   qword [rsp+PS8+32]
  PUSH   qword [rsp+PS8+32]
  POP    rdx
  POP    r8
  SUB    rsp,32
  MOV    rax,[rsp+40]
  MOV    rcx,rax
  MOV    rax,[rax]
  CALL   qword [rax+24]
  ADD    rsp,40
  ADD    rsp,8
; 
; CompilerIf #CompileLinux
; EndIf  
_EndIf1487:
; EndProcedure
_EndProcedureZero9:
  XOR    rax,rax
_EndProcedure9:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure.s UniqueFilename(FileName$)
_Procedure154:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS154=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS154+32]
  MOV    qword [PB_StringBasePosition],rax
  MOV    rdx,[rsp+PS154+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; 
; 
; If FileName$ = ""
  PUSH   qword [rsp+40]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf99
; ProcedureReturn ""
  MOV    rcx,_S3
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure155
; EndIf
_EndIf99:
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #PB_Compiler_OS = #PB_OS_Windows
; FileName$ = ReplaceString(FileName$, "/", "\")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S4
  PUSH   rax
  MOV    rax,_S10
  PUSH   rax
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ReplaceString
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; CompilerElse
; 
; *Cursor.Character = @FileName$  
  MOV    rax,qword [rsp+40]
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    qword [rsp+48],rax
; While *Cursor\c
_While100:
  MOV    rbp,qword [rsp+48]
  CMP    word [rbp],0
  JE    _Wend100
; 
; If *Cursor\c = Asc(#Separator)
  MOV    rbp,qword [rsp+48]
  MOVZX  r15,word [rbp]
  MOV    rax,_S4
  PUSH   rax
  POP    rcx
  CALL   PB_Asc
  CMP    r15,rax
  JNE   _EndIf102
; If PeekS(*Cursor, 4) = #Separator + ".." + #Separator
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 4
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_PeekS2
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S11
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf104
; 
; *BackCursor.Character = *Cursor - SizeOf(Character)
  MOV    r15,qword [rsp+48]
  ADD    r15,-2
  MOV    qword [rsp+56],r15
; While *BackCursor >= @FileName$
_While105:
  MOV    r15,qword [rsp+56]
  MOV    rax,qword [rsp+40]
  CMP    r15,rax
  JL    _Wend105
; If *BackCursor\c = Asc(#Separator)
  MOV    rbp,qword [rsp+56]
  MOVZX  r15,word [rbp]
  MOV    rax,_S4
  PUSH   rax
  POP    rcx
  CALL   PB_Asc
  CMP    r15,rax
  JNE   _EndIf107
; Break
  JMP   _Wend105
; EndIf
_EndIf107:
; *BackCursor - SizeOf(Character)
  MOV    r15,qword [rsp+56]
  ADD    r15,-2
  MOV    qword [rsp+56],r15
; Wend
  JMP   _While105
_Wend105:
; 
; If *BackCursor < @FileName$
  MOV    r15,qword [rsp+56]
  MOV    rax,qword [rsp+40]
  CMP    r15,rax
  JGE   _EndIf109
; 
; ProcedureReturn ""
  MOV    rcx,_S3
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure155
; EndIf
_EndIf109:
; 
; 
; PokeS(*BackCursor, PeekS(*Cursor + 3*SizeOf(Character)))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+88]
  ADD    r15,6
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PokeS
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; 
; 
; 
; *Cursor = *BackCursor 
  PUSH   qword [rsp+56]
  POP    rax
  MOV    qword [rsp+48],rax
; 
; ElseIf PeekS(*Cursor, 3) = #Separator + "." + #Separator        
  JMP   _EndIf103
_EndIf104:
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 3
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_PeekS2
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S12
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf110
; 
; PokeS(*Cursor, PeekS(*Cursor + 2*SizeOf(Character)))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+88]
  ADD    r15,4
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+72]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PokeS
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; Else
  JMP   _EndIf103
_EndIf110:
; *Cursor + SizeOf(Character)
  MOV    r15,qword [rsp+48]
  ADD    r15,2
  MOV    qword [rsp+48],r15
; EndIf 
_EndIf103:
; 
; Else
  JMP   _EndIf101
_EndIf102:
; *Cursor + SizeOf(Character)
  MOV    r15,qword [rsp+48]
  ADD    r15,2
  MOV    qword [rsp+48],r15
; EndIf           
_EndIf101:
; Wend
  JMP   _While100
_Wend100:
; 
; ProcedureReturn Filename$
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure155
; EndProcedure
_EndProcedureZero155:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure155:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,64
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure UpdateVariableWindowState(*Debugger.DebuggerData)
_Procedure500:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS500=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; If *Debugger\ProgramState = -1
  MOV    rbp,qword [rsp+PS500+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JNE   _EndIf2179
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Update], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS500+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2368]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateArray], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS500+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2392]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateList], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS500+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2424]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateMap], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS500+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2456]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Display], 1)    
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS500+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2536]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; DisableMenuItem(#POPUPMENU_VariableViewer, #DEBUGGER_MENU_WatchlistAdd, 1)
  PUSH   qword 1
  PUSH   qword 2
  PUSH   qword 3
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_DisableMenuItem
; DisableMenuItem(#POPUPMENU_ArrayViewer, #DEBUGGER_MENU_ViewAll, 1)
  PUSH   qword 1
  PUSH   qword 4
  PUSH   qword 4
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_DisableMenuItem
; DisableMenuItem(#POPUPMENU_ArrayViewer, #DEBUGGER_MENU_ViewNonZero, 1)
  PUSH   qword 1
  PUSH   qword 5
  PUSH   qword 4
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_DisableMenuItem
; DisableMenuItem(#POPUPMENU_ArrayViewer, #DEBUGGER_MENU_ViewRange, 1)
  PUSH   qword 1
  PUSH   qword 6
  PUSH   qword 4
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_DisableMenuItem
; 
; Else
  JMP   _EndIf2178
_EndIf2179:
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Update], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS500+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2368]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateArray], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS500+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2392]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateList], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS500+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2424]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateMap], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS500+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2456]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Display], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS500+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2536]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; DisableMenuItem(#POPUPMENU_VariableViewer, #DEBUGGER_MENU_WatchlistAdd, 0)
  PUSH   qword 0
  PUSH   qword 2
  PUSH   qword 3
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_DisableMenuItem
; DisableMenuItem(#POPUPMENU_ArrayViewer, #DEBUGGER_MENU_ViewAll, 0)
  PUSH   qword 0
  PUSH   qword 4
  PUSH   qword 4
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_DisableMenuItem
; DisableMenuItem(#POPUPMENU_ArrayViewer, #DEBUGGER_MENU_ViewNonZero, 0)
  PUSH   qword 0
  PUSH   qword 5
  PUSH   qword 4
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_DisableMenuItem
; DisableMenuItem(#POPUPMENU_ArrayViewer, #DEBUGGER_MENU_ViewRange, 0)    
  PUSH   qword 0
  PUSH   qword 6
  PUSH   qword 4
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_DisableMenuItem
; 
; 
; If *Debugger\ProgramState <> 0 And *Debugger\ProgramState <> -2
  MOV    rbp,qword [rsp+PS500+0]
  MOVSXD r15,dword [rbp+112]
  AND    r15,r15
  JE     No245
  MOV    rbp,qword [rsp+PS500+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-2
  JE     No245
Ok245:
  MOV    rax,1
  JMP    End245
No245:
  XOR    rax,rax
End245:
  AND    rax,rax
  JE    _EndIf2182
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Update], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS500+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2368]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateArray], 1)  
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS500+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2392]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateList], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS500+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2424]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateMap], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS500+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2456]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; 
; 
; Command.CommandInfo\Command = #COMMAND_GetGlobals
  LEA    rbp,[rsp+40]
  MOV    dword [rbp],10
; SendDebuggerCommand(*Debugger, @Command) 
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS500+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Command.CommandInfo\Command = #COMMAND_GetLocals
  LEA    rbp,[rsp+40]
  MOV    dword [rbp],11
; SendDebuggerCommand(*Debugger, @Command) 
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS500+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Command.CommandInfo\Command = #COMMAND_GetArrayInfo
  LEA    rbp,[rsp+40]
  MOV    dword [rbp],12
; Command\Value1 = #True
  MOV    dword [rbp+8],1
; SendDebuggerCommand(*Debugger, @Command)       
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS500+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Command.CommandInfo\Command = #COMMAND_GetArrayInfo
  LEA    rbp,[rsp+40]
  MOV    dword [rbp],12
; Command\Value1 = #False
  MOV    dword [rbp+8],0
; SendDebuggerCommand(*Debugger, @Command)
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS500+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Command.CommandInfo\Command = #COMMAND_GetListInfo
  LEA    rbp,[rsp+40]
  MOV    dword [rbp],13
; Command\Value1 = #True
  MOV    dword [rbp+8],1
; SendDebuggerCommand(*Debugger, @Command)           
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS500+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Command.CommandInfo\Command = #COMMAND_GetListInfo
  LEA    rbp,[rsp+40]
  MOV    dword [rbp],13
; Command\Value1 = #False
  MOV    dword [rbp+8],0
; SendDebuggerCommand(*Debugger, @Command)     
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS500+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Command.CommandInfo\Command = #COMMAND_GetMapInfo
  LEA    rbp,[rsp+40]
  MOV    dword [rbp],14
; Command\Value1 = #True
  MOV    dword [rbp+8],1
; SendDebuggerCommand(*Debugger, @Command)           
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS500+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Command.CommandInfo\Command = #COMMAND_GetMapInfo
  LEA    rbp,[rsp+40]
  MOV    dword [rbp],14
; Command\Value1 = #False
  MOV    dword [rbp+8],0
; SendDebuggerCommand(*Debugger, @Command)  
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS500+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; EndIf
_EndIf2182:
; 
; EndIf
_EndIf2178:
; 
; EndProcedure
_EndProcedureZero501:
  XOR    rax,rax
_EndProcedure501:
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure DebugOutput_EvaluateExpression(*Debugger.DebuggerData)
_Procedure438:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS438=128
  MOV    rax,7
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; If *Debugger\ProgramState = -1
  MOV    rbp,qword [rsp+PS438+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JNE   _EndIf1579
; 
; StatusBarText(*Debugger\OutputStatusbar, 0, Language("Debugger", "ExeEnded"))  
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S190
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS438+32]
  PUSH   qword [rbp+772]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StatusBarText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; Else
  JMP   _EndIf1578
_EndIf1579:
; 
; StatusBarText(*Debugger\OutputStatusbar, 0, "...")
  MOV    rax,_S191
  PUSH   rax
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS438+16]
  PUSH   qword [rbp+772]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_StatusBarText
; 
; Expr$ = Trim(GetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Entry]))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS438+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+984]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetText
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; Test$ = UCase(Left(Expr$, 4))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 4
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; If (Test$ = "SET " Or Test$ = "SET" + Chr(9)) And FindString(Expr$, "=", 1) <> 0
  PUSH   qword [rsp+48]
  MOV    rcx,_S192
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    Ok204
  PUSH   qword [rsp+48]
  MOV    rcx,_S193
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    Ok204
  JMP    No204
Ok204:
  MOV    rax,1
  JMP    End204
No204:
  XOR    rax,rax
End204:
  AND    rax,rax
  JE     No205
  PUSH   qword 1
  MOV    rax,_S194
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_FindString2
  MOV    r15,rax
  AND    r15,r15
  JE     No205
Ok205:
  MOV    rax,1
  JMP    End205
No205:
  XOR    rax,rax
End205:
  AND    rax,rax
  JE    _EndIf1582
; 
; 
; 
; Expr$  = Trim(Right(Expr$, Len(Expr$)-4))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+88]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,-4
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; length = (Len(Expr$)+1) * SizeOf(Character)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_Len
  MOV    r15,rax
  INC    r15
  ADD    r15,r15
  MOV    qword [rsp+56],r15
; 
; 
; PokeC(@Expr$ + (FindString(Expr$, "=", 1)-1) * SizeOf(Character), 0)
  PUSH   qword 0
  MOV    rax,qword [rsp+48]
  MOV    r15,rax
  SUB    rsp,8
  PUSH   qword 1
  MOV    rax,_S194
  PUSH   rax
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_FindString2
  ADD    rsp,40
  MOV    r14,rax
  DEC    r14
  ADD    r14,r14
  ADD    r15,r14
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_PokeC
; 
; Command.CommandInfo\Command = #COMMAND_SetVariable
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],35
; Command\Value1 = AsciiConst('D','E','B','G') 
  MOV    dword [rbp+8],1145389639
; Command\Value2 = 0 
  MOV    dword [rbp+12],0
; Command\DataSize = length
  PUSH   qword [rsp+56]
  POP    rax
  MOV    dword [rbp+4],eax
; SendDebuggerCommandWithData(*Debugger, @Command, @Expr$) 
  MOV    rax,qword [rsp+40]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS438+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure8
; 
; Else
  JMP   _EndIf1581
_EndIf1582:
; 
; 
; 
; Command.CommandInfo\Command = #COMMAND_EvaluateExpression
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],33
; Command\Value1 = AsciiConst('D','E','B','G') 
  MOV    dword [rbp+8],1145389639
; Command\Value2 = -1 
  MOV    dword [rbp+12],-1
; Command\DataSize = (Len(Expr$)+1) * SizeOf(Character)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_Len
  MOV    r15,rax
  INC    r15
  ADD    r15,r15
  MOV    rax,r15
  PUSH   rax
  POP    rax
  MOV    dword [rbp+4],eax
; SendDebuggerCommandWithData(*Debugger, @Command, @Expr$)   
  MOV    rax,qword [rsp+40]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS438+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure8
; 
; EndIf
_EndIf1581:
; 
; 
; 
; 
; EndIf
_EndIf1578:
; 
; EndProcedure
_EndProcedureZero439:
  XOR    rax,rax
_EndProcedure439:
  PUSH   rax
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,96
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure IsBasicFunction(Word$) 
_Procedure226:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS226=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS226+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; ProcedureReturn BasicFunctionMap(Word$) - 1 
  PUSH   qword [rsp+40]
  POP    rdx
  MOV    rcx,qword [m_BasicFunctionMap]
  CALL   PB_GetMapElement
  MOV    rbp,rax
  MOVSXD r15,dword [rbp]
  DEC    r15
  MOV    rax,r15
  JMP   _EndProcedure227
; EndProcedure
_EndProcedureZero227:
  XOR    rax,rax
_EndProcedure227:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure ByteUcase(Byte.a) 
_Procedure216:
  MOV    qword [rsp+8],rcx
  PUSH   r15
  PS216=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; If Byte >= 'a' And Byte <= 'z'
  MOVZX  r15,byte [rsp+PS216+0]
  MOV    rax,97
  CMP    r15,rax
  JL     No17
  MOVZX  r15,byte [rsp+PS216+0]
  MOV    rax,122
  CMP    r15,rax
  JG     No17
Ok17:
  MOV    rax,1
  JMP    End17
No17:
  XOR    rax,rax
End17:
  AND    rax,rax
  JE    _EndIf366
; ProcedureReturn Byte - 'a' + 'A'
  MOVZX  r15,byte [rsp+PS216+0]
  ADD    r15,-32
  MOV    rax,r15
  JMP   _EndProcedure217
; Else
  JMP   _EndIf365
_EndIf366:
; ProcedureReturn Byte
  MOVZX  rax,byte [rsp+PS216+0]
  JMP   _EndProcedure217
; EndIf
_EndIf365:
; EndProcedure
_EndProcedureZero217:
  XOR    rax,rax
_EndProcedure217:
  ADD    rsp,48
  POP    r15
  RET
; Procedure.s PureBasicConfigPath()
_Procedure84:
  PUSH   r15
  PS84=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS84+32]
  MOV    qword [PB_StringBasePosition],rax
; Static ConfigPath$
; 
; 
; If ConfigPath$ <> ""
  PUSH   qword [so_PureBasicConfigPath.v_ConfigPath$]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf5
; ProcedureReturn ConfigPath$
  MOV    rcx,qword [so_PureBasicConfigPath.v_ConfigPath$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure85
; EndIf
_EndIf5:
; 
; CompilerIf #PB_Compiler_OS = #PB_OS_Windows
; Protected pidl, Index
; 
; #CSIDL_APPDATA = $001a
; ConfigPath$ = GetHomeDirectory() 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetHomeDirectory
  ADD    rsp,40
  LEA    rcx,[so_PureBasicConfigPath.v_ConfigPath$]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; If SHGetSpecialFolderLocation_(0, #CSIDL_APPDATA, @pidl) = #S_OK
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 26
  PUSH   qword 0
  POP    rcx
  POP    rdx
  POP    r8
  CALL   SHGetSpecialFolderLocation
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf7
; ConfigPath$ = Space(#MAX_PATH)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 260
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Space
  ADD    rsp,40
  LEA    rcx,[so_PureBasicConfigPath.v_ConfigPath$]
  POP    rdx
  CALL   SYS_AllocateString4
; If SHGetPathFromIDList_(pidl, @ConfigPath$) = 0
  MOV    rax,qword [so_PureBasicConfigPath.v_ConfigPath$]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   SHGetPathFromIDListW
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf9
; ConfigPath$ = GetHomeDirectory()
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetHomeDirectory
  ADD    rsp,40
  LEA    rcx,[so_PureBasicConfigPath.v_ConfigPath$]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf9:
; EndIf  
_EndIf7:
; 
; CompilerIf #SpiderBasic
; If Right(ConfigPath$, 1) <> "\"
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [so_PureBasicConfigPath.v_ConfigPath$]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S4
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf11
; ConfigPath$ + "\PureBasic\"
  MOV    rcx,qword [so_PureBasicConfigPath.v_ConfigPath$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S5
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[so_PureBasicConfigPath.v_ConfigPath$]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf10
_EndIf11:
; ConfigPath$ + "PureBasic\"
  MOV    rcx,qword [so_PureBasicConfigPath.v_ConfigPath$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S6
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[so_PureBasicConfigPath.v_ConfigPath$]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf10:
; CompilerEndIf
; 
; 
; 
; 
; If FileSize(ConfigPath$) <> -2
  PUSH   qword [so_PureBasicConfigPath.v_ConfigPath$]
  POP    rcx
  CALL   PB_FileSize
  MOV    r15,rax
  CMP    r15,-2
  JE    _EndIf14
; Index = 3 
  MOV    qword [rsp+48],3
; While FindString(ConfigPath$, "\", Index+1) > 0      
_While15:
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rax,_S4
  PUSH   rax
  PUSH   qword [so_PureBasicConfigPath.v_ConfigPath$]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_FindString2
  MOV    r15,rax
  AND    r15,r15
  JLE   _Wend15
; Index = FindString(ConfigPath$, "\", Index+1)
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rax,_S4
  PUSH   rax
  PUSH   qword [so_PureBasicConfigPath.v_ConfigPath$]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_FindString2
  MOV    qword [rsp+48],rax
; If FileSize(Left(ConfigPath$, Index)) <> -2
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+88]
  PUSH   qword [so_PureBasicConfigPath.v_ConfigPath$]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_FileSize
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    r15,rax
  CMP    r15,-2
  JE    _EndIf17
; If CreateDirectory(Left(ConfigPath$, Index)) = 0
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+88]
  PUSH   qword [so_PureBasicConfigPath.v_ConfigPath$]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_CreateDirectory
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf19
; Break
  JMP   _Wend15
; EndIf
_EndIf19:
; EndIf
_EndIf17:
; Wend
  JMP   _While15
_Wend15:
; EndIf
_EndIf14:
; 
; CompilerElse
; 
; ProcedureReturn ConfigPath$
  MOV    rcx,qword [so_PureBasicConfigPath.v_ConfigPath$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure85
; EndProcedure
_EndProcedureZero85:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure85:
  ADD    rsp,64
  POP    r15
  RET
; Procedure RedrawGadget(Gadget)
_Procedure122:
  MOV    qword [rsp+8],rcx
  PS122=48
  SUB    rsp,40
; RedrawWindow_(GadgetID(Gadget), 0, 0, #RDW_INVALIDATE)
  PUSH   qword 1
  PUSH   qword 0
  PUSH   qword 0
  SUB    rsp,8
  PUSH   qword [rsp+PS122+32]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   RedrawWindow
; EndProcedure
_EndProcedureZero123:
  XOR    rax,rax
_EndProcedure123:
  ADD    rsp,40
  RET
; Procedure CreateRegisterGadgets(*Debugger.DebuggerData)
_Procedure448:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS448=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; OpenGadgetList(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_ScrollArea])
  MOV    rbp,qword [rsp+PS448+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1024]
  POP    rcx
  CALL   PB_OpenGadgetList
; 
; For i = 0 To *Debugger\RegisterCount-1
  MOV    qword [rsp+40],0
  JMP   _ForSkipDebug1695
_For1695:
_ForSkipDebug1695:
  MOV    rbp,qword [rsp+PS448+0]
  MOVSXD r15,dword [rbp+160]
  DEC    r15
  CMP    r15,qword [rsp+40]
  JL    _Next1696
; *Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Text0+i]  = TextGadget(#PB_Any, 0, 0, 0, 0, *Debugger\RegisterName$[i]+" : ", #PB_Text_Right)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS448+16]
  PUSH   rbp
  MOV    rax,qword [rsp+64]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+308]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S214
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS448+8]
  PUSH   rbp
  MOV    r15,qword [rsp+56]
  ADD    r15,16
  MOV    rax,r15
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    qword [rbp+912],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Value0+i] = StringGadget(#PB_Any, 0, 0, 0, 0, "")
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS448+8]
  PUSH   rbp
  MOV    r15,qword [rsp+56]
  ADD    r15,53
  MOV    rax,r15
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    qword [rbp+912],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Set0+i]   = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Set"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S215
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS448+8]
  PUSH   rbp
  MOV    r15,qword [rsp+56]
  ADD    r15,90
  MOV    rax,r15
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    qword [rbp+912],rax
; 
; If *Debugger\RegisterIndex[i] & #RegisterHasString
  MOV    rbp,qword [rsp+PS448+0]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  MOVSXD r15,dword [rbp+164]
  AND    r15,32768
  AND    r15,r15
  JE    _EndIf1698
; *Debugger\Gadgets[#DEBUGGER_GADGET_Asm_TextValue0+i] = TextGadget(#PB_Any, 0, 0, 0, 0, "")
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS448+8]
  PUSH   rbp
  MOV    r15,qword [rsp+56]
  ADD    r15,127
  MOV    rax,r15
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    qword [rbp+912],rax
; EndIf      
_EndIf1698:
; Next i   
_NextContinue1696:
  INC    qword [rsp+40]
  JNO   _For1695
_Next1696:
; 
; CloseGadgetList()
  CALL   PB_CloseGadgetList
; 
; ResizeRegisterDisplay(*Debugger)
  PUSH   qword [rsp+PS448+0]
  POP    rcx
  CALL  _Procedure446
; 
; EndProcedure
_EndProcedureZero449:
  XOR    rax,rax
_EndProcedure449:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure.s VariableGadget_EntryText(*VariableGadget.VariableGadget, realindex)
_Procedure282:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS282=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS282+32]
  MOV    qword [PB_StringBasePosition],rax
; *items.VariableGadget_ItemList = *VariableGadget\Items
  MOV    rbp,qword [rsp+PS282+0]
  PUSH   qword [rbp+16]
  POP    rax
  MOV    qword [rsp+40],rax
; 
; Text$ = *items\item[realindex]\Extra$ + *items\item[realindex]\Name$
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS282+16]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+26]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+PS282+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+10]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; Select *items\item[realindex]\Kind 
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS282+16]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,byte [rbp]
  MOV    rax,r15
  PUSH   rax
; 
; Case #TYPE_ARRAY
  MOV    r15,15
  CMP    r15,[rsp]
  JNE   _Case50
; 
; 
; Text$ + "(" + *items\item[realindex]\Value$ + ")"
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S93
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS282+32]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S29
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Case #TYPE_LINKEDLIST, #TYPE_MAP
  JMP   _EndSelect7
_Case50:
  MOV    r15,14
  CMP    r15,[rsp]
  JE    _Case51
  MOV    r15,22
  CMP    r15,[rsp]
  JNE   _Case52
_Case51:
; 
; Text$ + "()" + Chr(10) + *items\item[realindex]\Value$
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S94
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS282+32]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Default
  JMP   _EndSelect7
_Case52:
; 
; Text$ + Chr(10) + *items\item[realindex]\Value$
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS282+32]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; EndSelect 
_Case53:
_EndSelect7:
  POP    rax
; 
; ProcedureReturn Text$         
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure283
; EndProcedure
_EndProcedureZero283:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure283:
  PUSH   rax
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure WinPipe_Receive(*This.WinPipe_Communication, *Command.CommandInfo, *pCommandData.INTEGER)
_Procedure322:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS322=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Result = 0
  MOV    qword [rsp+40],0
; 
; CompilerIf #NOTHREAD = 0
; 
; LockMutex(*This\StackMutex)
  MOV    rbp,qword [rsp+PS322+0]
  PUSH   qword [rbp+80]
  POP    rcx
  CALL   qword [PB_LockMutex]
; 
; If *This\StackCount > 0            
  MOV    rbp,qword [rsp+PS322+0]
  MOVSXD r15,dword [rbp+88]
  AND    r15,r15
  JLE   _EndIf1119
; CopyMemory(@*This\Stack[0]\command, *Command, SizeOf(CommandInfo))
  PUSH   qword 20
  PUSH   qword [rsp+PS322+16]
  MOV    rbp,qword [rsp+PS322+16]
  PUSH   rbp
  POP    rbp
  LEA    rax,[rbp+92]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CopyMemory
; *pCommandData\i = *This\Stack[0]\commanddata
  MOV    rbp,qword [rsp+PS322+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+112]
  MOV    rbp,qword [rsp+PS322+24]
  POP    rax
  MOV    qword [rbp],rax
; 
; 
; *This\StackCount - 1
  MOV    rbp,qword [rsp+PS322+0]
  MOVSXD r15,dword [rbp+88]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS322+8]
  POP    rax
  MOV    dword [rbp+88],eax
; If *This\StackCount > 0
  MOV    rbp,qword [rsp+PS322+0]
  MOVSXD r15,dword [rbp+88]
  AND    r15,r15
  JLE   _EndIf1121
; MoveMemory(@*This\Stack[1], @*This\Stack[0], SizeOf(CommandStackStruct) * *This\StackCount)      
  MOV    rbp,qword [rsp+PS322+0]
  MOVSXD r15,dword [rbp+88]
  IMUL   r15,28
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS322+8]
  PUSH   rbp
  POP    rbp
  LEA    rax,[rbp+92]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS322+16]
  PUSH   rbp
  POP    rbp
  LEA    rax,[rbp+120]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_MoveMemory
; EndIf
_EndIf1121:
; 
; Result = 1
  MOV    qword [rsp+40],1
; EndIf
_EndIf1119:
; 
; UnlockMutex(*This\StackMutex)   
  MOV    rbp,qword [rsp+PS322+0]
  PUSH   qword [rbp+80]
  POP    rcx
  CALL   qword [PB_UnlockMutex]
; 
; CompilerElse
; 
; ProcedureReturn Result
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure323
; EndProcedure
_EndProcedureZero323:
  XOR    rax,rax
_EndProcedure323:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure FreePBString(ptrString)
_Procedure74:
  MOV    qword [rsp+8],rcx
  PS74=64
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Protected String.STRING
; PokeI(@String, ptrString)
  PUSH   qword [rsp+PS74+0]
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_PokeI
; EndProcedure
_EndProcedureZero75:
  XOR    rax,rax
_EndProcedure75:
  PUSH   rax
  MOV    rdx,s_string
  LEA    rcx,[rsp+48]
  PUSH   rax
  SUB    rsp,32
  CALL   SYS_FreeStructureStrings
  ADD    rsp,32
  POP    rax
  POP    rax
  ADD    rsp,56
  RET
; Procedure WinPipe_Connect(*This.WinPipe_Communication)
_Procedure316:
  MOV    qword [rsp+8],rcx
  PS316=48
  SUB    rsp,40
; 
; ProcedureReturn #True
  MOV    rax,1
  JMP   _EndProcedure317
; EndProcedure
_EndProcedureZero317:
  XOR    rax,rax
_EndProcedure317:
  ADD    rsp,40
  RET
; Procedure.s ModuleName(Name$, ModuleName$)
_Procedure68:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PS68=64
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS68+32]
  MOV    qword [PB_StringBasePosition],rax
  MOV    rdx,[rsp+PS68+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
  MOV    rdx,[rsp+PS68+8]
  LEA    rcx,[rsp+48]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; If ModuleName$ = ""
  PUSH   qword [rsp+48]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf705
; ProcedureReturn Name$
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure69
; Else
  JMP   _EndIf704
_EndIf705:
; ProcedureReturn ModuleName$ + "::" + Name$
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S31
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure69
; EndIf
_EndIf704:
; EndProcedure
_EndProcedureZero69:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure69:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,56
  RET
; ProcedureDLL ScintillaCallBack(EditorGadget, *scinotify.SCNotification)  
_Procedure656:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS656=192
  MOV    rax,15
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; 
; 
; 
; Shared HighlightGadget
; 
; Select *scinotify\nmhdr\code
  MOV    rbp,qword [rsp+PS656+8]
  MOVSXD rax,dword [rbp+16]
  PUSH   rax
; 
; Case #SCN_STYLENEEDED
  MOV    r15,2000
  CMP    r15,[rsp]
  JNE   _Case318
; range.TextRange\chrg\cpMin  = ScintillaSendMessage(EditorGadget, #SCI_GETENDSTYLED, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 2028
  PUSH   qword [rsp+PS656+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  LEA    rbp,[rsp+56]
  POP    rax
  MOV    dword [rbp],eax
; lineNumber                  = ScintillaSendMessage(EditorGadget, #SCI_LINEFROMPOSITION, range\chrg\cpMin, 0)
  SUB    rsp,8
  PUSH   qword 0
  MOVSXD rax,dword [rbp]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 2166
  PUSH   qword [rsp+PS656+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
  MOV    qword [rsp+64],rax
; range\chrg\cpMin            = ScintillaSendMessage(EditorGadget, #SCI_POSITIONFROMLINE, lineNumber, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword [rsp+80]
  PUSH   qword 2167
  PUSH   qword [rsp+PS656+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    dword [rbp],eax
; range\chrg\cpMax            = *scinotify\position
  MOV    rbp,qword [rsp+PS656+16]
  MOVSXD rax,dword [rbp+24]
  PUSH   rax
  LEA    rbp,[rsp+56]
  POP    rax
  MOV    dword [rbp+4],eax
; 
; 
; 
; *Buffer = AllocateMemory(range\chrg\cpMax - range\chrg\cpMin + 1)
  SUB    rsp,8
  MOVSXD r15,dword [rbp+4]
  MOVSXD rax,dword [rbp]
  SUB    r15,rax
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_AllocateMemory
  ADD    rsp,40
  MOV    qword [rsp+72],rax
; If *Buffer
  CMP    qword [rsp+72],0
  JE    _EndIf3495
; range\lpstrText = *Buffer
  PUSH   qword [rsp+72]
  LEA    rbp,[rsp+56]
  POP    rax
  MOV    qword [rbp+8],rax
; reallength = ScintillaSendMessage(EditorGadget, #SCI_GETTEXTRANGE, 0, @range)         
  SUB    rsp,8
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 2162
  PUSH   qword [rsp+PS656+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
  MOV    qword [rsp+80],rax
; HighlightGadget = EditorGadget
  PUSH   qword [rsp+PS656+8]
  POP    rax
  MOV    qword [v_HighlightGadget],rax
; 
; ScintillaSendMessage(EditorGadget, #SCI_STARTSTYLING, range\chrg\cpMin, $FFFFFF)
  SUB    rsp,8
  PUSH   qword 16777215
  MOVSXD rax,dword [rbp]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 2032
  PUSH   qword [rsp+PS656+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
; HighlightingEngine(*Buffer, reallength, -1, @HighlightCallback(), 0)          
  PUSH   qword 0
  LEA    rax,[_Procedure654]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword -1
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure244
  ADD    rsp,40
; FreeMemory(*Buffer)                
  SUB    rsp,8
  PUSH   qword [rsp+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FreeMemory
  ADD    rsp,40
; EndIf
_EndIf3495:
; 
; Case #SCN_DWELLSTART
  JMP   _EndSelect51
_Case318:
  MOV    r15,2016
  CMP    r15,[rsp]
  JNE   _Case319
; 
; 
; 
; 
; If *scinotify\position <> -1
  MOV    rbp,qword [rsp+PS656+16]
  MOVSXD r15,dword [rbp+24]
  CMP    r15,-1
  JE    _EndIf3497
; 
; IsMouseDwelling    = 1 
  MOV    qword [v_IsMouseDwelling],1
; MouseDwellPosition = *scinotify\position
  MOV    rbp,qword [rsp+PS656+16]
  MOVSXD rax,dword [rbp+24]
  PUSH   rax
  POP    rax
  MOV    qword [v_MouseDwellPosition],rax
; 
; Expr$ = ""
  MOV    rdx,_S3
  LEA    rcx,[rsp+88]
  SUB    rsp,40
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,40
; 
; 
; 
; 
; selStart = ScintillaSendMessage(EditorGadget, #SCI_GETSELECTIONSTART, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 2143
  PUSH   qword [rsp+PS656+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
  MOV    qword [rsp+96],rax
; selEnd = ScintillaSendMessage(EditorGadget, #SCI_GETSELECTIONEND  , 0, 0)  
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 2145
  PUSH   qword [rsp+PS656+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
  MOV    qword [rsp+104],rax
; If selStart > selEnd
  MOV    r15,qword [rsp+96]
  CMP    r15,qword [rsp+104]
  JLE   _EndIf3499
; Swap selStart, selEnd
  MOV    rax,qword [rsp+104]
  MOV    rdx,qword [rsp+96]
  MOV    qword [rsp+104],rdx
  MOV    qword [rsp+96],rax
; EndIf
_EndIf3499:
; 
; If selStart <= *scinotify\position And selStart <> selEnd And *scinotify\position <= selEnd
  MOV    r15,qword [rsp+96]
  MOV    rbp,qword [rsp+PS656+16]
  MOVSXD rax,dword [rbp+24]
  CMP    r15,rax
  JG     No355
  MOV    r15,qword [rsp+96]
  CMP    r15,qword [rsp+104]
  JE     No355
  MOV    rbp,qword [rsp+PS656+16]
  MOVSXD r15,dword [rbp+24]
  CMP    r15,qword [rsp+104]
  JG     No355
Ok355:
  MOV    rax,1
  JMP    End355
No355:
  XOR    rax,rax
End355:
  AND    rax,rax
  JE    _EndIf3501
; 
; Expr$ = Space(selEnd - selStart)    
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+120]
  SUB    r15,qword [rsp+112]
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Space
  ADD    rsp,32
  LEA    rcx,[rsp+96]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; range.TextRange\chrg\cpMin  = selStart
  PUSH   qword [rsp+96]
  LEA    rbp,[rsp+56]
  POP    rax
  MOV    dword [rbp],eax
; range\chrg\cpMax            = selEnd
  PUSH   qword [rsp+104]
  POP    rax
  MOV    dword [rbp+4],eax
; range\lpstrText             = @Expr$     
  MOV    rax,qword [rsp+88]
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    qword [rbp+8],rax
; ScintillaSendMessage(EditorGadget, #SCI_GETTEXTRANGE, 0, @range)         
  SUB    rsp,8
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 2162
  PUSH   qword [rsp+PS656+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
; 
; If ScintillaSendMessage(EditorGadget, #SCI_GETCODEPAGE) = #SC_CP_UTF8
  SUB    rsp,8
  PUSH   qword 2137
  PUSH   qword [rsp+PS656+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,65001
  JNE   _EndIf3503
; Expr$ = PeekS(@Expr$, -1, #PB_UTF8)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword -1
  MOV    rax,qword [rsp+120]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+96]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf3502
_EndIf3503:
; Expr$ = PeekS(@Expr$, -1, #PB_Ascii)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  MOV    rax,qword [rsp+120]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+96]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf3502:
; 
; Expr$ = Trim(Expr$)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,32
  LEA    rcx,[rsp+96]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; IsVariableExpression = 0  
  MOV    qword [v_IsVariableExpression],0
; EndIf
_EndIf3501:
; 
; 
; 
; If Expr$ = ""
  PUSH   qword [rsp+88]
  MOV    rcx,_S3
  POP    rdx
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _EndIf3506
; line      = ScintillaSendMessage(EditorGadget, #SCI_LINEFROMPOSITION, *scinotify\position, 0) 
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS656+32]
  MOVSXD rax,dword [rbp+24]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 2166
  PUSH   qword [rsp+PS656+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
  MOV    qword [rsp+112],rax
; linestart = ScintillaSendMessage(EditorGadget, #SCI_POSITIONFROMLINE, line, 0)                
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword [rsp+128]
  PUSH   qword 2167
  PUSH   qword [rsp+PS656+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
  MOV    qword [rsp+120],rax
; Line$     = GetLine(EditorGadget, line)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+PS656+40]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure652
  ADD    rsp,48
  LEA    rcx,[rsp+136]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; If Line$ <> "" And GetWordBoundary(@Line$, Len(Line$), *scinotify\position - linestart, @selStart, @selEnd, 1) 
  PUSH   qword [rsp+128]
  MOV    rcx,_S3
  POP    rdx
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JNE    No356
  SUB    rsp,8
  PUSH   qword 1
  LEA    rax,[rsp+120]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+120]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS656+48]
  MOVSXD r15,dword [rbp+24]
  SUB    r15,qword [rsp+152]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+168]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  MOV    rax,qword [rsp+176]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure650
  ADD    rsp,56
  AND    rax,rax
  JE     No356
Ok356:
  MOV    rax,1
  JMP    End356
No356:
  XOR    rax,rax
End356:
  AND    rax,rax
  JE    _EndIf3508
; If Mid(Line$, selEnd+2, 2) = "()"
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  MOV    r15,qword [rsp+128]
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+160]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S244
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _EndIf3510
; selEnd + 2
  MOV    r15,qword [rsp+104]
  ADD    r15,2
  MOV    qword [rsp+104],r15
; EndIf
_EndIf3510:
; If Mid(Line$, selEnd+2, 2) = "()"
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  MOV    r15,qword [rsp+128]
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+160]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S244
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _EndIf3512
; selEnd + 2
  MOV    r15,qword [rsp+104]
  ADD    r15,2
  MOV    qword [rsp+104],r15
; EndIf
_EndIf3512:
; If Mid(Line$, selStart, 1) = "$" Or Mid(Line$, selStart, 1) = "%"
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+160]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S20
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JNE    Ok357
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+160]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S22
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JNE    Ok357
  JMP    No357
Ok357:
  MOV    rax,1
  JMP    End357
No357:
  XOR    rax,rax
End357:
  AND    rax,rax
  JE    _EndIf3514
; selStart-1
  MOV    r15,qword [rsp+96]
  DEC    r15
  MOV    qword [rsp+96],r15
; EndIf
_EndIf3514:
; 
; Expr$ = Mid(Line$, selStart+1, selEnd - selStart + 1)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+120]
  SUB    r15,qword [rsp+112]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+120]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+160]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,32
  LEA    rcx,[rsp+96]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; IsVariableExpression = 1
  MOV    qword [v_IsVariableExpression],1
; EndIf
_EndIf3508:
; EndIf
_EndIf3506:
; 
; 
; 
; 
; If Expr$ <> ""
  PUSH   qword [rsp+88]
  MOV    rcx,_S3
  POP    rdx
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JNE   _EndIf3516
; Command.CommandInfo\Command = #COMMAND_EvaluateExpressionWithStruct 
  LEA    rbp,[rsp+136]
  MOV    dword [rbp],34
; Command\Value1 = AsciiConst('S','C','I','N') 
  MOV    dword [rbp+8],1396918606
; Command\Value2 = ScintillaSendMessage(EditorGadget, #SCI_LINEFROMPOSITION, *scinotify\position, 0) | (CurrentSource << 24)   
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS656+32]
  MOVSXD rax,dword [rbp+24]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 2166
  PUSH   qword [rsp+PS656+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
  MOV    r15,rax
  MOV    r14,qword [v_CurrentSource]
  SAL    r14,24
  OR     r15,r14
  MOV    rax,r15
  PUSH   rax
  LEA    rbp,[rsp+144]
  POP    rax
  MOV    dword [rbp+12],eax
; Command\DataSize = (Len(Expr$)+1) * SizeOf(Character)
  SUB    rsp,8
  PUSH   qword [rsp+96]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  INC    r15
  ADD    r15,r15
  MOV    rax,r15
  PUSH   rax
  POP    rax
  MOV    dword [rbp+4],eax
; SendDebuggerCommandWithData(*DebuggerData, @Command, @Expr$)          
  SUB    rsp,8
  MOV    rax,qword [rsp+96]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+152]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [p_DebuggerData]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure8
  ADD    rsp,40
; EndIf
_EndIf3516:
; 
; EndIf
_EndIf3497:
; 
; Case #SCN_DWELLEND
  JMP   _EndSelect51
_Case319:
  MOV    r15,2017
  CMP    r15,[rsp]
  JNE   _Case320
; IsMouseDwelling = 0
  MOV    qword [v_IsMouseDwelling],0
; ScintillaSendMessage(EditorGadget, #SCI_CALLTIPCANCEL)
  SUB    rsp,8
  PUSH   qword 2201
  PUSH   qword [rsp+PS656+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage
  ADD    rsp,40
; 
; EndSelect
_Case320:
_EndSelect51:
  POP    rax
; 
; EndProcedure
_EndProcedureZero657:
  XOR    rax,rax
_EndProcedure657:
  PUSH   rax
  MOV    rcx,qword [rsp+128]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+88]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,160
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure UpdateWatchListWindowState(*Debugger.DebuggerData)
_Procedure526:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS526=64
  SUB    rsp,40
; 
; If *Debugger\ProgramState = -1
  MOV    rbp,qword [rsp+PS526+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JNE   _EndIf2584
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Add], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS526+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2680]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Remove], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS526+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2688]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Clear], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS526+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2696]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Procedure], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS526+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2704]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Variable], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS526+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2712]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; Else
  JMP   _EndIf2583
_EndIf2584:
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Add], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS526+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2680]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Remove], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS526+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2688]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Clear], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS526+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2696]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Procedure], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS526+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2704]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Variable], 0)  
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS526+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2712]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; EndIf
_EndIf2583:
; 
; EndProcedure
_EndProcedureZero527:
  XOR    rax,rax
_EndProcedure527:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure WinPipe_CheckErrors(*This.WinPipe_Communication, *Command.CommandInfo, ProcessObject)
_Procedure324:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS324=80
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; If *This\EndReceived
  MOV    rbp,qword [rsp+PS324+0]
  CMP    dword [rbp+72],0
  JE    _EndIf1123
; 
; ProcedureReturn #False
  XOR    rax,rax
  JMP   _EndProcedure325
; 
; ElseIf *This\EndTimeout <> 0 And (ElapsedMilliseconds() - *This\EndTimeout) > DebuggerTimeout/5
  JMP   _EndIf1122
_EndIf1123:
  MOV    rbp,qword [rsp+PS324+0]
  MOVSXD r15,dword [rbp+76]
  AND    r15,r15
  JE     No172
  CALL   PB_ElapsedMilliseconds
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS324+0]
  MOVSXD rax,dword [rbp+76]
  SUB    r15,rax
  MOV    r14,qword [v_DebuggerTimeout]
  MOV    rax,r14
  MOV    rcx,5
  CQO
  IDIV   rcx
  MOV    r14,rax
  CMP    r15,r14
  JLE    No172
Ok172:
  MOV    rax,1
  JMP    End172
No172:
  XOR    rax,rax
End172:
  AND    rax,rax
  JE    _EndIf1124
; *Command\Command   = #COMMAND_FatalError
  MOV    rbp,qword [rsp+PS324+8]
  MOV    dword [rbp],-1
; *Command\Value1    = #ERROR_ExeQuit
  MOV    rbp,qword [rsp+PS324+8]
  MOV    dword [rbp+8],3
; *Command\Value2    = 0
  MOV    rbp,qword [rsp+PS324+8]
  MOV    dword [rbp+12],0
; *Command\TimeStamp = Date()
  CALL   PB_Date
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS324+16]
  POP    rax
  MOV    dword [rbp+16],eax
; *This\IsFatalError = #True
  MOV    rbp,qword [rsp+PS324+0]
  MOV    dword [rbp+60],1
; ProcedureReturn #True    
  MOV    rax,1
  JMP   _EndProcedure325
; 
; ElseIf *This\EndTimeout = 0 And WaitProgram(ProcessObject, 0) 
  JMP   _EndIf1122
_EndIf1124:
  MOV    rbp,qword [rsp+PS324+0]
  MOVSXD r15,dword [rbp+76]
  AND    r15,r15
  JNE    No173
  PUSH   qword 0
  PUSH   qword [rsp+PS324+24]
  POP    rcx
  POP    rdx
  CALL   PB_WaitProgram2
  AND    rax,rax
  JE     No173
Ok173:
  MOV    rax,1
  JMP    End173
No173:
  XOR    rax,rax
End173:
  AND    rax,rax
  JE    _EndIf1125
; 
; 
; 
; 
; LockMutex(*This\StackMutex)     
  MOV    rbp,qword [rsp+PS324+0]
  PUSH   qword [rbp+80]
  POP    rcx
  CALL   qword [PB_LockMutex]
; If *This\StackCount = 0
  MOV    rbp,qword [rsp+PS324+0]
  MOVSXD r15,dword [rbp+88]
  AND    r15,r15
  JNE   _EndIf1127
; *This\EndTimeout = ElapsedMilliseconds() 
  CALL   PB_ElapsedMilliseconds
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS324+8]
  POP    rax
  MOV    dword [rbp+76],eax
; EndIf     
_EndIf1127:
; UnlockMutex(*This\StackMutex)      
  MOV    rbp,qword [rsp+PS324+0]
  PUSH   qword [rbp+80]
  POP    rcx
  CALL   qword [PB_UnlockMutex]
; ProcedureReturn #False 
  XOR    rax,rax
  JMP   _EndProcedure325
; 
; ElseIf *This\CommandReceived = 0 And ElapsedMilliseconds() - *This\CommandTimeout > DebuggerTimeout
  JMP   _EndIf1122
_EndIf1125:
  MOV    rbp,qword [rsp+PS324+0]
  MOVSXD r15,dword [rbp+64]
  AND    r15,r15
  JNE    No174
  CALL   PB_ElapsedMilliseconds
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS324+0]
  MOVSXD rax,dword [rbp+68]
  SUB    r15,rax
  CMP    r15,qword [v_DebuggerTimeout]
  JLE    No174
Ok174:
  MOV    rax,1
  JMP    End174
No174:
  XOR    rax,rax
End174:
  AND    rax,rax
  JE    _EndIf1128
; *Command\Command   = #COMMAND_FatalError
  MOV    rbp,qword [rsp+PS324+8]
  MOV    dword [rbp],-1
; *Command\Value1    = #ERROR_Timeout
  MOV    rbp,qword [rsp+PS324+8]
  MOV    dword [rbp+8],4
; *Command\Value2    = 0
  MOV    rbp,qword [rsp+PS324+8]
  MOV    dword [rbp+12],0
; *Command\TimeStamp = Date()
  CALL   PB_Date
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS324+16]
  POP    rax
  MOV    dword [rbp+16],eax
; *This\IsFatalError = #True
  MOV    rbp,qword [rsp+PS324+0]
  MOV    dword [rbp+60],1
; ProcedureReturn #True
  MOV    rax,1
  JMP   _EndProcedure325
; 
; Else
  JMP   _EndIf1122
_EndIf1128:
; ProcedureReturn #False
  XOR    rax,rax
  JMP   _EndProcedure325
; 
; EndIf
_EndIf1122:
; 
; EndProcedure
_EndProcedureZero325:
  XOR    rax,rax
_EndProcedure325:
  ADD    rsp,48
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure OpenAsmWindow(*Debugger.DebuggerData)
_Procedure38:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS38=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; CompilerIf #CompilePPC
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Asm]
  MOV    rbp,qword [rsp+PS38+0]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+840],0
  JE    _EndIf1728
; SetWindowforeGround(*Debugger\Windows[#DEBUGGER_WINDOW_Asm])
  MOV    rbp,qword [rsp+PS38+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+840]
  POP    rcx
  CALL  _Procedure106
; 
; Else
  JMP   _EndIf1727
_EndIf1728:
; 
; Window = OpenWindow(#PB_Any, AsmWindowX, AsmWindowY, AsmWindowWidth, AsmWindowHeight, Language("Debugger","AsmWindowTitle") + " - " + DebuggerTitle(*Debugger\FileName$), #PB_Window_SystemMenu|#PB_Window_SizeGadget|#PB_Window_MinimizeGadget|#PB_Window_Invisible|#PB_Window_MaximizeGadget)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 282001408
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S216
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS38+48]
  PUSH   qword [rbp+80]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure260
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [v_AsmWindowHeight]
  PUSH   qword [v_AsmWindowWidth]
  PUSH   qword [v_AsmWindowY]
  PUSH   qword [v_AsmWindowX]
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_OpenWindow2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+40],rax
; If Window
  CMP    qword [rsp+40],0
  JE    _EndIf1731
; *Debugger\Windows[#DEBUGGER_WINDOW_Asm] = Window
  PUSH   qword [rsp+40]
  MOV    rbp,qword [rsp+PS38+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+840],rax
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Panel] = PanelGadget(#PB_Any, 0, 0, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PanelGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS38+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+1000],rax
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Panel], -1, Language("Debugger","Registers"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S217
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS38+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1000]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; *Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Message] = TextGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","NoData"), #PB_Text_Center)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S218
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS38+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+1032],rax
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Asm_ScrollArea] = ScrollAreaGadget(#PB_Any, 0, 0, 0, 0, 100, 100, 5)        
  PUSH   qword 5
  PUSH   qword 100
  PUSH   qword 100
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScrollAreaGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS38+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+1024],rax
; 
; CloseGadgetList()
  CALL   PB_CloseGadgetList
; 
; 
; If *Debugger\RegisterCount 
  MOV    rbp,qword [rsp+PS38+0]
  CMP    dword [rbp+160],0
  JE    _EndIf1733
; CreateRegisterGadgets(*Debugger)
  PUSH   qword [rsp+PS38+0]
  POP    rcx
  CALL  _Procedure448
; EndIf        
_EndIf1733:
; 
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Panel], -1, Language("Debugger","Stack"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S219
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS38+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1000]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; *Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Stack] = EditorGadget(#PB_Any, 0, 0, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_EditorGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS38+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+1008],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Asm_UpdateStack] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Update"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S220
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS38+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+1016],rax
; 
; Debugger_AddShortcuts(Window) 
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure6
; 
; If EditorFontID
  CMP    qword [v_EditorFontID],0
  JE    _EndIf1735
; SetGadgetFont(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Stack], EditorFontID)        
  PUSH   qword [v_EditorFontID]
  MOV    rbp,qword [rsp+PS38+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1008]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetFont
; EndIf
_EndIf1735:
; 
; CompilerIf #CompileWindows
; SetCodePage(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Stack])
  MOV    rbp,qword [rsp+PS38+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1008]
  POP    rcx
  CALL  _Procedure136
; CompilerEndIf    
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Stack], #PB_Editor_ReadOnly, 1)
  PUSH   qword 1
  PUSH   qword 2048
  MOV    rbp,qword [rsp+PS38+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1008]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; 
; CloseGadgetList()  
  CALL   PB_CloseGadgetList
; 
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_ScrollArea], 1) 
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS38+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1024]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; If AutoStackUpdate
  CMP    qword [v_AutoStackUpdate],0
  JE    _EndIf1737
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_UpdateStack], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS38+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1016]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; EndIf
_EndIf1737:
; 
; CompilerIf #DEFAULT_CanWindowStayOnTop
; SetWindowStayOnTop(Window, DebuggerOnTop)
  PUSH   qword [v_DebuggerOnTop]
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL  _Procedure112
; CompilerEndIf      
; 
; EnsureWindowOnDesktop(Window)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure162
; If AsmWindowMaximize
  CMP    qword [v_AsmWindowMaximize],0
  JE    _EndIf1739
; ShowWindowMaximized(Window)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure100
; Else
  JMP   _EndIf1738
_EndIf1739:
; HideWindow(Window, 0)
  PUSH   qword 0
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_HideWindow
; EndIf      
_EndIf1738:
; 
; AsmWindowEvents(*Debugger, #PB_Event_SizeWindow)
  PUSH   qword 13118
  PUSH   qword [rsp+PS38+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure450
; 
; Debugger_ProcessEvents(Window, #PB_Event_ActivateWindow) 
  PUSH   qword 13104
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL  _Procedure14
; EndIf  
_EndIf1731:
; 
; EndIf
_EndIf1727:
; 
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Asm]
  MOV    rbp,qword [rsp+PS38+0]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+840],0
  JE    _EndIf1742
; 
; 
; 
; If *Debugger\ProgramState <> 0 Or *Debugger\ProgramState <> -1
  MOV    rbp,qword [rsp+PS38+0]
  MOVSXD r15,dword [rbp+112]
  AND    r15,r15
  JNE    Ok216
  MOV    rbp,qword [rsp+PS38+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JNE    Ok216
  JMP    No216
Ok216:
  MOV    rax,1
  JMP    End216
No216:
  XOR    rax,rax
End216:
  AND    rax,rax
  JE    _EndIf1744
; 
; 
; 
; If *Debugger\RegisterCount = 0
  MOV    rbp,qword [rsp+PS38+0]
  MOVSXD r15,dword [rbp+160]
  AND    r15,r15
  JNE   _EndIf1746
; Command.CommandInfo\Command = #COMMAND_GetRegisterLayout 
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],4
; Command\DataSize = 0
  MOV    dword [rbp+4],0
; SendDebuggerCommand(*Debugger, @Command)
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS38+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; EndIf
_EndIf1746:
; 
; Command.CommandInfo\Command = #COMMAND_GetRegister
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],5
; Command\DataSize = 0
  MOV    dword [rbp+4],0
; SendDebuggerCommand(*Debugger, @Command)
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS38+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Command.CommandInfo\Command = #COMMAND_GetStack
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],7
; Command\Value1 = StackIsHex
  PUSH   qword [v_StackIsHex]
  POP    rax
  MOV    dword [rbp+8],eax
; Command\DataSize = 0
  MOV    dword [rbp+4],0
; SendDebuggerCommand(*Debugger, @Command)        
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS38+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; EndIf   
_EndIf1744:
; 
; EndIf
_EndIf1742:
; 
; EndProcedure
_EndProcedureZero39:
  XOR    rax,rax
_EndProcedure39:
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure VariableGadget_Lock(Gadget)
_Procedure278:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS278=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; *VariableGadget.VariableGadget = GetGadgetData(Gadget)
  PUSH   qword [rsp+PS278+0]
  POP    rcx
  CALL   PB_GetGadgetData
  MOV    qword [rsp+40],rax
; *VariableGadget\IsLocked = #True
  MOV    rbp,qword [rsp+40]
  MOV    dword [rbp+32],1
; 
; CompilerIf #CompileWindows
; SendMessage_(GadgetID(Gadget), #WM_SETREDRAW, #False, 0)
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 11
  SUB    rsp,8
  PUSH   qword [rsp+PS278+32]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; CompilerEndIf
; 
; CompilerIf #CompileLinuxGtk2
; EndProcedure
_EndProcedureZero279:
  XOR    rax,rax
_EndProcedure279:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure LibraryViewer_Init_Log(FileName$, Message$)
_Procedure546:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PS546=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS546+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
  MOV    rdx,[rsp+PS546+8]
  LEA    rcx,[rsp+48]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; Static LastFileName$
; 
; If LastFileName$ = ""  
  PUSH   qword [so_LibraryViewer_Init_Log.v_LastFileName$]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf2609
; Log = CreateFile(#PB_Any, PureBasicPath$+#DEFAILT_LibraryViewerPlugin+"LibraryViewer.log")        
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rcx,qword [v_PureBasicPath$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S288
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_CreateFile
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+56],rax
; If Log
  CMP    qword [rsp+56],0
  JE    _EndIf2611
; WriteStringN(Log, "PureBasicDebugger - LibraryViewerPlugin - Log")
  MOV    rax,_S289
  PUSH   rax
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL   PB_WriteStringN
; WriteStringN(Log, FormatDate("Date: %mm/%dd/%yyyy - %hh:%ii:%ss", Date()))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_Date
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rax,_S290
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_FormatDate
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_WriteStringN
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf2611:
; Else
  JMP   _EndIf2608
_EndIf2609:
; Log = OpenFile(#PB_Any, PureBasicPath$+#DEFAILT_LibraryViewerPlugin+"LibraryViewer.log")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rcx,qword [v_PureBasicPath$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S288
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_OpenFile
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+56],rax
; If Log
  CMP    qword [rsp+56],0
  JE    _EndIf2614
; FileSeek(Log, Lof(Log))
  PUSH   qword [rsp+56]
  POP    rcx
  CALL   PB_Lof
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL   PB_FileSeek
; EndIf
_EndIf2614:
; EndIf
_EndIf2608:
; 
; If Log
  CMP    qword [rsp+56],0
  JE    _EndIf2616
; If FileName$ <> LastFileName$      
  PUSH   qword [rsp+40]
  MOV    rcx,qword [so_LibraryViewer_Init_Log.v_LastFileName$]
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf2618
; WriteStringN(Log, "")
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL   PB_WriteStringN
; WriteStringN(Log, "====== FILE : "+FileName$+" =======")      
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S291
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S292
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_WriteStringN
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; LastFileName$ = FileName$    
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[so_LibraryViewer_Init_Log.v_LastFileName$]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf2618:
; WriteStringN(Log, Message$)
  PUSH   qword [rsp+48]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL   PB_WriteStringN
; 
; CloseFile(Log)
  PUSH   qword [rsp+56]
  POP    rcx
  CALL   PB_CloseFile
; EndIf
_EndIf2616:
; 
; EndProcedure
_EndProcedureZero547:
  XOR    rax,rax
_EndProcedure547:
  PUSH   rax
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,72
  RET
; Procedure.s WinPipe_GetInfo(*This.WinPipe_Communication)
_Procedure314:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS314=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS314+32]
  MOV    qword [PB_StringBasePosition],rax
; If *This\IsNamedPipe
  MOV    rbp,qword [rsp+PS314+0]
  CMP    dword [rbp+40],0
  JE    _EndIf1114
; ProcedureReturn "NamedPipes;" + *This\InPipeName$ + ";" + *This\OutPipeName$
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S101
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+PS314+8]
  MOV    rcx,qword [rbp+8]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S102
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+PS314+8]
  MOV    rcx,qword [rbp+16]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure315
; Else
  JMP   _EndIf1113
_EndIf1114:
; ProcedureReturn "Pipes;" + Str(GetCurrentProcessId_()) + ";" + Str(*This\DebuggerOutPipeHandle) + ";" + Str(*This\DebuggerInPipeHandle)
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S103
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  SUB    rsp,32
  CALL   GetCurrentProcessId
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S102
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS314+24]
  PUSH   qword [rbp+52]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S102
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS314+24]
  PUSH   qword [rbp+44]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure315
; EndIf
_EndIf1113:
; EndProcedure
_EndProcedureZero315:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure315:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure GetPanelHeight(Gadget)
_Procedure116:
  MOV    qword [rsp+8],rcx
  PS116=48
  SUB    rsp,40
; 
; 
; 
; 
; 
; ProcedureReturn GetGadgetAttribute(Gadget, #PB_Panel_ItemHeight)
  PUSH   qword 2
  PUSH   qword [rsp+PS116+8]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  JMP   _EndProcedure117
; EndProcedure
_EndProcedureZero117:
  XOR    rax,rax
_EndProcedure117:
  ADD    rsp,40
  RET
; Procedure DataBreakpoint_DebuggerEvent(*Debugger.DebuggerData)
_Procedure32:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS32=128
  MOV    rax,8
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; Select *Debugger\Command\Command
  MOV    rbp,qword [rsp+PS32+0]
  MOVSXD rax,dword [rbp+52]
  PUSH   rax
; 
; Case #COMMAND_Procedures
  MOV    r15,24
  CMP    r15,[rsp]
  JNE   _Case223
; ClearGadgetItems(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Procedure])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS32+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2776]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ClearGadgetItems
  ADD    rsp,40
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Procedure], -1, Language("Debugger","AllProcedures"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S279
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS32+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2776]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Procedure], -1, Language("Debugger","NoProcedure"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S280
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS32+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2776]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; *Pointer = *Debugger\Procedures
  MOV    rbp,qword [rsp+PS32+8]
  PUSH   qword [rbp+104]
  POP    rax
  MOV    qword [rsp+48],rax
; For i = 1 To *Debugger\NbProcedures
  MOV    qword [rsp+56],1
  JMP   _ForSkipDebug2550
_For2550:
_ForSkipDebug2550:
  MOV    rbp,qword [rsp+PS32+8]
  MOVSXD rax,dword [rbp+100]
  CMP    rax,qword [rsp+56]
  JL    _Next2551
; Name$ = PeekAscii(*Pointer) + "()"
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  MOV    rcx,_S244
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; ModName$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+80]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryAsciiLength(*Pointer) + 1
  MOV    r15,qword [rsp+48]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Procedure], -1, ModuleName(Name$, ModName$))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+96]
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure68
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS32+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2776]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Next i
_NextContinue2551:
  INC    qword [rsp+56]
  JNO   _For2550
_Next2551:
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Procedure], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS32+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2776]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; 
; Case #COMMAND_DataBreakPoint    
  JMP   _EndSelect32
_Case223:
  MOV    r15,39
  CMP    r15,[rsp]
  JNE   _Case224
; *Point.DataBreakPoint = FindDataBreakpoint(*Debugger, *Debugger\Command\Value2) 
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS32+16]
  MOVSXD rax,dword [rbp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS32+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure510
  ADD    rsp,40
  MOV    qword [rsp+80],rax
; If *Point
  CMP    qword [rsp+80],0
  JE    _EndIf2553
; 
; index = -1
  MOV    qword [rsp+88],-1
; last  = CountGadgetItems(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List])-1
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS32+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  POP    rcx
  SUB    rsp,32
  CALL   PB_CountGadgetItems
  ADD    rsp,40
  MOV    r15,rax
  DEC    r15
  MOV    qword [rsp+96],r15
; For i = 0 To last
  MOV    qword [rsp+56],0
  JMP   _ForSkipDebug2554
_For2554:
_ForSkipDebug2554:
  MOV    rax,qword [rsp+96]
  CMP    rax,qword [rsp+56]
  JL    _Next2555
; If *Point = GetGadgetItemData(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List], i)
  MOV    r15,qword [rsp+80]
  SUB    rsp,8
  PUSH   qword [rsp+64]
  MOV    rbp,qword [rsp+PS32+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetItemData
  ADD    rsp,40
  CMP    r15,rax
  JNE   _EndIf2557
; index = i
  PUSH   qword [rsp+56]
  POP    rax
  MOV    qword [rsp+88],rax
; Break
  JMP   _Next2555
; EndIf
_EndIf2557:
; Next i
_NextContinue2555:
  INC    qword [rsp+56]
  JNO   _For2554
_Next2555:
; 
; Select *Debugger\Command\Value1 
  MOV    rbp,qword [rsp+PS32+8]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
; 
; Case 1 
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case225
; index = CountGadgetItems(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List])
  MOV    rbp,qword [rsp+PS32+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  POP    rcx
  SUB    rsp,32
  CALL   PB_CountGadgetItems
  ADD    rsp,32
  MOV    qword [rsp+96],rax
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List], index, *Point\ProcedureName$+Chr(10)+*Point\Condition$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rbp,qword [rsp+104]
  MOV    rcx,qword [rbp+24]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+112]
  MOV    rcx,qword [rbp+16]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+120]
  MOV    rbp,qword [rsp+PS32+48]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemData(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List], index, *Point)
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+104]
  MOV    rbp,qword [rsp+PS32+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetItemData
  ADD    rsp,32
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List], index)
  PUSH   qword [rsp+96]
  MOV    rbp,qword [rsp+PS32+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,32
; 
; Case 2 
  JMP   _EndSelect33
_Case225:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case226
; MessageRequester("PureBasic Debugger", Language("Debugger","BreakPointError")+#NewLine+*Point\Condition$, #FLAG_Warning)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 48
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S281
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rcx,_S63
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rbp,qword [rsp+120]
  MOV    rcx,qword [rbp+16]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S156
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_MessageRequester2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; DeleteDataBreakPoint(*Debugger, *Point) 
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+PS32+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure512
  ADD    rsp,32
; 
; Case 3 
  JMP   _EndSelect33
_Case226:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case227
; If index <> -1
  MOV    r15,qword [rsp+96]
  CMP    r15,-1
  JE    _EndIf2559
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List], index, PeekS(*Debugger\CommandData, *Debugger\Command\DataSize, #PB_Ascii), 2)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 2
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  MOV    rbp,qword [rsp+PS32+64]
  MOVSXD rax,dword [rbp+56]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS32+72]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+128]
  MOV    rbp,qword [rsp+PS32+56]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemColor(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List], index, #PB_Gadget_BackColor, $90FFFF, -1)
  SUB    rsp,8
  PUSH   qword -1
  PUSH   qword 9502719
  PUSH   qword 2
  PUSH   qword [rsp+128]
  MOV    rbp,qword [rsp+PS32+56]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemColor2
  ADD    rsp,48
; EndIf
_EndIf2559:
; 
; Case 4 
  JMP   _EndSelect33
_Case227:
  MOV    r15,4
  CMP    r15,[rsp]
  JNE   _Case228
; If index <> -1
  MOV    r15,qword [rsp+96]
  CMP    r15,-1
  JE    _EndIf2561
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List], index, "#False", 2)
  PUSH   qword 2
  MOV    rax,_S282
  PUSH   rax
  PUSH   qword [rsp+112]
  MOV    rbp,qword [rsp+PS32+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,32
; SetGadgetItemColor(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List], index, #PB_Gadget_BackColor, -1, -1)
  SUB    rsp,8
  PUSH   qword -1
  PUSH   qword -1
  PUSH   qword 2
  PUSH   qword [rsp+128]
  MOV    rbp,qword [rsp+PS32+56]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemColor2
  ADD    rsp,48
; EndIf          
_EndIf2561:
; 
; Case 5 
  JMP   _EndSelect33
_Case228:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case229
; 
; 
; If index <> -1
  MOV    r15,qword [rsp+96]
  CMP    r15,-1
  JE    _EndIf2563
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List], index, "#True", 2)                            
  PUSH   qword 2
  MOV    rax,_S283
  PUSH   rax
  PUSH   qword [rsp+112]
  MOV    rbp,qword [rsp+PS32+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,32
; SetGadgetItemColor(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List], index, #PB_Gadget_BackColor, $90FF90, -1)
  SUB    rsp,8
  PUSH   qword -1
  PUSH   qword 9502608
  PUSH   qword 2
  PUSH   qword [rsp+128]
  MOV    rbp,qword [rsp+PS32+56]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemColor2
  ADD    rsp,48
; EndIf                                  
_EndIf2563:
; *Point\ConditionTrue = #True            
  MOV    rbp,qword [rsp+88]
  MOV    dword [rbp+32],1
; RemoveDataBreakpoints = #True
  MOV    qword [v_RemoveDataBreakpoints],1
; 
; EndSelect
_Case229:
_EndSelect33:
  POP    rax
; EndIf
_EndIf2553:
; 
; EndSelect
_Case224:
_EndSelect32:
  POP    rax
; 
; EndProcedure
_EndProcedureZero33:
  XOR    rax,rax
_EndProcedure33:
  PUSH   rax
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+72]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,104
  POP    r15
  POP    rbp
  RET
; Procedure Network_Send(*This.Network_Communication, *Command.CommandInfo, *CommandData)
_Procedure410:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS410=64
  SUB    rsp,40
; 
; 
; 
; 
; 
; 
; If *This\Connected And *This\EndReceived = 0
  MOV    rbp,qword [rsp+PS410+0]
  CMP    dword [rbp+28],0
  JE     No197
  MOV    rbp,qword [rsp+PS410+0]
  MOVSXD r15,dword [rbp+48]
  AND    r15,r15
  JNE    No197
Ok197:
  MOV    rax,1
  JMP    End197
No197:
  XOR    rax,rax
End197:
  AND    rax,rax
  JE    _EndIf1362
; 
; If *This\EncryptStream
  MOV    rbp,qword [rsp+PS410+0]
  CMP    dword [rbp+140],0
  JE    _EndIf1364
; Network_SendCrypt(*This, *Command, *CommandData)
  PUSH   qword [rsp+PS410+16]
  PUSH   qword [rsp+PS410+16]
  PUSH   qword [rsp+PS410+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure408
; Else
  JMP   _EndIf1363
_EndIf1364:
; 
; Network_SendData(*This\Socket, *Command, SizeOf(CommandInfo))
  PUSH   qword 20
  PUSH   qword [rsp+PS410+16]
  MOV    rbp,qword [rsp+PS410+16]
  PUSH   qword [rbp+60]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   Network_SendData
; 
; If *Command\DataSize > 0 And *CommandData
  MOV    rbp,qword [rsp+PS410+8]
  MOVSXD r15,dword [rbp+4]
  AND    r15,r15
  JLE    No198
  CMP    qword [rsp+PS410+16],0
  JE     No198
Ok198:
  MOV    rax,1
  JMP    End198
No198:
  XOR    rax,rax
End198:
  AND    rax,rax
  JE    _EndIf1367
; Network_SendData(*This\Socket, *CommandData, *Command\DataSize)
  MOV    rbp,qword [rsp+PS410+8]
  MOVSXD rax,dword [rbp+4]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS410+24]
  MOV    rbp,qword [rsp+PS410+16]
  PUSH   qword [rbp+60]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   Network_SendData
; EndIf
_EndIf1367:
; 
; EndIf
_EndIf1363:
; 
; EndIf
_EndIf1362:
; 
; EndProcedure
_EndProcedureZero411:
  XOR    rax,rax
_EndProcedure411:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure.s GetDebuggerRelativeFile(*Debugger.DebuggerData, LineNumber)
_Procedure250:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PS250=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS250+32]
  MOV    qword [PB_StringBasePosition],rax
; FileName$ = GetDebuggerFile(*Debugger, LineNumber)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS250+24]
  PUSH   qword [rsp+PS250+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure248
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; If *Debugger\IncludedFiles 
  MOV    rbp,qword [rsp+PS250+0]
  CMP    qword [rbp+92],0
  JE    _EndIf727
; SourcePath$ = PeekAscii(*Debugger\IncludedFiles) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS250+40]
  PUSH   qword [rbp+92]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; FileName$ = CreateRelativePath(SourcePath$, FileName$)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure158
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf727:
; 
; If FileName$ = ""
  PUSH   qword [rsp+40]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf729
; ProcedureReturn Language("FileStuff","NewSource")
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S83
  PUSH   rax
  MOV    rax,_S82
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure251
; EndIf
_EndIf729:
; 
; ProcedureReturn FileName$
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure251
; EndProcedure
_EndProcedureZero251:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure251:
  PUSH   rax
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,64
  POP    rbp
  RET
; Procedure SetSortArrow(Gadget, Column, Direction)
_Procedure142:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PS142=64
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Protected IsThemed
; 
; 
; 
; CompilerIf #PB_Compiler_Processor = #PB_Processor_x86
; !extrn PB_Gadget_IsThemed  
p.v_Column equ rsp+PS142+8
p.v_Gadget equ rsp+PS142+0
p.v_IsThemed equ rsp+40
p.v_Direction equ rsp+PS142+16
extrn PB_Gadget_IsThemed  
; !mov rax, qword 0
mov rax, qword 0
; !mov eax, dword [PB_Gadget_IsThemed]
mov eax, dword [PB_Gadget_IsThemed]
; !mov [p.v_IsThemed], rax
mov [p.v_IsThemed], rax
; CompilerEndIf
; 
; If IsThemed
  CMP    qword [rsp+40],0
  JE    _EndIf93
; SetSortArrow_Theme(Gadget, Column, Direction)
  PUSH   qword [rsp+PS142+16]
  PUSH   qword [rsp+PS142+16]
  PUSH   qword [rsp+PS142+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure140
; Else
  JMP   _EndIf92
_EndIf93:
; SetSortArrow_NoTheme(Gadget, Column, Direction)
  PUSH   qword [rsp+PS142+16]
  PUSH   qword [rsp+PS142+16]
  PUSH   qword [rsp+PS142+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure138
; EndIf 
_EndIf92:
; EndProcedure
_EndProcedureZero143:
  XOR    rax,rax
_EndProcedure143:
  ADD    rsp,56
  RET
; Procedure CloseDebugWindow(*Debugger.DebuggerData)
_Procedure442:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS442=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; 
; HideWindow(*Debugger\Windows[#DEBUGGER_WINDOW_Debug], #True)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS442+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  POP    rcx
  POP    rdx
  CALL   PB_HideWindow
; EndProcedure
_EndProcedureZero443:
  XOR    rax,rax
_EndProcedure443:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure Debugger_ExecuteProgram(FileName$, CommandLine$, Directory$)
_Procedure432:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS432=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS432+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
  MOV    rdx,[rsp+PS432+8]
  LEA    rcx,[rsp+48]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
  MOV    rdx,[rsp+PS432+16]
  LEA    rcx,[rsp+56]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; 
; Debug "Debugger_ExecuteProgram():"
; Debug FileName$
; Debug CommandLine$
; Debug Directory$
; Debug DebuggerIseFIFO
; 
; 
; 
; LastElement(RunningDebuggers())
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  CALL   PB_LastElement
; If AddElement(RunningDebuggers()) = 0
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  CALL   PB_AddElement
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1546
; Debug " -- Debugger_ExecuteProgram() failed: AddElement()"
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure433
; EndIf
_EndIf1546:
; 
; 
; 
; RunningDebuggers()\ID = GetUniqueID()
  CALL  _Procedure164
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [t_RunningDebuggers+8]
  POP    rax
  MOV    qword [rbp+16],rax
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf #CompileWindows = 0  
; 
; RunningDebuggers()\Communication = CreatePipeCommunication()
  CALL  _Procedure328
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [t_RunningDebuggers+8]
  POP    rax
  MOV    qword [rbp+60],rax
; If RunningDebuggers()\Communication = 0
  MOV    r15,qword [rbp+60]
  AND    r15,r15
  JNE   _EndIf1548
; DeleteElement(RunningDebuggers())
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  CALL   PB_DeleteElement
; Debug " -- Debugger_ExecuteProgram() failed: CreatePipeCommunication()"
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure433
; EndIf  
_EndIf1548:
; 
; SetEnvironmentVariable("PB_DEBUGGER_Communication", RunningDebuggers()\Communication\GetInfo())
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rbp,qword [t_RunningDebuggers+8]
  MOV    rbp,qword [rbp+60]
  PUSH   rbp
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  MOV    rax,[rsp+56]
  MOV    rcx,rax
  MOV    rax,[rax]
  CALL   qword [rax]
  ADD    rsp,48
  POP    rax
  POP    rdx
  PUSH   rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S186
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetEnvironmentVariable
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetEnvironmentVariable("PB_DEBUGGER_Options", Str(#PB_Compiler_Unicode)+";"+Str(CallDebuggerOnStart)+";"+Str(CallDebuggerOnEnd)+";"+Str(#DEBUGGER_BigEndian))  
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  MOV    rcx,_S102
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [v_CallDebuggerOnStart]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S102
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [v_CallDebuggerOnEnd]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S102
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S187
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetEnvironmentVariable
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; CompilerIf #CompileWindows = 0  
; 
; RunningDebuggers()\IsNetwork = #False
  MOV    rbp,qword [t_RunningDebuggers+8]
  MOV    dword [rbp+56],0
; 
; 
; 
; 
; 
; CompilerIf #CompileWindows
; 
; 
; MutexName$ = "PureBasic_DebuggerMutex_" + Hex(Random($7FFFFFFF))
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S188
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 2147483647
  POP    rcx
  SUB    rsp,32
  CALL   PB_Random
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Hex
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+72]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; RunningDebuggers()\TerminationMutex = CreateMutex_(#Null, 1, MutexName$)
  PUSH   qword [rsp+64]
  PUSH   qword 1
  PUSH   qword 0
  POP    rcx
  POP    rdx
  POP    r8
  CALL   CreateMutexW
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [t_RunningDebuggers+8]
  POP    rax
  MOV    qword [rbp+32],rax
; If RunningDebuggers()\TerminationMutex = 0 Or GetLastError_() = #ERROR_ALREADY_EXISTS
  MOV    r15,qword [rbp+32]
  AND    r15,r15
  JE     Ok203
  CALL   GetLastError
  MOV    r15,rax
  CMP    r15,183
  JE     Ok203
  JMP    No203
Ok203:
  MOV    rax,1
  JMP    End203
No203:
  XOR    rax,rax
End203:
  AND    rax,rax
  JE    _EndIf1550
; RunningDebuggers()\Communication\Close()
  MOV    rbp,qword [t_RunningDebuggers+8]
  MOV    rbp,qword [rbp+60]
  PUSH   rbp
  SUB    rsp,8
  SUB    rsp,32
  MOV    rax,[rsp+40]
  MOV    rcx,rax
  MOV    rax,[rax]
  CALL   qword [rax+48]
  ADD    rsp,40
  ADD    rsp,8
; DeleteElement(RunningDebuggers())
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  CALL   PB_DeleteElement
; Debug " -- Debugger_ExecuteProgram() failed: CreateMutex_() (Windows termination mutex)"
; ProcedureReturn 0      
  XOR    rax,rax
  JMP   _EndProcedure433
; EndIf
_EndIf1550:
; 
; SetEnvironmentVariable("PB_DEBUGGER_KillMutex", MutexName$)
  PUSH   qword [rsp+64]
  MOV    rax,_S189
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_SetEnvironmentVariable
; CompilerEndIf
; 
; 
; 
; RunningDebuggers()\ProcessObject = RunProgram(FileName$, CommandLine$, Directory$, #PB_Program_Open)
  PUSH   qword 4
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_RunProgram3
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [t_RunningDebuggers+8]
  POP    rax
  MOV    qword [rbp+24],rax
; If RunningDebuggers()\ProcessObject = 0
  MOV    r15,qword [rbp+24]
  AND    r15,r15
  JNE   _EndIf1552
; RunningDebuggers()\Communication\Close()
  MOV    rbp,qword [t_RunningDebuggers+8]
  MOV    rbp,qword [rbp+60]
  PUSH   rbp
  SUB    rsp,8
  SUB    rsp,32
  MOV    rax,[rsp+40]
  MOV    rcx,rax
  MOV    rax,[rax]
  CALL   qword [rax+48]
  ADD    rsp,40
  ADD    rsp,8
; 
; CompilerIf #CompileWindows
; CloseHandle_(RunningDebuggers()\TerminationMutex)
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   qword [rbp+32]
  POP    rcx
  CALL   CloseHandle
; CompilerEndIf
; 
; DeleteElement(RunningDebuggers())
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  CALL   PB_DeleteElement
; Debug " -- Debugger_ExecuteProgram() failed: RunProgram()"
; ProcedureReturn 0         
  XOR    rax,rax
  JMP   _EndProcedure433
; EndIf
_EndIf1552:
; 
; 
; 
; CompilerIf #CompileWindows = 0
; 
; RemoveEnvironmentVariable("PB_DEBUGGER_Communication")
  MOV    rax,_S186
  PUSH   rax
  POP    rcx
  CALL   PB_RemoveEnvironmentVariable
; RemoveEnvironmentVariable("PB_DEBUGGER_Options")
  MOV    rax,_S187
  PUSH   rax
  POP    rcx
  CALL   PB_RemoveEnvironmentVariable
; 
; CompilerIf #CompileWindows = 0
; 
; CompilerIf #CompileWindows
; RemoveEnvironmentVariable("PB_DEBUGGER_KillMutex")
  MOV    rax,_S189
  PUSH   rax
  POP    rcx
  CALL   PB_RemoveEnvironmentVariable
; CompilerEndIf  
; 
; 
; 
; If RunningDebuggers()\Communication\Connect() = 0
  MOV    rbp,qword [t_RunningDebuggers+8]
  MOV    rbp,qword [rbp+60]
  PUSH   rbp
  SUB    rsp,8
  SUB    rsp,32
  MOV    rax,[rsp+40]
  MOV    rcx,rax
  MOV    rax,[rax]
  CALL   qword [rax+8]
  ADD    rsp,40
  ADD    rsp,8
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1554
; RunningDebuggers()\Communication\Close()  
  MOV    rbp,qword [t_RunningDebuggers+8]
  MOV    rbp,qword [rbp+60]
  PUSH   rbp
  SUB    rsp,8
  SUB    rsp,32
  MOV    rax,[rsp+40]
  MOV    rcx,rax
  MOV    rax,[rax]
  CALL   qword [rax+48]
  ADD    rsp,40
  ADD    rsp,8
; 
; 
; CompilerIf #CompileWindows
; ReleaseMutex_(RunningDebuggers()\TerminationMutex)             
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   qword [rbp+32]
  POP    rcx
  CALL   ReleaseMutex
; CompilerElse
; 
; 
; If WaitProgram(RunningDebuggers()\ProcessObject, 1500) = #False
  PUSH   qword 1500
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   qword [rbp+24]
  POP    rcx
  POP    rdx
  CALL   PB_WaitProgram2
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1556
; KillProgram(RunningDebuggers()\ProcessObject)
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   qword [rbp+24]
  POP    rcx
  CALL   PB_KillProgram
; EndIf  
_EndIf1556:
; 
; CompilerIf #CompileWindows
; CloseHandle_(RunningDebuggers()\TerminationMutex)                   
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   qword [rbp+32]
  POP    rcx
  CALL   CloseHandle
; CompilerEndIf    
; 
; DeleteElement(RunningDebuggers())
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  CALL   PB_DeleteElement
; Debug " -- Debugger_ExecuteProgram() failed: Communication\Connect()"
; ProcedureReturn 0        
  XOR    rax,rax
  JMP   _EndProcedure433
; EndIf
_EndIf1554:
; 
; RunningDebuggers()\ProgramState = -1 
  MOV    rbp,qword [t_RunningDebuggers+8]
  MOV    dword [rbp+128],-1
; RunningDebuggers()\LastProgramState = -1
  MOV    dword [rbp+132],-1
; 
; 
; 
; 
; CreateWatchlistWindow(@RunningDebuggers())  
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure58
; CreateDebugWindow(@RunningDebuggers())
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure60
; CreateDataBreakpointWindow(@RunningDebuggers())
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure62
; 
; 
; RunningDebuggers()\PurifierGlobal = 1
  MOV    rbp,qword [t_RunningDebuggers+8]
  MOV    dword [rbp+772],1
; RunningDebuggers()\PurifierLocal  = 1
  MOV    dword [rbp+776],1
; RunningDebuggers()\PurifierString = 64
  MOV    dword [rbp+780],64
; RunningDebuggers()\PurifierDynamic = 1  
  MOV    dword [rbp+784],1
; 
; 
; 
; 
; CompilerIf #LOG_DEBUGGER_COMMANDS 
; 
; 
; 
; 
; ProcedureReturn @RunningDebuggers()
  LEA    rax,[rbp+16]
  JMP   _EndProcedure433
; EndProcedure
_EndProcedureZero433:
  XOR    rax,rax
_EndProcedure433:
  PUSH   rax
  MOV    rcx,qword [rsp+72]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure DebugOutput_DebuggerEvent(*Debugger.DebuggerData)
_Procedure16:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS16=144
  MOV    rax,9
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; 
; 
; 
; If *Debugger\Command\Command = #COMMAND_ControlDebugOutput  
  MOV    rbp,qword [rsp+PS16+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,41
  JNE   _EndIf1630
; Select *Debugger\Command\Value1
  MOV    rbp,qword [rsp+PS16+0]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
; 
; Case 1 
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case137
; OpenDebugWindow(*Debugger, #True)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword [rsp+PS16+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure36
  ADD    rsp,40
; 
; Case 2 
  JMP   _EndSelect20
_Case137:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case138
; UpdateDebugOutputWindow(*Debugger) 
  SUB    rsp,8
  PUSH   qword [rsp+PS16+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure56
  ADD    rsp,40
; ClearGadgetItems(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_List])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS16+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+944]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ClearGadgetItems
  ADD    rsp,40
; 
; Case 3 
  JMP   _EndSelect20
_Case138:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case139
; If *Debugger\CommandData And *Debugger\Command\DataSize > 0
  MOV    rbp,qword [rsp+PS16+8]
  CMP    qword [rbp+72],0
  JE     No208
  MOV    rbp,qword [rsp+PS16+8]
  MOVSXD r15,dword [rbp+56]
  AND    r15,r15
  JLE    No208
Ok208:
  MOV    rax,1
  JMP    End208
No208:
  XOR    rax,rax
End208:
  AND    rax,rax
  JE    _EndIf1632
; FileName$ = PeekS(*Debugger\CommandData, *Debugger\Command\DataSize)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS16+24]
  MOVSXD rax,dword [rbp+56]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS16+32]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_PeekS2
  ADD    rsp,32
  LEA    rcx,[rsp+56]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; UpdateDebugOutputWindow(*Debugger) 
  SUB    rsp,8
  PUSH   qword [rsp+PS16+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure56
  ADD    rsp,40
; File = CreateFile(#PB_Any, FileName$)            
  SUB    rsp,8
  PUSH   qword [rsp+56]
  PUSH   qword -1
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_CreateFile
  ADD    rsp,40
  MOV    qword [rsp+56],rax
; If File
  CMP    qword [rsp+56],0
  JE    _EndIf1634
; WriteString(File, GetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_List])) 
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS16+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+944]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetText
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+72]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_WriteString
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; CloseFile(File)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL   PB_CloseFile
  ADD    rsp,40
; Else
  JMP   _EndIf1633
_EndIf1634:
; MessageRequester("PureBasic Debugger",ReplaceString(Language("Debugger","SaveError"), "%filename%", FileName$, 1), #FLAG_Error)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 16
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+96]
  MOV    rax,_S201
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S200
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ReplaceString2
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S156
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_MessageRequester2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf1633:
; EndIf          
_EndIf1632:
; 
; Case 4 
  JMP   _EndSelect20
_Case139:
  MOV    r15,4
  CMP    r15,[rsp]
  JNE   _Case140
; UpdateDebugOutputWindow(*Debugger) 
  SUB    rsp,8
  PUSH   qword [rsp+PS16+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure56
  ADD    rsp,40
; SetClipboardText(GetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_List])) 
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS16+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+944]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetText
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_SetClipboardText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; 
; Case 5 
  JMP   _EndSelect20
_Case140:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case141
; CloseDebugWindow(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS16+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure442
  ADD    rsp,40
; 
; EndSelect
_Case141:
_EndSelect20:
  POP    rax
; 
; 
; ProcedureReturn 
  JMP   _EndProcedure17
; EndIf
_EndIf1630:
; 
; 
; 
; If (*Debugger\Command\Command = #COMMAND_Expression Or *Debugger\Command\Command = #COMMAND_SetVariableResult) And *Debugger\Command\Value1 <> AsciiConst('D','E','B','G')
  MOV    rbp,qword [rsp+PS16+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,36
  JE     Ok209
  MOV    rbp,qword [rsp+PS16+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,37
  JE     Ok209
  JMP    No209
Ok209:
  MOV    rax,1
  JMP    End209
No209:
  XOR    rax,rax
End209:
  AND    rax,rax
  JE     No210
  MOV    rbp,qword [rsp+PS16+0]
  MOVSXD r15,dword [rbp+60]
  CMP    r15,1145389639
  JE     No210
Ok210:
  MOV    rax,1
  JMP    End210
No210:
  XOR    rax,rax
End210:
  AND    rax,rax
  JE    _EndIf1637
; ProcedureReturn
  JMP   _EndProcedure17
; EndIf
_EndIf1637:
; 
; If DebugOutputToErrorLog = 0 Or *Debugger\Command\Command = #COMMAND_Expression Or *Debugger\Command\Command = #COMMAND_SetVariableResult
  MOV    r15,qword [v_DebugOutputToErrorLog]
  AND    r15,r15
  JE     Ok211
  MOV    rbp,qword [rsp+PS16+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,36
  JE     Ok211
  MOV    rbp,qword [rsp+PS16+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,37
  JE     Ok211
  JMP    No211
Ok211:
  MOV    rax,1
  JMP    End211
No211:
  XOR    rax,rax
End211:
  AND    rax,rax
  JE    _EndIf1639
; 
; 
; 
; 
; If *Debugger\OutputFirstVisible
  MOV    rbp,qword [rsp+PS16+0]
  CMP    dword [rbp+780],0
  JE    _EndIf1641
; OpenDebugWindow(*Debugger, #False)
  PUSH   qword 0
  PUSH   qword [rsp+PS16+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure36
; EndIf
_EndIf1641:
; 
; If DebugTimeStamp
  CMP    qword [v_DebugTimeStamp],0
  JE    _EndIf1643
; Message$ = "[" + FormatDate(Language("Debugger","TimeStamp"), *Debugger\Command\TimeStamp) + "] "
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S209
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS16+24]
  MOVSXD rax,dword [rbp+68]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S210
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_FormatDate
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S211
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf1642
_EndIf1643:
; Message$ = ""
  MOV    rdx,_S3
  LEA    rcx,[rsp+56]
  CALL   SYS_FastAllocateStringFree4
; EndIf
_EndIf1642:
; 
; Gadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Debug_List]  
  MOV    rbp,qword [rsp+PS16+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+944]
  POP    rax
  MOV    qword [rsp+64],rax
; 
; StatusBarText(*Debugger\OutputStatusbar, 0, "") 
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS16+16]
  PUSH   qword [rbp+772]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_StatusBarText
; 
; If *Debugger\Command\Command = #COMMAND_Debug
  MOV    rbp,qword [rsp+PS16+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,5
  JNE   _EndIf1646
; If *Debugger\Command\Value1 = 5 
  MOV    rbp,qword [rsp+PS16+0]
  MOVSXD r15,dword [rbp+60]
  CMP    r15,5
  JNE   _EndIf1648
; If DebugIsHex
  CMP    qword [v_DebugIsHex],0
  JE    _EndIf1650
; Message$ + Hex(*Debugger\Command\Value2, #PB_Long)
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 5
  MOV    rbp,qword [rsp+PS16+32]
  MOVSXD rax,dword [rbp+64]
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf1649
_EndIf1650:
; Message$ + Str(*Debugger\Command\Value2)
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS16+24]
  MOVSXD rax,dword [rbp+64]
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf1649:
; 
; ElseIf *Debugger\Command\Value1 = 8 
  JMP   _EndIf1647
_EndIf1648:
  MOV    rbp,qword [rsp+PS16+0]
  MOVSXD r15,dword [rbp+60]
  CMP    r15,8
  JNE   _EndIf1652
; Message$ + PeekS(*Debugger\CommandData, *Debugger\Command\DataSize)
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS16+24]
  MOVSXD rax,dword [rbp+56]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS16+32]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_PeekS2
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; ElseIf *Debugger\Command\Value1 = 9 
  JMP   _EndIf1647
_EndIf1652:
  MOV    rbp,qword [rsp+PS16+0]
  MOVSXD r15,dword [rbp+60]
  CMP    r15,9
  JNE   _EndIf1653
; Message$ + StrF_Debug(PeekF(@*Debugger\Command\Value2))
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS16+32]
  LEA    rax,[rbp+64]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekF
  ADD    rsp,32
  MOVSS  [rsp-8],xmm0
  FLD    dword [rsp-8]
  SUB    rsp,8
  FSTP   dword [rsp]
  MOVSS  xmm0,dword [rsp]
  ADD    rsp,8
  SUB    rsp,32
  CALL  _Procedure254
  ADD    rsp,48
  POP    rax
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf1647:
_EndIf1653:
; 
; ElseIf *Debugger\Command\Command = #COMMAND_DebugDouble 
  JMP   _EndIf1645
_EndIf1646:
  MOV    rbp,qword [rsp+PS16+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,6
  JNE   _EndIf1654
; Message$ + StrD_Debug(PeekD(@*Debugger\Command\Value1))
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 25
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS16+48]
  LEA    rax,[rbp+60]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekD
  ADD    rsp,40
  MOVSD  [rsp-8],xmm0
  FLD    qword [rsp-8]
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure256
  ADD    rsp,48
  POP    rax
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; ElseIf *Debugger\Command\Command = #COMMAND_DebugQuad 
  JMP   _EndIf1645
_EndIf1654:
  MOV    rbp,qword [rsp+PS16+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,7
  JNE   _EndIf1655
; If DebugIsHex
  CMP    qword [v_DebugIsHex],0
  JE    _EndIf1657
; Message$ + Hex(PeekQ(@*Debugger\Command\Value1), #PB_Quad)
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 13
  MOV    rbp,qword [rsp+PS16+32]
  LEA    rax,[rbp+60]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf1656
_EndIf1657:
; Message$ + Str(PeekQ(@*Debugger\Command\Value1))
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS16+32]
  LEA    rax,[rbp+60]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf1656:
; 
; 
; ElseIf (*Debugger\Command\Command = #COMMAND_Expression Or *Debugger\Command\Command = #COMMAND_SetVariableResult) And *Debugger\Command\Value1 = AsciiConst('D','E','B','G')
  JMP   _EndIf1645
_EndIf1655:
  MOV    rbp,qword [rsp+PS16+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,36
  JE     Ok212
  MOV    rbp,qword [rsp+PS16+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,37
  JE     Ok212
  JMP    No212
Ok212:
  MOV    rax,1
  JMP    End212
No212:
  XOR    rax,rax
End212:
  AND    rax,rax
  JE     No213
  MOV    rbp,qword [rsp+PS16+0]
  MOVSXD r15,dword [rbp+60]
  CMP    r15,1145389639
  JNE    No213
Ok213:
  MOV    rax,1
  JMP    End213
No213:
  XOR    rax,rax
End213:
  AND    rax,rax
  JE    _EndIf1659
; If *Debugger\CommandData = 0
  MOV    rbp,qword [rsp+PS16+0]
  MOV    r15,qword [rbp+72]
  AND    r15,r15
  JNE   _EndIf1661
; ProcedureReturn
  JMP   _EndProcedure17
; EndIf  
_EndIf1661:
; 
; Select *Debugger\Command\Value2 
  MOV    rbp,qword [rsp+PS16+0]
  MOVSXD rax,dword [rbp+64]
  PUSH   rax
; 
; Case 0 
  XOR    r15,r15
  CMP    r15,[rsp]
  JNE   _Case142
; StatusBarText(*Debugger\OutputStatusbar, 0, "Error: "+PeekAscii(*Debugger\CommandData)) 
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S212
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS16+56]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS16+32]
  PUSH   qword [rbp+772]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StatusBarText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; 
; 
; 
; If GetActiveGadget() <> *Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Entry]
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_GetActiveGadget
  ADD    rsp,40
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS16+8]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+984]
  JE    _EndIf1663
; SetActiveGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Entry])  
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS16+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+984]
  POP    rcx
  SUB    rsp,32
  CALL   PB_SetActiveGadget
  ADD    rsp,40
; EndIf
_EndIf1663:
; ProcedureReturn 
  ADD    rsp,8
  JMP   _EndProcedure17
; 
; Case 1 
  JMP   _EndSelect21
_Case142:
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case143
; Expr$ = PeekS(*Debugger\CommandData)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS16+24]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,32
  LEA    rcx,[rsp+88]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Case 2 
  JMP   _EndSelect21
_Case143:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case144
; If DebugIsHex
  CMP    qword [v_DebugIsHex],0
  JE    _EndIf1665
; Message$ + Hex(PeekQ(*Debugger\CommandData), #PB_Quad)
  MOV    rcx,qword [rsp+64]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 13
  MOV    rbp,qword [rsp+PS16+48]
  PUSH   qword [rbp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf1664
_EndIf1665:
; Message$ + Str(PeekQ(*Debugger\CommandData))
  MOV    rcx,qword [rsp+64]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS16+48]
  PUSH   qword [rbp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf              
_EndIf1664:
; Expr$ = PeekS(*Debugger\CommandData + 8)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS16+24]
  MOV    r15,qword [rbp+72]
  ADD    r15,8
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,32
  LEA    rcx,[rsp+88]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Case 3 
  JMP   _EndSelect21
_Case144:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case145
; Message$ + StrD_Debug(PeekD(*Debugger\CommandData))
  MOV    rcx,qword [rsp+64]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 25
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS16+48]
  PUSH   qword [rbp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekD
  ADD    rsp,40
  MOVSD  [rsp-8],xmm0
  FLD    qword [rsp-8]
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure256
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Expr$ = PeekS(*Debugger\CommandData + 8)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS16+24]
  MOV    r15,qword [rbp+72]
  ADD    r15,8
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,32
  LEA    rcx,[rsp+88]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Case 4 
  JMP   _EndSelect21
_Case145:
  MOV    r15,4
  CMP    r15,[rsp]
  JNE   _Case146
; Message$ + PeekS(*Debugger\CommandData)
  MOV    rcx,qword [rsp+64]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS16+40]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Expr$ = PeekS(*Debugger\CommandData + Len(Message$) + 1)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS16+24]
  MOV    r15,qword [rbp+72]
  SUB    rsp,8
  PUSH   qword [rsp+88]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,32
  LEA    rcx,[rsp+88]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; If *Debugger\Command\Command = #COMMAND_SetVariableResult
  MOV    rbp,qword [rsp+PS16+8]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,37
  JNE   _EndIf1668
; Message$ = Chr(34)+Message$+Chr(34)
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S99
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+72]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S99
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf1668:
; 
; Case 5 
  JMP   _EndSelect21
_Case146:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case147
; 
; 
; 
; 
; Case 6  
  JMP   _EndSelect21
_Case147:
  MOV    r15,6
  CMP    r15,[rsp]
  JNE   _Case148
; If DebugIsHex
  CMP    qword [v_DebugIsHex],0
  JE    _EndIf1670
; Message$ + Hex(PeekL(*Debugger\CommandData), #PB_Long)
  MOV    rcx,qword [rsp+64]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 5
  MOV    rbp,qword [rsp+PS16+48]
  PUSH   qword [rbp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf1669
_EndIf1670:
; Message$ + Str(PeekL(*Debugger\CommandData))
  MOV    rcx,qword [rsp+64]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS16+48]
  PUSH   qword [rbp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf              
_EndIf1669:
; Expr$ = PeekS(*Debugger\CommandData + 4)          
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS16+24]
  MOV    r15,qword [rbp+72]
  ADD    r15,4
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,32
  LEA    rcx,[rsp+88]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Case 7 
  JMP   _EndSelect21
_Case148:
  MOV    r15,7
  CMP    r15,[rsp]
  JNE   _Case149
; Message$ + StrF_Debug(PeekF(*Debugger\CommandData))
  MOV    rcx,qword [rsp+64]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS16+32]
  PUSH   qword [rbp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekF
  ADD    rsp,32
  MOVSS  [rsp-8],xmm0
  FLD    dword [rsp-8]
  SUB    rsp,8
  FSTP   dword [rsp]
  MOVSS  xmm0,dword [rsp]
  ADD    rsp,8
  SUB    rsp,32
  CALL  _Procedure254
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Expr$ = PeekS(*Debugger\CommandData + 4)    
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS16+24]
  MOV    r15,qword [rbp+72]
  ADD    r15,4
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,32
  LEA    rcx,[rsp+88]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; 
; EndSelect
_Case149:
_EndSelect21:
  POP    rax
; 
; 
; 
; 
; Entry = *Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Entry]    
  MOV    rbp,qword [rsp+PS16+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+984]
  POP    rax
  MOV    qword [rsp+80],rax
; Count = CountGadgetItems(Entry)
  PUSH   qword [rsp+80]
  POP    rcx
  CALL   PB_CountGadgetItems
  MOV    qword [rsp+88],rax
; 
; 
; 
; For i = Count-1 To 0 Step -1
  MOV    r15,qword [rsp+88]
  DEC    r15
  MOV    qword [rsp+96],r15
  JMP   _ForSkipDebug1672
_For1672:
_ForSkipDebug1672:
  XOR    rax,rax
  CMP    rax,qword [rsp+96]
  JG    _Next1673
; If GetGadgetItemText(Entry, i) = Expr$
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_GetGadgetItemText
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,qword [rsp+80]
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf1675
; RemoveGadgetItem(Entry, i)
  PUSH   qword [rsp+96]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  CALL   PB_RemoveGadgetItem
; Count - 1
  MOV    r15,qword [rsp+88]
  DEC    r15
  MOV    qword [rsp+88],r15
; EndIf
_EndIf1675:
; Next i 
_NextContinue1673:
  DEC    qword [rsp+96]
  JNO   _For1672
_Next1673:
; 
; 
; While Count >= #MAX_EpressionHistory 
_While1676:
  MOV    r15,qword [rsp+88]
  CMP    r15,30
  JL    _Wend1676
; RemoveGadgetItem(Entry, Count-1)
  MOV    r15,qword [rsp+88]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  CALL   PB_RemoveGadgetItem
; Count - 1
  MOV    r15,qword [rsp+88]
  DEC    r15
  MOV    qword [rsp+88],r15
; Wend
  JMP   _While1676
_Wend1676:
; 
; 
; AddGadgetItem(Entry, 0, Expr$)  
  PUSH   qword [rsp+72]
  PUSH   qword 0
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddGadgetItem
; SetGadgetText(Entry, "")
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetText
; SetActiveGadget(Entry)  
  PUSH   qword [rsp+80]
  POP    rcx
  CALL   PB_SetActiveGadget
; 
; 
; 
; 
; If *Debugger\Command\Command = #COMMAND_SetVariableResult
  MOV    rbp,qword [rsp+PS16+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,37
  JNE   _EndIf1678
; StatusBarText(*Debugger\OutputStatusbar, 0, "Variable set to: "+Message$) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S213
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+80]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS16+32]
  PUSH   qword [rbp+772]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StatusBarText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; ProcedureReturn 
  JMP   _EndProcedure17
; EndIf
_EndIf1678:
; 
; EndIf  
_EndIf1645:
_EndIf1659:
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; If *Debugger\IsDebugMessage
  MOV    rbp,qword [rsp+PS16+0]
  CMP    dword [rbp+784],0
  JE    _EndIf1680
; Message$ = #LF$ + Message$
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf1680:
; 
; *Debugger\DebugMessage$ + Message$ 
  MOV    rbp,qword [rsp+PS16+0]
  MOV    rcx,qword [rbp+788]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+PS16+8]
  LEA    rcx,[rbp+788]
  POP    rdx
  CALL   SYS_AllocateString4
; *Debugger\IsDebugMessage = #True
  MOV    rbp,qword [rsp+PS16+0]
  MOV    dword [rbp+784],1
; EndIf
_EndIf1639:
; 
; EndProcedure
_EndProcedureZero17:
  XOR    rax,rax
_EndProcedure17:
  PUSH   rax
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+80]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,112
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure MemoryViewer_Hex(*Debugger.DebuggerData)
_Procedure476:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS476=144
  MOV    rax,9
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; 
; *Buffer = AllocateMemory(((*Debugger\MemoryDumpSize / 16 + 2) * 85) * #CharSize)
  MOV    rbp,qword [rsp+PS476+0]
  MOV    r15,qword [rbp+604]
  MOV    rax,r15
  MOV    rcx,16
  CQO
  IDIV   rcx
  MOV    r15,rax
  ADD    r15,2
  IMUL   r15,85
  ADD    r15,r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+40],rax
; 
; If *Buffer
  CMP    qword [rsp+40],0
  JE    _EndIf1797
; *OutPointer.Character = *Buffer
  PUSH   qword [rsp+40]
  POP    rax
  MOV    qword [rsp+48],rax
; CopyMemoryString("", @*OutPointer)
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  MOV    rax,_S3
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_CopyMemoryString2
; 
; *Pointer.BYTE = *Debugger\MemoryDump   
  MOV    rbp,qword [rsp+PS476+0]
  PUSH   qword [rbp+596]
  POP    rax
  MOV    qword [rsp+56],rax
; *BufferEnd = *Debugger\MemoryDump + *Debugger\MemoryDumpSize  
  MOV    rbp,qword [rsp+PS476+0]
  MOV    r15,qword [rbp+596]
  MOV    rbp,qword [rsp+PS476+0]
  ADD    r15,qword [rbp+604]
  MOV    qword [rsp+64],r15
; location.q = *Debugger\MemoryDumpStart     
  MOV    rbp,qword [rsp+PS476+0]
  PUSH   qword [rbp+612]
  POP    rax
  MOV    qword [rsp+72],rax
; 
; 
; While *Pointer < *BufferEnd - 15  
_While1798:
  MOV    r15,qword [rsp+56]
  MOV    r14,qword [rsp+64]
  ADD    r14,-15
  CMP    r15,r14
  JGE   _Wend1798
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS476+0]
  CMP    dword [rbp+32],0
  JE    _EndIf1800
; HexData$ = RSet(Hex(location, #PB_Quad), 16, "0") + "  "
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S84
  PUSH   rax
  PUSH   qword 16
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 13
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_RSet2
  ADD    rsp,40
  MOV    rcx,_S222
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf1799
_EndIf1800:
; HexData$ = RSet(Hex(location, #PB_Long), 8, "0") + "  "
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S84
  PUSH   rax
  PUSH   qword 8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 5
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_RSet2
  ADD    rsp,40
  MOV    rcx,_S222
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf1799:
; 
; String$ = " "
  MOV    rdx,_S25
  LEA    rcx,[rsp+88]
  CALL   SYS_FastAllocateStringFree4
; 
; For i = 0 To 15
  MOV    qword [rsp+96],0
  JMP   _ForSkipDebug1802
_For1802:
_ForSkipDebug1802:
  MOV    rax,15
  CMP    rax,qword [rsp+96]
  JL    _Next1803
; HexData$ + RSet(Hex(*Pointer\b & $FF, #PB_Byte), 2, "0") + " "
  MOV    rcx,qword [rsp+80]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S84
  PUSH   rax
  PUSH   qword 2
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  MOV    rbp,qword [rsp+120]
  MOVSX  r15,byte [rbp]
  AND    r15,255
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_RSet2
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S25
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; If *Pointer\b & $FF < 32 
  MOV    rbp,qword [rsp+56]
  MOVSX  r15,byte [rbp]
  AND    r15,255
  CMP    r15,32
  JGE   _EndIf1805
; String$ + "."
  MOV    rcx,qword [rsp+88]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S52
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+96]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf1804
_EndIf1805:
; String$ + Chr(*Pointer\b & $FF)
  MOV    rcx,qword [rsp+88]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+80]
  MOVSX  r15,byte [rbp]
  AND    r15,255
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Chr
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+96]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf1804:
; 
; *Pointer + 1          
  MOV    r15,qword [rsp+56]
  INC    r15
  MOV    qword [rsp+56],r15
; Next i
_NextContinue1803:
  INC    qword [rsp+96]
  JNO   _For1802
_Next1803:
; 
; CopyMemoryString(HexData$)
  PUSH   qword [rsp+80]
  POP    rcx
  CALL   PB_CopyMemoryString
; CopyMemoryString(String$)
  PUSH   qword [rsp+88]
  POP    rcx
  CALL   PB_CopyMemoryString
; CopyMemoryString(#NewLine)
  MOV    rax,_S63
  PUSH   rax
  POP    rcx
  CALL   PB_CopyMemoryString
; location + 16
  MOV    r15,qword [rsp+72]
  ADD    r15,16
  MOV    qword [rsp+72],r15
; Wend
  JMP   _While1798
_Wend1798:
; 
; 
; If *Pointer < *BufferEnd
  MOV    r15,qword [rsp+56]
  CMP    r15,qword [rsp+64]
  JGE   _EndIf1808
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS476+0]
  CMP    dword [rbp+32],0
  JE    _EndIf1810
; HexData$ = RSet(Hex(location, #PB_Quad), 16, "0") + "  "
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S84
  PUSH   rax
  PUSH   qword 16
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 13
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_RSet2
  ADD    rsp,40
  MOV    rcx,_S222
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf1809
_EndIf1810:
; HexData$ = RSet(Hex(location, #PB_Long), 8, "0") + "  "
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S84
  PUSH   rax
  PUSH   qword 8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 5
  PUSH   qword [rsp+136]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_RSet2
  ADD    rsp,40
  MOV    rcx,_S222
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf1809:
; 
; String$ = " "
  MOV    rdx,_S25
  LEA    rcx,[rsp+88]
  CALL   SYS_FastAllocateStringFree4
; 
; While *Pointer < *BufferEnd
_While1812:
  MOV    r15,qword [rsp+56]
  CMP    r15,qword [rsp+64]
  JGE   _Wend1812
; HexData$ + RSet(Hex(*Pointer\b & $FF, #PB_Byte), 2, "0") + " "
  MOV    rcx,qword [rsp+80]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S84
  PUSH   rax
  PUSH   qword 2
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  MOV    rbp,qword [rsp+120]
  MOVSX  r15,byte [rbp]
  AND    r15,255
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_RSet2
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S25
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; If *Pointer\b & $FF < 32 
  MOV    rbp,qword [rsp+56]
  MOVSX  r15,byte [rbp]
  AND    r15,255
  CMP    r15,32
  JGE   _EndIf1814
; String$ + "."
  MOV    rcx,qword [rsp+88]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S52
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+96]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf1813
_EndIf1814:
; String$ + Chr(*Pointer\b & $FF)
  MOV    rcx,qword [rsp+88]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+80]
  MOVSX  r15,byte [rbp]
  AND    r15,255
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Chr
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+96]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf1813:
; 
; *Pointer + 1
  MOV    r15,qword [rsp+56]
  INC    r15
  MOV    qword [rsp+56],r15
; Wend     
  JMP   _While1812
_Wend1812:
; 
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS476+0]
  CMP    dword [rbp+32],0
  JE    _EndIf1817
; HexData$ = LSet(HexData$, 66, " ")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S25
  PUSH   rax
  PUSH   qword 66
  PUSH   qword [rsp+120]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_LSet2
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf1816
_EndIf1817:
; HexData$ = LSet(HexData$, 58, " ")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S25
  PUSH   rax
  PUSH   qword 58
  PUSH   qword [rsp+120]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_LSet2
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf1816:
; 
; CopyMemoryString(HexData$)
  PUSH   qword [rsp+80]
  POP    rcx
  CALL   PB_CopyMemoryString
; CopyMemoryString(String$)
  PUSH   qword [rsp+88]
  POP    rcx
  CALL   PB_CopyMemoryString
; CopyMemoryString(#NewLine)                        
  MOV    rax,_S63
  PUSH   rax
  POP    rcx
  CALL   PB_CopyMemoryString
; EndIf
_EndIf1808:
; 
; 
; 
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Editor], PeekS(*Buffer, (*OutPointer-*Buffer)/#CharSize))    
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+88]
  SUB    r15,qword [rsp+80]
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_PeekS2
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS476+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2264]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; FreeMemory(*Buffer)  
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_FreeMemory
; 
; EndIf
_EndIf1797:
; 
; EndProcedure
_EndProcedureZero477:
  XOR    rax,rax
_EndProcedure477:
  PUSH   rax
  MOV    rcx,qword [rsp+96]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+88]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,112
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure VariableGadget_Create(Gadget, x, y, Width, Height, ExtraColumn$, DefaultSort, IndexSort)
_Procedure274:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PUSH   r15
  PS274=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS274+40]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; Static IsInitialized
; 
; If IsInitialized = 0  
  MOV    r15,qword [so_VariableGadget_Create.v_IsInitialized]
  AND    r15,r15
  JNE   _EndIf830
; VariableGadget_Icons(#TYPE_BYTE)       = VariableGadget_CatchIcon(?VariableGadget_Byte)
  MOV    rbp,ll_variablegadget_create_variablegadget_byte
  MOV    rax,rbp
  PUSH   rax
  POP    rcx
  CALL  _Procedure262
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [a_VariableGadget_Icons]
  POP    rax
  MOV    qword [rbp+8],rax
; VariableGadget_Icons(#TYPE_WORD)       = VariableGadget_CatchIcon(?VariableGadget_Word)
  MOV    rbp,ll_variablegadget_create_variablegadget_word
  MOV    rax,rbp
  PUSH   rax
  POP    rcx
  CALL  _Procedure262
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [a_VariableGadget_Icons]
  POP    rax
  MOV    qword [rbp+24],rax
; VariableGadget_Icons(#TYPE_LONG)       = VariableGadget_CatchIcon(?VariableGadget_Long)
  MOV    rbp,ll_variablegadget_create_variablegadget_long
  MOV    rax,rbp
  PUSH   rax
  POP    rcx
  CALL  _Procedure262
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [a_VariableGadget_Icons]
  POP    rax
  MOV    qword [rbp+40],rax
; VariableGadget_Icons(#TYPE_STRUCTURE)  = VariableGadget_CatchIcon(?VariableGadget_Struct)
  MOV    rbp,ll_variablegadget_create_variablegadget_struct
  MOV    rax,rbp
  PUSH   rax
  POP    rcx
  CALL  _Procedure262
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [a_VariableGadget_Icons]
  POP    rax
  MOV    qword [rbp+56],rax
; VariableGadget_Icons(#TYPE_STRING)     = VariableGadget_CatchIcon(?VariableGadget_String)
  MOV    rbp,ll_variablegadget_create_variablegadget_string
  MOV    rax,rbp
  PUSH   rax
  POP    rcx
  CALL  _Procedure262
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [a_VariableGadget_Icons]
  POP    rax
  MOV    qword [rbp+64],rax
; VariableGadget_Icons(#TYPE_FLOAT)      = VariableGadget_CatchIcon(?VariableGadget_Float)
  MOV    rbp,ll_variablegadget_create_variablegadget_float
  MOV    rax,rbp
  PUSH   rax
  POP    rcx
  CALL  _Procedure262
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [a_VariableGadget_Icons]
  POP    rax
  MOV    qword [rbp+72],rax
; VariableGadget_Icons(#TYPE_FIXEDSTRING)= VariableGadget_CatchIcon(?VariableGadget_Fixed)
  MOV    rbp,ll_variablegadget_create_variablegadget_fixed
  MOV    rax,rbp
  PUSH   rax
  POP    rcx
  CALL  _Procedure262
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [a_VariableGadget_Icons]
  POP    rax
  MOV    qword [rbp+80],rax
; VariableGadget_Icons(#TYPE_CHARACTER)  = VariableGadget_CatchIcon(?VariableGadget_Char)
  MOV    rbp,ll_variablegadget_create_variablegadget_char
  MOV    rax,rbp
  PUSH   rax
  POP    rcx
  CALL  _Procedure262
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [a_VariableGadget_Icons]
  POP    rax
  MOV    qword [rbp+88],rax
; VariableGadget_Icons(#TYPE_DOUBLE)     = VariableGadget_CatchIcon(?VariableGadget_Double)
  MOV    rbp,ll_variablegadget_create_variablegadget_double
  MOV    rax,rbp
  PUSH   rax
  POP    rcx
  CALL  _Procedure262
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [a_VariableGadget_Icons]
  POP    rax
  MOV    qword [rbp+96],rax
; VariableGadget_Icons(#TYPE_QUAD)       = VariableGadget_CatchIcon(?VariableGadget_Quad)
  MOV    rbp,ll_variablegadget_create_variablegadget_quad
  MOV    rax,rbp
  PUSH   rax
  POP    rcx
  CALL  _Procedure262
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [a_VariableGadget_Icons]
  POP    rax
  MOV    qword [rbp+104],rax
; VariableGadget_Icons(#TYPE_INTEGER)    = VariableGadget_CatchIcon(?VariableGadget_Integer)
  MOV    rbp,ll_variablegadget_create_variablegadget_integer
  MOV    rax,rbp
  PUSH   rax
  POP    rcx
  CALL  _Procedure262
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [a_VariableGadget_Icons]
  POP    rax
  MOV    qword [rbp+168],rax
; VariableGadget_Icons(#TYPE_ASCII)      = VariableGadget_CatchIcon(?VariableGadget_Ascii)
  MOV    rbp,ll_variablegadget_create_variablegadget_ascii
  MOV    rax,rbp
  PUSH   rax
  POP    rcx
  CALL  _Procedure262
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [a_VariableGadget_Icons]
  POP    rax
  MOV    qword [rbp+192],rax
; VariableGadget_Icons(#TYPE_UNICODE)    = VariableGadget_CatchIcon(?VariableGadget_Unicode)
  MOV    rbp,ll_variablegadget_create_variablegadget_unicode
  MOV    rax,rbp
  PUSH   rax
  POP    rcx
  CALL  _Procedure262
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [a_VariableGadget_Icons]
  POP    rax
  MOV    qword [rbp+200],rax
; 
; 
; VariableGadget_NodeOpen  = VariableGadget_CatchIcon(?VariableGadget_NodeOpen)
  MOV    rbp,ll_variablegadget_create_variablegadget_nodeopen
  MOV    rax,rbp
  PUSH   rax
  POP    rcx
  CALL  _Procedure262
  MOV    qword [v_VariableGadget_NodeOpen],rax
; VariableGadget_NodeClose = VariableGadget_CatchIcon(?VariableGadget_NodeClose)    
  MOV    rbp,ll_variablegadget_create_variablegadget_nodeclose
  MOV    rax,rbp
  PUSH   rax
  POP    rcx
  CALL  _Procedure262
  MOV    qword [v_VariableGadget_NodeClose],rax
; IsInitialized = 1
  MOV    qword [so_VariableGadget_Create.v_IsInitialized],1
; EndIf
_EndIf830:
; 
; If AddElement(VariableGadget_List())
  PUSH   qword [t_VariableGadget_List]
  POP    rcx
  CALL   PB_AddElement
  AND    rax,rax
  JE    _EndIf832
; 
; If ExtraColumn$ <> ""
  PUSH   qword [rsp+40]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf834
; Result = ListIconGadget(Gadget, x, y, Width, Height, StringField(ExtraColumn$, 1, Chr(10)), 100, #PB_ListIcon_GridLines|#PB_ListIcon_FullRowSelect)      
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 1073807360
  PUSH   qword 100
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S88
  PUSH   rax
  PUSH   qword 1
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS274+72]
  PUSH   qword [rsp+PS274+72]
  PUSH   qword [rsp+PS274+72]
  PUSH   qword [rsp+PS274+72]
  PUSH   qword [rsp+PS274+72]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ListIconGadget2
  ADD    rsp,72
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+48],rax
; If Gadget = #PB_Any
  MOV    r15,qword [rsp+PS274+0]
  CMP    r15,-1
  JNE   _EndIf836
; VariableGadget_List()\Gadget = Result
  PUSH   qword [rsp+48]
  MOV    rbp,qword [t_VariableGadget_List+8]
  POP    rax
  MOV    qword [rbp+16],rax
; Else
  JMP   _EndIf835
_EndIf836:
; VariableGadget_List()\Gadget = Gadget
  PUSH   qword [rsp+PS274+0]
  MOV    rbp,qword [t_VariableGadget_List+8]
  POP    rax
  MOV    qword [rbp+16],rax
; EndIf   
_EndIf835:
; 
; ExtraColumns = 1
  MOV    qword [rsp+56],1
; While StringField(ExtraColumn$, ExtraColumns+1, Chr(10)) <> ""        
_While838:
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S88
  PUSH   rax
  MOV    r15,qword [rsp+88]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S3
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _Wend838
; AddGadgetColumn(VariableGadget_List()\Gadget, ExtraColumns, StringField(ExtraColumn$, ExtraColumns+1, Chr(10)), 100)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 100
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S88
  PUSH   rax
  MOV    r15,qword [rsp+104]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+88]
  MOV    rbp,qword [t_VariableGadget_List+8]
  PUSH   qword [rbp+16]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; ExtraColumns + 1
  MOV    r15,qword [rsp+56]
  INC    r15
  MOV    qword [rsp+56],r15
; Wend      
  JMP   _While838
_Wend838:
; 
; AddGadgetColumn(VariableGadget_List()\Gadget, ExtraColumns, Language("Debugger","Name"), 200)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 200
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S91
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+88]
  MOV    rbp,qword [t_VariableGadget_List+8]
  PUSH   qword [rbp+16]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetColumn(VariableGadget_List()\Gadget, ExtraColumns+1, Language("Debugger","Value"), 800)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 800
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S92
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  MOV    r15,qword [rsp+88]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [t_VariableGadget_List+8]
  PUSH   qword [rbp+16]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; VariableGadget_List()\ExtraColumns = ExtraColumns
  PUSH   qword [rsp+56]
  POP    rax
  MOV    dword [rbp+24],eax
; Else
  JMP   _EndIf833
_EndIf834:
; Result = ListIconGadget(Gadget, x, y, Width, Height, Language("Debugger","Name"), 200, #PB_ListIcon_GridLines|#PB_ListIcon_FullRowSelect)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 1073807360
  PUSH   qword 200
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S91
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+PS274+72]
  PUSH   qword [rsp+PS274+72]
  PUSH   qword [rsp+PS274+72]
  PUSH   qword [rsp+PS274+72]
  PUSH   qword [rsp+PS274+72]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ListIconGadget2
  ADD    rsp,72
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+48],rax
; If Gadget = #PB_Any
  MOV    r15,qword [rsp+PS274+0]
  CMP    r15,-1
  JNE   _EndIf841
; VariableGadget_List()\Gadget = Result
  PUSH   qword [rsp+48]
  MOV    rbp,qword [t_VariableGadget_List+8]
  POP    rax
  MOV    qword [rbp+16],rax
; Else
  JMP   _EndIf840
_EndIf841:
; VariableGadget_List()\Gadget = Gadget
  PUSH   qword [rsp+PS274+0]
  MOV    rbp,qword [t_VariableGadget_List+8]
  POP    rax
  MOV    qword [rbp+16],rax
; EndIf      
_EndIf840:
; 
; AddGadgetColumn(VariableGadget_List()\Gadget, 1, Language("Debugger","Value"), 800)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 800
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S92
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 1
  MOV    rbp,qword [t_VariableGadget_List+8]
  PUSH   qword [rbp+16]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; VariableGadget_List()\ExtraColumns = 0
  MOV    dword [rbp+24],0
; EndIf    
_EndIf833:
; 
; VariableGadget_List()\IndexSort = IndexSort
  PUSH   qword [rsp+PS274+56]
  MOV    rbp,qword [t_VariableGadget_List+8]
  POP    rax
  MOV    dword [rbp+68],eax
; If DefaultSort
  CMP    qword [rsp+PS274+48],0
  JE    _EndIf844
; VariableGadget_List()\SortColumn = VariableGadget_List()\ExtraColumns
  MOV    rbp,qword [t_VariableGadget_List+8]
  MOVSXD rax,dword [rbp+24]
  PUSH   rax
  POP    rax
  MOV    dword [rbp+60],eax
; VariableGadget_List()\SortDirection = 1
  MOV    dword [rbp+64],1
; Else
  JMP   _EndIf843
_EndIf844:
; VariableGadget_List()\SortColumn = -1
  MOV    rbp,qword [t_VariableGadget_List+8]
  MOV    dword [rbp+60],-1
; EndIf
_EndIf843:
; 
; 
; 
; CompilerIf #CompileWindows
; Parent = GetParent_(GadgetID(VariableGadget_List()\Gadget))
  MOV    rbp,qword [t_VariableGadget_List+8]
  PUSH   qword [rbp+16]
  POP    rcx
  CALL   PB_GadgetID
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   GetParent
  MOV    qword [rsp+64],rax
; If GetProp_(Parent, "Variable_Callback") = 0 
  MOV    rax,_S89
  PUSH   rax
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  CALL   GetPropW
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf847
; SetProp_(Parent, @"Variable_Callback", SetWindowLongPtr_(Parent, #GWL_WNDPROC, @VariableGadget_ParentCallback()))
  LEA    rax,[_Procedure270]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword -4
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   SetWindowLongPtrW
  MOV    rax,rax
  PUSH   rax
  MOV    rax,_S89
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   SetPropW
; EndIf
_EndIf847:
; CompilerEndIf
; 
; 
; 
; CompilerIf #CompileMac
; 
; SetGadgetData(VariableGadget_List()\Gadget, @VariableGadget_List())
  MOV    rbp,qword [t_VariableGadget_List+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetData
; ProcedureReturn Result
  MOV    rax,qword [rsp+48]
  JMP   _EndProcedure275
; Else
  JMP   _EndIf831
_EndIf832:
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure275
; EndIf
_EndIf831:
; 
; EndProcedure
_EndProcedureZero275:
  XOR    rax,rax
_EndProcedure275:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure SetSortArrow_Theme(Gadget, Column, Direction)
_Procedure140:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS140=160
  MOV    rax,12
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; Header = SendMessage_(GadgetID(Gadget), #LVM_GETHEADER, 0, 0)
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 4127
  SUB    rsp,8
  PUSH   qword [rsp+PS140+32]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
  MOV    qword [rsp+40],rax
; 
; If Header        
  CMP    qword [rsp+40],0
  JE    _EndIf83
; Columns = SendMessage_(Header, #HDM_GETITEMCOUNT, 0, 0)    
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 4608
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
  MOV    qword [rsp+48],rax
; item.HD_ITEM\mask = #HDI_FORMAT    
  LEA    rbp,[rsp+56]
  MOV    dword [rbp],4
; 
; For i = 0 To Columns-1
  MOV    qword [rsp+120],0
  JMP   _ForSkipDebug84
_For84:
_ForSkipDebug84:
  MOV    r15,qword [rsp+48]
  DEC    r15
  CMP    r15,qword [rsp+120]
  JL    _Next85
; If Column = i
  MOV    r15,qword [rsp+PS140+8]
  CMP    r15,qword [rsp+120]
  JNE   _EndIf87
; If Direction = 1
  MOV    r15,qword [rsp+PS140+16]
  CMP    r15,1
  JNE   _EndIf89
; item\fmt = #HDF_LEFT|#HDF_STRING|#HDF_SORTUP
  LEA    rbp,[rsp+56]
  MOV    dword [rbp+28],17408
; Else
  JMP   _EndIf88
_EndIf89:
; item\fmt = #HDF_LEFT|#HDF_STRING|#HDF_SORTDOWN
  LEA    rbp,[rsp+56]
  MOV    dword [rbp+28],16896
; EndIf
_EndIf88:
; Else
  JMP   _EndIf86
_EndIf87:
; item\fmt = #HDF_LEFT|#HDF_STRING
  LEA    rbp,[rsp+56]
  MOV    dword [rbp+28],16384
; EndIf
_EndIf86:
; 
; SendMessage_(Header, #HDM_SETITEM, i, @item)
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+128]
  PUSH   qword 4620
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; Next i
_NextContinue85:
  INC    qword [rsp+120]
  JNO   _For84
_Next85:
; EndIf
_EndIf83:
; EndProcedure
_EndProcedureZero141:
  XOR    rax,rax
_EndProcedure141:
  ADD    rsp,136
  POP    r15
  POP    rbp
  RET
; Procedure FindDataBreakpoint(*Debugger.DebuggerData, ID)
_Procedure510:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS510=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; *Point.DataBreakPoint = *Debugger\FirstDataBreakPoint
  MOV    rbp,qword [rsp+PS510+0]
  PUSH   qword [rbp+140]
  POP    rax
  MOV    qword [rsp+40],rax
; 
; While *Point
_While2499:
  CMP    qword [rsp+40],0
  JE    _Wend2499
; If *Point\ID = ID
  MOV    rbp,qword [rsp+40]
  MOVSXD r15,dword [rbp+36]
  CMP    r15,qword [rsp+PS510+8]
  JNE   _EndIf2501
; ProcedureReturn *Point
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure511
; Else
  JMP   _EndIf2500
_EndIf2501:
; *Point = *Point\Next
  MOV    rbp,qword [rsp+40]
  PUSH   qword [rbp]
  POP    rax
  MOV    qword [rsp+40],rax
; EndIf
_EndIf2500:
; Wend
  JMP   _While2499
_Wend2499:
; 
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure511
; EndProcedure
_EndProcedureZero511:
  XOR    rax,rax
_EndProcedure511:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure Profiler_DrawSelect(*Debugger.DebuggerData, x1, y1, x2, y2)
_Procedure580:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PUSH   r15
  PS580=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; Profiler_CalculateViewport(*Debugger, @Area.ProfilerDrawing)
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS580+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure566
; Profiler_ClipToViewport(@x1, @y1, @Area)
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+PS580+24]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+PS580+24]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure568
; Profiler_ClipToViewport(@x2, @y2, @Area)
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+PS580+40]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+PS580+40]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure568
; 
; If x1 > x2
  MOV    r15,qword [rsp+PS580+8]
  CMP    r15,qword [rsp+PS580+24]
  JLE   _EndIf2949
; Swap x1, x2
  MOV    rax,qword [rsp+PS580+24]
  MOV    rdx,qword [rsp+PS580+8]
  MOV    qword [rsp+PS580+24],rdx
  MOV    qword [rsp+PS580+8],rax
; EndIf
_EndIf2949:
; 
; If y1 > y2
  MOV    r15,qword [rsp+PS580+16]
  CMP    r15,qword [rsp+PS580+32]
  JLE   _EndIf2951
; Swap y1, y2
  MOV    rax,qword [rsp+PS580+32]
  MOV    rdx,qword [rsp+PS580+16]
  MOV    qword [rsp+PS580+32],rdx
  MOV    qword [rsp+PS580+16],rax
; EndIf  
_EndIf2951:
; 
; If StartDrawing(ImageOutput(*Debugger\ProfilerImage))
  MOV    rbp,qword [rsp+PS580+0]
  PUSH   qword [rbp+712]
  POP    rcx
  CALL   PB_ImageOutput
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_StartDrawing
  AND    rax,rax
  JE    _EndIf2953
; DrawingMode(#PB_2DDrawing_XOr | #PB_2DDrawing_Outlined)
  PUSH   qword 6
  POP    rcx
  CALL   PB_DrawingMode
; Box(x1, y1, x2-x1+1, y2-y1+1, $FFFFFF)
  SUB    rsp,8
  PUSH   qword 16777215
  MOV    r15,qword [rsp+PS580+48]
  SUB    r15,qword [rsp+PS580+32]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+PS580+48]
  SUB    r15,qword [rsp+PS580+32]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+PS580+48]
  PUSH   qword [rsp+PS580+48]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Box2
  ADD    rsp,48
; 
; If y1 <> y2
  MOV    r15,qword [rsp+PS580+16]
  CMP    r15,qword [rsp+PS580+32]
  JE    _EndIf2955
; For x = x1 To x2 Step 5
  PUSH   qword [rsp+PS580+8]
  POP    rax
  MOV    qword [rsp+72],rax
  JMP   _ForSkipDebug2956
_For2956:
_ForSkipDebug2956:
  MOV    rax,qword [rsp+PS580+24]
  CMP    rax,qword [rsp+72]
  JL    _Next2957
; Plot(x, y1, $FFFFFF)
  PUSH   qword 16777215
  PUSH   qword [rsp+PS580+24]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_Plot2
; Plot(x, y2, $FFFFFF)
  PUSH   qword 16777215
  PUSH   qword [rsp+PS580+40]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_Plot2
; Next x
_NextContinue2957:
  ADD    qword [rsp+72],5
  JNO   _For2956
_Next2957:
; EndIf
_EndIf2955:
; 
; If x1 <> x2
  MOV    r15,qword [rsp+PS580+8]
  CMP    r15,qword [rsp+PS580+24]
  JE    _EndIf2959
; For y = y1 To y2 Step 5
  PUSH   qword [rsp+PS580+16]
  POP    rax
  MOV    qword [rsp+80],rax
  JMP   _ForSkipDebug2960
_For2960:
_ForSkipDebug2960:
  MOV    rax,qword [rsp+PS580+32]
  CMP    rax,qword [rsp+80]
  JL    _Next2961
; Plot(x1, y, $FFFFFF)
  PUSH   qword 16777215
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+PS580+24]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_Plot2
; Plot(x2, y, $FFFFFF)
  PUSH   qword 16777215
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+PS580+40]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_Plot2
; Next y
_NextContinue2961:
  ADD    qword [rsp+80],5
  JNO   _For2960
_Next2961:
; EndIf
_EndIf2959:
; 
; StopDrawing()    
  CALL   PB_StopDrawing
; EndIf
_EndIf2953:
; 
; EndProcedure
_EndProcedureZero581:
  XOR    rax,rax
_EndProcedure581:
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure MarkError(Line.l)
_Procedure670:
  MOV    qword [rsp+8],rcx
  PS670=48
  SUB    rsp,40
; SourceLineAction(Line, #ACTION_MarkError)
  PUSH   qword 1
  MOVSXD rax,dword [rsp+PS670+8]
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL  _Procedure666
; EndProcedure
_EndProcedureZero671:
  XOR    rax,rax
_EndProcedure671:
  ADD    rsp,40
  RET
; Procedure UpdateHistoryWindow(*Debugger.DebuggerData)
_Procedure508:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS508=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; SetWindowTitle(*Debugger\Windows[#DEBUGGER_WINDOW_History], Language("Debugger","HistoryWindowTitle") + " - " + GetFilePart(*Debugger\FileName$))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S261
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS508+40]
  PUSH   qword [rbp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetFilePart
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS508+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+864]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetWindowTitle
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Panel], 0, Language("Debugger","History"), 0)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S262
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS508+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2576]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Panel], 1, Language("Debugger","Statistics"), 0)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S265
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS508+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2576]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Update], Language("Debugger","Update"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S220
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS508+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2592]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Updating], Language("Debugger","Updating"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S264
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS508+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2632]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Reset], Language("Debugger","Reset"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S267
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS508+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2648]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_History_ResetAll], Language("Debugger","ResetAll"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S268
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS508+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2656]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_History_UpdateStats], Language("Debugger","Update"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S220
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS508+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2664]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; HistoryWindowEvents(*Debugger, #PB_Window_SizeGadget) 
  PUSH   qword 12845056
  PUSH   qword [rsp+PS508+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure504
; 
; EndProcedure
_EndProcedureZero509:
  XOR    rax,rax
_EndProcedure509:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure Profiler_MouseMove(*Debugger.DebuggerData, x, y, *GrabWindow)
_Procedure590:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS590=128
  MOV    rax,7
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; If Profiler_CaptureMode = 0 And GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Cross])
  MOV    r15,qword [v_Profiler_CaptureMode]
  AND    r15,r15
  JNE    No317
  MOV    rbp,qword [rsp+PS590+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3016]
  POP    rcx
  CALL   PB_GetGadgetState
  AND    rax,rax
  JE     No317
Ok317:
  MOV    rax,1
  JMP    End317
No317:
  XOR    rax,rax
End317:
  AND    rax,rax
  JE    _EndIf3018
; 
; Profiler_CalculateViewport(*Debugger, @Area.ProfilerDrawing)
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS590+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure566
; If x >= Area\x And x <= Area\x + Area\w And y >= Area\y And y <= Area\y+Area\h              
  MOV    r15,qword [rsp+PS590+8]
  LEA    rbp,[rsp+40]
  MOVSXD rax,dword [rbp]
  CMP    r15,rax
  JL     No318
  MOV    r15,qword [rsp+PS590+8]
  MOVSXD r14,dword [rbp]
  MOVSXD rax,dword [rbp+8]
  ADD    r14,rax
  CMP    r15,r14
  JG     No318
  MOV    r15,qword [rsp+PS590+16]
  MOVSXD rax,dword [rbp+4]
  CMP    r15,rax
  JL     No318
  MOV    r15,qword [rsp+PS590+16]
  MOVSXD r14,dword [rbp+4]
  MOVSXD rax,dword [rbp+12]
  ADD    r14,rax
  CMP    r15,r14
  JG     No318
Ok318:
  MOV    rax,1
  JMP    End318
No318:
  XOR    rax,rax
End318:
  AND    rax,rax
  JE    _EndIf3020
; Profiler_GrabMouse(*GrabWindow)
  PUSH   qword [rsp+PS590+24]
  POP    rcx
  CALL   SetCapture
; Profiler_CaptureMode = 3
  MOV    qword [v_Profiler_CaptureMode],3
; Profiler_DrawCross(*Debugger, x, y)
  PUSH   qword [rsp+PS590+16]
  PUSH   qword [rsp+PS590+16]
  PUSH   qword [rsp+PS590+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure582
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Image], ImageID(*Debugger\ProfilerImage))
  MOV    rbp,qword [rsp+PS590+0]
  PUSH   qword [rbp+712]
  POP    rcx
  CALL   PB_ImageID
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS590+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2952]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; EndIf
_EndIf3020:
; 
; ElseIf Profiler_CaptureMode = 3 
  JMP   _EndIf3017
_EndIf3018:
  MOV    r15,qword [v_Profiler_CaptureMode]
  CMP    r15,3
  JNE   _EndIf3021
; Profiler_DrawCross(*Debugger, Profiler_OldX, Profiler_OldY) 
  PUSH   qword [v_Profiler_OldY]
  PUSH   qword [v_Profiler_OldX]
  PUSH   qword [rsp+PS590+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure582
; Profiler_CalculateViewport(*Debugger, @Area.ProfilerDrawing)
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS590+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure566
; 
; If x >= Area\x And x <= Area\x + Area\w And y >= Area\y And y <= Area\y+Area\h 
  MOV    r15,qword [rsp+PS590+8]
  LEA    rbp,[rsp+40]
  MOVSXD rax,dword [rbp]
  CMP    r15,rax
  JL     No319
  MOV    r15,qword [rsp+PS590+8]
  MOVSXD r14,dword [rbp]
  MOVSXD rax,dword [rbp+8]
  ADD    r14,rax
  CMP    r15,r14
  JG     No319
  MOV    r15,qword [rsp+PS590+16]
  MOVSXD rax,dword [rbp+4]
  CMP    r15,rax
  JL     No319
  MOV    r15,qword [rsp+PS590+16]
  MOVSXD r14,dword [rbp+4]
  MOVSXD rax,dword [rbp+12]
  ADD    r14,rax
  CMP    r15,r14
  JG     No319
Ok319:
  MOV    rax,1
  JMP    End319
No319:
  XOR    rax,rax
End319:
  AND    rax,rax
  JE    _EndIf3023
; Profiler_DrawCross(*Debugger, x, y)
  PUSH   qword [rsp+PS590+16]
  PUSH   qword [rsp+PS590+16]
  PUSH   qword [rsp+PS590+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure582
; Else
  JMP   _EndIf3022
_EndIf3023:
; 
; Profiler_ReleaseMouse()
  CALL   ReleaseCapture
; Profiler_CaptureMode = 0
  MOV    qword [v_Profiler_CaptureMode],0
; EndIf
_EndIf3022:
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Image], ImageID(*Debugger\ProfilerImage))
  MOV    rbp,qword [rsp+PS590+0]
  PUSH   qword [rbp+712]
  POP    rcx
  CALL   PB_ImageID
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS590+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2952]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; 
; ElseIf Profiler_CaptureMode = 1 
  JMP   _EndIf3017
_EndIf3021:
  MOV    r15,qword [v_Profiler_CaptureMode]
  CMP    r15,1
  JNE   _EndIf3025
; countStart = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX]) - (x - Profiler_OldX) / *Debugger\ProfilerRatioX           
  MOV    rbp,qword [rsp+PS590+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    r15,rax
  MOV    r14,qword [rsp+PS590+8]
  SUB    r14,qword [v_Profiler_OldX]
  MOV    rbp,qword [rsp+PS590+0]
  MOV    [rsp-8],r14
  FILD   qword [rsp-8]
  FDIV   qword [rbp+724]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FXCH
  FSUBP  st1,st0
  FADD   qword [D1]
  FISTP  qword [rsp+72]
; maxStart   = GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], #PB_ScrollBar_Maximum) - GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], #PB_ScrollBar_PageLength)
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS590+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  MOV    r15,rax
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS590+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  SUB    r15,rax
  MOV    qword [rsp+80],r15
; 
; If maxStart > 0
  MOV    r15,qword [rsp+80]
  AND    r15,r15
  JLE   _EndIf3027
; If countStart < 0
  MOV    r15,qword [rsp+72]
  AND    r15,r15
  JGE   _EndIf3029
; countStart = 0
  MOV    qword [rsp+72],0
; ElseIf countStart > maxStart
  JMP   _EndIf3028
_EndIf3029:
  MOV    r15,qword [rsp+72]
  CMP    r15,qword [rsp+80]
  JLE   _EndIf3030
; countStart = maxStart
  PUSH   qword [rsp+80]
  POP    rax
  MOV    qword [rsp+72],rax
; EndIf
_EndIf3028:
_EndIf3030:
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], countStart)
  PUSH   qword [rsp+72]
  MOV    rbp,qword [rsp+PS590+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; EndIf
_EndIf3027:
; 
; lineStart  = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY]) - (y - Profiler_OldY) / *Debugger\ProfilerRatioY          
  MOV    rbp,qword [rsp+PS590+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    r15,rax
  MOV    r14,qword [rsp+PS590+16]
  SUB    r14,qword [v_Profiler_OldY]
  MOV    rbp,qword [rsp+PS590+0]
  MOV    [rsp-8],r14
  FILD   qword [rsp-8]
  FDIV   qword [rbp+732]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FXCH
  FSUBP  st1,st0
  FADD   qword [D1]
  FISTP  qword [rsp+88]
; maxStart   = GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], #PB_ScrollBar_Maximum) - GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], #PB_ScrollBar_PageLength)
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS590+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  MOV    r15,rax
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS590+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  SUB    r15,rax
  MOV    qword [rsp+80],r15
; 
; If maxStart > 0
  MOV    r15,qword [rsp+80]
  AND    r15,r15
  JLE   _EndIf3032
; If lineStart < 0
  MOV    r15,qword [rsp+88]
  AND    r15,r15
  JGE   _EndIf3034
; lineStart = 0
  MOV    qword [rsp+88],0
; ElseIf lineStart > maxStart
  JMP   _EndIf3033
_EndIf3034:
  MOV    r15,qword [rsp+88]
  CMP    r15,qword [rsp+80]
  JLE   _EndIf3035
; lineStart = maxStart
  PUSH   qword [rsp+80]
  POP    rax
  MOV    qword [rsp+88],rax
; EndIf          
_EndIf3033:
_EndIf3035:
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], lineStart)
  PUSH   qword [rsp+88]
  MOV    rbp,qword [rsp+PS590+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; EndIf
_EndIf3032:
; 
; Profiler_DrawAll(*Debugger)
  PUSH   qword [rsp+PS590+0]
  POP    rcx
  CALL  _Procedure576
; 
; ElseIf Profiler_CaptureMode = 2 
  JMP   _EndIf3017
_EndIf3025:
  MOV    r15,qword [v_Profiler_CaptureMode]
  CMP    r15,2
  JNE   _EndIf3036
; If Profiler_OldX <> x Or Profiler_OldY <> y
  MOV    r15,qword [v_Profiler_OldX]
  CMP    r15,qword [rsp+PS590+8]
  JNE    Ok320
  MOV    r15,qword [v_Profiler_OldY]
  CMP    r15,qword [rsp+PS590+16]
  JNE    Ok320
  JMP    No320
Ok320:
  MOV    rax,1
  JMP    End320
No320:
  XOR    rax,rax
End320:
  AND    rax,rax
  JE    _EndIf3038
; Profiler_DrawSelect(*Debugger, Profiler_DownX, Profiler_DownY, Profiler_OldX, Profiler_OldY) 
  SUB    rsp,8
  PUSH   qword [v_Profiler_OldY]
  PUSH   qword [v_Profiler_OldX]
  PUSH   qword [v_Profiler_DownY]
  PUSH   qword [v_Profiler_DownX]
  PUSH   qword [rsp+PS590+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure580
  ADD    rsp,48
; Profiler_DrawSelect(*Debugger, Profiler_DownX, Profiler_DownY, x, y)   
  SUB    rsp,8
  PUSH   qword [rsp+PS590+24]
  PUSH   qword [rsp+PS590+24]
  PUSH   qword [v_Profiler_DownY]
  PUSH   qword [v_Profiler_DownX]
  PUSH   qword [rsp+PS590+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure580
  ADD    rsp,48
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Image], ImageID(*Debugger\ProfilerImage))
  MOV    rbp,qword [rsp+PS590+0]
  PUSH   qword [rbp+712]
  POP    rcx
  CALL   PB_ImageID
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS590+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2952]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; EndIf
_EndIf3038:
; 
; EndIf
_EndIf3017:
_EndIf3036:
; 
; Profiler_OldX = x
  PUSH   qword [rsp+PS590+8]
  POP    rax
  MOV    qword [v_Profiler_OldX],rax
; Profiler_OldY = y  
  PUSH   qword [rsp+PS590+16]
  POP    rax
  MOV    qword [v_Profiler_OldY],rax
; EndProcedure
_EndProcedureZero591:
  XOR    rax,rax
_EndProcedure591:
  ADD    rsp,96
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure Debugger_UpdateWindowPreferences()
_Procedure624:
  PUSH   rbp
  PUSH   r15
  PS624=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; ForEach RunningDebuggers()
  MOV    rcx,qword [t_RunningDebuggers]
  CALL   PB_ResetList
_ForEach3284:
  MOV    rcx,qword [t_RunningDebuggers]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next3284
; 
; If RunningDebuggers()\Windows[#DEBUGGER_WINDOW_Debug]
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+848],0
  JE    _EndIf3286
; UpdateDebugWindow(@RunningDebuggers())
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure444
; EndIf
_EndIf3286:
; 
; If RunningDebuggers()\Windows[#DEBUGGER_WINDOW_Asm]
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+856],0
  JE    _EndIf3288
; UpdateAsmWindow(@RunningDebuggers())
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure454
; EndIf
_EndIf3288:
; 
; If RunningDebuggers()\Windows[#DEBUGGER_WINDOW_Memory]
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+864],0
  JE    _EndIf3290
; UpdateMemoryViewerWindow(@RunningDebuggers())
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure488
; EndIf
_EndIf3290:
; 
; If RunningDebuggers()\Windows[#DEBUGGER_WINDOW_Variable]
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+872],0
  JE    _EndIf3292
; UpdateVariableWindow(@RunningDebuggers())
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure502
; EndIf
_EndIf3292:
; 
; If RunningDebuggers()\Windows[#DEBUGGER_WINDOW_History]
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+880],0
  JE    _EndIf3294
; UpdateHistoryWindow(@RunningDebuggers())
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure508
; EndIf
_EndIf3294:
; 
; If RunningDebuggers()\Windows[#DEBUGGER_WINDOW_Library]
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+896],0
  JE    _EndIf3296
; UpdateLibraryViewer(@RunningDebuggers())
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure564
; EndIf
_EndIf3296:
; 
; If RunningDebuggers()\Windows[#DEBUGGER_WINDOW_Profiler]
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+904],0
  JE    _EndIf3298
; UpdateProfilerWindow(@RunningDebuggers())
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure604
; EndIf
_EndIf3298:
; 
; If RunningDebuggers()\Windows[#DEBUGGER_WINDOW_Purifier]
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+920],0
  JE    _EndIf3300
; UpdatePurifierWindow(@RunningDebuggers())
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure622
; EndIf
_EndIf3300:
; 
; UpdateWatchListWindow(@RunningDebuggers()) 
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure528
; UpdateDataBreakpointWindow(@RunningDebuggers()) 
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure520
; 
; 
; 
; CompilerIf #DEFAULT_CanWindowStayOnTop
; For i = 0 To #DEBUGGER_WINDOW_LAST-1
  MOV    qword [rsp+40],0
  JMP   _ForSkipDebug3301
_For3301:
_ForSkipDebug3301:
  MOV    rax,10
  CMP    rax,qword [rsp+40]
  JL    _Next3302
; If RunningDebuggers()\Windows[i] <> 0        
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  MOV    r15,qword [rbp+840]
  AND    r15,r15
  JE    _EndIf3304
; SetWindowStayOnTop(RunningDebuggers()\Windows[i], DebuggerOnTop)
  PUSH   qword [v_DebuggerOnTop]
  MOV    rbp,qword [t_RunningDebuggers+8]
  PUSH   rbp
  MOV    rax,qword [rsp+56]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+840]
  POP    rcx
  POP    rdx
  CALL  _Procedure112
; EndIf
_EndIf3304:
; Next i
_NextContinue3302:
  INC    qword [rsp+40]
  JNO   _For3301
_Next3302:
; CompilerEndIf     
; 
; Next RunningDebuggers()
  JMP   _ForEach3284
_Next3284:
; 
; EndProcedure
_EndProcedureZero625:
  XOR    rax,rax
_EndProcedure625:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure Max(a, b)
_Procedure86:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   r15
  PS86=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; If a > b
  MOV    r15,qword [rsp+PS86+0]
  CMP    r15,qword [rsp+PS86+8]
  JLE   _EndIf21
; ProcedureReturn a
  MOV    rax,qword [rsp+PS86+0]
  JMP   _EndProcedure87
; Else
  JMP   _EndIf20
_EndIf21:
; ProcedureReturn b
  MOV    rax,qword [rsp+PS86+8]
  JMP   _EndProcedure87
; EndIf
_EndIf20:
; EndProcedure
_EndProcedureZero87:
  XOR    rax,rax
_EndProcedure87:
  ADD    rsp,48
  POP    r15
  RET
; Procedure VariableWindowSort(*Debugger.DebuggerData, Gadget)
_Procedure490:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS490=176
  MOV    rax,14
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; Select Gadget
  PUSH   qword [rsp+PS490+8]
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ArrayInfo]
  MOV    rbp,qword [rsp+PS490+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2376]
  CMP    r15,[rsp]
  JNE   _Case172
; Column    = *Debugger\ArraySortColumn 
  MOV    rbp,qword [rsp+PS490+8]
  MOVSX  rax,byte [rbp+148]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+48],rax
; Direction = *Debugger\ArraySortDirection
  MOV    rbp,qword [rsp+PS490+8]
  MOVSX  rax,byte [rbp+149]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+56],rax
; Type      = 0 
  MOV    qword [rsp+64],0
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalArrayInfo]
  JMP   _EndSelect25
_Case172:
  MOV    rbp,qword [rsp+PS490+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2384]
  CMP    r15,[rsp]
  JNE   _Case173
; Column    = *Debugger\LocalArraySortColumn 
  MOV    rbp,qword [rsp+PS490+8]
  MOVSX  rax,byte [rbp+150]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+48],rax
; Direction = *Debugger\LocalArraySortDirection    
  MOV    rbp,qword [rsp+PS490+8]
  MOVSX  rax,byte [rbp+151]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+56],rax
; Type      = 0 
  MOV    qword [rsp+64],0
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListInfo]
  JMP   _EndSelect25
_Case173:
  MOV    rbp,qword [rsp+PS490+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2408]
  CMP    r15,[rsp]
  JNE   _Case174
; Column    = *Debugger\ListSortColumn 
  MOV    rbp,qword [rsp+PS490+8]
  MOVSX  rax,byte [rbp+152]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+48],rax
; Direction = *Debugger\ListSortDirection          
  MOV    rbp,qword [rsp+PS490+8]
  MOVSX  rax,byte [rbp+153]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+56],rax
; If Column > 1
  MOV    r15,qword [rsp+48]
  CMP    r15,1
  JLE   _EndIf2003
; Type    = 1 
  MOV    qword [rsp+64],1
; Else
  JMP   _EndIf2002
_EndIf2003:
; Type    = 0 
  MOV    qword [rsp+64],0
; EndIf
_EndIf2002:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalListInfo]
  JMP   _EndSelect25
_Case174:
  MOV    rbp,qword [rsp+PS490+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2416]
  CMP    r15,[rsp]
  JNE   _Case175
; Column    = *Debugger\LocalListSortColumn 
  MOV    rbp,qword [rsp+PS490+8]
  MOVSX  rax,byte [rbp+154]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+48],rax
; Direction = *Debugger\LocalListSortDirection    
  MOV    rbp,qword [rsp+PS490+8]
  MOVSX  rax,byte [rbp+155]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+56],rax
; If Column > 1
  MOV    r15,qword [rsp+48]
  CMP    r15,1
  JLE   _EndIf2006
; Type    = 1 
  MOV    qword [rsp+64],1
; Else
  JMP   _EndIf2005
_EndIf2006:
; Type    = 0 
  MOV    qword [rsp+64],0
; EndIf    
_EndIf2005:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapInfo]
  JMP   _EndSelect25
_Case175:
  MOV    rbp,qword [rsp+PS490+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2440]
  CMP    r15,[rsp]
  JNE   _Case176
; Column    = *Debugger\MapSortColumn 
  MOV    rbp,qword [rsp+PS490+8]
  MOVSX  rax,byte [rbp+156]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+48],rax
; Direction = *Debugger\MapSortDirection          
  MOV    rbp,qword [rsp+PS490+8]
  MOVSX  rax,byte [rbp+157]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+56],rax
; If Column > 1
  MOV    r15,qword [rsp+48]
  CMP    r15,1
  JLE   _EndIf2009
; Type    = 1 
  MOV    qword [rsp+64],1
; Else
  JMP   _EndIf2008
_EndIf2009:
; Type    = 0 
  MOV    qword [rsp+64],0
; EndIf
_EndIf2008:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalMapInfo]
  JMP   _EndSelect25
_Case176:
  MOV    rbp,qword [rsp+PS490+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2448]
  CMP    r15,[rsp]
  JNE   _Case177
; Column    = *Debugger\LocalMapSortColumn 
  MOV    rbp,qword [rsp+PS490+8]
  MOVSX  rax,byte [rbp+158]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+48],rax
; Direction = *Debugger\LocalMapSortDirection    
  MOV    rbp,qword [rsp+PS490+8]
  MOVSX  rax,byte [rbp+159]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+56],rax
; If Column > 1
  MOV    r15,qword [rsp+48]
  CMP    r15,1
  JLE   _EndIf2012
; Type    = 1 
  MOV    qword [rsp+64],1
; Else
  JMP   _EndIf2011
_EndIf2012:
; Type    = 0 
  MOV    qword [rsp+64],0
; EndIf   
_EndIf2011:
; 
; Default
  JMP   _EndSelect25
_Case177:
; ProcedureReturn 
  ADD    rsp,8
  JMP   _EndProcedure491
; 
; EndSelect
_Case178:
_EndSelect25:
  POP    rax
; 
; Count = CountGadgetItems(Gadget)
  PUSH   qword [rsp+PS490+8]
  POP    rcx
  CALL   PB_CountGadgetItems
  MOV    qword [rsp+64],rax
; 
; If Column = -1 Or Count = 0
  MOV    r15,qword [rsp+40]
  CMP    r15,-1
  JE     Ok235
  MOV    r15,qword [rsp+64]
  AND    r15,r15
  JE     Ok235
  JMP    No235
Ok235:
  MOV    rax,1
  JMP    End235
No235:
  XOR    rax,rax
End235:
  AND    rax,rax
  JE    _EndIf2015
; CompilerIf #CompileWindows  
; SetSortArrow(Gadget, Column, Direction) 
  PUSH   qword [rsp+48]
  PUSH   qword [rsp+48]
  PUSH   qword [rsp+PS490+24]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure142
; CompilerEndIf
; 
; ProcedureReturn
  JMP   _EndProcedure491
; EndIf
_EndIf2015:
; 
; SortData.Variable_SortData
  LEA    rax,[rsp+72]
; SortData\Type = Type  
  PUSH   qword [rsp+56]
  LEA    rbp,[rsp+80]
  POP    rax
  MOV    dword [rbp],eax
; SortData\Direction = Direction
  PUSH   qword [rsp+48]
  POP    rax
  MOV    dword [rbp+4],eax
; 
; If Type = 0 
  MOV    r15,qword [rsp+56]
  AND    r15,r15
  JNE   _EndIf2017
; Protected Dim StringSort$(Count) 
  MOV    rax,qword [rsp+64]
  INC    rax
  SUB    rsp,24
  MOV    rdx,rax
  LEA    rax,[rsp+112]
  PUSH   rax
  MOV    r9,s_s
  MOV    r8,8
  MOV    rcx,8
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [rsp+88],rax
; 
; For i = 0 To Count-1   
  MOV    qword [rsp+104],0
  JMP   _ForSkipDebug2018
_For2018:
_ForSkipDebug2018:
  MOV    r15,qword [rsp+64]
  DEC    r15
  CMP    r15,qword [rsp+104]
  JL    _Next2019
; index = GetGadgetItemData(Gadget, i)   
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+PS490+16]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemData
  MOV    qword [rsp+112],rax
; StringSort$(index) = GetGadgetItemText(Gadget, i, Column) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+PS490+48]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_GetGadgetItemText2
  ADD    rsp,40
  MOV    r15,qword [rsp+120]
  MOV    rbp,qword [rsp+96]
  SAL    r15,3
  LEA    rcx,[rbp+r15]
  POP    rdx
  CALL   SYS_AllocateString4
; If Left(StringSort$(index), 1) = "*"
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  MOV    r15,qword [rsp+144]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S100
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf2021
; 
; StringSort$(index) = Right(StringSort$(index), Len(StringSort$(index))-1)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    r15,qword [rsp+144]
  MOV    rbp,qword [rsp+120]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+144]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,40
  MOV    r15,qword [rsp+120]
  SAL    r15,3
  LEA    rcx,[rbp+r15]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf      
_EndIf2021:
; Next i
_NextContinue2019:
  INC    qword [rsp+104]
  JNO   _For2018
_Next2019:
; 
; SortData\Values = @StringSort$()
  PUSH   qword [rsp+88]
  LEA    rbp,[rsp+80]
  POP    rax
  MOV    qword [rbp+8],rax
; 
; Else 
  JMP   _EndIf2016
_EndIf2017:
; Protected Dim IntegerSort.q(Count)
  MOV    rax,qword [rsp+64]
  INC    rax
  SUB    rsp,24
  MOV    rdx,rax
  LEA    rax,[rsp+144]
  PUSH   rax
  XOR    r9,r9
  MOV    r8,13
  MOV    rcx,8
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [rsp+120],rax
; 
; For i = 0 To Count-1
  MOV    qword [rsp+104],0
  JMP   _ForSkipDebug2023
_For2023:
_ForSkipDebug2023:
  MOV    r15,qword [rsp+64]
  DEC    r15
  CMP    r15,qword [rsp+104]
  JL    _Next2024
; String$ = GetGadgetItemText(Gadget, i, Column)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+136]
  PUSH   qword [rsp+PS490+48]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_GetGadgetItemText2
  ADD    rsp,40
  LEA    rcx,[rsp+144]
  POP    rdx
  CALL   SYS_AllocateString4
; If String$ = "-"        
  PUSH   qword [rsp+136]
  MOV    rcx,_S38
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf2026
; IntegerSort(GetGadgetItemData(Gadget, i)) = -1
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+PS490+16]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemData
  MOV    r15,rax
  MOV    rbp,qword [rsp+120]
  SAL    r15,3
  MOV    qword [rbp+r15],-1
; Else
  JMP   _EndIf2025
_EndIf2026:
; IntegerSort(GetGadgetItemData(Gadget, i)) = Val(String$)
  PUSH   qword [rsp+136]
  POP    rcx
  CALL   PB_Val
  MOV    rax,rax
  PUSH   rax
  SUB    rsp,8
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+PS490+32]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetItemData
  ADD    rsp,40
  MOV    r15,rax
  MOV    rbp,qword [rsp+128]
  SAL    r15,3
  POP    rax
  MOV    qword [rbp+r15],rax
; EndIf
_EndIf2025:
; Next i   
_NextContinue2024:
  INC    qword [rsp+104]
  JNO   _For2023
_Next2024:
; 
; SortData\Values = @IntegerSort()
  PUSH   qword [rsp+120]
  LEA    rbp,[rsp+80]
  POP    rax
  MOV    qword [rbp+8],rax
; 
; EndIf
_EndIf2016:
; 
; CompilerIf #CompileWindows
; SendMessage_(GadgetID(Gadget), #LVM_SORTITEMS, @SortData, @Variable_SortProc())   
  LEA    rax,[_Procedure492]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 4144
  SUB    rsp,8
  PUSH   qword [rsp+PS490+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; SetSortArrow(Gadget, Column, Direction) 
  PUSH   qword [rsp+48]
  PUSH   qword [rsp+48]
  PUSH   qword [rsp+PS490+24]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure142
; CompilerEndIf  
; 
; EndProcedure
_EndProcedureZero491:
  XOR    rax,rax
_EndProcedure491:
  PUSH   rax
  MOV    rcx,qword [rsp+144]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+96]
  SUB    rsp,40
  CALL   SYS_FreeArray
  ADD    rsp,40
  MOV    rcx,qword [rsp+128]
  SUB    rsp,40
  CALL   SYS_FreeArray
  ADD    rsp,40
  POP    rax
  ADD    rsp,152
  POP    r15
  POP    rbp
  RET
; Procedure Frame3DTopOffset(Gadget)
_Procedure94:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS94=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; CompilerIf #CompileWindows
; Text$ = GetGadgetText(Gadget)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS94+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetText
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; DC = GetDC_(GadgetID(Gadget))
  PUSH   qword [rsp+PS94+0]
  POP    rcx
  CALL   PB_GadgetID
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   GetDC
  MOV    qword [rsp+48],rax
; oldFont = SelectObject_(DC, GetGadgetFont(Gadget)) 
  PUSH   qword [rsp+PS94+0]
  POP    rcx
  CALL   PB_GetGadgetFont
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL   SelectObject
  MOV    qword [rsp+56],rax
; GetTextExtentPoint32_(DC, Text$, Len(Text$), @Size.SIZE)
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   GetTextExtentPoint32W
; SelectObject_(DC, oldFont)
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL   SelectObject
; ReleaseDC_(GadgetID(Gadget), DC)    
  PUSH   qword [rsp+48]
  SUB    rsp,8
  PUSH   qword [rsp+PS94+16]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   ReleaseDC
; ProcedureReturn Max(Size\cy, 10)
  PUSH   qword 10
  LEA    rbp,[rsp+72]
  MOVSXD rax,dword [rbp+4]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  JMP   _EndProcedure95
; CompilerEndIf
; 
; CompilerIf #CompileLinux
; 
; CompilerIf #CompileMac
; EndProcedure
_EndProcedureZero95:
  XOR    rax,rax
_EndProcedure95:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,80
  POP    rbp
  RET
; Procedure EnsureWindowOnDesktop(Window)
_Procedure162:
  MOV    qword [rsp+8],rcx
  PUSH   r15
  PUSH   r14
  PS162=160
  MOV    rax,12
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; If GetWindowState(Window) <> #PB_Window_Normal
  PUSH   qword [rsp+PS162+0]
  POP    rcx
  CALL   PB_GetWindowState
  MOV    r15,rax
  AND    r15,r15
  JE    _EndIf151
; ProcedureReturn
  JMP   _EndProcedure163
; EndIf
_EndIf151:
; 
; Debug "EnsureWindowOnDesktop()"
; Debug "before: "+Str(WindowX(Window))+", "+Str(WindowY(Window))+", "+Str(WindowWidth(Window))+", "+Str(WindowHeight(Window))
; 
; 
; l = WindowX(Window)
  PUSH   qword [rsp+PS162+0]
  POP    rcx
  CALL   PB_WindowX
  MOV    qword [rsp+40],rax
; t = WindowY(Window)
  PUSH   qword [rsp+PS162+0]
  POP    rcx
  CALL   PB_WindowY
  MOV    qword [rsp+48],rax
; r = l + WindowWidth(Window)
  MOV    r15,qword [rsp+40]
  PUSH   qword [rsp+PS162+0]
  POP    rcx
  CALL   PB_WindowWidth
  ADD    r15,rax
  MOV    qword [rsp+56],r15
; b = t + #DesktopMargin 
  MOV    r15,qword [rsp+48]
  ADD    r15,50
  MOV    qword [rsp+64],r15
; 
; 
; monitor = -1
  MOV    qword [rsp+72],-1
; mode    = 0
  MOV    qword [rsp+80],0
; 
; Count = ExamineDesktops()
  CALL   PB_ExamineDesktops
  MOV    qword [rsp+88],rax
; 
; For i = 0 To Count-1
  MOV    qword [rsp+96],0
  JMP   _ForSkipDebug152
_For152:
_ForSkipDebug152:
  MOV    r15,qword [rsp+88]
  DEC    r15
  CMP    r15,qword [rsp+96]
  JL    _Next153
; dl = DesktopX(i)
  PUSH   qword [rsp+96]
  POP    rcx
  CALL   PB_DesktopX
  MOV    qword [rsp+104],rax
; dt = DesktopY(i)
  PUSH   qword [rsp+96]
  POP    rcx
  CALL   PB_DesktopY
  MOV    qword [rsp+112],rax
; dr = dl + DesktopWidth(i)
  MOV    r15,qword [rsp+104]
  PUSH   qword [rsp+96]
  POP    rcx
  CALL   PB_DesktopWidth
  ADD    r15,rax
  MOV    qword [rsp+120],r15
; db = dt + DesktopHeight(i)
  MOV    r15,qword [rsp+112]
  PUSH   qword [rsp+96]
  POP    rcx
  CALL   PB_DesktopHeight
  ADD    r15,rax
  MOV    qword [rsp+128],r15
; 
; 
; 
; If r > dl+#DesktopMargin And l < dr-#DesktopMargin And b > dt+#DesktopMargin And t < db-#DesktopMargin
  MOV    r15,qword [rsp+56]
  MOV    r14,qword [rsp+104]
  ADD    r14,50
  CMP    r15,r14
  JLE    No3
  MOV    r15,qword [rsp+40]
  MOV    r14,qword [rsp+120]
  ADD    r14,-50
  CMP    r15,r14
  JGE    No3
  MOV    r15,qword [rsp+64]
  MOV    r14,qword [rsp+112]
  ADD    r14,50
  CMP    r15,r14
  JLE    No3
  MOV    r15,qword [rsp+48]
  MOV    r14,qword [rsp+128]
  ADD    r14,-50
  CMP    r15,r14
  JGE    No3
Ok3:
  MOV    rax,1
  JMP    End3
No3:
  XOR    rax,rax
End3:
  AND    rax,rax
  JE    _EndIf155
; Debug "--> on desktop: " + Str(i)
; ProcedureReturn
  JMP   _EndProcedure163
; 
; 
; 
; ElseIf l < dr And l > dl 
  JMP   _EndIf154
_EndIf155:
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+120]
  JGE    No4
  MOV    r15,qword [rsp+40]
  CMP    r15,qword [rsp+104]
  JLE    No4
Ok4:
  MOV    rax,1
  JMP    End4
No4:
  XOR    rax,rax
End4:
  AND    rax,rax
  JE    _EndIf156
; If t < db And t > dt 
  MOV    r15,qword [rsp+48]
  CMP    r15,qword [rsp+128]
  JGE    No5
  MOV    r15,qword [rsp+48]
  CMP    r15,qword [rsp+112]
  JLE    No5
Ok5:
  MOV    rax,1
  JMP    End5
No5:
  XOR    rax,rax
End5:
  AND    rax,rax
  JE    _EndIf158
; monitor = i
  PUSH   qword [rsp+96]
  POP    rax
  MOV    qword [rsp+72],rax
; mode    = 1
  MOV    qword [rsp+80],1
; ElseIf b > dt And b < db 
  JMP   _EndIf157
_EndIf158:
  MOV    r15,qword [rsp+64]
  CMP    r15,qword [rsp+112]
  JLE    No6
  MOV    r15,qword [rsp+64]
  CMP    r15,qword [rsp+128]
  JGE    No6
Ok6:
  MOV    rax,1
  JMP    End6
No6:
  XOR    rax,rax
End6:
  AND    rax,rax
  JE    _EndIf159
; monitor = i
  PUSH   qword [rsp+96]
  POP    rax
  MOV    qword [rsp+72],rax
; mode    = 2
  MOV    qword [rsp+80],2
; EndIf
_EndIf157:
_EndIf159:
; 
; ElseIf r > dl And r < dr 
  JMP   _EndIf154
_EndIf156:
  MOV    r15,qword [rsp+56]
  CMP    r15,qword [rsp+104]
  JLE    No7
  MOV    r15,qword [rsp+56]
  CMP    r15,qword [rsp+120]
  JGE    No7
Ok7:
  MOV    rax,1
  JMP    End7
No7:
  XOR    rax,rax
End7:
  AND    rax,rax
  JE    _EndIf160
; If t < db And t > dt 
  MOV    r15,qword [rsp+48]
  CMP    r15,qword [rsp+128]
  JGE    No8
  MOV    r15,qword [rsp+48]
  CMP    r15,qword [rsp+112]
  JLE    No8
Ok8:
  MOV    rax,1
  JMP    End8
No8:
  XOR    rax,rax
End8:
  AND    rax,rax
  JE    _EndIf162
; monitor = i
  PUSH   qword [rsp+96]
  POP    rax
  MOV    qword [rsp+72],rax
; mode    = 3
  MOV    qword [rsp+80],3
; ElseIf b > dt And b < db 
  JMP   _EndIf161
_EndIf162:
  MOV    r15,qword [rsp+64]
  CMP    r15,qword [rsp+112]
  JLE    No9
  MOV    r15,qword [rsp+64]
  CMP    r15,qword [rsp+128]
  JGE    No9
Ok9:
  MOV    rax,1
  JMP    End9
No9:
  XOR    rax,rax
End9:
  AND    rax,rax
  JE    _EndIf163
; monitor = i
  PUSH   qword [rsp+96]
  POP    rax
  MOV    qword [rsp+72],rax
; mode    = 4
  MOV    qword [rsp+80],4
; EndIf
_EndIf161:
_EndIf163:
; 
; EndIf
_EndIf154:
_EndIf160:
; 
; Next i
_NextContinue153:
  INC    qword [rsp+96]
  JNO   _For152
_Next153:
; 
; 
; 
; If monitor = -1 
  MOV    r15,qword [rsp+72]
  CMP    r15,-1
  JNE   _EndIf165
; Debug "--> totally off!"
; ResizeWindow(Window, 100, 100, #PB_Ignore, #PB_Ignore)
  SUB    rsp,8
  PUSH   qword -65535
  PUSH   qword -65535
  PUSH   qword 100
  PUSH   qword 100
  PUSH   qword [rsp+PS162+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeWindow
  ADD    rsp,48
; 
; Else
  JMP   _EndIf164
_EndIf165:
; dl = DesktopX(monitor)
  PUSH   qword [rsp+72]
  POP    rcx
  CALL   PB_DesktopX
  MOV    qword [rsp+104],rax
; dt = DesktopY(monitor)
  PUSH   qword [rsp+72]
  POP    rcx
  CALL   PB_DesktopY
  MOV    qword [rsp+112],rax
; dr = dl + DesktopWidth(monitor)
  MOV    r15,qword [rsp+104]
  PUSH   qword [rsp+72]
  POP    rcx
  CALL   PB_DesktopWidth
  ADD    r15,rax
  MOV    qword [rsp+120],r15
; db = dt + DesktopHeight(monitor)
  MOV    r15,qword [rsp+112]
  PUSH   qword [rsp+72]
  POP    rcx
  CALL   PB_DesktopHeight
  ADD    r15,rax
  MOV    qword [rsp+128],r15
; 
; If mode = 1 
  MOV    r15,qword [rsp+80]
  CMP    r15,1
  JNE   _EndIf168
; If t > db-#DesktopMargin: t = db-#DesktopMargin: EndIf
  MOV    r15,qword [rsp+48]
  MOV    r14,qword [rsp+128]
  ADD    r14,-50
  CMP    r15,r14
  JLE   _EndIf170
  MOV    r15,qword [rsp+128]
  ADD    r15,-50
  MOV    qword [rsp+48],r15
_EndIf170:
; If l > dr-#DesktopMargin: l = dr-#DesktopMargin: EndIf
  MOV    r15,qword [rsp+40]
  MOV    r14,qword [rsp+120]
  ADD    r14,-50
  CMP    r15,r14
  JLE   _EndIf172
  MOV    r15,qword [rsp+120]
  ADD    r15,-50
  MOV    qword [rsp+40],r15
_EndIf172:
; 
; ElseIf mode = 2 
  JMP   _EndIf167
_EndIf168:
  MOV    r15,qword [rsp+80]
  CMP    r15,2
  JNE   _EndIf173
; If b < dt+#DesktopMargin: b = dt+#DesktopMargin: EndIf
  MOV    r15,qword [rsp+64]
  MOV    r14,qword [rsp+112]
  ADD    r14,50
  CMP    r15,r14
  JGE   _EndIf175
  MOV    r15,qword [rsp+112]
  ADD    r15,50
  MOV    qword [rsp+64],r15
_EndIf175:
; If l > dr-#DesktopMargin: l = dr-#DesktopMargin: EndIf
  MOV    r15,qword [rsp+40]
  MOV    r14,qword [rsp+120]
  ADD    r14,-50
  CMP    r15,r14
  JLE   _EndIf177
  MOV    r15,qword [rsp+120]
  ADD    r15,-50
  MOV    qword [rsp+40],r15
_EndIf177:
; t = b - #DesktopMargin
  MOV    r15,qword [rsp+64]
  ADD    r15,-50
  MOV    qword [rsp+48],r15
; 
; ElseIf mode = 3 
  JMP   _EndIf167
_EndIf173:
  MOV    r15,qword [rsp+80]
  CMP    r15,3
  JNE   _EndIf178
; If t > db-#DesktopMargin: t = db-#DesktopMargin: EndIf
  MOV    r15,qword [rsp+48]
  MOV    r14,qword [rsp+128]
  ADD    r14,-50
  CMP    r15,r14
  JLE   _EndIf180
  MOV    r15,qword [rsp+128]
  ADD    r15,-50
  MOV    qword [rsp+48],r15
_EndIf180:
; If r < dl+#DesktopMargin: r = dl+#DesktopMargin: EndIf
  MOV    r15,qword [rsp+56]
  MOV    r14,qword [rsp+104]
  ADD    r14,50
  CMP    r15,r14
  JGE   _EndIf182
  MOV    r15,qword [rsp+104]
  ADD    r15,50
  MOV    qword [rsp+56],r15
_EndIf182:
; l = r - WindowWidth(Window)
  MOV    r15,qword [rsp+56]
  PUSH   qword [rsp+PS162+0]
  POP    rcx
  CALL   PB_WindowWidth
  SUB    r15,rax
  MOV    qword [rsp+40],r15
; 
; Else 
  JMP   _EndIf167
_EndIf178:
; If b < dt+#DesktopMargin: b = dt+#DesktopMargin: EndIf
  MOV    r15,qword [rsp+64]
  MOV    r14,qword [rsp+112]
  ADD    r14,50
  CMP    r15,r14
  JGE   _EndIf185
  MOV    r15,qword [rsp+112]
  ADD    r15,50
  MOV    qword [rsp+64],r15
_EndIf185:
; If r < dl+#DesktopMargin: r = dl+#DesktopMargin: EndIf      
  MOV    r15,qword [rsp+56]
  MOV    r14,qword [rsp+104]
  ADD    r14,50
  CMP    r15,r14
  JGE   _EndIf187
  MOV    r15,qword [rsp+104]
  ADD    r15,50
  MOV    qword [rsp+56],r15
_EndIf187:
; t = b - #DesktopMargin
  MOV    r15,qword [rsp+64]
  ADD    r15,-50
  MOV    qword [rsp+48],r15
; l = r - WindowWidth(Window)
  MOV    r15,qword [rsp+56]
  PUSH   qword [rsp+PS162+0]
  POP    rcx
  CALL   PB_WindowWidth
  SUB    r15,rax
  MOV    qword [rsp+40],r15
; 
; EndIf
_EndIf167:
; 
; ResizeWindow(Window, l, t, #PB_Ignore, #PB_Ignore)
  SUB    rsp,8
  PUSH   qword -65535
  PUSH   qword -65535
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+PS162+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeWindow
  ADD    rsp,48
; EndIf
_EndIf164:
; 
; Debug "after : "+Str(WindowX(Window))+", "+Str(WindowY(Window))+", "+Str(WindowWidth(Window))+", "+Str(WindowHeight(Window))
; 
; EndProcedure
_EndProcedureZero163:
  XOR    rax,rax
_EndProcedure163:
  ADD    rsp,136
  POP    r14
  POP    r15
  RET
; Procedure Debugger_CheckDestroy(*Debugger.DebuggerData)
_Procedure426:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS426=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; 
; 
; If IsDebuggerValid(*Debugger) = 0
  PUSH   qword [rsp+PS426+0]
  POP    rcx
  CALL  _Procedure424
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1404
; ProcedureReturn
  JMP   _EndProcedure427
; EndIf
_EndIf1404:
; 
; 
; 
; If *Debugger\CanDestroy = 0
  MOV    rbp,qword [rsp+PS426+0]
  MOVSXD r15,dword [rbp+124]
  AND    r15,r15
  JNE   _EndIf1406
; ProcedureReturn
  JMP   _EndProcedure427
; EndIf
_EndIf1406:
; 
; 
; 
; For i = 0 To #DEBUGGER_WINDOW_LAST-1
  MOV    qword [rsp+40],0
  JMP   _ForSkipDebug1407
_For1407:
_ForSkipDebug1407:
  MOV    rax,10
  CMP    rax,qword [rsp+40]
  JL    _Next1408
; If i = #DEBUGGER_WINDOW_Debug  
  MOV    r15,qword [rsp+40]
  CMP    r15,1
  JNE   _EndIf1410
; If *Debugger\Windows[i] And *Debugger\IsDebugOutputVisible
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  CMP    qword [rbp+824],0
  JE     No200
  MOV    rbp,qword [rsp+PS426+0]
  CMP    dword [rbp+128],0
  JE     No200
Ok200:
  MOV    rax,1
  JMP    End200
No200:
  XOR    rax,rax
End200:
  AND    rax,rax
  JE    _EndIf1412
; ProcedureReturn
  JMP   _EndProcedure427
; EndIf
_EndIf1412:
; 
; ElseIf i = #DEBUGGER_WINDOW_WatchList 
  JMP   _EndIf1409
_EndIf1410:
  MOV    r15,qword [rsp+40]
  CMP    r15,6
  JNE   _EndIf1413
; If *Debugger\IsWatchListVisible
  MOV    rbp,qword [rsp+PS426+0]
  CMP    dword [rbp+132],0
  JE    _EndIf1415
; ProcedureReturn
  JMP   _EndProcedure427
; EndIf
_EndIf1415:
; 
; ElseIf i = #DEBUGGER_WINDOW_DataBreakpoints
  JMP   _EndIf1409
_EndIf1413:
  MOV    r15,qword [rsp+40]
  CMP    r15,9
  JNE   _EndIf1416
; If *Debugger\DataBreakpointsVisible
  MOV    rbp,qword [rsp+PS426+0]
  CMP    dword [rbp+136],0
  JE    _EndIf1418
; ProcedureReturn
  JMP   _EndProcedure427
; EndIf
_EndIf1418:
; 
; ElseIf *Debugger\Windows[i] 
  JMP   _EndIf1409
_EndIf1416:
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  CMP    qword [rbp+824],0
  JE    _EndIf1419
; ProcedureReturn
  JMP   _EndProcedure427
; EndIf
_EndIf1409:
_EndIf1419:
; Next i
_NextContinue1408:
  INC    qword [rsp+40]
  JNO   _For1407
_Next1408:
; 
; 
; 
; 
; If IsWindow(*Debugger\Windows[#DEBUGGER_WINDOW_Debug])
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  POP    rcx
  CALL   PB_IsWindow
  AND    rax,rax
  JE    _EndIf1421
; CloseWindow(*Debugger\Windows[#DEBUGGER_WINDOW_Debug])
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  POP    rcx
  CALL   PB_CloseWindow
; EndIf
_EndIf1421:
; 
; If IsWindow(*Debugger\Windows[#DEBUGGER_WINDOW_WatchList])
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+872]
  POP    rcx
  CALL   PB_IsWindow
  AND    rax,rax
  JE    _EndIf1423
; VariableGadget_Free(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_List])
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2672]
  POP    rcx
  CALL  _Procedure276
; CloseWindow(*Debugger\Windows[#DEBUGGER_WINDOW_WatchList])
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+872]
  POP    rcx
  CALL   PB_CloseWindow
; EndIf
_EndIf1423:
; 
; If IsWindow(*Debugger\Windows[#DEBUGGER_WINDOW_DataBreakpoints])
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  POP    rcx
  CALL   PB_IsWindow
  AND    rax,rax
  JE    _EndIf1425
; CloseWindow(*Debugger\Windows[#DEBUGGER_WINDOW_DataBreakpoints])
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  POP    rcx
  CALL   PB_CloseWindow
; EndIf
_EndIf1425:
; 
; 
; 
; If *Debugger\IncludedFiles
  MOV    rbp,qword [rsp+PS426+0]
  CMP    qword [rbp+92],0
  JE    _EndIf1427
; FreeMemory(*Debugger\IncludedFiles)
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   qword [rbp+92]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf 
_EndIf1427:
; 
; If *Debugger\Procedures
  MOV    rbp,qword [rsp+PS426+0]
  CMP    qword [rbp+104],0
  JE    _EndIf1429
; FreeMemory(*Debugger\Procedures)
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   qword [rbp+104]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf1429:
; 
; If *Debugger\MemoryDump
  MOV    rbp,qword [rsp+PS426+0]
  CMP    qword [rbp+596],0
  JE    _EndIf1431
; FreeMemory(*Debugger\MemoryDump)
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   qword [rbp+596]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf  
_EndIf1431:
; 
; 
; 
; If *Debugger\ProfilerFiles
  MOV    rbp,qword [rsp+PS426+0]
  CMP    qword [rbp+696],0
  JE    _EndIf1433
; *Files.Debugger_ProfilerList = *Debugger\ProfilerFiles
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   qword [rbp+696]
  POP    rax
  MOV    qword [rsp+48],rax
; 
; 
; 
; For i = 0 To *Debugger\NbIncludedFiles
  MOV    qword [rsp+40],0
  JMP   _ForSkipDebug1434
_For1434:
_ForSkipDebug1434:
  MOV    rbp,qword [rsp+PS426+0]
  MOVSXD rax,dword [rbp+88]
  CMP    rax,qword [rsp+40]
  JL    _Next1435
; If *Files\file[i]\ColorImage
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  CMP    qword [rbp+12],0
  JE    _EndIf1437
; FreeImage(*Files\file[i]\ColorImage)
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+12]
  POP    rcx
  CALL   PB_FreeImage
; EndIf
_EndIf1437:
; Next i
_NextContinue1435:
  INC    qword [rsp+40]
  JNO   _For1434
_Next1435:
; 
; FreeMemory(*Debugger\ProfilerFiles)
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   qword [rbp+696]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf1433:
; 
; 
; If *Debugger\History
  MOV    rbp,qword [rsp+PS426+0]
  CMP    qword [rbp+624],0
  JE    _EndIf1439
; *history.Debugger_History = *Debugger\History
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   qword [rbp+624]
  POP    rax
  MOV    qword [rsp+56],rax
; For i = 0 To *Debugger\HistorySize - 1
  MOV    qword [rsp+40],0
  JMP   _ForSkipDebug1440
_For1440:
_ForSkipDebug1440:
  MOV    rbp,qword [rsp+PS426+0]
  MOVSXD r15,dword [rbp+620]
  DEC    r15
  CMP    r15,qword [rsp+40]
  JL    _Next1441
; VariableGadget_Free(*history\item[i]\Variables)
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+40]
  POP    rcx
  CALL  _Procedure276
; Next i
_NextContinue1441:
  INC    qword [rsp+40]
  JNO   _For1440
_Next1441:
; FreeMemory(*Debugger\History)
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   qword [rbp+624]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf1439:
; 
; If *Debugger\LibraryList
  MOV    rbp,qword [rsp+PS426+0]
  CMP    qword [rbp+636],0
  JE    _EndIf1443
; *libraries.Debugger_LibraryList = *Debugger\LibraryList
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   qword [rbp+636]
  POP    rax
  MOV    qword [rsp+64],rax
; For i = 0 To *Debugger\NbLibraries - 1
  MOV    qword [rsp+40],0
  JMP   _ForSkipDebug1444
_For1444:
_ForSkipDebug1444:
  MOV    rbp,qword [rsp+PS426+0]
  MOVSXD r15,dword [rbp+632]
  DEC    r15
  CMP    r15,qword [rsp+40]
  JL    _Next1445
; FreePBString(@*libraries\library[i]\LibraryID$)
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  MOV    rax,qword [rbp]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure74
; FreePBString(@*libraries\library[i]\Name$)
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  MOV    rax,qword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure74
; FreePBString(@*libraries\library[i]\TitleString$)
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  MOV    rax,qword [rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure74
; Next i
_NextContinue1445:
  INC    qword [rsp+40]
  JNO   _For1444
_Next1445:
; FreeMemory(*Debugger\LibraryList)
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   qword [rbp+636]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf1443:
; 
; If *Debugger\ObjectList
  MOV    rbp,qword [rsp+PS426+0]
  CMP    qword [rbp+652],0
  JE    _EndIf1447
; FreeMemory(*Debugger\ObjectList)
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   qword [rbp+652]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf1447:
; 
; 
; 
; If *Debugger\Communication
  MOV    rbp,qword [rsp+PS426+0]
  CMP    qword [rbp+44],0
  JE    _EndIf1449
; *Debugger\Communication\Disconnect()
  MOV    rbp,qword [rsp+PS426+0]
  MOV    rbp,qword [rbp+44]
  PUSH   rbp
  SUB    rsp,8
  SUB    rsp,32
  MOV    rax,[rsp+40]
  MOV    rcx,rax
  MOV    rax,[rax]
  CALL   qword [rax+16]
  ADD    rsp,40
  ADD    rsp,8
; EndIf
_EndIf1449:
; 
; 
; If *Debugger\ProcessObject
  MOV    rbp,qword [rsp+PS426+0]
  CMP    qword [rbp+8],0
  JE    _EndIf1451
; CloseProgram(*Debugger\ProcessObject)
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   qword [rbp+8]
  POP    rcx
  CALL   PB_CloseProgram
; *Debugger\ProcessObject = 0
  MOV    rbp,qword [rsp+PS426+0]
  MOV    qword [rbp+8],0
; EndIf
_EndIf1451:
; 
; 
; 
; If *Debugger\Communication
  MOV    rbp,qword [rsp+PS426+0]
  CMP    qword [rbp+44],0
  JE    _EndIf1453
; *Debugger\Communication\Close()
  MOV    rbp,qword [rsp+PS426+0]
  MOV    rbp,qword [rbp+44]
  PUSH   rbp
  SUB    rsp,8
  SUB    rsp,32
  MOV    rax,[rsp+40]
  MOV    rcx,rax
  MOV    rax,[rax]
  CALL   qword [rax+48]
  ADD    rsp,40
  ADD    rsp,8
; *Debugger\Communication = 0
  MOV    rbp,qword [rsp+PS426+0]
  MOV    qword [rbp+44],0
; EndIf  
_EndIf1453:
; 
; CompilerIf #CompileWindows
; If *Debugger\TerminationMutex
  MOV    rbp,qword [rsp+PS426+0]
  CMP    qword [rbp+16],0
  JE    _EndIf1455
; CloseHandle_(*Debugger\TerminationMutex)
  MOV    rbp,qword [rsp+PS426+0]
  PUSH   qword [rbp+16]
  POP    rcx
  CALL   CloseHandle
; *Debugger\TerminationMutex = 0
  MOV    rbp,qword [rsp+PS426+0]
  MOV    qword [rbp+16],0
; EndIf
_EndIf1455:
; CompilerEndIf
; 
; 
; 
; ChangeCurrentElement(RunningDebuggers(), *Debugger)
  PUSH   qword [rsp+PS426+0]
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  POP    rdx
  CALL   PB_ChangeCurrentElement
; DeleteElement(RunningDebuggers())
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  CALL   PB_DeleteElement
; 
; EndProcedure
_EndProcedureZero427:
  XOR    rax,rax
_EndProcedure427:
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure.s GetDebuggerFile(*Debugger.DebuggerData, LineNumber)
_Procedure248:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS248=128
  MOV    rax,7
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
  MOV    rax,[rsp+PS248+32]
  MOV    qword [PB_StringBasePosition],rax
; 
; FileNumber = (LineNumber >> 24) & $FF 
  MOV    r15,qword [rsp+PS248+8]
  SAR    r15,24
  AND    r15,255
  MOV    qword [rsp+40],r15
; If FileNumber > *Debugger\NbIncludedFiles
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [rsp+PS248+0]
  MOVSXD rax,dword [rbp+88]
  CMP    r15,rax
  JLE   _EndIf708
; ProcedureReturn ""
  MOV    rcx,_S3
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure249
; ElseIf FileNumber = 0
  JMP   _EndIf707
_EndIf708:
  MOV    r15,qword [rsp+40]
  AND    r15,r15
  JNE   _EndIf709
; ProcedureReturn *Debugger\FileName$    
  MOV    rbp,qword [rsp+PS248+0]
  MOV    rcx,qword [rbp+80]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure249
; Else    
  JMP   _EndIf707
_EndIf709:
; *Pointer = *Debugger\IncludedFiles 
  MOV    rbp,qword [rsp+PS248+0]
  PUSH   qword [rbp+92]
  POP    rax
  MOV    qword [rsp+48],rax
; For i = 0 To FileNumber 
  MOV    qword [rsp+56],0
  JMP   _ForSkipDebug711
_For711:
_ForSkipDebug711:
  MOV    rax,qword [rsp+40]
  CMP    rax,qword [rsp+56]
  JL    _Next712
; *Pointer + MemoryAsciiLength(*Pointer) + 1
  MOV    r15,qword [rsp+48]
  PUSH   qword 24
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL   PB_MemoryStringLength2
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; Next i
_NextContinue712:
  INC    qword [rsp+56]
  JNO   _For711
_Next712:
; 
; FileName$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  LEA    rcx,[rsp+72]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; 
; 
; *Cursor.Character = @FileName$  
  MOV    rax,qword [rsp+64]
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    qword [rsp+72],rax
; While *Cursor\c
_While713:
  MOV    rbp,qword [rsp+72]
  CMP    word [rbp],0
  JE    _Wend713
; 
; If *Cursor\c = Asc(#Separator)
  MOV    rbp,qword [rsp+72]
  MOVZX  r15,word [rbp]
  MOV    rax,_S4
  PUSH   rax
  POP    rcx
  CALL   PB_Asc
  CMP    r15,rax
  JNE   _EndIf715
; If PeekS(*Cursor, 4) = #Separator + ".." + #Separator
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 4
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_PeekS2
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S11
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf717
; 
; *BackCursor.Character = *Cursor - #CharSize
  MOV    r15,qword [rsp+72]
  ADD    r15,-2
  MOV    qword [rsp+80],r15
; While *BackCursor >= @FileName$
_While718:
  MOV    r15,qword [rsp+80]
  MOV    rax,qword [rsp+64]
  CMP    r15,rax
  JL    _Wend718
; If *BackCursor\c = Asc(#Separator)
  MOV    rbp,qword [rsp+80]
  MOVZX  r15,word [rbp]
  MOV    rax,_S4
  PUSH   rax
  POP    rcx
  CALL   PB_Asc
  CMP    r15,rax
  JNE   _EndIf720
; Break
  JMP   _Wend718
; EndIf
_EndIf720:
; *BackCursor - #CharSize
  MOV    r15,qword [rsp+80]
  ADD    r15,-2
  MOV    qword [rsp+80],r15
; Wend
  JMP   _While718
_Wend718:
; 
; If *BackCursor < @FileName$
  MOV    r15,qword [rsp+80]
  MOV    rax,qword [rsp+64]
  CMP    r15,rax
  JGE   _EndIf722
; 
; ProcedureReturn ""
  MOV    rcx,_S3
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure249
; EndIf
_EndIf722:
; 
; 
; PokeS(*BackCursor, PeekS(*Cursor + 3*#CharSize))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+112]
  ADD    r15,6
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+104]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PokeS
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; 
; 
; 
; *Cursor = *BackCursor           
  PUSH   qword [rsp+80]
  POP    rax
  MOV    qword [rsp+72],rax
; 
; ElseIf PeekS(*Cursor, 3) = #Separator + "." + #Separator        
  JMP   _EndIf716
_EndIf717:
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 3
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_PeekS2
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S12
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf723
; 
; PokeS(*Cursor, PeekS(*Cursor + 2*#CharSize))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+112]
  ADD    r15,4
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+96]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PokeS
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; Else
  JMP   _EndIf716
_EndIf723:
; *Cursor + #CharSize
  MOV    r15,qword [rsp+72]
  ADD    r15,2
  MOV    qword [rsp+72],r15
; EndIf 
_EndIf716:
; 
; Else
  JMP   _EndIf714
_EndIf715:
; *Cursor + #CharSize
  MOV    r15,qword [rsp+72]
  ADD    r15,2
  MOV    qword [rsp+72],r15
; EndIf           
_EndIf714:
; Wend
  JMP   _While713
_Wend713:
; 
; ProcedureReturn FileName$    
  MOV    rcx,qword [rsp+64]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure249
; 
; EndIf
_EndIf707:
; 
; EndProcedure
_EndProcedureZero249:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure249:
  PUSH   rax
  MOV    rcx,qword [rsp+72]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,96
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure Profiler_UpdateBounds(*Debugger.DebuggerData)
_Procedure596:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS596=192
  MOV    rax,15
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; If *Debugger\ProfilerFiles And *Debugger\ProfilerData
  MOV    rbp,qword [rsp+PS596+0]
  CMP    qword [rbp+696],0
  JE     No323
  MOV    rbp,qword [rsp+PS596+0]
  CMP    qword [rbp+704],0
  JE     No323
Ok323:
  MOV    rax,1
  JMP    End323
No323:
  XOR    rax,rax
End323:
  AND    rax,rax
  JE    _EndIf3068
; *files.Debugger_ProfilerList = *Debugger\ProfilerFiles
  MOV    rbp,qword [rsp+PS596+0]
  PUSH   qword [rbp+696]
  POP    rax
  MOV    qword [rsp+40],rax
; 
; If *Debugger\NbIncludedFiles = 0 
  MOV    rbp,qword [rsp+PS596+0]
  MOVSXD r15,dword [rbp+88]
  AND    r15,r15
  JNE   _EndIf3070
; 
; MaxLine  = *files\file[0]\Size
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  POP    rbp
  MOVSXD rax,dword [rbp+4]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+48],rax
; MaxCount = 1
  MOV    qword [rsp+56],1
; 
; *lines.Local_Array = *Debugger\ProfilerData      
  MOV    rbp,qword [rsp+PS596+0]
  PUSH   qword [rbp+704]
  POP    rax
  MOV    qword [rsp+64],rax
; For i = 0 To MaxLine-1
  MOV    qword [rsp+72],0
  JMP   _ForSkipDebug3071
_For3071:
_ForSkipDebug3071:
  MOV    r15,qword [rsp+48]
  DEC    r15
  CMP    r15,qword [rsp+72]
  JL    _Next3072
; MaxCount = Max(*lines\l[i], MaxCount)
  PUSH   qword [rsp+56]
  MOV    rbp,qword [rsp+72]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+56],rax
; Next i      
_NextContinue3072:
  INC    qword [rsp+72]
  JNO   _For3071
_Next3072:
; 
; Else 
  JMP   _EndIf3069
_EndIf3070:
; 
; MaxLine  = 1
  MOV    qword [rsp+48],1
; MaxCount = 1
  MOV    qword [rsp+56],1
; Gadget   = *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files]
  MOV    rbp,qword [rsp+PS596+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rax
  MOV    qword [rsp+80],rax
; 
; For file = 0 To *Debugger\NbIncludedFiles
  MOV    qword [rsp+88],0
  JMP   _ForSkipDebug3074
_For3074:
_ForSkipDebug3074:
  MOV    rbp,qword [rsp+PS596+0]
  MOVSXD rax,dword [rbp+88]
  CMP    rax,qword [rsp+88]
  JL    _Next3075
; If GetGadgetItemState(Gadget, file) & (#PB_ListIcon_Checked|#PB_ListIcon_Selected)
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemState
  MOV    r15,rax
  AND    r15,3
  AND    r15,r15
  JE    _EndIf3077
; index = GetGadgetItemData(Gadget, file) 
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemData
  MOV    qword [rsp+96],rax
; linecount = *files\file[index ]\Size
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+104]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp+4]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+104],rax
; *lines.Local_Array = *Debugger\ProfilerData + *files\file[index ]\Offset * SizeOf(LONG) 
  MOV    rbp,qword [rsp+PS596+0]
  MOV    r15,qword [rbp+704]
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+104]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  MOVSXD r14,dword [rbp]
  SAL    r14,2
  ADD    r15,r14
  MOV    qword [rsp+64],r15
; 
; For line = 0 To linecount-1
  MOV    qword [rsp+112],0
  JMP   _ForSkipDebug3078
_For3078:
_ForSkipDebug3078:
  MOV    r15,qword [rsp+104]
  DEC    r15
  CMP    r15,qword [rsp+112]
  JL    _Next3079
; MaxCount = Max(MaxCount, *lines\l[line])
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+120]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+56],rax
; Next line                    
_NextContinue3079:
  INC    qword [rsp+112]
  JNO   _For3078
_Next3079:
; MaxLine = Max(MaxLine, linecount)
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+48],rax
; EndIf
_EndIf3077:
; Next file
_NextContinue3075:
  INC    qword [rsp+88]
  JNO   _For3074
_Next3075:
; 
; EndIf  
_EndIf3069:
; 
; Profiler_CalculateViewport(*Debugger, @Area.ProfilerDrawing)    
  LEA    rax,[rsp+120]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS596+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure566
; 
; *Debugger\ProfilerRatioX = (Area\w / MaxCount) * 0.995
  LEA    rbp,[rsp+120]
  FILD   dword [rbp+8]
  FILD   qword [rsp+56]
  FDIVP  st1,st0
  FMUL   qword [D8]
  MOV    rbp,qword [rsp+PS596+0]
  FSTP   qword [rbp+724]
; *Debugger\ProfilerRatioY = (Area\h / MaxLine) * 0.995    
  LEA    rbp,[rsp+120]
  FILD   dword [rbp+12]
  FILD   qword [rsp+48]
  FDIVP  st1,st0
  FMUL   qword [D8]
  MOV    rbp,qword [rsp+PS596+0]
  FSTP   qword [rbp+732]
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; If *Debugger\ProfilerRatioX > 30.0: *Debugger\ProfilerRatioX = 30.0: EndIf
  MOV    rbp,qword [rsp+PS596+0]
  FLD    qword [rbp+724]
  FCOMP  qword [D7]
  FNSTSW ax
  TEST   ah,41h
  JNE   _EndIf3081
  MOV    rbp,qword [rsp+PS596+0]
  FLD    qword [D7]
  FSTP   qword [rbp+724]
_EndIf3081:
; If *Debugger\ProfilerRatioY > 30.0: *Debugger\ProfilerRatioY = 30.0: EndIf 
  MOV    rbp,qword [rsp+PS596+0]
  FLD    qword [rbp+732]
  FCOMP  qword [D7]
  FNSTSW ax
  TEST   ah,41h
  JNE   _EndIf3083
  MOV    rbp,qword [rsp+PS596+0]
  FLD    qword [D7]
  FSTP   qword [rbp+732]
_EndIf3083:
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS596+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS596+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], #PB_ScrollBar_Maximum, MaxCount)
  PUSH   qword [rsp+56]
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS596+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], #PB_ScrollBar_Maximum, MaxLine)    
  PUSH   qword [rsp+48]
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS596+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; Profiler_UpdatePageLength(*Debugger)
  PUSH   qword [rsp+PS596+0]
  POP    rcx
  CALL  _Procedure578
; 
; EndIf
_EndIf3068:
; 
; EndProcedure
_EndProcedureZero597:
  XOR    rax,rax
_EndProcedure597:
  ADD    rsp,160
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure UpdateDataBreakpointWindow(*Debugger.DebuggerData)
_Procedure520:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS520=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; SetWindowTitle(*Debugger\Windows[#DEBUGGER_WINDOW_DataBreakPoints], Language("Debugger","DataBreakpoints") + " - " + GetFilePart(*Debugger\FileName$))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S272
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS520+40]
  PUSH   qword [rbp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetFilePart
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS520+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetWindowTitle
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; 
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_List], -1, Language("Debugger", "Procedure"), 0)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S273
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS520+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_List], -1, Language("Debugger", "Condition"), 1)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S274
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS520+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_List], -1, Language("Debugger", "ConditionStatus"), 2)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 2
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S275
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS520+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_Frame], Language("Debugger", "AddBreakPoint")+":")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S276
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS520+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2792]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_Text1], Language("Debugger", "Procedure")+":")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S273
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS520+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2800]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_Text2], Language("Debugger", "Condition")+":")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S274
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS520+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2808]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_Add], Language("Debugger", "Add"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S277
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS520+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2752]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_Remove], Language("Debugger", "Remove"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S278
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS520+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2760]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_Clear], Language("Debugger", "Clear"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S208
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS520+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2768]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; DataBreakpointWindowEvents(*Debugger, #PB_Event_SizeWindow) 
  PUSH   qword 13118
  PUSH   qword [rsp+PS520+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure516
; 
; EndProcedure
_EndProcedureZero521:
  XOR    rax,rax
_EndProcedure521:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure Profiler_CalculateViewport(*Debugger.DebuggerData, *Area.ProfilerDrawing)
_Procedure566:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS566=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; w = DesktopScaledX(GadgetWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Image]))
  MOV    rbp,qword [rsp+PS566+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2952]
  POP    rcx
  CALL   PB_GadgetWidth
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_DesktopScaledX
  MOV    qword [rsp+40],rax
; h = DesktopScaledY(GadgetHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Image]))
  MOV    rbp,qword [rsp+PS566+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2952]
  POP    rcx
  CALL   PB_GadgetHeight
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_DesktopScaledY
  MOV    qword [rsp+48],rax
; 
; *Area\x = 16+*Debugger\ProfilerNumberLength*7
  MOV    rbp,qword [rsp+PS566+0]
  MOVSXD r15,dword [rbp+720]
  IMUL   r15,7
  ADD    r15,16
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS566+16]
  POP    rax
  MOV    dword [rbp],eax
; *Area\y = 11
  MOV    rbp,qword [rsp+PS566+8]
  MOV    dword [rbp+4],11
; *Area\w = w-27-*Debugger\ProfilerNumberLength*7
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [rsp+PS566+0]
  MOVSXD r14,dword [rbp+720]
  IMUL   r14,7
  SUB    r15,r14
  ADD    r15,-27
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS566+16]
  POP    rax
  MOV    dword [rbp+8],eax
; *Area\h = h-38
  MOV    r15,qword [rsp+48]
  ADD    r15,-38
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS566+16]
  POP    rax
  MOV    dword [rbp+12],eax
; 
; 
; If *Area\w < 20: *Area\w = 20: EndIf
  MOV    rbp,qword [rsp+PS566+8]
  MOVSXD r15,dword [rbp+8]
  CMP    r15,20
  JGE   _EndIf2842
  MOV    rbp,qword [rsp+PS566+8]
  MOV    dword [rbp+8],20
_EndIf2842:
; If *Area\h < 20: *Area\h = 20: EndIf
  MOV    rbp,qword [rsp+PS566+8]
  MOVSXD r15,dword [rbp+12]
  CMP    r15,20
  JGE   _EndIf2844
  MOV    rbp,qword [rsp+PS566+8]
  MOV    dword [rbp+12],20
_EndIf2844:
; EndProcedure
_EndProcedureZero567:
  XOR    rax,rax
_EndProcedure567:
  ADD    rsp,64
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure WatchListWindowEvents(*Debugger.DebuggerData, EventID)
_Procedure524:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS524=176
  MOV    rax,13
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; If EventID = #PB_Event_Menu   
  MOV    r15,qword [rsp+PS524+8]
  CMP    r15,13101
  JNE   _EndIf2569
; If EventMenu() = #DEBUGGER_MENU_Return
  CALL   PB_EventMenu
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf2571
; If GetActiveGadget() = *Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Variable]
  CALL   PB_GetActiveGadget
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS524+0]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2712]
  JNE   _EndIf2573
; WatchList_AddItem(*Debugger)
  PUSH   qword [rsp+PS524+0]
  POP    rcx
  CALL  _Procedure522
; EndIf
_EndIf2573:
; EndIf
_EndIf2571:
; 
; ElseIf EventID = #PB_Event_Gadget
  JMP   _EndIf2568
_EndIf2569:
  MOV    r15,qword [rsp+PS524+8]
  CMP    r15,13100
  JNE   _EndIf2574
; Select EventGadget()
  CALL   PB_EventGadget
  MOV    rax,rax
  PUSH   rax
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_List]
  MOV    rbp,qword [rsp+PS524+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2672]
  CMP    r15,[rsp]
  JNE   _Case230
; VariableGadget_Event(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_List])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS524+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2672]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure284
  ADD    rsp,40
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Add]
  JMP   _EndSelect34
_Case230:
  MOV    rbp,qword [rsp+PS524+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2680]
  CMP    r15,[rsp]
  JNE   _Case231
; WatchList_AddItem(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS524+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure522
  ADD    rsp,40
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Remove]
  JMP   _EndSelect34
_Case231:
  MOV    rbp,qword [rsp+PS524+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2688]
  CMP    r15,[rsp]
  JNE   _Case232
; index = VariableGadget_GetState(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_List])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS524+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2672]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure304
  ADD    rsp,40
  MOV    qword [rsp+48],rax
; If index <> -1
  MOV    r15,qword [rsp+48]
  CMP    r15,-1
  JE    _EndIf2576
; Command.CommandInfo\Command = #COMMAND_WatchlistRemove
  LEA    rbp,[rsp+56]
  MOV    dword [rbp],22
; Command\Value1 = index
  PUSH   qword [rsp+48]
  POP    rax
  MOV    dword [rbp+8],eax
; SendDebuggerCommand(*Debugger, @Command)          
  SUB    rsp,8
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS524+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; Command.CommandInfo\Command = #COMMAND_GetWatchlist
  LEA    rbp,[rsp+56]
  MOV    dword [rbp],23
; SendDebuggerCommand(*Debugger, @Command)
  SUB    rsp,8
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS524+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; EndIf
_EndIf2576:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Clear] 
  JMP   _EndSelect34
_Case232:
  MOV    rbp,qword [rsp+PS524+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2696]
  CMP    r15,[rsp]
  JNE   _Case233
; Command.CommandInfo\Command = #COMMAND_WatchlistRemove
  LEA    rbp,[rsp+56]
  MOV    dword [rbp],22
; Command\Value1 = -1
  MOV    dword [rbp+8],-1
; SendDebuggerCommand(*Debugger, @Command)          
  SUB    rsp,8
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS524+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; Command.CommandInfo\Command = #COMMAND_GetWatchlist
  LEA    rbp,[rsp+56]
  MOV    dword [rbp],23
; SendDebuggerCommand(*Debugger, @Command)    
  SUB    rsp,8
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS524+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; EndSelect
_Case233:
_EndSelect34:
  POP    rax
; 
; ElseIf EventID = #PB_Event_SizeWindow
  JMP   _EndIf2568
_EndIf2574:
  MOV    r15,qword [rsp+PS524+8]
  CMP    r15,13118
  JNE   _EndIf2577
; Width  = WindowWidth (*Debugger\Windows[#DEBUGGER_WINDOW_WatchList])
  MOV    rbp,qword [rsp+PS524+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+872]
  POP    rcx
  CALL   PB_WindowWidth
  MOV    qword [rsp+72],rax
; Height = WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_WatchList])       
  MOV    rbp,qword [rsp+PS524+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+872]
  POP    rcx
  CALL   PB_WindowHeight
  MOV    qword [rsp+80],rax
; 
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Add], @ButtonWidth, @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+104]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+104]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS524+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2680]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; ButtonWidth  = Max(ButtonWidth, 120)
  PUSH   qword 120
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+88],rax
; ButtonWidth  = Max(ButtonWidth, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Remove])) 
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS524+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2688]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+88],rax
; ButtonWidth  = Max(ButtonWidth, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Clear]))    
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS524+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2696]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+88],rax
; ComboHeight  = GetRequiredHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Procedure])
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS524+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2704]
  POP    rcx
  POP    rdx
  CALL  _Procedure92
  MOV    qword [rsp+104],rax
; StringHeight = GetRequiredHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Variable])
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS524+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2712]
  POP    rcx
  POP    rdx
  CALL  _Procedure92
  MOV    qword [rsp+112],rax
; TextWidth    = Max(80, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Text1]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS524+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2728]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 80
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+120],rax
; TextWidth    = Max(TextWidth, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Text2]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS524+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2736]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+128]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+120],rax
; TopOffset    = Frame3DTopOffset(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Frame]) + 5
  MOV    rbp,qword [rsp+PS524+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2720]
  POP    rcx
  CALL  _Procedure94
  MOV    r15,rax
  ADD    r15,5
  MOV    qword [rsp+128],r15
; 
; BoxHeight    = Max(ButtonHeight*3+20, TopOffset+ComboHeight+StringHeight+20)
  MOV    r15,qword [rsp+128]
  ADD    r15,qword [rsp+104]
  ADD    r15,qword [rsp+112]
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+104]
  IMUL   r15,3
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+136],rax
; ButtonHeight = (BoxHeight-20) / 3 
  MOV    r15,qword [rsp+136]
  ADD    r15,-20
  MOV    rax,r15
  MOV    rcx,3
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    qword [rsp+96],r15
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_List], 10, 10, Width-20, Height-30-BoxHeight) 
  SUB    rsp,8
  MOV    r15,qword [rsp+88]
  SUB    r15,qword [rsp+144]
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+88]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS524+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2672]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Frame], 10, Height-10-BoxHeight, Width-30-ButtonWidth, BoxHeight)
  SUB    rsp,8
  PUSH   qword [rsp+144]
  MOV    r15,qword [rsp+88]
  SUB    r15,qword [rsp+104]
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+160]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS524+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2720]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Text1], 25, Height-10-BoxHeight+TopOffset, TextWidth, ComboHeight)
  SUB    rsp,8
  PUSH   qword [rsp+112]
  PUSH   qword [rsp+136]
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+160]
  ADD    r15,qword [rsp+152]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 25
  MOV    rbp,qword [rsp+PS524+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2728]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Text2], 25, Height-BoxHeight+TopOffset+ComboHeight, TextWidth, StringHeight)
  SUB    rsp,8
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+136]
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+160]
  ADD    r15,qword [rsp+152]
  ADD    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 25
  MOV    rbp,qword [rsp+PS524+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2736]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Procedure], 30+TextWidth, Height-10-BoxHeight+TopOffset, Width-65-ButtonWidth-TextWidth, ComboHeight)
  SUB    rsp,8
  PUSH   qword [rsp+112]
  MOV    r15,qword [rsp+88]
  SUB    r15,qword [rsp+104]
  SUB    r15,qword [rsp+136]
  ADD    r15,-65
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+160]
  ADD    r15,qword [rsp+152]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+152]
  ADD    r15,30
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS524+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2704]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Variable],  30+TextWidth, Height-BoxHeight+TopOffset+ComboHeight, Width-65-ButtonWidth-TextWidth, StringHeight)
  SUB    rsp,8
  PUSH   qword [rsp+120]
  MOV    r15,qword [rsp+88]
  SUB    r15,qword [rsp+104]
  SUB    r15,qword [rsp+136]
  ADD    r15,-65
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+160]
  ADD    r15,qword [rsp+152]
  ADD    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+152]
  ADD    r15,30
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS524+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2712]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Add],    Width-10-ButtonWidth, Height-30-ButtonHeight*3, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+104]
  MOV    r15,qword [rsp+104]
  MOV    r14,qword [rsp+120]
  IMUL   r14,3
  SUB    r15,r14
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+120]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS524+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2680]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Remove], Width-10-ButtonWidth, Height-20-ButtonHeight*2, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+104]
  MOV    r15,qword [rsp+104]
  MOV    r14,qword [rsp+120]
  ADD    r14,r14
  SUB    r15,r14
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+120]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS524+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2688]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Clear],  Width-10-ButtonWidth, Height-10-ButtonHeight*1, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+104]
  MOV    r15,qword [rsp+104]
  MOV    r14,qword [rsp+120]
  SUB    r15,r14
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+120]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS524+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2696]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; ElseIf EventID = #PB_Event_CloseWindow
  JMP   _EndIf2568
_EndIf2577:
  MOV    r15,qword [rsp+PS524+8]
  CMP    r15,13116
  JNE   _EndIf2578
; If DebuggerMemorizeWindows And IsWindowMinimized(*Debugger\Windows[#DEBUGGER_WINDOW_WatchList]) = 0
  CMP    qword [v_DebuggerMemorizeWindows],0
  JE     No286
  MOV    rbp,qword [rsp+PS524+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+872]
  POP    rcx
  CALL  _Procedure104
  MOV    r15,rax
  AND    r15,r15
  JNE    No286
Ok286:
  MOV    rax,1
  JMP    End286
No286:
  XOR    rax,rax
End286:
  AND    rax,rax
  JE    _EndIf2580
; WatchListWindowMaximize = IsWindowMaximized(*Debugger\Windows[#DEBUGGER_WINDOW_WatchList])
  MOV    rbp,qword [rsp+PS524+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+872]
  POP    rcx
  CALL  _Procedure102
  MOV    qword [v_WatchListWindowMaximize],rax
; If WatchListWindowMaximize = 0
  MOV    r15,qword [v_WatchListWindowMaximize]
  AND    r15,r15
  JNE   _EndIf2582
; WatchListWindowX = WindowX(*Debugger\Windows[#DEBUGGER_WINDOW_WatchList])
  MOV    rbp,qword [rsp+PS524+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+872]
  POP    rcx
  CALL   PB_WindowX
  MOV    qword [v_WatchListWindowX],rax
; WatchListWindowY = WindowY(*Debugger\Windows[#DEBUGGER_WINDOW_WatchList])
  MOV    rbp,qword [rsp+PS524+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+872]
  POP    rcx
  CALL   PB_WindowY
  MOV    qword [v_WatchListWindowY],rax
; WatchListWindowWidth  = WindowWidth (*Debugger\Windows[#DEBUGGER_WINDOW_WatchList])
  MOV    rbp,qword [rsp+PS524+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+872]
  POP    rcx
  CALL   PB_WindowWidth
  MOV    qword [v_WatchListWindowWidth],rax
; WatchListWindowHeight = WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_WatchList])
  MOV    rbp,qword [rsp+PS524+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+872]
  POP    rcx
  CALL   PB_WindowHeight
  MOV    qword [v_WatchListWindowHeight],rax
; EndIf
_EndIf2582:
; EndIf    
_EndIf2580:
; 
; 
; 
; HideWindow(*Debugger\Windows[#DEBUGGER_WINDOW_WatchList], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS524+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+872]
  POP    rcx
  POP    rdx
  CALL   PB_HideWindow
; *Debugger\IsWatchListVisible = 0
  MOV    rbp,qword [rsp+PS524+0]
  MOV    dword [rbp+132],0
; Debugger_CheckDestroy(*Debugger)
  PUSH   qword [rsp+PS524+0]
  POP    rcx
  CALL  _Procedure426
; 
; EndIf  
_EndIf2568:
_EndIf2578:
; 
; EndProcedure
_EndProcedureZero525:
  XOR    rax,rax
_EndProcedure525:
  ADD    rsp,144
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure Network_CloseWindow(*This.Network_Communication)
_Procedure386:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS386=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; CloseWindow(*This\Window)
  MOV    rbp,qword [rsp+PS386+0]
  PUSH   qword [rbp+76]
  POP    rcx
  CALL   PB_CloseWindow
; 
; CompilerIf Defined(PUREBASIC_IDE, #PB_Constant)
; DisableWindow(#WINDOW_Main, 0)
  PUSH   qword 0
  PUSH   qword 1
  POP    rcx
  POP    rdx
  CALL   PB_DisableWindow
; CompilerEndIf
; EndProcedure
_EndProcedureZero387:
  XOR    rax,rax
_EndProcedure387:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure BuildShortcutNamesTable()
_Procedure82:
  PS82=48
  SUB    rsp,40
; EndProcedure
_EndProcedureZero83:
  XOR    rax,rax
_EndProcedure83:
  ADD    rsp,40
  RET
; Procedure WinPipe_Send(*This.WinPipe_Communication, *Command.CommandInfo, *CommandData)
_Procedure320:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS320=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; 
; WriteFile_(*This\OutPipeHandle, *Command, SizeOf(CommandInfo), @byteswritten, 0)
  SUB    rsp,8
  PUSH   qword 0
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 20
  PUSH   qword [rsp+PS320+40]
  MOV    rbp,qword [rsp+PS320+40]
  PUSH   qword [rbp+32]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   WriteFile
  ADD    rsp,48
; 
; If *CommandData And *Command\DataSize > 0
  CMP    qword [rsp+PS320+16],0
  JE     No171
  MOV    rbp,qword [rsp+PS320+8]
  MOVSXD r15,dword [rbp+4]
  AND    r15,r15
  JLE    No171
Ok171:
  MOV    rax,1
  JMP    End171
No171:
  XOR    rax,rax
End171:
  AND    rax,rax
  JE    _EndIf1117
; WriteFile_(*This\OutPipeHandle, *CommandData, *Command\DataSize, @byteswritten, 0)
  SUB    rsp,8
  PUSH   qword 0
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS320+32]
  MOVSXD rax,dword [rbp+4]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS320+48]
  MOV    rbp,qword [rsp+PS320+40]
  PUSH   qword [rbp+32]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   WriteFile
  ADD    rsp,48
; EndIf
_EndIf1117:
; EndProcedure
_EndProcedureZero321:
  XOR    rax,rax
_EndProcedure321:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure ResizeRegisterDisplay(*Debugger.DebuggerData)
_Procedure446:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS446=144
  MOV    rax,9
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; If *Debugger\RegisterCount > 0 
  MOV    rbp,qword [rsp+PS446+0]
  MOVSXD r15,dword [rbp+160]
  AND    r15,r15
  JLE   _EndIf1682
; 
; 
; 
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Set0], @ButtonWidth, @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS446+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1632]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; ButtonWidth = Max(ButtonWidth, 50)
  PUSH   qword 50
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+40],rax
; 
; RegistersWithText = 0
  MOV    qword [rsp+56],0
; RegisterTextHeight = GetRequiredHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Text0])
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS446+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1040]
  POP    rcx
  POP    rdx
  CALL  _Procedure92
  MOV    qword [rsp+64],rax
; 
; 
; For i = 0 To *Debugger\RegisterCount-1
  MOV    qword [rsp+72],0
  JMP   _ForSkipDebug1683
_For1683:
_ForSkipDebug1683:
  MOV    rbp,qword [rsp+PS446+0]
  MOVSXD r15,dword [rbp+160]
  DEC    r15
  CMP    r15,qword [rsp+72]
  JL    _Next1684
; TextWidth = Max(TextWidth, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Text0+i]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS446+8]
  PUSH   rbp
  MOV    r15,qword [rsp+88]
  ADD    r15,16
  MOV    rax,r15
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+912]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+80],rax
; 
; If *Debugger\RegisterIndex[i] & #RegisterHasString
  MOV    rbp,qword [rsp+PS446+0]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  MOVSXD r15,dword [rbp+164]
  AND    r15,32768
  AND    r15,r15
  JE    _EndIf1686
; RegistersWithText + 1
  MOV    r15,qword [rsp+56]
  INC    r15
  MOV    qword [rsp+56],r15
; EndIf
_EndIf1686:
; Next i
_NextContinue1684:
  INC    qword [rsp+72]
  JNO   _For1683
_Next1684:
; 
; TextWidth = Max(TextWidth, 70)
  PUSH   qword 70
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+80],rax
; 
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS446+0]
  CMP    dword [rbp+32],0
  JE    _EndIf1688
; BoxWidth = 140
  MOV    qword [rsp+88],140
; Else
  JMP   _EndIf1687
_EndIf1688:
; BoxWidth = 220
  MOV    qword [rsp+88],220
; EndIf
_EndIf1687:
; 
; 
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_ScrollArea], #PB_ScrollArea_InnerWidth, TextWidth + ButtonWidth + 30 + BoxWidth)
  MOV    r15,qword [rsp+80]
  ADD    r15,qword [rsp+40]
  ADD    r15,qword [rsp+88]
  ADD    r15,30
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS446+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1024]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_ScrollArea], #PB_ScrollArea_InnerHeight, *Debugger\RegisterCount * (ButtonHeight+10) + 10 + (RegisterTextHeight + 5) * RegistersWithText)
  MOV    rbp,qword [rsp+PS446+0]
  MOVSXD r15,dword [rbp+160]
  MOV    r14,qword [rsp+48]
  ADD    r14,10
  IMUL   r15,r14
  MOV    r14,qword [rsp+64]
  ADD    r14,5
  IMUL   r14,qword [rsp+56]
  ADD    r15,r14
  ADD    r15,10
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS446+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1024]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; 
; Y = 10
  MOV    qword [rsp+96],10
; 
; For i = 0 To *Debugger\RegisterCount-1
  MOV    qword [rsp+72],0
  JMP   _ForSkipDebug1690
_For1690:
_ForSkipDebug1690:
  MOV    rbp,qword [rsp+PS446+0]
  MOVSXD r15,dword [rbp+160]
  DEC    r15
  CMP    r15,qword [rsp+72]
  JL    _Next1691
; CompilerIf #CompileWindows
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Text0+i], 10, Y+2, TextWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+96]
  MOV    r15,qword [rsp+120]
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS446+40]
  PUSH   rbp
  MOV    r15,qword [rsp+120]
  ADD    r15,16
  MOV    rax,r15
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+912]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; CompilerElse
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Value0+i], 10+TextWidth, Y, BoxWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+120]
  MOV    r15,qword [rsp+112]
  ADD    r15,10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS446+40]
  PUSH   rbp
  MOV    r15,qword [rsp+120]
  ADD    r15,53
  MOV    rax,r15
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+912]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Set0+i], 20+TextWidth+BoxWidth, Y, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+120]
  MOV    r15,qword [rsp+112]
  ADD    r15,qword [rsp+120]
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS446+40]
  PUSH   rbp
  MOV    r15,qword [rsp+120]
  ADD    r15,90
  MOV    rax,r15
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+912]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; If *Debugger\RegisterIndex[i] & #RegisterHasString
  MOV    rbp,qword [rsp+PS446+0]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  MOVSXD r15,dword [rbp+164]
  AND    r15,32768
  AND    r15,r15
  JE    _EndIf1693
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_TextValue0+i], 10+TextWidth, Y+ButtonHeight+5, 10+BoxWidth+ButtonWidth, RegisterTextHeight)
  SUB    rsp,8
  PUSH   qword [rsp+72]
  MOV    r15,qword [rsp+104]
  ADD    r15,qword [rsp+56]
  ADD    r15,10
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+120]
  ADD    r15,qword [rsp+72]
  ADD    r15,5
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+112]
  ADD    r15,10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS446+40]
  PUSH   rbp
  MOV    r15,qword [rsp+120]
  ADD    r15,127
  MOV    rax,r15
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+912]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; Y + ButtonHeight+15+RegisterTextHeight
  MOV    r15,qword [rsp+96]
  ADD    r15,qword [rsp+48]
  ADD    r15,qword [rsp+64]
  ADD    r15,15
  MOV    qword [rsp+96],r15
; Else
  JMP   _EndIf1692
_EndIf1693:
; Y + ButtonHeight+10
  MOV    r15,qword [rsp+96]
  ADD    r15,qword [rsp+48]
  ADD    r15,10
  MOV    qword [rsp+96],r15
; EndIf
_EndIf1692:
; Next i
_NextContinue1691:
  INC    qword [rsp+72]
  JNO   _For1690
_Next1691:
; 
; EndIf
_EndIf1682:
; 
; EndProcedure
_EndProcedureZero447:
  XOR    rax,rax
_EndProcedure447:
  ADD    rsp,112
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure CreatePipeCommunication()
_Procedure328:
  PUSH   rbp
  PUSH   r15
  PS328=160
  MOV    rax,12
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; *Result = 0 
  MOV    qword [rsp+40],0
; 
; 
; CompilerIf #NOTHREAD = 0
; If WinPipe_Thread = 0
  MOV    r15,qword [v_WinPipe_Thread]
  AND    r15,r15
  JNE   _EndIf1145
; WinPipe_Thread = CreateThread(@WinPipe_ReceiveThread(), 0)
  PUSH   qword 0
  LEA    rax,[_Procedure312]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_CreateThread
  MOV    qword [v_WinPipe_Thread],rax
; EndIf
_EndIf1145:
; 
; If WinPipe_Thread
  CMP    qword [v_WinPipe_Thread],0
  JE    _EndIf1147
; CompilerEndIf
; 
; 
; 
; CompilerIf #CompileX86
; IsWin9x = 0
  MOV    qword [rsp+48],0
; CompilerEndIf  
; 
; 
; 
; 
; 
; 
; 
; 
; If IsWin9x
  CMP    qword [rsp+48],0
  JE    _EndIf1149
; 
; If CreatePipe_(@Pipe1Read, @Pipe1Write, #Null, 2048) And CreatePipe_(@Pipe2Read, @Pipe2Write, #Null, 2048)
  PUSH   qword 2048
  PUSH   qword 0
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   CreatePipe
  AND    rax,rax
  JE     No175
  PUSH   qword 2048
  PUSH   qword 0
  LEA    rax,[rsp+96]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+96]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   CreatePipe
  AND    rax,rax
  JE     No175
Ok175:
  MOV    rax,1
  JMP    End175
No175:
  XOR    rax,rax
End175:
  AND    rax,rax
  JE    _EndIf1151
; 
; LockMutex(WinPipe_Mutex)
  PUSH   qword [v_WinPipe_Mutex]
  POP    rcx
  CALL   qword [PB_LockMutex]
; 
; AddElement(WinPipe_Data())
  PUSH   qword [t_WinPipe_Data]
  POP    rcx
  CALL   PB_AddElement
; WinPipe_Data()\Vtbl            = ?WinPipe_Vtbl
  MOV    rbp,ll_createpipecommunication_winpipe_vtbl
  MOV    rax,rbp
  PUSH   rax
  MOV    rbp,qword [t_WinPipe_Data+8]
  POP    rax
  MOV    qword [rbp+16],rax
; WinPipe_Data()\InPipeHandle    = Pipe1Read
  PUSH   qword [rsp+56]
  POP    rax
  MOV    qword [rbp+40],rax
; WinPipe_Data()\OutPipeHandle   = Pipe2Write 
  PUSH   qword [rsp+80]
  POP    rax
  MOV    qword [rbp+48],rax
; WinPipe_Data()\DebuggerInPipeHandle  = Pipe2Read  
  PUSH   qword [rsp+72]
  POP    rax
  MOV    qword [rbp+60],rax
; WinPipe_Data()\DebuggerOutPipeHandle = Pipe1Write  
  PUSH   qword [rsp+64]
  POP    rax
  MOV    qword [rbp+68],rax
; WinPipe_Data()\IsNamedPipe     = #False  
  MOV    dword [rbp+56],0
; WinPipe_Data()\StackMutex      = CreateMutex()  
  CALL   PB_CreateMutex
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    qword [rbp+96],rax
; WinPipe_Data()\CommandReceived = 0 
  MOV    dword [rbp+80],0
; WinPipe_Data()\CommandTimeout  = ElapsedMilliseconds()                      
  CALL   PB_ElapsedMilliseconds
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    dword [rbp+84],eax
; WinPipe_Data()\StackCount      = 0          
  MOV    dword [rbp+104],0
; *Result = @WinPipe_Data()
  LEA    rax,[rbp+16]
  MOV    qword [rsp+40],rax
; 
; UnlockMutex(WinPipe_Mutex)
  PUSH   qword [v_WinPipe_Mutex]
  POP    rcx
  CALL   qword [PB_UnlockMutex]
; 
; EndIf    
_EndIf1151:
; 
; Else
  JMP   _EndIf1148
_EndIf1149:
; 
; Rand         = Random($7FFFFFFF)
  PUSH   qword 2147483647
  POP    rcx
  CALL   PB_Random
  MOV    qword [rsp+88],rax
; InPipeName$  = "\\.\pipe\PureBasic_DebuggerPipeA_" + Hex(Rand)
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S104
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Hex
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+104]
  POP    rdx
  CALL   SYS_AllocateString4
; OutPipeName$ = "\\.\pipe\PureBasic_DebuggerPipeB_" + Hex(Rand)
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S105
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Hex
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+112]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; InPipeHandle = CreateNamedPipe_(@InPipeName$, #PIPE_ACCESS_INBOUND, 0, 1, 0, 2048, 1000, #Null)
  PUSH   qword 0
  PUSH   qword 1000
  PUSH   qword 2048
  PUSH   qword 0
  PUSH   qword 1
  PUSH   qword 0
  PUSH   qword 1
  MOV    rax,qword [rsp+152]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   CreateNamedPipeW
  ADD    rsp,64
  MOV    qword [rsp+112],rax
; If InPipeHandle <> #INVALID_HANDLE_VALUE      
  MOV    r15,qword [rsp+112]
  CMP    r15,-1
  JE    _EndIf1154
; 
; OutPipeHandle = CreateNamedPipe_(@OutPipeName$, #PIPE_ACCESS_OUTBOUND, 0, 1, 2048, 0, 1000, #Null)
  PUSH   qword 0
  PUSH   qword 1000
  PUSH   qword 0
  PUSH   qword 2048
  PUSH   qword 1
  PUSH   qword 0
  PUSH   qword 2
  MOV    rax,qword [rsp+160]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   CreateNamedPipeW
  ADD    rsp,64
  MOV    qword [rsp+120],rax
; If OutPipeHandle <> #INVALID_HANDLE_VALUE      
  MOV    r15,qword [rsp+120]
  CMP    r15,-1
  JE    _EndIf1156
; 
; LockMutex(WinPipe_Mutex)
  PUSH   qword [v_WinPipe_Mutex]
  POP    rcx
  CALL   qword [PB_LockMutex]
; 
; AddElement(WinPipe_Data())
  PUSH   qword [t_WinPipe_Data]
  POP    rcx
  CALL   PB_AddElement
; WinPipe_Data()\Vtbl            = ?WinPipe_Vtbl
  MOV    rbp,ll_createpipecommunication_winpipe_vtbl
  MOV    rax,rbp
  PUSH   rax
  MOV    rbp,qword [t_WinPipe_Data+8]
  POP    rax
  MOV    qword [rbp+16],rax
; WinPipe_Data()\InPipeName$     = InPipeName$
  MOV    rcx,qword [rsp+96]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rbp+24]
  POP    rdx
  CALL   SYS_AllocateString4
; WinPipe_Data()\OutPipeName$    = OutPipeName$
  MOV    rcx,qword [rsp+104]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rbp+32]
  POP    rdx
  CALL   SYS_AllocateString4
; WinPipe_Data()\InPipeHandle    = InPipeHandle
  PUSH   qword [rsp+112]
  POP    rax
  MOV    qword [rbp+40],rax
; WinPipe_Data()\OutPipeHandle   = OutPipeHandle  
  PUSH   qword [rsp+120]
  POP    rax
  MOV    qword [rbp+48],rax
; WinPipe_Data()\IsNamedPipe     = #True  
  MOV    dword [rbp+56],1
; WinPipe_Data()\StackMutex      = CreateMutex()  
  CALL   PB_CreateMutex
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    qword [rbp+96],rax
; WinPipe_Data()\CommandReceived = 0 
  MOV    dword [rbp+80],0
; WinPipe_Data()\CommandTimeout  = ElapsedMilliseconds()                      
  CALL   PB_ElapsedMilliseconds
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    dword [rbp+84],eax
; WinPipe_Data()\StackCount      = 0          
  MOV    dword [rbp+104],0
; *Result = @WinPipe_Data()
  LEA    rax,[rbp+16]
  MOV    qword [rsp+40],rax
; 
; UnlockMutex(WinPipe_Mutex)
  PUSH   qword [v_WinPipe_Mutex]
  POP    rcx
  CALL   qword [PB_UnlockMutex]
; 
; Else
  JMP   _EndIf1155
_EndIf1156:
; CloseHandle_(InPipeHandle) 
  PUSH   qword [rsp+112]
  POP    rcx
  CALL   CloseHandle
; EndIf
_EndIf1155:
; EndIf  
_EndIf1154:
; 
; EndIf
_EndIf1148:
; 
; CompilerIf #NOTHREAD = 0
; EndIf
_EndIf1147:
; CompilerEndIf
; 
; ProcedureReturn *Result
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure329
; EndProcedure
_EndProcedureZero329:
  XOR    rax,rax
_EndProcedure329:
  PUSH   rax
  MOV    rcx,qword [rsp+112]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+104]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,136
  POP    r15
  POP    rbp
  RET
; Procedure VariableGadget_SetString(index, String$, AutoSync)
_Procedure300:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS300=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS300+8]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; Shared *VariableGadget_Used.VariableGadget
; 
; *items.VariableGadget_ItemList = *VariableGadget_Used\Items  
  MOV    rbp,qword [p_VariableGadget_Used]
  PUSH   qword [rbp+16]
  POP    rax
  MOV    qword [rsp+48],rax
; If *items And index < *VariableGadget_Used\ItemCount 
  CMP    qword [rsp+48],0
  JE     No167
  MOV    r15,qword [rsp+PS300+0]
  MOV    rbp,qword [p_VariableGadget_Used]
  MOVSXD rax,dword [rbp+12]
  CMP    r15,rax
  JGE    No167
Ok167:
  MOV    rax,1
  JMP    End167
No167:
  XOR    rax,rax
End167:
  AND    rax,rax
  JE    _EndIf1071
; *items\item[index]\Value$ = String$
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS300+16]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; If AutoSync
  CMP    qword [rsp+PS300+16],0
  JE    _EndIf1073
; VariableGadget_SyncItem(index)
  PUSH   qword [rsp+PS300+0]
  POP    rcx
  CALL  _Procedure296
; EndIf  
_EndIf1073:
; EndIf
_EndIf1071:
; 
; EndProcedure
_EndProcedureZero301:
  XOR    rax,rax
_EndProcedure301:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure Standalone_CreateGUI()
_Procedure684:
  PUSH   rbp
  PUSH   r15
  PS684=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; Image_Minimize = CatchImage(#PB_Any, ?MinimizeImageData)
  MOV    rbp,ll_standalone_creategui_minimizeimagedata
  MOV    rax,rbp
  PUSH   rax
  PUSH   qword -1
  POP    rcx
  POP    rdx
  CALL   PB_CatchImage
  MOV    qword [v_Image_Minimize],rax
; Image_Maximize = CatchImage(#PB_Any, ?MaximizeImageData)
  MOV    rbp,ll_standalone_creategui_maximizeimagedata
  MOV    rax,rbp
  PUSH   rax
  PUSH   qword -1
  POP    rcx
  POP    rdx
  CALL   PB_CatchImage
  MOV    qword [v_Image_Maximize],rax
; 
; If OpenWindow(#WINDOW_Main, DebuggerMainWindowX, DebuggerMainWindowY, DebuggerMainWindowWidth, DebuggerMainWindowHeight, "PureBasic Debugger", #PB_Window_Invisible|#PB_Window_SystemMenu|#PB_Window_MinimizeGadget|#PB_Window_MaximizeGadget|#PB_Window_SizeGadget)
  SUB    rsp,8
  PUSH   qword 282001408
  MOV    rax,_S156
  PUSH   rax
  PUSH   qword [v_DebuggerMainWindowHeight]
  PUSH   qword [v_DebuggerMainWindowWidth]
  PUSH   qword [v_DebuggerMainWindowY]
  PUSH   qword [v_DebuggerMainWindowX]
  PUSH   qword 1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_OpenWindow2
  ADD    rsp,64
  AND    rax,rax
  JE    _EndIf3603
; 
; *Statusbar = CreateStatusBar(#STATUSBAR, WindowID(#WINDOW_Main))
  PUSH   qword 1
  POP    rcx
  CALL   PB_WindowID
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  POP    rcx
  POP    rdx
  CALL   PB_CreateStatusBar
  MOV    qword [rsp+40],rax
; If *Statusbar
  CMP    qword [rsp+40],0
  JE    _EndIf3605
; AddStatusBarField(#PB_Ignore)    
  PUSH   qword -65535
  POP    rcx
  CALL   PB_AddStatusBarField
; StatusbarHeight = StatusbarHeight(#STATUSBAR)
  PUSH   qword 0
  POP    rcx
  CALL   PB_StatusBarHeight
  MOV    qword [v_StatusbarHeight],rax
; EndIf
_EndIf3605:
; 
; ButtonGadget(#GADGET_Run,  0, 0, 0, 0, Language("StandaloneDebugger","Run"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S438
  PUSH   rax
  MOV    rax,_S539
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; ButtonGadget(#GADGET_Stop, 0, 0, 0, 0, Language("StandaloneDebugger","Stop"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S325
  PUSH   rax
  MOV    rax,_S539
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 2
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; ButtonGadget(#GADGET_Step, 0, 0, 0, 0, Language("StandaloneDebugger","Step"))    
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S439
  PUSH   rax
  MOV    rax,_S539
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 3
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; StringGadget(#GADGET_StepCount, 0, 0, 0, 0, "1", #PB_String_Numeric)      
  SUB    rsp,8
  PUSH   qword 8192
  MOV    rax,_S540
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 4
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringGadget2
  ADD    rsp,64
; ButtonGadget(#GADGET_StepOver, 0, 0, 0, 0, Language("StandaloneDebugger","StepOver"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S440
  PUSH   rax
  MOV    rax,_S539
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 5
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; ButtonGadget(#GADGET_StepOut, 0, 0, 0, 0, Language("StandaloneDebugger","StepOut"))      
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S441
  PUSH   rax
  MOV    rax,_S539
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 6
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; ButtonGadget(#GADGET_Quit, 0, 0, 0, 0, Language("StandaloneDebugger","Quit"))         
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S541
  PUSH   rax
  MOV    rax,_S539
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 7
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; 
; ListViewGadget(#GADGET_Log, 0, 0, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 8
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ListViewGadget
  ADD    rsp,48
; 
; ComboBoxGadget(#GADGET_SelectSource, 0, 0, 0, 300)          
  SUB    rsp,8
  PUSH   qword 300
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 22
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ComboBoxGadget
  ADD    rsp,48
; ButtonGadget(#GADGET_BreakSet, 0, 0, 0, 0, Language("StandaloneDebugger","BreakSetRemove"))    
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S542
  PUSH   rax
  MOV    rax,_S539
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 19
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; ButtonGadget(#GADGET_BreakClear, 0, 0, 0, 0, Language("StandaloneDebugger","BreakClear"))          
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S543
  PUSH   rax
  MOV    rax,_S539
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 20
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; ButtonGadget(#GADGET_DataBreak, 0, 0, 0, 0, Language("StandaloneDebugger","DataBreak"), #PB_Button_Toggle)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 4099
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S544
  PUSH   rax
  MOV    rax,_S539
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 21
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; 
; ButtonGadget(#GADGET_Debug, 0, 0, 0, 0, Language("StandaloneDebugger", "DebugOutput"), #PB_Button_Toggle)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 4099
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S545
  PUSH   rax
  MOV    rax,_S539
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 9
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; ButtonGadget(#GADGET_Watchlist, 0, 0, 0, 0, RemoveString(Language("MenuItem", "WatchList"),"&"), #PB_Button_Toggle)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 4099
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S548
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S547
  PUSH   rax
  MOV    rax,_S546
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_RemoveString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 10
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; ButtonGadget(#GADGET_Variables, 0, 0, 0, 0, Language("StandaloneDebugger", "VariableList"), #PB_Button_Toggle)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 4099
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S549
  PUSH   rax
  MOV    rax,_S539
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 11
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; ButtonGadget(#GADGET_Profiler, 0, 0, 0, 0, Language("StandaloneDebugger", "Profiler"), #PB_Button_Toggle)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 4099
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S550
  PUSH   rax
  MOV    rax,_S539
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 12
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; ButtonGadget(#GADGET_History, 0, 0, 0, 0, RemoveString(Language("MenuItem", "History"),"&"), #PB_Button_Toggle)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 4099
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S548
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S262
  PUSH   rax
  MOV    rax,_S546
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_RemoveString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 13
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; ButtonGadget(#GADGET_Memory, 0, 0, 0, 0, Language("StandaloneDebugger", "Memory"), #PB_Button_Toggle)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 4099
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S551
  PUSH   rax
  MOV    rax,_S539
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 14
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; ButtonGadget(#GADGET_Library, 0, 0, 0, 0, Language("StandaloneDebugger", "Library"), #PB_Button_Toggle)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 4099
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S552
  PUSH   rax
  MOV    rax,_S539
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 16
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; ButtonGadget(#GADGET_Assembly, 0, 0, 0, 0, RemoveString(Language("MenuItem", "DebugAsm"),"&"), #PB_Button_Toggle) 
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 4099
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S548
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S553
  PUSH   rax
  MOV    rax,_S546
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_RemoveString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 15
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; ButtonGadget(#GADGET_Purifier, 0, 0, 0, 0, Language("StandaloneDebugger", "Purifier"), #PB_Button_Toggle)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 4099
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S554
  PUSH   rax
  MOV    rax,_S539
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 17
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; 
; CompilerIf #CompilePPC
; 
; ButtonImageGadget(#GADGET_Minimize, 0, 0, 0, 0, ImageID(Image_Minimize))
  PUSH   qword [v_Image_Minimize]
  POP    rcx
  CALL   PB_ImageID
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 23
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonImageGadget
  ADD    rsp,48
; ButtonImageGadget(#GADGET_Maximize, 0, 0, 0, 0, ImageID(Image_Maximize))
  PUSH   qword [v_Image_Maximize]
  POP    rcx
  CALL   PB_ImageID
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 24
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonImageGadget
  ADD    rsp,48
; If IsMiniDebugger
  CMP    qword [v_IsMiniDebugger],0
  JE    _EndIf3607
; HideGadget(#GADGET_Minimize, 1)
  PUSH   qword 1
  PUSH   qword 23
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; HideGadget(#GADGET_Log, 1)
  PUSH   qword 1
  PUSH   qword 8
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; Else
  JMP   _EndIf3606
_EndIf3607:
; HideGadget(#GADGET_Maximize, 1)
  PUSH   qword 1
  PUSH   qword 24
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; EndIf      
_EndIf3606:
; 
; TextGadget(#GADGET_Waiting, 0, 0, 0, 0, Language("Debugger","Waiting"), #PB_Text_Center|#PB_Text_Border)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 131073
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S555
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 18
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
; 
; AddKeyboardShortcut(#WINDOW_Main, Shortcut_Run, #MENU_Run)
  PUSH   qword 266
  PUSH   qword [v_Shortcut_Run]
  PUSH   qword 1
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddKeyboardShortcut
; AddKeyboardShortcut(#WINDOW_Main, Shortcut_Stop, #MENU_Stop)
  PUSH   qword 265
  PUSH   qword [v_Shortcut_Stop]
  PUSH   qword 1
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddKeyboardShortcut
; AddKeyboardShortcut(#WINDOW_Main, Shortcut_Step, #MENU_Step)      
  PUSH   qword 267
  PUSH   qword [v_Shortcut_Step]
  PUSH   qword 1
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddKeyboardShortcut
; AddKeyboardShortcut(#WINDOW_Main, Shortcut_StepOver, #MENU_StepOver)      
  PUSH   qword 268
  PUSH   qword [v_Shortcut_StepOver]
  PUSH   qword 1
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddKeyboardShortcut
; AddKeyboardShortcut(#WINDOW_Main, Shortcut_StepOut, #MENU_StepOut)      
  PUSH   qword 269
  PUSH   qword [v_Shortcut_StepOut]
  PUSH   qword 1
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddKeyboardShortcut
; 
; Standalone_ResizeGUI()
  CALL  _Procedure664
; 
; CompilerIf #DEFAULT_CanWindowStayOnTop
; SetWindowStayOnTop(#WINDOW_Main, DebuggerOnTop)
  PUSH   qword [v_DebuggerOnTop]
  PUSH   qword 1
  POP    rcx
  POP    rdx
  CALL  _Procedure112
; CompilerEndIf
; 
; success = 1
  MOV    qword [rsp+48],1
; EndIf
_EndIf3603:
; 
; DebuggerMainWindow = #WINDOW_Main 
  MOV    qword [v_DebuggerMainWindow],1
; 
; ProcedureReturn success
  MOV    rax,qword [rsp+48]
  JMP   _EndProcedure685
; EndProcedure
_EndProcedureZero685:
  XOR    rax,rax
_EndProcedure685:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure Xml_RecursiveCount(Node)
_Procedure634:
  MOV    qword [rsp+8],rcx
  PUSH   r15
  PS634=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; Count = 0 
  MOV    qword [rsp+40],0
; Node  = ChildXMLNode(Node)
  PUSH   qword [rsp+PS634+0]
  POP    rcx
  CALL   PB_ChildXMLNode
  MOV    qword [rsp+PS634+0],rax
; While Node
_While3346:
  CMP    qword [rsp+PS634+0],0
  JE    _Wend3346
; Count + Xml_RecursiveCount(Node) + 1
  MOV    r15,qword [rsp+40]
  PUSH   qword [rsp+PS634+0]
  POP    rcx
  CALL  _Procedure634
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+40],r15
; Node = NextXMLNode(Node)
  PUSH   qword [rsp+PS634+0]
  POP    rcx
  CALL   PB_NextXMLNode
  MOV    qword [rsp+PS634+0],rax
; Wend
  JMP   _While3346
_Wend3346:
; ProcedureReturn Count
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure635
; EndProcedure
_EndProcedureZero635:
  XOR    rax,rax
_EndProcedure635:
  ADD    rsp,48
  POP    r15
  RET
; Procedure Profiler_StepValue(fvalue.f)
_Procedure570:
  MOVSS  dword [rsp+8],xmm0
  PUSH   r15
  PS570=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; mult    = 1
  MOV    qword [rsp+40],1
; 
; While fvalue > 100
_While2851:
  FLD    dword [rsp+PS570+0]
  FCOMP  dword [F4]
  FNSTSW ax
  TEST   ah,41h
  JNE   _Wend2851
; mult * 100
  MOV    r15,qword [rsp+40]
  IMUL   r15,100
  MOV    qword [rsp+40],r15
; fvalue / 100
  FLD    dword [rsp+PS570+0]
  FDIV   dword [F4]
  FSTP   dword [rsp+PS570+0]
; Wend
  JMP   _While2851
_Wend2851:
; 
; If fvalue <= 1:      lvalue = 1   * mult
  FLD    dword [rsp+PS570+0]
  FCOMP  dword [F7]
  FNSTSW ax
  TEST   ah,41h
  JE    _EndIf2853
  MOV    r15,qword [rsp+40]
  MOV    qword [rsp+48],r15
; ElseIf fvalue <= 2:  lvalue = 2   * mult
  JMP   _EndIf2852
_EndIf2853:
  FLD    dword [rsp+PS570+0]
  FCOMP  dword [F8]
  FNSTSW ax
  TEST   ah,41h
  JE    _EndIf2854
  MOV    r15,qword [rsp+40]
  ADD    r15,r15
  MOV    qword [rsp+48],r15
; ElseIf fvalue <= 5:  lvalue = 5   * mult
  JMP   _EndIf2852
_EndIf2854:
  FLD    dword [rsp+PS570+0]
  FCOMP  dword [F9]
  FNSTSW ax
  TEST   ah,41h
  JE    _EndIf2855
  MOV    r15,qword [rsp+40]
  IMUL   r15,5
  MOV    qword [rsp+48],r15
; ElseIf fvalue <= 10: lvalue = 10  * mult
  JMP   _EndIf2852
_EndIf2855:
  FLD    dword [rsp+PS570+0]
  FCOMP  dword [F10]
  FNSTSW ax
  TEST   ah,41h
  JE    _EndIf2856
  MOV    r15,qword [rsp+40]
  IMUL   r15,10
  MOV    qword [rsp+48],r15
; ElseIf fvalue <= 20: lvalue = 20  * mult
  JMP   _EndIf2852
_EndIf2856:
  FLD    dword [rsp+PS570+0]
  FCOMP  dword [F11]
  FNSTSW ax
  TEST   ah,41h
  JE    _EndIf2857
  MOV    r15,qword [rsp+40]
  IMUL   r15,20
  MOV    qword [rsp+48],r15
; ElseIf fvalue <= 25: lvalue = 25  * mult
  JMP   _EndIf2852
_EndIf2857:
  FLD    dword [rsp+PS570+0]
  FCOMP  dword [F12]
  FNSTSW ax
  TEST   ah,41h
  JE    _EndIf2858
  MOV    r15,qword [rsp+40]
  IMUL   r15,25
  MOV    qword [rsp+48],r15
; ElseIf fvalue <= 50: lvalue = 50  * mult
  JMP   _EndIf2852
_EndIf2858:
  FLD    dword [rsp+PS570+0]
  FCOMP  dword [F13]
  FNSTSW ax
  TEST   ah,41h
  JE    _EndIf2859
  MOV    r15,qword [rsp+40]
  IMUL   r15,50
  MOV    qword [rsp+48],r15
; Else:                lvalue = 100 * mult
  JMP   _EndIf2852
_EndIf2859:
  MOV    r15,qword [rsp+40]
  IMUL   r15,100
  MOV    qword [rsp+48],r15
; EndIf
_EndIf2852:
; 
; ProcedureReturn lvalue
  MOV    rax,qword [rsp+48]
  JMP   _EndProcedure571
; EndProcedure
_EndProcedureZero571:
  XOR    rax,rax
_EndProcedure571:
  ADD    rsp,64
  POP    r15
  RET
; Procedure Profiler_UpdatePageLength(*Debugger.DebuggerData)
_Procedure578:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS578=128
  MOV    rax,8
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; Profiler_CalculateViewport(*Debugger, @Area.ProfilerDrawing)
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS578+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure566
; 
; MaxCount = GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], #PB_ScrollBar_Maximum)
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS578+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  MOV    qword [rsp+72],rax
; MaxLine  = GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], #PB_ScrollBar_Maximum)    
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS578+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  MOV    qword [rsp+80],rax
; 
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], #PB_ScrollBar_PageLength, Area\w / *Debugger\ProfilerRatioX)
  LEA    rbp,[rsp+40]
  MOVSXD r15,dword [rbp+8]
  MOV    rbp,qword [rsp+PS578+0]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FDIV   qword [rbp+724]
  PUSH   rax
  FISTP  qword [rsp]
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS578+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], #PB_ScrollBar_PageLength, Area\h / *Debugger\ProfilerRatioY)    
  LEA    rbp,[rsp+40]
  MOVSXD r15,dword [rbp+12]
  MOV    rbp,qword [rsp+PS578+0]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FDIV   qword [rbp+732]
  PUSH   rax
  FISTP  qword [rsp]
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS578+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; 
; CountPage = GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], #PB_ScrollBar_PageLength)
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS578+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  MOV    qword [rsp+88],rax
; LinePage  = GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], #PB_ScrollBar_PageLength)
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS578+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  MOV    qword [rsp+96],rax
; 
; If CountPage > MaxCount
  MOV    r15,qword [rsp+88]
  CMP    r15,qword [rsp+72]
  JLE   _EndIf2941
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], #PB_ScrollBar_PageLength, MaxCount)
  PUSH   qword [rsp+72]
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS578+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS578+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; ElseIf CountPage = MaxCount
  JMP   _EndIf2940
_EndIf2941:
  MOV    r15,qword [rsp+88]
  CMP    r15,qword [rsp+72]
  JNE   _EndIf2942
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS578+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; Else
  JMP   _EndIf2940
_EndIf2942:
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS578+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; EndIf
_EndIf2940:
; 
; If LinePage > MaxLine
  MOV    r15,qword [rsp+96]
  CMP    r15,qword [rsp+80]
  JLE   _EndIf2945
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], #PB_ScrollBar_PageLength, MaxLine)
  PUSH   qword [rsp+80]
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS578+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS578+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; ElseIf LinePage = MaxLine
  JMP   _EndIf2944
_EndIf2945:
  MOV    r15,qword [rsp+96]
  CMP    r15,qword [rsp+80]
  JNE   _EndIf2946
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS578+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; Else
  JMP   _EndIf2944
_EndIf2946:
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS578+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; EndIf   
_EndIf2944:
; 
; EndProcedure
_EndProcedureZero579:
  XOR    rax,rax
_EndProcedure579:
  ADD    rsp,104
  POP    r15
  POP    rbp
  RET
; Procedure OpenHistoryWindow(*Debugger.DebuggerData)
_Procedure44:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS44=128
  MOV    rax,8
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_History]
  MOV    rbp,qword [rsp+PS44+0]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+864],0
  JE    _EndIf2462
; SetWindowForeground(*Debugger\Windows[#DEBUGGER_WINDOW_History])
  MOV    rbp,qword [rsp+PS44+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+864]
  POP    rcx
  CALL  _Procedure106
; 
; Else  
  JMP   _EndIf2461
_EndIf2462:
; Window = OpenWindow(#PB_Any, HistoryWindowX, HistoryWindowY, HistoryWindowWidth, HistoryWindowHeight, Language("Debugger","HistoryWindowTitle") + " - " + DebuggerTitle(*Debugger\FileName$), #PB_Window_SystemMenu|#PB_Window_MinimizeGadget|#PB_Window_SizeGadget|#PB_Window_Invisible|#PB_Window_MaximizeGadget)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 282001408
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S261
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS44+48]
  PUSH   qword [rbp+80]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure260
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [v_HistoryWindowHeight]
  PUSH   qword [v_HistoryWindowWidth]
  PUSH   qword [v_HistoryWindowY]
  PUSH   qword [v_HistoryWindowX]
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_OpenWindow2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+40],rax
; If Window 
  CMP    qword [rsp+40],0
  JE    _EndIf2465
; *Debugger\Windows[#DEBUGGER_WINDOW_History] = Window
  PUSH   qword [rsp+40]
  MOV    rbp,qword [rsp+PS44+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+864],rax
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_History_Panel] = PanelGadget(#PB_Any, 0, 0, 0, 0)      
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PanelGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS44+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2576],rax
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Panel], -1, Language("Debugger","History"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S262
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS44+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2576]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_History_ScrollArea] = ScrollAreaGadget(#PB_Any, 0, 0, 0, 0, 1000, 1000, 10, #PB_ScrollArea_Single)
  SUB    rsp,8
  PUSH   qword 4
  PUSH   qword 10
  PUSH   qword 1000
  PUSH   qword 1000
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScrollAreaGadget3
  ADD    rsp,80
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS44+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2584],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_History_CurrentContainer] = ContainerGadget(#PB_Any, 0, 0, 0, 0, #PB_Container_Single)
  PUSH   qword 4
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ContainerGadget2
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS44+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2624],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_History_CurrentText] = TextGadget(#PB_Any, 5, 5, 0, 25, Language("Debugger","CurrentPosition"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S263
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 25
  PUSH   qword 0
  PUSH   qword 5
  PUSH   qword 5
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS44+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2616],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_History_CurrentLine] = TextGadget(#PB_Any, 5, 35, 0, 25, "")
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 25
  PUSH   qword 0
  PUSH   qword 35
  PUSH   qword 5
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS44+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2600],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_History_CurrentFile] = TextGadget(#PB_Any, 5, 65, 0, 25, "")
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 25
  PUSH   qword 0
  PUSH   qword 65
  PUSH   qword 5
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS44+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2608],rax
; CloseGadgetList()
  CALL   PB_CloseGadgetList
; CloseGadgetList()
  CALL   PB_CloseGadgetList
; *Debugger\Gadgets[#DEBUGGER_GADGET_History_Update] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Update"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S220
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS44+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2592],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_History_Updating] = TextGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Updating"), #PB_Text_Center)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S264
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS44+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2632],rax
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Updating], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS44+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2632]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; 
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Panel], -1, Language("Debugger","Statistics"))                
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S265
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS44+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2576]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; *Debugger\Gadgets[#DEBUGGER_GADGET_History_Stats] = ListIconGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Name"), 300, #PB_ListIcon_MultiSelect|#PB_ListIcon_GridLines|#PB_ListIcon_FullRowSelect|#PB_ListIcon_AlwaysShowSelection)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 1073807372
  PUSH   qword 300
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S91
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ListIconGadget2
  ADD    rsp,72
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS44+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2640],rax
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Stats], 1, Language("Debugger","CallCount"), 100)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 100
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S266
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS44+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2640]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; 
; If *Debugger\Procedures
  MOV    rbp,qword [rsp+PS44+0]
  CMP    qword [rbp+104],0
  JE    _EndIf2467
; *Pointer = *Debugger\Procedures
  MOV    rbp,qword [rsp+PS44+0]
  PUSH   qword [rbp+104]
  POP    rax
  MOV    qword [rsp+48],rax
; For i = 1 To *Debugger\NbPRocedures
  MOV    qword [rsp+56],1
  JMP   _ForSkipDebug2468
_For2468:
_ForSkipDebug2468:
  MOV    rbp,qword [rsp+PS44+0]
  MOVSXD rax,dword [rbp+100]
  CMP    rax,qword [rsp+56]
  JL    _Next2469
; Name$ = PeekAscii(*Pointer) + "()"
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  MOV    rcx,_S244
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+72]
  POP    rdx
  CALL   SYS_AllocateString4
; *Pointer + MemoryAsciiLength(*Pointer) + 1
  MOV    r15,qword [rsp+48]
  PUSH   qword 24
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL   PB_MemoryStringLength2
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; ModName$ = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  LEA    rcx,[rsp+80]
  POP    rdx
  CALL   SYS_AllocateString4
; *Pointer + MemoryAsciiLength(*Pointer) + 1
  MOV    r15,qword [rsp+48]
  PUSH   qword 24
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL   PB_MemoryStringLength2
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+48],r15
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Stats], -1, ModuleName(Name$, ModName$))            
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure68
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS44+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2640]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Next i
_NextContinue2469:
  INC    qword [rsp+56]
  JNO   _For2468
_Next2469:
; 
; Command.CommandInfo\Command = #COMMAND_GetProcedureStats
  LEA    rbp,[rsp+80]
  MOV    dword [rbp],19
; SendDebuggerCommand(*Debugger, @Command)           
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS44+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; EndIf
_EndIf2467:
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_History_Reset] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Reset"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S267
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS44+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2648],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_History_ResetAll] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","ResetAll"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S268
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS44+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2656],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_History_UpdateStats] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Update"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S220
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS44+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2664],rax
; 
; CloseGadgetList()
  CALL   PB_CloseGadgetList
; 
; EnsureWindowOnDesktop(Window)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure162
; If HistoryMaximize
  CMP    qword [v_HistoryMaximize],0
  JE    _EndIf2471
; ShowWindowMaximized(Window)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure100
; Else
  JMP   _EndIf2470
_EndIf2471:
; HideWindow(Window, 0)
  PUSH   qword 0
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_HideWindow
; EndIf
_EndIf2470:
; HistoryWindowEvents(*Debugger, #PB_Event_SizeWindow)
  PUSH   qword 13118
  PUSH   qword [rsp+PS44+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure504
; 
; CompilerIf #DEFAULT_CanWindowStayOnTop
; SetWindowStayOnTop(Window, DebuggerOnTop)
  PUSH   qword [v_DebuggerOnTop]
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL  _Procedure112
; CompilerEndIf      
; 
; Debugger_AddShortcuts(Window) 
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure6
; 
; Command.CommandInfo\Command = #COMMAND_GetHistory
  LEA    rbp,[rsp+80]
  MOV    dword [rbp],16
; SendDebuggerCommand(*Debugger, @Command)
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS44+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Debugger_ProcessEvents(Window, #PB_Event_ActivateWindow) 
  PUSH   qword 13104
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL  _Procedure14
; EndIf  
_EndIf2465:
; EndIf
_EndIf2461:
; 
; EndProcedure
_EndProcedureZero45:
  XOR    rax,rax
_EndProcedure45:
  PUSH   rax
  MOV    rcx,qword [rsp+72]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+80]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,104
  POP    r15
  POP    rbp
  RET
; Procedure Standalone_SavePreferences()
_Procedure648:
  PS648=48
  SUB    rsp,40
; 
; 
; 
; 
; If OpenPreferences(PreferenceFile$) 
  PUSH   qword [v_PreferenceFile$]
  POP    rcx
  CALL   PB_OpenPreferences
  AND    rax,rax
  JE    _EndIf3465
; 
; PreferenceGroup("Debugger")
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  CALL   PB_PreferenceGroup
; 
; WritePreferenceLong("MemorizeWindows",  DebuggerMemorizeWindows)
  PUSH   qword [v_DebuggerMemorizeWindows]
  MOV    rax,_S442
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("IsDebuggerMaximized", IsDebuggerMaximized)
  PUSH   qword [v_IsDebuggerMaximized]
  MOV    rax,_S443
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("StayOnTop",        DebuggerOnTop)
  PUSH   qword [v_DebuggerOnTop]
  MOV    rax,_S444
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("AutoBringToTop",   DebuggerBringToTop)
  PUSH   qword [v_DebuggerBringToTop]
  MOV    rax,_S445
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("CallOnStart",      CallDebuggerOnStart)
  PUSH   qword [v_CallDebuggerOnStart]
  MOV    rax,_S446
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("CallOnEnd",        CallDebuggerOnEnd)
  PUSH   qword [v_CallDebuggerOnEnd]
  MOV    rax,_S447
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("LogTimeStamp",     LogTimeStamp) 
  PUSH   qword [v_LogTimeStamp]
  MOV    rax,_S448
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; 
; WritePreferenceLong("DebugTimeStamp",   DebugTimeStamp)
  PUSH   qword [v_DebugTimeStamp]
  MOV    rax,_S451
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("DebugIsHex",       DebugIsHex)
  PUSH   qword [v_DebugIsHex]
  MOV    rax,_S452
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("DebugSystemMessages", DebugSystemMessages)
  PUSH   qword [v_DebugSystemMessages]
  MOV    rax,_S453
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("DebugOutputToErrorLog", DebugOutputToErrorLog)
  PUSH   qword [v_DebugOutputToErrorLog]
  MOV    rax,_S454
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("DebugWindowX",     DebugWindowX)
  PUSH   qword [v_DebugWindowX]
  MOV    rax,_S459
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("DebugWindowY",     DebugWindowY)
  PUSH   qword [v_DebugWindowY]
  MOV    rax,_S460
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("DebugWindowWidth", DebugWindowWidth)
  PUSH   qword [v_DebugWindowWidth]
  MOV    rax,_S461
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("DebugWindowHeight",DebugWindowHeight)
  PUSH   qword [v_DebugWindowHeight]
  MOV    rax,_S462
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("DebugWindowMaximize", DebugWindowMaximize)
  PUSH   qword [v_DebugWindowMaximize]
  MOV    rax,_S463
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; 
; WritePreferenceLong("RegisterIsHex",    RegisterIsHex)
  PUSH   qword [v_RegisterIsHex]
  MOV    rax,_S464
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("StackIsHex",       StackIsHex)
  PUSH   qword [v_StackIsHex]
  MOV    rax,_S465
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("AutoStackUpdate",  AutoStackUpdate)
  PUSH   qword [v_AutoStackUpdate]
  MOV    rax,_S466
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("AsmWindowX",       AsmWindowX)
  PUSH   qword [v_AsmWindowX]
  MOV    rax,_S467
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("AsmWindowY",       AsmWindowY)
  PUSH   qword [v_AsmWindowY]
  MOV    rax,_S468
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("AsmWindowWidth",   AsmWindowWidth)
  PUSH   qword [v_AsmWindowWidth]
  MOV    rax,_S469
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("AsmWindowHeight",  AsmWindowHeight)
  PUSH   qword [v_AsmWindowHeight]
  MOV    rax,_S470
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("AsmWindowMaximize", AsmWindowMaximize)
  PUSH   qword [v_AsmWindowMaximize]
  MOV    rax,_S471
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; 
; WritePreferenceLong("MemoryDisplayType",   MemoryDisplayType)
  PUSH   qword [v_MemoryDisplayType]
  MOV    rax,_S472
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("MemoryIsHex",         MemoryIsHex)
  PUSH   qword [v_MemoryIsHex]
  MOV    rax,_S473
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("MemoryOneColumnOnly", MemoryOneColumnOnly)
  PUSH   qword [v_MemoryOneColumnOnly]
  MOV    rax,_S474
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("MemoryViewerX",       MemoryViewerX)
  PUSH   qword [v_MemoryViewerX]
  MOV    rax,_S475
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("MemoryViewerY",       MemoryViewerY)
  PUSH   qword [v_MemoryViewerY]
  MOV    rax,_S476
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("MemoryViewerWidth",   MemoryViewerWidth)
  PUSH   qword [v_MemoryViewerWidth]
  MOV    rax,_S477
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("MemoryViewerHeight",  MemoryViewerHeight)
  PUSH   qword [v_MemoryViewerHeight]
  MOV    rax,_S478
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("MemoryViewerMaximize",MemoryViewerMaximize)
  PUSH   qword [v_MemoryViewerMaximize]
  MOV    rax,_S479
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; 
; WritePreferenceLong("VariableIsHex",       VariableIsHex)
  PUSH   qword [v_VariableIsHex]
  MOV    rax,_S480
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("VariableWindowX",     VariableWindowX)
  PUSH   qword [v_VariableWindowX]
  MOV    rax,_S481
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("VariableWindowY",     VariableWindowY)
  PUSH   qword [v_VariableWindowY]
  MOV    rax,_S482
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("VariableWindowWidth", VariableWindowWidth)
  PUSH   qword [v_VariableWindowWidth]
  MOV    rax,_S483
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("VariableWindowHeight",VariableWindowHeight)
  PUSH   qword [v_VariableWindowHeight]
  MOV    rax,_S484
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("VariableViewerMaximize",VariableViewerMaximize)
  PUSH   qword [v_VariableViewerMaximize]
  MOV    rax,_S485
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; 
; WritePreferenceLong("HistoryWindowX",      HistoryWindowX)
  PUSH   qword [v_HistoryWindowX]
  MOV    rax,_S486
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("HistoryWindowY",      HistoryWindowY)
  PUSH   qword [v_HistoryWindowY]
  MOV    rax,_S487
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("HistoryWindowWidth",  HistoryWindowWidth)
  PUSH   qword [v_HistoryWindowWidth]
  MOV    rax,_S488
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("HistoryWindowHeight", HistoryWindowHeight)
  PUSH   qword [v_HistoryWindowHeight]
  MOV    rax,_S489
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("HistoryMaximize",     HistoryMaximize)
  PUSH   qword [v_HistoryMaximize]
  MOV    rax,_S490
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; 
; WritePreferenceLong("WatchListWindowX",      WatchListWindowX)
  PUSH   qword [v_WatchListWindowX]
  MOV    rax,_S491
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("WatchListWindowY",      WatchListWindowY)
  PUSH   qword [v_WatchListWindowY]
  MOV    rax,_S492
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("WatchListWindowWidth",  WatchListWindowWidth)
  PUSH   qword [v_WatchListWindowWidth]
  MOV    rax,_S493
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("WatchListWindowHeight", WatchListWindowHeight)
  PUSH   qword [v_WatchListWindowHeight]
  MOV    rax,_S494
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("WatchListWindowMaximize", WatchListWindowMaximize)
  PUSH   qword [v_WatchListWindowMaximize]
  MOV    rax,_S495
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; 
; WritePreferenceLong("LibraryViewerX",         LibraryViewerX)
  PUSH   qword [v_LibraryViewerX]
  MOV    rax,_S496
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("LibraryViewerY",         LibraryViewerY)
  PUSH   qword [v_LibraryViewerY]
  MOV    rax,_S497
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("LibraryViewerWidth",     LibraryViewerWidth)
  PUSH   qword [v_LibraryViewerWidth]
  MOV    rax,_S498
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("LibraryViewerHeight",    LibraryViewerHeight)
  PUSH   qword [v_LibraryViewerHeight]
  MOV    rax,_S499
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("LibraryViewerSplitter1", LibraryViewerSplitter1)
  PUSH   qword [v_LibraryViewerSplitter1]
  MOV    rax,_S500
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("LibraryViewerSplitter2", LibraryViewerSplitter2)  
  PUSH   qword [v_LibraryViewerSplitter2]
  MOV    rax,_S501
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("LibraryViewerMaximize",  LibraryViewerMaximize)  
  PUSH   qword [v_LibraryViewerMaximize]
  MOV    rax,_S502
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; 
; If DebuggerMemorizeWindows 
  CMP    qword [v_DebuggerMemorizeWindows],0
  JE    _EndIf3467
; WritePreferenceLong("IsMiniDebugger", IsMiniDebugger)
  PUSH   qword [v_IsMiniDebugger]
  MOV    rax,_S503
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; EndIf
_EndIf3467:
; WritePreferenceLong("DebuggerMainWindowX",   DebuggerMainWindowX)
  PUSH   qword [v_DebuggerMainWindowX]
  MOV    rax,_S504
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("DebuggerMainWindowY",   DebuggerMainWindowY)
  PUSH   qword [v_DebuggerMainWindowY]
  MOV    rax,_S505
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("DebuggerMainWindowWidth",  DebuggerMainWindowWidth)
  PUSH   qword [v_DebuggerMainWindowWidth]
  MOV    rax,_S506
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("DebuggerMainWindowHeight", DebuggerMainWindowHeight)   
  PUSH   qword [v_DebuggerMainWindowHeight]
  MOV    rax,_S507
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; 
; WritePreferenceLong("AutoOpenDebugOutput",    AutoOpenDebugOutput)
  PUSH   qword [v_AutoOpenDebugOutput]
  MOV    rax,_S508
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("AutoOpenAsmWindow",      AutoOpenAsmWindow)
  PUSH   qword [v_AutoOpenAsmWindow]
  MOV    rax,_S509
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("AutoOpenMemoryViewer",   AutoOpenMemoryViewer)
  PUSH   qword [v_AutoOpenMemoryViewer]
  MOV    rax,_S510
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("AutoOpenVariableViewer", AutoOpenVariableViewer)
  PUSH   qword [v_AutoOpenVariableViewer]
  MOV    rax,_S511
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("AutoOpenHistory",        AutoOpenHistory)
  PUSH   qword [v_AutoOpenHistory]
  MOV    rax,_S512
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("AutoOpenWatchlist",      AutoOpenWatchlist)    
  PUSH   qword [v_AutoOpenWatchlist]
  MOV    rax,_S513
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("AutoOpenLibraryViewer",  AutoOpenLibraryViewer)    
  PUSH   qword [v_AutoOpenLibraryViewer]
  MOV    rax,_S514
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("AutoOpenDataBreakpoints",AutoOpenDataBreakpoints)   
  PUSH   qword [v_AutoOpenDataBreakpoints]
  MOV    rax,_S515
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("AutoOpenPurifier",       AutoOpenPurifier) 
  PUSH   qword [v_AutoOpenPurifier]
  MOV    rax,_S516
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; 
; WritePreferenceLong("AutoOpenProfiler",       AutoOpenProfiler)
  PUSH   qword [v_AutoOpenProfiler]
  MOV    rax,_S517
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("ProfilerRunAtStart",     ProfilerRunAtStart)
  PUSH   qword [v_ProfilerRunAtStart]
  MOV    rax,_S518
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("ProfilerX",              ProfilerX)
  PUSH   qword [v_ProfilerX]
  MOV    rax,_S519
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("ProfilerY",              ProfilerY)
  PUSH   qword [v_ProfilerY]
  MOV    rax,_S520
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("ProfilerWidth",          ProfilerWidth)
  PUSH   qword [v_ProfilerWidth]
  MOV    rax,_S521
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("ProfilerHeight",         ProfilerHeight)
  PUSH   qword [v_ProfilerHeight]
  MOV    rax,_S522
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("ProfilerSplitter",       ProfilerSplitter)
  PUSH   qword [v_ProfilerSplitter]
  MOV    rax,_S523
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("ProfilerMaximize",       ProfilerMaximize)
  PUSH   qword [v_ProfilerMaximize]
  MOV    rax,_S524
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; 
; WritePreferenceLong("DataBreakpointWindowX",       DataBreakpointWindowX)
  PUSH   qword [v_DataBreakpointWindowX]
  MOV    rax,_S525
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("DataBreakpointWindowY",       DataBreakpointWindowY)
  PUSH   qword [v_DataBreakpointWindowY]
  MOV    rax,_S526
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("DataBreakpointWindowWidth",   DataBreakpointWindowWidth)
  PUSH   qword [v_DataBreakpointWindowWidth]
  MOV    rax,_S527
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("DataBreakpointWindowHeight",  DataBreakpointWindowHeight) 
  PUSH   qword [v_DataBreakpointWindowHeight]
  MOV    rax,_S528
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("DataBreakpointWindowMaximize", DataBreakpointWindowMaximize)
  PUSH   qword [v_DataBreakpointWindowMaximize]
  MOV    rax,_S529
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; 
; WritePreferenceLong("PurifierWindowX",             PurifierWindowX)
  PUSH   qword [v_PurifierWindowX]
  MOV    rax,_S530
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; WritePreferenceLong("PurifierWindowY",             PurifierWindowY)
  PUSH   qword [v_PurifierWindowY]
  MOV    rax,_S531
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_WritePreferenceLong
; 
; ClosePreferences()
  CALL   PB_ClosePreferences
; Else
  JMP   _EndIf3464
_EndIf3465:
; MessageRequester("PureBasic Debugger", ReplaceString(Language("Misc","PreferenceError"), "%filename%", PreferenceFile$, 1), #FLAG_Error)  
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 16
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [v_PreferenceFile$]
  MOV    rax,_S201
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S535
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ReplaceString2
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S156
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_MessageRequester2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf3464:
; 
; EndProcedure
_EndProcedureZero649:
  XOR    rax,rax
_EndProcedure649:
  ADD    rsp,40
  RET
; Procedure UpdateAsmWindow(*Debugger.DebuggerData)
_Procedure454:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS454=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; SetWindowTitle(*Debugger\Windows[#DEBUGGER_WINDOW_Asm], Language("Debugger","AsmWindowTitle") + " - " + GetFilePart(*Debugger\FileName$))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S216
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS454+40]
  PUSH   qword [rbp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetFilePart
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS454+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+840]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetWindowTitle
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Panel], 0, Language("Debugger","Registers"), 0)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S217
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS454+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1000]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Panel], 1, Language("Debugger","Stack"), 0)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S219
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS454+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1000]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; For i = 0 To *Debugger\RegisterCount-1
  MOV    qword [rsp+40],0
  JMP   _ForSkipDebug1747
_For1747:
_ForSkipDebug1747:
  MOV    rbp,qword [rsp+PS454+0]
  MOVSXD r15,dword [rbp+160]
  DEC    r15
  CMP    r15,qword [rsp+40]
  JL    _Next1748
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Text0+i], Language("Debugger","Set"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S215
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS454+24]
  PUSH   rbp
  MOV    r15,qword [rsp+72]
  ADD    r15,16
  MOV    rax,r15
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+912]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Next i
_NextContinue1748:
  INC    qword [rsp+40]
  JNO   _For1747
_Next1748:
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_UpdateStack], Language("Debugger","Update"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S220
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS454+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1016]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; If AutoStackUpdate
  CMP    qword [v_AutoStackUpdate],0
  JE    _EndIf1750
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_UpdateStack], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS454+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1016]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; Else
  JMP   _EndIf1749
_EndIf1750:
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_UpdateStack], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS454+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1016]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; EndIf    
_EndIf1749:
; 
; ResizeRegisterDisplay(*Debugger) 
  PUSH   qword [rsp+PS454+0]
  POP    rcx
  CALL  _Procedure446
; AsmWindowEvents(*Debugger, #PB_Event_SizeWindow)
  PUSH   qword 13118
  PUSH   qword [rsp+PS454+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure450
; 
; EndProcedure
_EndProcedureZero455:
  XOR    rax,rax
_EndProcedure455:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure Profiler_DebuggerEvent(*Debugger.DebuggerData)
_Procedure30:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS30=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; If *Debugger\Command\Command = #COMMAND_ControlProfiler
  MOV    rbp,qword [rsp+PS30+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,42
  JNE   _EndIf3195
; 
; If *Debugger\Command\Value1 = 1 
  MOV    rbp,qword [rsp+PS30+0]
  MOVSXD r15,dword [rbp+60]
  CMP    r15,1
  JNE   _EndIf3197
; OpenProfilerWindow(*Debugger)  
  PUSH   qword [rsp+PS30+0]
  POP    rcx
  CALL  _Procedure50
; EndIf
_EndIf3197:
; 
; 
; *Debugger\ProfilerRunning = *Debugger\Command\Value2
  MOV    rbp,qword [rsp+PS30+0]
  MOVSXD rax,dword [rbp+64]
  PUSH   rax
  MOV    rbp,qword [rsp+PS30+8]
  POP    rax
  MOV    dword [rbp+692],eax
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Profiler]
  MOV    rbp,qword [rsp+PS30+0]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+888],0
  JE    _EndIf3199
; If *Debugger\ProfilerRunning
  MOV    rbp,qword [rsp+PS30+0]
  CMP    dword [rbp+692],0
  JE    _EndIf3201
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Start], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS30+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2896]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Stop], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS30+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2904]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; Else
  JMP   _EndIf3200
_EndIf3201:
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Start], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS30+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2896]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Stop], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS30+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2904]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; EndIf      
_EndIf3200:
; EndIf
_EndIf3199:
; 
; ElseIf *Debugger\Command\Command = #COMMAND_ProfilerOffsets And *Debugger\CommandData And *Debugger\ProfilerFiles = 0
  JMP   _EndIf3194
_EndIf3195:
  MOV    rbp,qword [rsp+PS30+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,34
  JNE    No330
  MOV    rbp,qword [rsp+PS30+0]
  CMP    qword [rbp+72],0
  JE     No330
  MOV    rbp,qword [rsp+PS30+0]
  MOV    r15,qword [rbp+696]
  AND    r15,r15
  JNE    No330
Ok330:
  MOV    rax,1
  JMP    End330
No330:
  XOR    rax,rax
End330:
  AND    rax,rax
  JE    _EndIf3203
; 
; 
; count = *Debugger\Command\Value1
  MOV    rbp,qword [rsp+PS30+0]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+40],rax
; 
; *Debugger\ProfilerFiles = AllocateMemory(count * SizeOf(Debugger_ProfilerData))
  MOV    r15,qword [rsp+40]
  IMUL   r15,20
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS30+8]
  POP    rax
  MOV    qword [rbp+696],rax
; If *Debugger\ProfilerFiles
  MOV    rbp,qword [rsp+PS30+0]
  CMP    qword [rbp+696],0
  JE    _EndIf3205
; *files.Debugger_ProfilerList = *Debugger\ProfilerFiles
  MOV    rbp,qword [rsp+PS30+0]
  PUSH   qword [rbp+696]
  POP    rax
  MOV    qword [rsp+48],rax
; 
; 
; max = 0    
  MOV    qword [rsp+56],0
; For i = 0 To count-1
  MOV    qword [rsp+64],0
  JMP   _ForSkipDebug3206
_For3206:
_ForSkipDebug3206:
  MOV    r15,qword [rsp+40]
  DEC    r15
  CMP    r15,qword [rsp+64]
  JL    _Next3207
; *files\file[i]\Offset = PeekL(*Debugger\CommandData + i*SizeOf(LONG))
  MOV    rbp,qword [rsp+PS30+0]
  MOV    r15,qword [rbp+72]
  MOV    r14,qword [rsp+64]
  SAL    r14,2
  ADD    r15,r14
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_PeekL
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    dword [rbp],eax
; 
; 
; If i < count-1
  MOV    r15,qword [rsp+64]
  MOV    r14,qword [rsp+40]
  DEC    r14
  CMP    r15,r14
  JGE   _EndIf3209
; *files\file[i]\Size = PeekL(*Debugger\CommandData + (i+1)*SizeOf(LONG)) - *files\file[i]\Offset
  MOV    rbp,qword [rsp+PS30+0]
  MOV    r15,qword [rbp+72]
  MOV    r14,qword [rsp+64]
  INC    r14
  SAL    r14,2
  ADD    r15,r14
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_PeekL
  MOV    r15,rax
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp]
  SUB    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    dword [rbp+4],eax
; Else
  JMP   _EndIf3208
_EndIf3209:
; *files\file[i]\Size = *Debugger\Command\Value2 - *files\file[i]\Offset
  MOV    rbp,qword [rsp+PS30+0]
  MOVSXD r15,dword [rbp+64]
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp]
  SUB    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    dword [rbp+4],eax
; EndIf
_EndIf3208:
; 
; 
; *files\file[i]\Color = PeekL(?Profiler_Colors + (i % #Profiler_Colors) * SizeOf(LONG))
  MOV    rbp,ll_profiler_debuggerevent_profiler_colors
  MOV    r15,rbp
  MOV    r14,qword [rsp+64]
  MOV    rax,r14
  MOV    rcx,18
  CQO
  IDIV   rcx
  MOV    r14,rdx
  SAL    r14,2
  ADD    r15,r14
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_PeekL
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    dword [rbp+8],eax
; 
; newImage = CreateImage(#PB_Any, #DEFAULT_ListIconImageSize, #DEFAULT_ListIconImageSize)
  PUSH   qword 16
  PUSH   qword 16
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CreateImage
  MOV    qword [rsp+72],rax
; If newImage And StartDrawing(ImageOutput(newImage))
  CMP    qword [rsp+72],0
  JE     No331
  PUSH   qword [rsp+72]
  POP    rcx
  CALL   PB_ImageOutput
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_StartDrawing
  AND    rax,rax
  JE     No331
Ok331:
  MOV    rax,1
  JMP    End331
No331:
  XOR    rax,rax
End331:
  AND    rax,rax
  JE    _EndIf3212
; Box(0, 0, #DEFAULT_ListIconImageSize, #DEFAULT_ListIconImageSize, $FFFFFF)
  SUB    rsp,8
  PUSH   qword 16777215
  PUSH   qword 16
  PUSH   qword 16
  PUSH   qword 0
  PUSH   qword 0
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Box2
  ADD    rsp,48
; Box(#DEFAULT_ListIconImageOffset, #DEFAULT_ListIconImageOffset, 12, 12, $000000)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 12
  PUSH   qword 12
  PUSH   qword 2
  PUSH   qword 2
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Box2
  ADD    rsp,48
; Box(#DEFAULT_ListIconImageOffset+1, #DEFAULT_ListIconImageOffset+1, 10, 10, *files\file[i]\Color)              
  SUB    rsp,8
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  PUSH   qword 3
  PUSH   qword 3
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Box2
  ADD    rsp,48
; StopDrawing()
  CALL   PB_StopDrawing
; EndIf
_EndIf3212:
; *files\file[i]\ColorImage = newImage   
  PUSH   qword [rsp+72]
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    qword [rbp+12],rax
; 
; 
; If *Debugger\NbIncludedFiles > 0 And *Debugger\Windows[#DEBUGGER_WINDOW_Profiler]
  MOV    rbp,qword [rsp+PS30+0]
  MOVSXD r15,dword [rbp+88]
  AND    r15,r15
  JLE    No332
  MOV    rbp,qword [rsp+PS30+0]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+888],0
  JE     No332
Ok332:
  MOV    rax,1
  JMP    End332
No332:
  XOR    rax,rax
End332:
  AND    rax,rax
  JE    _EndIf3214
; 
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], i, GetDebuggerRelativeFile(*Debugger, i << 24), ImageID(*files\file[i]\ColorImage))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+12]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+112]
  SAL    r15,24
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+PS30+56]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure250
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+96]
  MOV    rbp,qword [rsp+PS30+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemData(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], i, i)
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+72]
  MOV    rbp,qword [rsp+PS30+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetItemData
; EndIf
_EndIf3214:
; 
; max = Max(max, *files\file[i]\Size)
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp+4]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+56],rax
; Next i
_NextContinue3207:
  INC    qword [rsp+64]
  JNO   _For3206
_Next3207:
; 
; If *Debugger\NbIncludedFiles > 0 And *Debugger\Windows[#DEBUGGER_WINDOW_Profiler]
  MOV    rbp,qword [rsp+PS30+0]
  MOVSXD r15,dword [rbp+88]
  AND    r15,r15
  JLE    No333
  MOV    rbp,qword [rsp+PS30+0]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+888],0
  JE     No333
Ok333:
  MOV    rax,1
  JMP    End333
No333:
  XOR    rax,rax
End333:
  AND    rax,rax
  JE    _EndIf3216
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], 0) 
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS30+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; EndIf
_EndIf3216:
; 
; *Debugger\ProfilerNumberLength = Len(Str(max))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS30+8]
  POP    rax
  MOV    dword [rbp+720],eax
; EndIf
_EndIf3205:
; 
; ElseIf *Debugger\Command\Command = #COMMAND_ProfilerData And *Debugger\CommandData And *Debugger\ProfilerFiles 
  JMP   _EndIf3194
_EndIf3203:
  MOV    rbp,qword [rsp+PS30+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,35
  JNE    No334
  MOV    rbp,qword [rsp+PS30+0]
  CMP    qword [rbp+72],0
  JE     No334
  MOV    rbp,qword [rsp+PS30+0]
  CMP    qword [rbp+696],0
  JE     No334
Ok334:
  MOV    rax,1
  JMP    End334
No334:
  XOR    rax,rax
End334:
  AND    rax,rax
  JE    _EndIf3217
; If *Debugger\ProfilerData
  MOV    rbp,qword [rsp+PS30+0]
  CMP    qword [rbp+704],0
  JE    _EndIf3219
; FreeMemory(*Debugger\ProfilerData)
  MOV    rbp,qword [rsp+PS30+0]
  PUSH   qword [rbp+704]
  POP    rcx
  CALL   PB_FreeMemory
; *Debugger\ProfilerData = 0
  MOV    rbp,qword [rsp+PS30+0]
  MOV    qword [rbp+704],0
; EndIf       
_EndIf3219:
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Profiler] <> 0 
  MOV    rbp,qword [rsp+PS30+0]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+888]
  AND    r15,r15
  JE    _EndIf3221
; 
; 
; 
; 
; 
; 
; 
; *Debugger\ProfilerData = *Debugger\CommandData
  MOV    rbp,qword [rsp+PS30+0]
  PUSH   qword [rbp+72]
  MOV    rbp,qword [rsp+PS30+8]
  POP    rax
  MOV    qword [rbp+704],rax
; *Debugger\CommandData  = 0        
  MOV    rbp,qword [rsp+PS30+0]
  MOV    qword [rbp+72],0
; 
; Profiler_UpdateBounds(*Debugger)
  PUSH   qword [rsp+PS30+0]
  POP    rcx
  CALL  _Procedure596
; Profiler_DrawAll(*Debugger) 
  PUSH   qword [rsp+PS30+0]
  POP    rcx
  CALL  _Procedure576
; Profiler_UpdateStats(*Debugger)
  PUSH   qword [rsp+PS30+0]
  POP    rcx
  CALL  _Procedure598
; 
; EndIf
_EndIf3221:
; 
; EndIf
_EndIf3194:
_EndIf3217:
; 
; EndProcedure
_EndProcedureZero31:
  XOR    rax,rax
_EndProcedure31:
  ADD    rsp,80
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure UpdateMemoryViewerWindowState(*Debugger.DebuggerData)
_Procedure486:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS486=64
  SUB    rsp,40
; 
; If *Debugger\ProgramState = -1 
  MOV    rbp,qword [rsp+PS486+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JNE   _EndIf1929
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Start], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS486+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2240]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_End], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS486+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2248]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Display], 1)    
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS486+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2256]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; Else
  JMP   _EndIf1928
_EndIf1929:
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Start], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS486+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2240]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_End], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS486+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2248]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Display], 0)      
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS486+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2256]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; EndIf
_EndIf1928:
; 
; EndProcedure
_EndProcedureZero487:
  XOR    rax,rax
_EndProcedure487:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure DebuggerCallback(*Debugger.DebuggerData)
_Procedure0:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS0=336
  MOV    rax,33
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; Select *Debugger\Command\Command
  MOV    rbp,qword [rsp+PS0+0]
  MOVSXD rax,dword [rbp+52]
  PUSH   rax
; 
; Case #COMMAND_FatalError  
  MOV    r15,-1
  CMP    r15,[rsp]
  JNE   _Case365
; Select *Debugger\Command\Value1
  MOV    rbp,qword [rsp+PS0+8]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
; Case #ERROR_Memory
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case366
; Text$ = Language("Debugger", "MemoryError")
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S179
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Case #ERROR_Pipe
  JMP   _EndSelect58
_Case366:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case367
; Text$ = Language("Debugger", "PipeError")
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S180
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Case #ERROR_ExeQuit
  JMP   _EndSelect58
_Case367:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case368
; Text$ = Language("Debugger", "ExeQuitError")
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S181
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Case #ERROR_Timeout
  JMP   _EndSelect58
_Case368:
  MOV    r15,4
  CMP    r15,[rsp]
  JNE   _Case369
; Text$ = Language("Debugger", "TimeoutError")
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S182
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Case #ERROR_Version
  JMP   _EndSelect58
_Case369:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case370
; Text$ = Language("Debugger", "VersionError")
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S185
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Case #ERROR_NetworkFail
  JMP   _EndSelect58
_Case370:
  MOV    r15,6
  CMP    r15,[rsp]
  JNE   _Case371
; Text$ = Language("Debugger", "NetworkError")
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S184
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; EndSelect   
_Case371:
_EndSelect58:
  POP    rax
; 
; Text$ = StringField(Text$, 1, Left(#NewLine, 1)) 
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  MOV    rax,_S63
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 1
  PUSH   qword [rsp+80]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,32
  LEA    rcx,[rsp+56]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Standalone_AddLog(Text$, *Debugger\Command\TimeStamp) 
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS0+16]
  MOVSXD rax,dword [rbp+68]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure682
  ADD    rsp,40
; StatusBarText(#STATUSBAR, 0, Text$)   
  SUB    rsp,8
  PUSH   qword [rsp+56]
  PUSH   qword 0
  PUSH   qword 0
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StatusBarText
  ADD    rsp,40
; 
; UpdateGadgetStates()  
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure686
  ADD    rsp,40
; Debugger_End(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS0+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure428
  ADD    rsp,40
; 
; 
; DisableGadget(#GADGET_Debug, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 9
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; DisableGadget(#GADGET_Watchlist, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 10
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; DisableGadget(#GADGET_Variables, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 11
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; DisableGadget(#GADGET_Profiler, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 12
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; DisableGadget(#GADGET_History, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 13
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; DisableGadget(#GADGET_Memory, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 14
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; DisableGadget(#GADGET_Library, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 16
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; DisableGadget(#GADGET_Assembly, 1)   
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 15
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; DisableGadget(#GADGET_DataBreak, 1)   
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 21
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; 
; 
; Case #COMMAND_Init  
  JMP   _EndSelect57
_Case365:
  XOR    r15,r15
  CMP    r15,[rsp]
  JNE   _Case372
; If *Debugger\IncludedFiles 
  MOV    rbp,qword [rsp+PS0+8]
  CMP    qword [rbp+92],0
  JE    _EndIf3779
; SourcePath$   = PeekAscii(*Debugger\IncludedFiles)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS0+40]
  PUSH   qword [rbp+92]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; RealFileName$ = PeekAscii(*Debugger\IncludedFiles + MemoryAsciiLength(*Debugger\IncludedFiles) + 1)  
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS0+40]
  MOV    r15,qword [rbp+92]
  SUB    rsp,8
  PUSH   qword 24
  MOV    rbp,qword [rsp+PS0+56]
  PUSH   qword [rbp+92]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; RealFileName$ = ResolveRelativePath(SourcePath$, RealFileName$) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure160
  ADD    rsp,48
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf 
_EndIf3779:
; 
; 
; If MainFileName$ <> ""
  PUSH   qword [v_MainFileName$]
  MOV    rcx,_S3
  POP    rdx
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JNE   _EndIf3781
; If *Debugger\IncludedFiles 
  MOV    rbp,qword [rsp+PS0+8]
  CMP    qword [rbp+92],0
  JE    _EndIf3783
; SourcePath$ = PeekAscii(*Debugger\IncludedFiles) 
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS0+40]
  PUSH   qword [rbp+92]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Debugger\FileName$ = CreateRelativePath(SourcePath$, MainFileName$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [v_MainFileName$]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure158
  ADD    rsp,48
  MOV    rbp,qword [rsp+PS0+16]
  LEA    rcx,[rbp+80]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf3782
_EndIf3783:
; *Debugger\FileName$ = MainFileName$
  MOV    rcx,qword [v_MainFileName$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rbp,qword [rsp+PS0+16]
  LEA    rcx,[rbp+80]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf              
_EndIf3782:
; Else
  JMP   _EndIf3780
_EndIf3781:
; *Debugger\FileName$ = RealFileName$        
  MOV    rcx,qword [rsp+64]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rbp,qword [rsp+PS0+16]
  LEA    rcx,[rbp+80]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf3780:
; 
; SetWindowTitle(#WINDOW_Main, "PureBasic Debugger - "+GetFilePart(*Debugger\FileName$))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S595
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+40]
  PUSH   qword [rbp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetFilePart
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetWindowTitle
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; 
; 
; Debugger_UpdateWindowPreferences()
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure624
  ADD    rsp,40
; 
; NbSourceFiles = *Debugger\NbIncludedFiles
  MOV    rbp,qword [rsp+PS0+8]
  MOVSXD rax,dword [rbp+88]
  PUSH   rax
  POP    rax
  MOV    qword [v_NbSourceFiles],rax
; CurrentSource = 0
  MOV    qword [v_CurrentSource],0
; Global Dim SourceFiles.DisplayedSource(NbSourceFiles)
  MOV    rax,qword [v_NbSourceFiles]
  INC    rax
  SUB    rsp,16
  MOV    rdx,rax
  MOV    rax,a_SourceFiles
  PUSH   rax
  MOV    r9,s_displayedsource
  MOV    r8,7
  MOV    rcx,24
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,56
  MOV    qword [a_SourceFiles],rax
; 
; 
; For i = 0 To NbSourceFiles        
  MOV    qword [rsp+72],0
  JMP   _ForSkipDebug3786
_For3786:
_ForSkipDebug3786:
  MOV    rax,qword [v_NbSourceFiles]
  CMP    rax,qword [rsp+72]
  JL    _Next3787
; SourceFiles(i)\FileName$ = GetDebuggerFile(*Debugger, i<<24)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+96]
  SAL    r15,24
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+PS0+40]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure248
  ADD    rsp,48
  MOV    r15,qword [rsp+80]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  LEA    rcx,[rbp]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; AddGadgetItem(#GADGET_SelectSource, -1, GetDebuggerRelativeFile(*Debugger, i<<24))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+96]
  SAL    r15,24
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+PS0+40]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure250
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  PUSH   qword 22
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Next i   
_NextContinue3787:
  INC    qword [rsp+72]
  JNO   _For3786
_Next3787:
; 
; 
; 
; 
; ForEach BreakpointStrings()               
  MOV    rcx,qword [t_BreakpointStrings]
  CALL   PB_ResetList
_ForEach3788:
  MOV    rcx,qword [t_BreakpointStrings]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next3788
; If FindString(BreakpointStrings(), ",", 1) <> 0
  SUB    rsp,8
  PUSH   qword 1
  MOV    rax,_S30
  PUSH   rax
  MOV    rbp,qword [t_BreakpointStrings+8]
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_FindString2
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,r15
  JE    _EndIf3790
; x = FindString(BreakpointStrings(), ",", 1)
  SUB    rsp,8
  PUSH   qword 1
  MOV    rax,_S30
  PUSH   rax
  MOV    rbp,qword [t_BreakpointStrings+8]
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_FindString2
  ADD    rsp,40
  MOV    qword [rsp+80],rax
; FileName$ = Trim(Right(BreakpointStrings(), Len(BreakpointStrings())-x))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rbp+16]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  SUB    r15,qword [rsp+112]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,32
  LEA    rcx,[rsp+96]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; 
; 
; 
; If IsEqualFile(FileName$, RealFileName$)
  SUB    rsp,8
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure156
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf3792
; AddElement(Breakpoints()) 
  SUB    rsp,8
  PUSH   qword [t_Breakpoints]
  POP    rcx
  SUB    rsp,32
  CALL   PB_AddElement
  ADD    rsp,40
; Breakpoints() = (Val(Trim(Left(BreakpointStrings(), x-1)))-1)              
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+128]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [t_BreakpointStrings+8]
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
  MOV    r15,rax
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [t_Breakpoints+8]
  POP    rax
  MOV    dword [rbp+16],eax
; Else                             
  JMP   _EndIf3791
_EndIf3792:
; For i = 0 To NbSourceFiles
  MOV    qword [rsp+72],0
  JMP   _ForSkipDebug3794
_For3794:
_ForSkipDebug3794:
  MOV    rax,qword [v_NbSourceFiles]
  CMP    rax,qword [rsp+72]
  JL    _Next3795
; If IsEqualFile(FileName$, SourceFiles(i)\FileName$)
  SUB    rsp,8
  MOV    r15,qword [rsp+80]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp]
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure156
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf3797
; AddElement(Breakpoints()) 
  SUB    rsp,8
  PUSH   qword [t_Breakpoints]
  POP    rcx
  SUB    rsp,32
  CALL   PB_AddElement
  ADD    rsp,40
; Breakpoints() = (Val(Trim(Left(BreakpointStrings(), x-1)))-1) | i<<24              
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+128]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [t_BreakpointStrings+8]
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
  MOV    r15,rax
  DEC    r15
  MOV    r14,qword [rsp+72]
  SAL    r14,24
  OR     r15,r14
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [t_Breakpoints+8]
  POP    rax
  MOV    dword [rbp+16],eax
; Break
  JMP   _Next3795
; EndIf
_EndIf3797:
; Next i 
_NextContinue3795:
  INC    qword [rsp+72]
  JNO   _For3794
_Next3795:
; EndIf         
_EndIf3791:
; Else
  JMP   _EndIf3789
_EndIf3790:
; AddElement(Breakpoints()) 
  SUB    rsp,8
  PUSH   qword [t_Breakpoints]
  POP    rcx
  SUB    rsp,32
  CALL   PB_AddElement
  ADD    rsp,40
; Breakpoints() = Val(Trim(BreakpointStrings()))-1
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [t_BreakpointStrings+8]
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
  MOV    r15,rax
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [t_Breakpoints+8]
  POP    rax
  MOV    dword [rbp+16],eax
; EndIf                 
_EndIf3789:
; 
; Next BreakpointStrings()
  JMP   _ForEach3788
_Next3788:
; ClearList(BreakpointStrings()) 
  SUB    rsp,8
  PUSH   qword [t_BreakpointStrings]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ClearList
  ADD    rsp,40
; 
; 
; SetGadgetText(#GADGET_Waiting, Language("StandaloneDebugger","NoFile"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S596
  PUSH   rax
  MOV    rax,_S539
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 18
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; 
; SourceFiles(0)\Gadget = LoadSource(RealFileName$) 
  SUB    rsp,8
  PUSH   qword [rsp+72]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure660
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [a_SourceFiles]
  POP    rax
  MOV    qword [rbp+16],rax
; If SourceFiles(0)\Gadget
  MOV    rbp,qword [a_SourceFiles]
  CMP    qword [rbp+16],0
  JE    _EndIf3800
; SourceFiles(0)\IsLoaded = 1
  MOV    rbp,qword [a_SourceFiles]
  MOV    dword [rbp+8],1
; HideGadget(#GADGET_Waiting, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 18
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; ElseIf *Debugger\IsNetwork
  JMP   _EndIf3799
_EndIf3800:
  MOV    rbp,qword [rsp+PS0+8]
  CMP    dword [rbp+40],0
  JE    _EndIf3801
; 
; Command.CommandInfo\Command = #COMMAND_GetFile
  LEA    rbp,[rsp+96]
  MOV    dword [rbp],38
; Command\Value1 = 0
  MOV    dword [rbp+8],0
; SendDebuggerCommand(*Debugger, @Command)                          
  SUB    rsp,8
  LEA    rax,[rsp+104]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS0+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; SourceFiles(0)\IsRequested = 1
  MOV    rbp,qword [a_SourceFiles]
  MOV    dword [rbp+12],1
; EndIf
_EndIf3799:
_EndIf3801:
; SetGadgetState(#GADGET_SelectSource, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 22
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; CurrentSource = 0
  MOV    qword [v_CurrentSource],0
; Standalone_ResizeGUI() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure664
  ADD    rsp,40
; 
; 
; 
; 
; SetGadgetState(#GADGET_Debug, AutoOpenDebugOutput)
  SUB    rsp,8
  PUSH   qword [v_AutoOpenDebugOutput]
  PUSH   qword 9
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(#GADGET_Watchlist, AutoOpenWatchlist)
  SUB    rsp,8
  PUSH   qword [v_AutoOpenWatchlist]
  PUSH   qword 10
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(#GADGET_Variables, AutoOpenVariableViewer)
  SUB    rsp,8
  PUSH   qword [v_AutoOpenVariableViewer]
  PUSH   qword 11
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(#GADGET_Profiler, AutoOpenProfiler)
  SUB    rsp,8
  PUSH   qword [v_AutoOpenProfiler]
  PUSH   qword 12
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(#GADGET_History, AutoOpenHistory)
  SUB    rsp,8
  PUSH   qword [v_AutoOpenHistory]
  PUSH   qword 13
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(#GADGET_Memory, AutoOpenMemoryViewer)
  SUB    rsp,8
  PUSH   qword [v_AutoOpenMemoryViewer]
  PUSH   qword 14
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(#GADGET_Assembly, AutoOpenAsmWindow)    
  SUB    rsp,8
  PUSH   qword [v_AutoOpenAsmWindow]
  PUSH   qword 15
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(#GADGET_Library, AutoOpenLibraryViewer)
  SUB    rsp,8
  PUSH   qword [v_AutoOpenLibraryViewer]
  PUSH   qword 16
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(#GADGET_DataBreak, AutoOpenDataBreakpoints)
  SUB    rsp,8
  PUSH   qword [v_AutoOpenDataBreakpoints]
  PUSH   qword 21
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(#GADGET_Purifier, AutoOpenPurifier)
  SUB    rsp,8
  PUSH   qword [v_AutoOpenPurifier]
  PUSH   qword 17
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; 
; 
; 
; Command.CommandInfo\Command = #COMMAND_WarningMode
  LEA    rbp,[rsp+96]
  MOV    dword [rbp],36
; Command\Value1 = WarningMode
  PUSH   qword [v_WarningMode]
  POP    rax
  MOV    dword [rbp+8],eax
; SendDebuggerCommand(*Debugger, @Command)       
  SUB    rsp,8
  LEA    rax,[rsp+104]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS0+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; 
; If PurifierSettings$       
  MOV    rcx,qword [v_PurifierSettings$]
  XOR    rdx,rdx
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JNE   _EndIf3803
; ApplyDefaultPurifierOptions(*Debugger, PurifierSettings$)
  SUB    rsp,8
  PUSH   qword [v_PurifierSettings$]
  PUSH   qword [rsp+PS0+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure70
  ADD    rsp,40
; EndIf
_EndIf3803:
; 
; Case #COMMAND_File
  JMP   _EndSelect57
_Case372:
  MOV    r15,40
  CMP    r15,[rsp]
  JNE   _Case373
; If *Debugger\Command\Value2 And *Debugger\CommandData 
  MOV    rbp,qword [rsp+PS0+8]
  CMP    dword [rbp+64],0
  JE     No370
  MOV    rbp,qword [rsp+PS0+8]
  CMP    qword [rbp+72],0
  JE     No370
Ok370:
  MOV    rax,1
  JMP    End370
No370:
  XOR    rax,rax
End370:
  AND    rax,rax
  JE    _EndIf3805
; Index = *Debugger\Command\Value1
  MOV    rbp,qword [rsp+PS0+8]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+120],rax
; If SourceFiles(Index)\IsLoaded = 0
  MOV    r15,qword [rsp+120]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  MOVSXD r15,dword [rbp+8]
  AND    r15,r15
  JNE   _EndIf3807
; 
; 
; 
; If *Debugger\Command\DataSize > 3 And                PeekA(*Debugger\CommandData)   = $EF And               PeekA(*Debugger\CommandData+1) = $BB And               PeekA(*Debugger\CommandData+2) = $BF
  MOV    rbp,qword [rsp+PS0+8]
  MOVSXD r15,dword [rbp+56]
  CMP    r15,3
  JLE    No371
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS0+16]
  PUSH   qword [rbp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekA
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,239
  JNE    No371
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS0+16]
  MOV    r15,qword [rbp+72]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekA
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,187
  JNE    No371
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS0+16]
  MOV    r15,qword [rbp+72]
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekA
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,191
  JNE    No371
Ok371:
  MOV    rax,1
  JMP    End371
No371:
  XOR    rax,rax
End371:
  AND    rax,rax
  JE    _EndIf3809
; Format = #PB_UTF8
  MOV    qword [rsp+128],2
; Else
  JMP   _EndIf3808
_EndIf3809:
; Format = #PB_Ascii
  MOV    qword [rsp+128],24
; EndIf
_EndIf3808:
; 
; SourceFiles(Index)\Gadget = LoadSourceBuffer(*Debugger\CommandData, *Debugger\Command\DataSize, Format)
  SUB    rsp,8
  PUSH   qword [rsp+136]
  MOV    rbp,qword [rsp+PS0+24]
  MOVSXD rax,dword [rbp+56]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS0+32]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure658
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    r15,qword [rsp+128]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  POP    rax
  MOV    qword [rbp+16],rax
; If SourceFiles(Index)\Gadget
  MOV    r15,qword [rsp+120]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  CMP    qword [rbp+16],0
  JE    _EndIf3812
; SourceFiles(Index)\IsLoaded = 1
  MOV    r15,qword [rsp+120]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  MOV    dword [rbp+8],1
; 
; If Index <> CurrentSource
  MOV    r15,qword [rsp+120]
  CMP    r15,qword [v_CurrentSource]
  JE    _EndIf3814
; HideGadget(SourceFiles(Index)\Gadget, 1)            
  SUB    rsp,8
  PUSH   qword 1
  MOV    r15,qword [rsp+136]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; Else
  JMP   _EndIf3813
_EndIf3814:
; HideGadget(#GADGET_Waiting, 1) 
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 18
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; EndIf
_EndIf3813:
; 
; 
; ForEach DelayedActions()
  MOV    rcx,qword [t_DelayedActions]
  CALL   PB_ResetList
_ForEach3816:
  MOV    rcx,qword [t_DelayedActions]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next3816
; If DelayedActions()\FileIndex = Index
  MOV    rbp,qword [t_DelayedActions+8]
  MOVSXD r15,dword [rbp+16]
  CMP    r15,qword [rsp+120]
  JNE   _EndIf3818
; SourceLineAction(DelayedActions()\Line, DelayedActions()\Action)
  SUB    rsp,8
  MOV    rbp,qword [t_DelayedActions+8]
  MOVSXD rax,dword [rbp+24]
  MOV    rax,rax
  PUSH   rax
  MOVSXD rax,dword [rbp+20]
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure666
  ADD    rsp,40
; DeleteElement(DelayedActions())
  SUB    rsp,8
  PUSH   qword [t_DelayedActions]
  POP    rcx
  SUB    rsp,32
  CALL   PB_DeleteElement
  ADD    rsp,40
; EndIf
_EndIf3818:
; Next DelayedActions()
  JMP   _ForEach3816
_Next3816:
; 
; Standalone_ResizeGUI() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure664
  ADD    rsp,40
; EndIf
_EndIf3812:
; EndIf
_EndIf3807:
; EndIf
_EndIf3805:
; 
; Case #COMMAND_Procedures            
  JMP   _EndSelect57
_Case373:
  MOV    r15,24
  CMP    r15,[rsp]
  JNE   _Case374
; 
; ForEach BreakPoints()
  MOV    rcx,qword [t_Breakpoints]
  CALL   PB_ResetList
_ForEach3819:
  MOV    rcx,qword [t_Breakpoints]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next3819
; Command.CommandInfo\Command = #COMMAND_BreakPoint
  LEA    rbp,[rsp+96]
  MOV    dword [rbp],3
; Command\Value1 = 1 
  MOV    dword [rbp+8],1
; Command\Value2 = Breakpoints()
  MOV    rbp,qword [t_Breakpoints+8]
  MOVSXD rax,dword [rbp+16]
  PUSH   rax
  LEA    rbp,[rsp+104]
  POP    rax
  MOV    dword [rbp+12],eax
; SendDebuggerCommand(*Debugger, @Command)        
  SUB    rsp,8
  LEA    rax,[rsp+104]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS0+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; Next Breakpoints()
  JMP   _ForEach3819
_Next3819:
; 
; 
; ForEach Watchlist()
  MOV    rcx,qword [t_Watchlist]
  CALL   PB_ResetList
_ForEach3820:
  MOV    rcx,qword [t_Watchlist]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next3820
; If FindString(Watchlist(), ">", 1) = 0
  SUB    rsp,8
  PUSH   qword 1
  MOV    rax,_S597
  PUSH   rax
  MOV    rbp,qword [t_Watchlist+8]
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_FindString2
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3822
; ProcIndex = -1
  MOV    qword [rsp+136],-1
; Variable$ = Watchlist()
  MOV    rbp,qword [t_Watchlist+8]
  MOV    rcx,qword [rbp+16]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+152]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf3821
_EndIf3822:
; ProcName$ = UCase(RemoveString(StringField(Watchlist(), 1, ">"), "()"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S244
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S597
  PUSH   rax
  PUSH   qword 1
  MOV    rbp,qword [t_Watchlist+8]
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_RemoveString
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,32
  LEA    rcx,[rsp+160]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Variable$ = StringField(Watchlist(), 2, ">")
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S597
  PUSH   rax
  PUSH   qword 2
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,32
  LEA    rcx,[rsp+152]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; ProcIndex = -1  
  MOV    qword [rsp+136],-1
; If *Debugger\Procedures
  MOV    rbp,qword [rsp+PS0+8]
  CMP    qword [rbp+104],0
  JE    _EndIf3825
; *pointer = *Debugger\Procedures
  MOV    rbp,qword [rsp+PS0+8]
  PUSH   qword [rbp+104]
  POP    rax
  MOV    qword [rsp+160],rax
; For i = 0 To *Debugger\NbProcedures-1
  MOV    qword [rsp+72],0
  JMP   _ForSkipDebug3826
_For3826:
_ForSkipDebug3826:
  MOV    rbp,qword [rsp+PS0+8]
  MOVSXD r15,dword [rbp+100]
  DEC    r15
  CMP    r15,qword [rsp+72]
  JL    _Next3827
; Proc$ = UCase(PeekAscii(*pointer))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+208]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,32
  LEA    rcx,[rsp+176]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *pointer + MemoryAsciiLength(*pointer) + 1
  MOV    r15,qword [rsp+160]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+176]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+160],r15
; ModName$ = UCase(PeekAscii(*pointer))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+208]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,32
  LEA    rcx,[rsp+184]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *pointer + MemoryAsciiLength(*pointer) + 1
  MOV    r15,qword [rsp+160]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+176]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+160],r15
; 
; If ModuleName(Proc$, ModName$) = ProcName$
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+200]
  PUSH   qword [rsp+200]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure68
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,qword [rsp+160]
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _EndIf3829
; ProcIndex = i
  PUSH   qword [rsp+72]
  POP    rax
  MOV    qword [rsp+136],rax
; Break
  JMP   _Next3827
; EndIf
_EndIf3829:
; Next i
_NextContinue3827:
  INC    qword [rsp+72]
  JNO   _For3826
_Next3827:
; EndIf          
_EndIf3825:
; EndIf
_EndIf3821:
; 
; 
; UTF8Length = StringByteLength(Variable$) + 1
  SUB    rsp,8
  PUSH   qword [rsp+152]
  POP    rcx
  SUB    rsp,32
  CALL   PB_StringByteLength
  ADD    rsp,40
  MOV    r15,rax
  INC    r15
  MOV    qword [rsp+184],r15
; VariableUTF8$ = Space(UTF8Length)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+200]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Space
  ADD    rsp,32
  LEA    rcx,[rsp+200]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; PokeS(@VariableUTF8$, Variable$, -1, #PB_UTF8)
  SUB    rsp,8
  PUSH   qword 2
  PUSH   qword -1
  PUSH   qword [rsp+168]
  MOV    rax,qword [rsp+224]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PokeS3
  ADD    rsp,40
; 
; Command.CommandInfo\Command = #COMMAND_WatchlistAdd
  LEA    rbp,[rsp+96]
  MOV    dword [rbp],21
; Command\Value1 = ProcIndex
  PUSH   qword [rsp+136]
  POP    rax
  MOV    dword [rbp+8],eax
; Command\Value2 = 0 
  MOV    dword [rbp+12],0
; Command\DataSize = UTF8Length
  PUSH   qword [rsp+184]
  POP    rax
  MOV    dword [rbp+4],eax
; SendDebuggerCommandWithData(*Debugger, @Command, @VariableUTF8$)  
  SUB    rsp,8
  MOV    rax,qword [rsp+200]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+112]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS0+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure8
  ADD    rsp,40
; Next Watchlist()
  JMP   _ForEach3820
_Next3820:
; 
; 
; Command.CommandInfo\Command = #COMMAND_GetWatchlist
  LEA    rbp,[rsp+96]
  MOV    dword [rbp],23
; SendDebuggerCommand(*Debugger, @Command)       
  SUB    rsp,8
  LEA    rax,[rsp+104]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS0+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; 
; Command.CommandInfo\Command = #COMMAND_Run
  LEA    rbp,[rsp+96]
  MOV    dword [rbp],2
; Command\Value1 = 0
  MOV    dword [rbp+8],0
; SendDebuggerCommand(*Debugger, @Command)
  SUB    rsp,8
  LEA    rax,[rsp+104]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS0+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; Standalone_AddLog(Language("Debugger","ExeStarted"), *Debugger\Command\TimeStamp)
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+16]
  MOVSXD rax,dword [rbp+68]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S598
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure682
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; StatusBarText(#STATUSBAR, 0, Language("Debugger","ExeStarted"))   
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S598
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StatusBarText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; UpdateGadgetStates()  
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure686
  ADD    rsp,40
; 
; 
; Case #COMMAND_End
  JMP   _EndSelect57
_Case374:
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case375
; Standalone_AddLog(Language("Debugger","ExeEnded"), *Debugger\Command\TimeStamp)
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+16]
  MOVSXD rax,dword [rbp+68]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S190
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure682
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; StatusBarText(#STATUSBAR, 0, Language("Debugger","ExeEnded"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S190
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StatusBarText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; UpdateGadgetStates()  
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure686
  ADD    rsp,40
; 
; 
; If *Debugger\IsPurifier
  MOV    rbp,qword [rsp+PS0+8]
  CMP    dword [rbp+36],0
  JE    _EndIf3831
; PurifierSettings$ =  GetPurifierOptions(*Debugger)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS0+32]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure72
  ADD    rsp,48
  LEA    rcx,[v_PurifierSettings$]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf3831:
; 
; Debugger_End(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS0+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure428
  ADD    rsp,40
; 
; If ListSize(RunningDebuggers()) = 0
  SUB    rsp,8
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ListSize
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf3833
; Standalone_Quit = 1
  MOV    qword [v_Standalone_Quit],1
; Else
  JMP   _EndIf3832
_EndIf3833:
; DisableGadget(#GADGET_Debug, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 9
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; DisableGadget(#GADGET_Watchlist, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 10
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; DisableGadget(#GADGET_Variables, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 11
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; DisableGadget(#GADGET_Profiler, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 12
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; DisableGadget(#GADGET_History, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 13
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; DisableGadget(#GADGET_Memory, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 14
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; DisableGadget(#GADGET_Library, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 16
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; DisableGadget(#GADGET_Assembly, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 15
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; DisableGadget(#GADGET_Purifier, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 17
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; EndIf      
_EndIf3832:
; 
; 
; Case #COMMAND_ExeMode
  JMP   _EndSelect57
_Case375:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case376
; Text$ = Language("Debugger","ExecutableType") + ": "
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S599
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rcx,_S96
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+56]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Select (*Debugger\Command\Value2 >> 16) & $FFFF
  MOV    rbp,qword [rsp+PS0+8]
  MOVSXD r15,dword [rbp+64]
  SAR    r15,16
  AND    r15,65535
  MOV    rax,r15
  PUSH   rax
; Case 1: Text$ + "Windows"
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case377
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S600
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Case 2: Text$ + "Linux"
  JMP   _EndSelect59
_Case377:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case378
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S601
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Case 3: Text$ + "MacOSX"
  JMP   _EndSelect59
_Case378:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case379
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S602
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; EndSelect
_Case379:
_EndSelect59:
  POP    rax
; 
; Select *Debugger\Command\Value2 & $FFFF
  MOV    rbp,qword [rsp+PS0+8]
  MOVSXD r15,dword [rbp+64]
  AND    r15,65535
  MOV    rax,r15
  PUSH   rax
; Case 1: Text$ + " - x86"
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case380
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S603
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Case 2: Text$ + " - x64"
  JMP   _EndSelect60
_Case380:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case381
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S604
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Case 3: Text$ + " - ppc"
  JMP   _EndSelect60
_Case381:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case382
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S605
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; EndSelect
_Case382:
_EndSelect60:
  POP    rax
; 
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS0+8]
  CMP    dword [rbp+32],0
  JE    _EndIf3836
; Text$ + "  (64bit"
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S606
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+56]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf3835
_EndIf3836:
; Text$ + "  (32bit"
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S607
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+56]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf3835:
; If *Debugger\IsUnicode: Text$ + ", Unicode": EndIf      
  MOV    rbp,qword [rsp+PS0+8]
  CMP    dword [rbp+24],0
  JE    _EndIf3839
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S608
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+56]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
_EndIf3839:
; If *Debugger\IsThread : Text$ + ", Thread" : EndIf            
  MOV    rbp,qword [rsp+PS0+8]
  CMP    dword [rbp+28],0
  JE    _EndIf3841
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S609
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+56]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
_EndIf3841:
; If *Debugger\IsPurifier: Text$ + ", Purifier": EndIf        
  MOV    rbp,qword [rsp+PS0+8]
  CMP    dword [rbp+36],0
  JE    _EndIf3843
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S610
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+56]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
_EndIf3843:
; Text$ + ")" 
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S29
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+56]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Standalone_AddLog(Text$, *Debugger\Command\TimeStamp)      
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS0+16]
  MOVSXD rax,dword [rbp+68]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure682
  ADD    rsp,40
; 
; 
; Case #COMMAND_Error
  JMP   _EndSelect57
_Case376:
  MOV    r15,8
  CMP    r15,[rsp]
  JNE   _Case383
; Standalone_AddLog(Language("Debugger","LogError")+" "+GetDebuggerRelativeFile(*Debugger, *Debugger\Command\Value1) + " ("+Language("Misc","Line")+": " + Str((*Debugger\Command\Value1 & $FFFFFF)+1)+")", *Debugger\Command\TimeStamp)
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+16]
  MOVSXD rax,dword [rbp+68]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S611
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rcx,_S25
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+48]
  MOVSXD rax,dword [rbp+60]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS0+56]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure250
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S158
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S269
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S96
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+56]
  MOVSXD r15,dword [rbp+60]
  AND    r15,16777215
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S29
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure682
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Standalone_AddLog(Language("Debugger","LogError")+" "+PeekAscii(*Debugger\CommandData), *Debugger\Command\TimeStamp) 
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+16]
  MOVSXD rax,dword [rbp+68]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S611
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rcx,_S25
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS0+72]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  POP    rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure682
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; StatusBarText(#STATUSBAR, 0, Language("Misc","Line")+": " + Str((*Debugger\Command\Value1 & $FFFFFF)+1) +" - " +  PeekAscii(*Debugger\CommandData))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S269
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+40]
  MOVSXD r15,dword [rbp+60]
  AND    r15,16777215
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS0+56]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StatusBarText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; UpdateGadgetStates()    
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure686
  ADD    rsp,40
; 
; SetCurrentLine(*Debugger\Command\Value1)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS0+16]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure668
  ADD    rsp,40
; MarkError(*Debugger\Command\Value1)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS0+16]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure670
  ADD    rsp,40
; 
; 
; Case #COMMAND_Warning
  JMP   _EndSelect57
_Case383:
  MOV    r15,38
  CMP    r15,[rsp]
  JNE   _Case384
; Standalone_AddLog(Language("Debugger","LogWarning")+" "+GetDebuggerRelativeFile(*Debugger, *Debugger\Command\Value1) + " ("+Language("Misc","Line")+": " + Str((*Debugger\Command\Value1 & $FFFFFF)+1)+")", *Debugger\Command\TimeStamp)
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+16]
  MOVSXD rax,dword [rbp+68]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S612
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rcx,_S25
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+48]
  MOVSXD rax,dword [rbp+60]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS0+56]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure250
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S158
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S269
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S96
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+56]
  MOVSXD r15,dword [rbp+60]
  AND    r15,16777215
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S29
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure682
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Standalone_AddLog(Language("Debugger","LogWarning")+" "+PeekAscii(*Debugger\CommandData), *Debugger\Command\TimeStamp) 
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+16]
  MOVSXD rax,dword [rbp+68]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S612
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rcx,_S25
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS0+72]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  POP    rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure682
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; StatusBarText(#STATUSBAR, 0, Language("Misc","Line")+": " + Str((*Debugger\Command\Value1 & $FFFFFF)+1) +" - " +  PeekAscii(*Debugger\CommandData))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S269
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+40]
  MOVSXD r15,dword [rbp+60]
  AND    r15,16777215
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS0+56]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StatusBarText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; UpdateGadgetStates()    
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure686
  ADD    rsp,40
; 
; 
; MarkWarning(*Debugger\Command\Value1)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS0+16]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure672
  ADD    rsp,40
; 
; 
; Case #COMMAND_Stopped
  JMP   _EndSelect57
_Case384:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case385
; Text$ = Language("Debugger","Stopped") 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S613
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  LEA    rcx,[rsp+56]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Select *Debugger\Command\Value2
  MOV    rbp,qword [rsp+PS0+8]
  MOVSXD rax,dword [rbp+64]
  PUSH   rax
; Case 3: Text$ + " (CallDebugger)"
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case386
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S614
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Case 5: Text$ + " ("+Language("Debugger","BeforeEnd")+")"
  JMP   _EndSelect61
_Case386:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case387
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S158
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S615
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  MOV    rcx,_S29
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Case 7: Text$ + " ("+Language("Debugger","BreakPoint")+")"
  JMP   _EndSelect61
_Case387:
  MOV    r15,7
  CMP    r15,[rsp]
  JNE   _Case388
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S158
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S616
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  MOV    rcx,_S29
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Case 8: Text$ + " ("+Language("Debugger","UserRequest")+")"
  JMP   _EndSelect61
_Case388:
  MOV    r15,8
  CMP    r15,[rsp]
  JNE   _Case389
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S158
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S617
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  MOV    rcx,_S29
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; 
; Case 9
  JMP   _EndSelect61
_Case389:
  MOV    r15,9
  CMP    r15,[rsp]
  JNE   _Case390
; 
; 
; Text$ + " (" + Language("Debugger","DataBreakpoint")
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S158
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S618
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; *Point.DataBreakPoint = *Debugger\FirstDataBreakPoint
  MOV    rbp,qword [rsp+PS0+16]
  PUSH   qword [rbp+140]
  POP    rax
  MOV    qword [rsp+208],rax
; While *Point
_While3844:
  CMP    qword [rsp+208],0
  JE    _Wend3844
; If *Point\ConditionTrue
  MOV    rbp,qword [rsp+208]
  CMP    dword [rbp+32],0
  JE    _EndIf3846
; Text$ + ": " + *Point\Condition$
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+216]
  MOV    rcx,qword [rbp+16]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Break
  JMP   _Wend3844
; Else
  JMP   _EndIf3845
_EndIf3846:
; *Point = *Point\Next
  MOV    rbp,qword [rsp+208]
  PUSH   qword [rbp]
  POP    rax
  MOV    qword [rsp+208],rax
; EndIf
_EndIf3845:
; Wend
  JMP   _While3844
_Wend3844:
; Text$ + ")"
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S29
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; 
; If *Debugger\DataBreakpointsVisible
  MOV    rbp,qword [rsp+PS0+16]
  CMP    dword [rbp+136],0
  JE    _EndIf3849
; SetWindowForeGround(*Debugger\Windows[#DEBUGGER_WINDOW_DataBreakpoints])
  MOV    rbp,qword [rsp+PS0+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure106
  ADD    rsp,32
; EndIf
_EndIf3849:
; 
; EndSelect
_Case390:
_EndSelect61:
  POP    rax
; 
; If *Debugger\LastProgramState <> -2  
  MOV    rbp,qword [rsp+PS0+8]
  MOVSXD r15,dword [rbp+116]
  CMP    r15,-2
  JE    _EndIf3851
; Standalone_AddLog(Text$, *Debugger\Command\TimeStamp)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS0+16]
  MOVSXD rax,dword [rbp+68]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure682
  ADD    rsp,40
; EndIf
_EndIf3851:
; StatusBarText(#STATUSBAR, 0, Text$)                         
  SUB    rsp,8
  PUSH   qword [rsp+56]
  PUSH   qword 0
  PUSH   qword 0
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StatusBarText
  ADD    rsp,40
; UpdateGadgetStates()      
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure686
  ADD    rsp,40
; 
; If *Debugger\Command\Value1 <> -1 
  MOV    rbp,qword [rsp+PS0+8]
  MOVSXD r15,dword [rbp+60]
  CMP    r15,-1
  JE    _EndIf3853
; SetCurrentLine(*Debugger\Command\Value1) 
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS0+16]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure668
  ADD    rsp,40
; EndIf
_EndIf3853:
; 
; Case #COMMAND_Continued      
  JMP   _EndSelect57
_Case385:
  MOV    r15,4
  CMP    r15,[rsp]
  JNE   _Case391
; Standalone_AddLog(Language("Debugger","Continued"), *Debugger\Command\TimeStamp)
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+16]
  MOVSXD rax,dword [rbp+68]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S619
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure682
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; StatusBarText(#STATUSBAR, 0, Language("Debugger","Continued"))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S619
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StatusBarText
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; UpdateGadgetStates()      
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure686
  ADD    rsp,40
; SetCurrentLine(-1) 
  SUB    rsp,8
  MOV    rax,-1
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure668
  ADD    rsp,40
; 
; 
; 
; 
; Case #COMMAND_Watchlist
  JMP   _EndSelect57
_Case391:
  MOV    r15,27
  CMP    r15,[rsp]
  JNE   _Case392
; ClearList(Watchlist())
  SUB    rsp,8
  PUSH   qword [t_Watchlist]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ClearList
  ADD    rsp,40
; 
; *Pointer = *Debugger\CommandData
  MOV    rbp,qword [rsp+PS0+8]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+160],rax
; For i = 1 To *Debugger\Command\Value1
  MOV    qword [rsp+72],1
  JMP   _ForSkipDebug3854
_For3854:
_ForSkipDebug3854:
  MOV    rbp,qword [rsp+PS0+8]
  MOVSXD rax,dword [rbp+60]
  CMP    rax,qword [rsp+72]
  JL    _Next3855
; type = PeekB(*Pointer)& ~(1<<6): *Pointer + 2 
  SUB    rsp,8
  PUSH   qword [rsp+168]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,-65
  MOV    qword [rsp+208],r15
  MOV    r15,qword [rsp+160]
  ADD    r15,2
  MOV    qword [rsp+160],r15
; isvalid = PeekB(*Pointer): *Pointer + 1        
  SUB    rsp,8
  PUSH   qword [rsp+168]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    qword [rsp+216],rax
  MOV    r15,qword [rsp+160]
  INC    r15
  MOV    qword [rsp+160],r15
; ProcedureIndex = PeekL(*Pointer)
  SUB    rsp,8
  PUSH   qword [rsp+168]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    qword [rsp+224],rax
; *Pointer + 4
  MOV    r15,qword [rsp+160]
  ADD    r15,4
  MOV    qword [rsp+160],r15
; name$ = PeekS(*Pointer, -1, #PB_UTF8)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword -1
  PUSH   qword [rsp+192]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  LEA    rcx,[rsp+240]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryUTF8LengthBytes(*Pointer) + 1
  MOV    r15,qword [rsp+160]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+176]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+160],r15
; 
; AddElement(Watchlist()) 
  SUB    rsp,8
  PUSH   qword [t_Watchlist]
  POP    rcx
  SUB    rsp,32
  CALL   PB_AddElement
  ADD    rsp,40
; If ProcedureIndex = -1
  MOV    r15,qword [rsp+224]
  CMP    r15,-1
  JNE   _EndIf3857
; Watchlist() = name$
  MOV    rcx,qword [rsp+232]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rbp,qword [t_Watchlist+8]
  LEA    rcx,[rbp+16]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf3856
_EndIf3857:
; Watchlist() = GetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Procedure], ProcedureIndex+1, 0) + ">" + name$
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  MOV    r15,qword [rsp+248]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS0+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2704]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_GetGadgetItemText2
  ADD    rsp,32
  MOV    rcx,_S597
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+240]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rbp,qword [t_Watchlist+8]
  LEA    rcx,[rbp+16]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf3856:
; 
; 
; If isvalid <> 0          
  MOV    r15,qword [rsp+216]
  AND    r15,r15
  JE    _EndIf3860
; If type & $80 
  MOV    r15,qword [rsp+208]
  AND    r15,128
  AND    r15,r15
  JE    _EndIf3862
; *Pointer + 4
  MOV    r15,qword [rsp+160]
  ADD    r15,4
  MOV    qword [rsp+160],r15
; ElseIf type = 1
  JMP   _EndIf3861
_EndIf3862:
  MOV    r15,qword [rsp+208]
  CMP    r15,1
  JNE   _EndIf3863
; *Pointer + 1
  MOV    r15,qword [rsp+160]
  INC    r15
  MOV    qword [rsp+160],r15
; ElseIf type = 3
  JMP   _EndIf3861
_EndIf3863:
  MOV    r15,qword [rsp+208]
  CMP    r15,3
  JNE   _EndIf3864
; *Pointer + 2
  MOV    r15,qword [rsp+160]
  ADD    r15,2
  MOV    qword [rsp+160],r15
; ElseIf type = 5 Or type = 11
  JMP   _EndIf3861
_EndIf3864:
  MOV    r15,qword [rsp+208]
  CMP    r15,5
  JE     Ok372
  MOV    r15,qword [rsp+208]
  CMP    r15,11
  JE     Ok372
  JMP    No372
Ok372:
  MOV    rax,1
  JMP    End372
No372:
  XOR    rax,rax
End372:
  AND    rax,rax
  JE    _EndIf3865
; *Pointer + 4
  MOV    r15,qword [rsp+160]
  ADD    r15,4
  MOV    qword [rsp+160],r15
; ElseIf type = 8 Or type = 10
  JMP   _EndIf3861
_EndIf3865:
  MOV    r15,qword [rsp+208]
  CMP    r15,8
  JE     Ok373
  MOV    r15,qword [rsp+208]
  CMP    r15,10
  JE     Ok373
  JMP    No373
Ok373:
  MOV    rax,1
  JMP    End373
No373:
  XOR    rax,rax
End373:
  AND    rax,rax
  JE    _EndIf3866
; *Pointer + MemoryStringLengthBytes(*Pointer) + #CharSize 
  MOV    r15,qword [rsp+160]
  SUB    rsp,8
  PUSH   qword [rsp+168]
  POP    rcx
  SUB    rsp,32
  CALL   PB_MemoryStringLength
  ADD    rsp,40
  MOV    r14,rax
  ADD    r14,r14
  ADD    r15,r14
  ADD    r15,2
  MOV    qword [rsp+160],r15
; ElseIf type = 9
  JMP   _EndIf3861
_EndIf3866:
  MOV    r15,qword [rsp+208]
  CMP    r15,9
  JNE   _EndIf3867
; *Pointer + 4
  MOV    r15,qword [rsp+160]
  ADD    r15,4
  MOV    qword [rsp+160],r15
; ElseIf type = 12 Or type = 13
  JMP   _EndIf3861
_EndIf3867:
  MOV    r15,qword [rsp+208]
  CMP    r15,12
  JE     Ok374
  MOV    r15,qword [rsp+208]
  CMP    r15,13
  JE     Ok374
  JMP    No374
Ok374:
  MOV    rax,1
  JMP    End374
No374:
  XOR    rax,rax
End374:
  AND    rax,rax
  JE    _EndIf3868
; *Pointer + 8
  MOV    r15,qword [rsp+160]
  ADD    r15,8
  MOV    qword [rsp+160],r15
; EndIf                                                           
_EndIf3861:
_EndIf3868:
; EndIf 
_EndIf3860:
; 
; Next i     
_NextContinue3855:
  INC    qword [rsp+72]
  JNO   _For3854
_Next3855:
; 
; 
; Case #COMMAND_Debug
  JMP   _EndSelect57
_Case392:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case393
; If DebugOutputToErrorLog 
  CMP    qword [v_DebugOutputToErrorLog],0
  JE    _EndIf3870
; Message$ = "[Debug] "
  MOV    rdx,_S620
  LEA    rcx,[rsp+240]
  SUB    rsp,40
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,40
; If *Debugger\Command\Value1 = 5 
  MOV    rbp,qword [rsp+PS0+8]
  MOVSXD r15,dword [rbp+60]
  CMP    r15,5
  JNE   _EndIf3872
; If DebugIsHex
  CMP    qword [v_DebugIsHex],0
  JE    _EndIf3874
; Message$ + Hex(*Debugger\Command\Value2, #PB_Long)
  MOV    rcx,qword [rsp+240]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 5
  MOV    rbp,qword [rsp+PS0+48]
  MOVSXD rax,dword [rbp+64]
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+248]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf3873
_EndIf3874:
; Message$ + Str(*Debugger\Command\Value2)
  MOV    rcx,qword [rsp+240]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+40]
  MOVSXD rax,dword [rbp+64]
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+248]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf        
_EndIf3873:
; ElseIf *Debugger\Command\Value1 = 8 
  JMP   _EndIf3871
_EndIf3872:
  MOV    rbp,qword [rsp+PS0+8]
  MOVSXD r15,dword [rbp+60]
  CMP    r15,8
  JNE   _EndIf3876
; String$ = PeekS(*Debugger\CommandData, *Debugger\Command\DataSize)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+24]
  MOVSXD rax,dword [rbp+56]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS0+32]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_PeekS2
  ADD    rsp,32
  LEA    rcx,[rsp+256]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; If Left(String$, 19) = "[OutputDebugString]"
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 19
  PUSH   qword [rsp+272]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S621
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JE    _EndIf3878
; Message$ = String$ 
  MOV    rcx,qword [rsp+248]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+248]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf3877
_EndIf3878:
; Message$ + String$
  MOV    rcx,qword [rsp+240]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+256]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+248]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf                            
_EndIf3877:
; ElseIf *Debugger\Command\Value1 = 9 
  JMP   _EndIf3871
_EndIf3876:
  MOV    rbp,qword [rsp+PS0+8]
  MOVSXD r15,dword [rbp+60]
  CMP    r15,9
  JNE   _EndIf3880
; Message$ + StrF_Debug(PeekF(@*Debugger\Command\Value2))        
  MOV    rcx,qword [rsp+240]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+32]
  LEA    rax,[rbp+64]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekF
  ADD    rsp,32
  MOVSS  [rsp-8],xmm0
  FLD    dword [rsp-8]
  SUB    rsp,8
  FSTP   dword [rsp]
  MOVSS  xmm0,dword [rsp]
  ADD    rsp,8
  SUB    rsp,32
  CALL  _Procedure254
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+248]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf  
_EndIf3871:
_EndIf3880:
; 
; 
; 
; 
; If Len(Message$) > 4096
  SUB    rsp,8
  PUSH   qword [rsp+248]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,4096
  JLE   _EndIf3882
; Message$ = Left(Message$, 4096) + " [...]"
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 4096
  PUSH   qword [rsp+264]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,32
  MOV    rcx,_S622
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+248]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf 
_EndIf3882:
; 
; Standalone_AddLog(Message$, *Debugger\Command\Timestamp)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS0+16]
  MOVSXD rax,dword [rbp+68]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+256]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure682
  ADD    rsp,40
; Else
  JMP   _EndIf3869
_EndIf3870:
; SetGadgetState(#GADGET_Debug, *DebuggerData\IsDebugOutputVisible)
  SUB    rsp,8
  MOV    rbp,qword [p_DebuggerData]
  MOVSXD rax,dword [rbp+128]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 9
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; EndIf       
_EndIf3869:
; 
; Case #COMMAND_DebugDouble
  JMP   _EndSelect57
_Case393:
  MOV    r15,6
  CMP    r15,[rsp]
  JNE   _Case394
; If DebugOutputToErrorLog 
  CMP    qword [v_DebugOutputToErrorLog],0
  JE    _EndIf3885
; Standalone_AddLog("[Debug] " + StrD_Debug(PeekD(@*Debugger\Command\Value1)), *Debugger\Command\Timestamp)
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+16]
  MOVSXD rax,dword [rbp+68]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S620
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 25
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS0+64]
  LEA    rax,[rbp+60]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekD
  ADD    rsp,40
  MOVSD  [rsp-8],xmm0
  FLD    qword [rsp-8]
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure256
  ADD    rsp,40
  POP    rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure682
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; Else
  JMP   _EndIf3884
_EndIf3885:
; SetGadgetState(#GADGET_Debug, *DebuggerData\IsDebugOutputVisible)
  SUB    rsp,8
  MOV    rbp,qword [p_DebuggerData]
  MOVSXD rax,dword [rbp+128]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 9
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; EndIf       
_EndIf3884:
; 
; Case #COMMAND_DebugQuad
  JMP   _EndSelect57
_Case394:
  MOV    r15,7
  CMP    r15,[rsp]
  JNE   _Case395
; If DebugOutputToErrorLog 
  CMP    qword [v_DebugOutputToErrorLog],0
  JE    _EndIf3888
; Message$ = "[Debug] "
  MOV    rdx,_S620
  LEA    rcx,[rsp+240]
  SUB    rsp,40
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,40
; If DebugIsHex
  CMP    qword [v_DebugIsHex],0
  JE    _EndIf3890
; Message$ + Hex(PeekQ(@*Debugger\Command\Value1), #PB_Quad)
  MOV    rcx,qword [rsp+240]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 13
  MOV    rbp,qword [rsp+PS0+48]
  LEA    rax,[rbp+60]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+248]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf3889
_EndIf3890:
; Message$ + Str(PeekQ(@*Debugger\Command\Value1))
  MOV    rcx,qword [rsp+240]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS0+48]
  LEA    rax,[rbp+60]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+248]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf        
_EndIf3889:
; 
; Standalone_AddLog(Message$, *Debugger\Command\Timestamp)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS0+16]
  MOVSXD rax,dword [rbp+68]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+256]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure682
  ADD    rsp,40
; Else
  JMP   _EndIf3887
_EndIf3888:
; SetGadgetState(#GADGET_Debug, *DebuggerData\IsDebugOutputVisible)
  SUB    rsp,8
  MOV    rbp,qword [p_DebuggerData]
  MOVSXD rax,dword [rbp+128]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 9
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; EndIf   
_EndIf3887:
; 
; Case #COMMAND_Expression 
  JMP   _EndSelect57
_Case395:
  MOV    r15,36
  CMP    r15,[rsp]
  JNE   _Case396
; 
; 
; 
; 
; If *Debugger\Command\Value1 = AsciiConst('S','C','I','N') And *Debugger\CommandData And IsMouseDwelling = 1
  MOV    rbp,qword [rsp+PS0+8]
  MOVSXD r15,dword [rbp+60]
  CMP    r15,1396918606
  JNE    No375
  MOV    rbp,qword [rsp+PS0+8]
  CMP    qword [rbp+72],0
  JE     No375
  MOV    r15,qword [v_IsMouseDwelling]
  CMP    r15,1
  JNE    No375
Ok375:
  MOV    rax,1
  JMP    End375
No375:
  XOR    rax,rax
End375:
  AND    rax,rax
  JE    _EndIf3894
; 
; Select *Debugger\Command\Value2 
  MOV    rbp,qword [rsp+PS0+8]
  MOVSXD rax,dword [rbp+64]
  PUSH   rax
; 
; Case 0 
  XOR    r15,r15
  CMP    r15,[rsp]
  JNE   _Case397
; Message$ = "Debugger: " + PeekAscii(*Debugger\CommandData)
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S623
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS0+56]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+256]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; 
; 
; 
; If IsVariableExpression = 0 Or (Left(Message$, 29) <> "Debugger: Variable not found:" And Left(Message$, 43) <> "Debugger: Array() / LinkedList() not found:" And Message$ <> "Debugger: Garbage at the end of the input.")
  MOV    r15,qword [v_IsVariableExpression]
  AND    r15,r15
  JE     Ok376
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 29
  PUSH   qword [rsp+280]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S624
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  SUB    rsp,32
  CALL   SYS_StringEqual
  ADD    rsp,32
  OR     rax,rax
  JNE    No377
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 43
  PUSH   qword [rsp+280]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S625
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  SUB    rsp,32
  CALL   SYS_StringEqual
  ADD    rsp,32
  OR     rax,rax
  JNE    No377
  PUSH   qword [rsp+248]
  MOV    rcx,_S626
  POP    rdx
  SUB    rsp,32
  CALL   SYS_StringEqual
  ADD    rsp,32
  OR     rax,rax
  JNE    No377
Ok377:
  MOV    rax,1
  JMP    End377
No377:
  XOR    rax,rax
End377:
  AND    rax,rax
  JNE    Ok376
  JMP    No376
Ok376:
  MOV    rax,1
  JMP    End376
No376:
  XOR    rax,rax
End376:
  AND    rax,rax
  JE    _EndIf3896
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_CALLTIPSHOW, MouseDwellPosition, ToAscii(Message$))
  PUSH   qword [rsp+248]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure96
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [v_MouseDwellPosition]
  PUSH   qword 2200
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,32
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_CALLTIPSETHLT, 0, 9)
  PUSH   qword 9
  PUSH   qword 0
  PUSH   qword 2204
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,32
; EndIf
_EndIf3896:
; 
; Case 1 
  JMP   _EndSelect62
_Case397:
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case398
; 
; Case 2 
  JMP   _EndSelect62
_Case398:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case399
; Name$    = PeekS(*Debugger\CommandData+8, (*Debugger\Command\DataSize-8) / SizeOf(Character))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+40]
  MOVSXD r15,dword [rbp+56]
  ADD    r15,-8
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS0+48]
  MOV    r15,qword [rbp+72]
  ADD    r15,8
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_PeekS2
  ADD    rsp,40
  LEA    rcx,[rsp+248]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Message$ = Name$ + " = " + Str(PeekQ(*Debugger\CommandData))
  MOV    rcx,qword [rsp+240]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S245
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS0+48]
  PUSH   qword [rbp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+256]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_CALLTIPSHOW, MouseDwellPosition, ToAscii(Message$))
  PUSH   qword [rsp+248]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure96
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [v_MouseDwellPosition]
  PUSH   qword 2200
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,32
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_CALLTIPSETHLT, 0, Len(Name$))
  PUSH   qword [rsp+240]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 2204
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,32
; 
; Case 3 
  JMP   _EndSelect62
_Case399:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case400
; Name$    = PeekS(*Debugger\CommandData+8, (*Debugger\Command\DataSize-8) / SizeOf(Character))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+40]
  MOVSXD r15,dword [rbp+56]
  ADD    r15,-8
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS0+48]
  MOV    r15,qword [rbp+72]
  ADD    r15,8
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_PeekS2
  ADD    rsp,40
  LEA    rcx,[rsp+248]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Message$ = Name$ + " = " + StrD_Debug(PeekD(*Debugger\CommandData))
  MOV    rcx,qword [rsp+240]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S245
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 25
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS0+64]
  PUSH   qword [rbp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekD
  ADD    rsp,40
  MOVSD  [rsp-8],xmm0
  FLD    qword [rsp-8]
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure256
  ADD    rsp,48
  POP    rax
  LEA    rcx,[rsp+256]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_CALLTIPSHOW, MouseDwellPosition, ToAscii(Message$))
  PUSH   qword [rsp+248]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure96
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [v_MouseDwellPosition]
  PUSH   qword 2200
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,32
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_CALLTIPSETHLT, 0, Len(Name$))            
  PUSH   qword [rsp+240]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 2204
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,32
; 
; Case 4 
  JMP   _EndSelect62
_Case400:
  MOV    r15,4
  CMP    r15,[rsp]
  JNE   _Case401
; Message$ = PeekS(*Debugger\CommandData, (*Debugger\Command\DataSize) / SizeOf(Character))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+40]
  MOVSXD r15,dword [rbp+56]
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS0+48]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_PeekS2
  ADD    rsp,40
  LEA    rcx,[rsp+256]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Name$    = PeekS(*Debugger\CommandData + (Len(Message$) + 1) * SizeOf(Character), (*Debugger\Command\DataSize) / SizeOf(Character) - Len(Message$) - 1)                        
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+40]
  MOVSXD r15,dword [rbp+56]
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  SUB    rsp,8
  PUSH   qword [rsp+280]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  SUB    r15,rax
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS0+48]
  MOV    r15,qword [rbp+72]
  PUSH   qword [rsp+280]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,32
  MOV    r14,rax
  INC    r14
  ADD    r14,r14
  ADD    r15,r14
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_PeekS2
  ADD    rsp,40
  LEA    rcx,[rsp+248]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Message$ = Name$ + " = " + Chr(34) + Message$ + Chr(34)
  MOV    rcx,qword [rsp+240]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S627
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+256]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S99
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+256]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; 
; If Len(Message$) > 100
  PUSH   qword [rsp+248]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,32
  MOV    r15,rax
  CMP    r15,100
  JLE   _EndIf3898
; Message$ = Left(Message$, 96) + "..."
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 96
  PUSH   qword [rsp+280]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  MOV    rcx,_S191
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+256]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; EndIf    
_EndIf3898:
; 
; 
; CodePage = ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_GETCODEPAGE)
  PUSH   qword 2137
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage
  ADD    rsp,32
  MOV    qword [rsp+264],rax
; *Buffer = StringToCodePage(CodePage, Message$)            
  PUSH   qword [rsp+248]
  PUSH   qword [rsp+272]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure194
  ADD    rsp,32
  MOV    qword [rsp+272],rax
; If *Buffer
  CMP    qword [rsp+272],0
  JE    _EndIf3900
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_CALLTIPSHOW, MouseDwellPosition, *Buffer)            
  PUSH   qword [rsp+272]
  PUSH   qword [v_MouseDwellPosition]
  PUSH   qword 2200
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,32
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_CALLTIPSETHLT, 0, CodePageLength(CodePage, Name$))   
  PUSH   qword [rsp+240]
  PUSH   qword [rsp+272]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure196
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 2204
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,32
; FreeMemory(*Buffer)
  PUSH   qword [rsp+272]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FreeMemory
  ADD    rsp,32
; EndIf   
_EndIf3900:
; 
; Case 5 
  JMP   _EndSelect62
_Case401:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case402
; *Pointer = *Debugger\CommandData  
  MOV    rbp,qword [rsp+PS0+16]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+168],rax
; Message$ = ""
  MOV    rdx,_S3
  LEA    rcx,[rsp+248]
  SUB    rsp,32
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,32
; 
; Type$ = PeekS(*Pointer, -1, #PB_Ascii): *Pointer + Len(Type$) + 1
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+208]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  LEA    rcx,[rsp+288]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
  MOV    r15,qword [rsp+168]
  PUSH   qword [rsp+280]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,32
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+168],r15
; Count = PeekL(*Pointer): *Pointer + 4   
  PUSH   qword [rsp+168]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,32
  MOV    qword [rsp+288],rax
  MOV    r15,qword [rsp+168]
  ADD    r15,4
  MOV    qword [rsp+168],r15
; 
; For i = 1 To Count
  MOV    qword [rsp+80],1
  JMP   _ForSkipDebug3901
_For3901:
_ForSkipDebug3901:
  MOV    rax,qword [rsp+288]
  CMP    rax,qword [rsp+80]
  JL    _Next3902
; type        = PeekB(*Pointer): *Pointer + 1
  PUSH   qword [rsp+168]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,32
  MOV    qword [rsp+216],rax
  MOV    r15,qword [rsp+168]
  INC    r15
  MOV    qword [rsp+168],r15
; dynamictype = PeekB(*Pointer): *Pointer + 1
  PUSH   qword [rsp+168]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,32
  MOV    qword [rsp+296],rax
  MOV    r15,qword [rsp+168]
  INC    r15
  MOV    qword [rsp+168],r15
; sublevel    = PeekL(*Pointer): *Pointer + 4
  PUSH   qword [rsp+168]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,32
  MOV    qword [rsp+304],rax
  MOV    r15,qword [rsp+168]
  ADD    r15,4
  MOV    qword [rsp+168],r15
; Name$       = PeekS(*Pointer, -1, #PB_Ascii): *Pointer + Len(Name$) + 1              
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+208]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  LEA    rcx,[rsp+248]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
  MOV    r15,qword [rsp+168]
  PUSH   qword [rsp+240]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,32
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+168],r15
; Line$       = Chr(10) + Space(sublevel*2 + 1) + "\" + Name$
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+328]
  ADD    r15,r15
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Space
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S4
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+248]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+320]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; 
; If IS_ARRAY(type)
  MOV    r15,qword [rsp+216]
  AND    r15,63
  CMP    r15,15
  JNE   _EndIf3904
; Line$ + "(" + PeekAscii(*Pointer) + ")" 
  MOV    rcx,qword [rsp+312]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S93
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+208]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S29
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+320]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; 
; ElseIf IS_LINKEDLIST(type)
  JMP   _EndIf3903
_EndIf3904:
  MOV    r15,qword [rsp+216]
  AND    r15,63
  CMP    r15,14
  JNE   _EndIf3905
; Line$ + "()" 
  MOV    rcx,qword [rsp+312]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S244
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+320]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; 
; ElseIf IS_MAP(type) 
  JMP   _EndIf3903
_EndIf3905:
  MOV    r15,qword [rsp+216]
  AND    r15,63
  CMP    r15,22
  JNE   _EndIf3906
; Line$ + "()"             
  MOV    rcx,qword [rsp+312]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S244
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+320]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; 
; ElseIf IS_POINTER(type) 
  JMP   _EndIf3903
_EndIf3906:
  MOV    r15,qword [rsp+216]
  AND    r15,128
  AND    r15,r15
  JE    _EndIf3907
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS0+16]
  CMP    dword [rbp+32],0
  JE    _EndIf3909
; Line$ + " = " + Str(PeekQ(*Pointer))               
  MOV    rcx,qword [rsp+312]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S245
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+200]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+320]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Else
  JMP   _EndIf3908
_EndIf3909:
; Line$ + " = " + Str(PeekL(*Pointer))              
  MOV    rcx,qword [rsp+312]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S245
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+200]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+320]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; EndIf
_EndIf3908:
; Else 
  JMP   _EndIf3903
_EndIf3907:
; Select type
  PUSH   qword [rsp+216]
; Case #TYPE_BYTE:      Line$ + " = " + Str(PeekB(*Pointer))
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case403
  MOV    rcx,qword [rsp+320]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S245
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+216]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+328]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Case #TYPE_ASCII:     Line$ + " = " + StrU(PeekB(*Pointer), #PB_Byte)
  JMP   _EndSelect63
_Case403:
  MOV    r15,24
  CMP    r15,[rsp]
  JNE   _Case404
  MOV    rcx,qword [rsp+320]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S245
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+216]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StrU2
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+328]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Case #TYPE_WORD:      Line$ + " = " + Str(PeekW(*Pointer))
  JMP   _EndSelect63
_Case404:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case405
  MOV    rcx,qword [rsp+320]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S245
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+216]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekW
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+328]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Case #TYPE_UNICODE:   Line$ + " = " + StrU(PeekW(*Pointer), #PB_Word)
  JMP   _EndSelect63
_Case405:
  MOV    r15,25
  CMP    r15,[rsp]
  JNE   _Case406
  MOV    rcx,qword [rsp+320]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S245
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 3
  PUSH   qword [rsp+216]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekW
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StrU2
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+328]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Case #TYPE_LONG:      Line$ + " = " + Str(PeekL(*Pointer)) 
  JMP   _EndSelect63
_Case406:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case407
  MOV    rcx,qword [rsp+320]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S245
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+216]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+328]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Case #TYPE_STRUCTURE: 
  JMP   _EndSelect63
_Case407:
  MOV    r15,7
  CMP    r15,[rsp]
  JNE   _Case408
; Case #TYPE_FLOAT:     Line$ + " = " + StrF_Debug(PeekF(*Pointer))                 
  JMP   _EndSelect63
_Case408:
  MOV    r15,9
  CMP    r15,[rsp]
  JNE   _Case409
  MOV    rcx,qword [rsp+320]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S245
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+200]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekF
  ADD    rsp,32
  MOVSS  [rsp-8],xmm0
  FLD    dword [rsp-8]
  SUB    rsp,8
  FSTP   dword [rsp]
  MOVSS  xmm0,dword [rsp]
  ADD    rsp,8
  SUB    rsp,32
  CALL  _Procedure254
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+328]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Case #TYPE_DOUBLE:    Line$ + " = " + StrD_Debug(PeekD(*Pointer))
  JMP   _EndSelect63
_Case409:
  MOV    r15,12
  CMP    r15,[rsp]
  JNE   _Case410
  MOV    rcx,qword [rsp+320]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S245
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 25
  SUB    rsp,8
  PUSH   qword [rsp+216]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekD
  ADD    rsp,40
  MOVSD  [rsp-8],xmm0
  FLD    qword [rsp-8]
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure256
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+328]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Case #TYPE_QUAD:      Line$ + " = " + Str(PeekQ(*Pointer))                 
  JMP   _EndSelect63
_Case410:
  MOV    r15,13
  CMP    r15,[rsp]
  JNE   _Case411
  MOV    rcx,qword [rsp+320]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S245
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+216]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+328]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Case #TYPE_CHARACTER: Line$ + " = " + Str(PeekL(*Pointer)) 
  JMP   _EndSelect63
_Case411:
  MOV    r15,11
  CMP    r15,[rsp]
  JNE   _Case412
  MOV    rcx,qword [rsp+320]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S245
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+216]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+328]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Case #TYPE_INTEGER
  JMP   _EndSelect63
_Case412:
  MOV    r15,21
  CMP    r15,[rsp]
  JNE   _Case413
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS0+24]
  CMP    dword [rbp+32],0
  JE    _EndIf3913
; Line$ + " = " + Str(PeekQ(*Pointer))               
  MOV    rcx,qword [rsp+320]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S245
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+216]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+328]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf3912
_EndIf3913:
; Line$ + " = " + Str(PeekL(*Pointer))              
  MOV    rcx,qword [rsp+320]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S245
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+216]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+328]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf3912:
; 
; Case #TYPE_STRING, #TYPE_FIXEDSTRING
  JMP   _EndSelect63
_Case413:
  MOV    r15,8
  CMP    r15,[rsp]
  JE    _Case414
  MOV    r15,10
  CMP    r15,[rsp]
  JNE   _Case415
_Case414:
; String$ = PeekS(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+192]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,32
  LEA    rcx,[rsp+272]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Line$ + " = " + Chr(34) + String$ + Chr(34) 
  MOV    rcx,qword [rsp+320]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S627
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,qword [rsp+272]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S99
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+328]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndSelect
_Case415:
_EndSelect63:
  POP    rax
; EndIf   
_EndIf3903:
; 
; *Pointer + GetValueSize(type, *Pointer, *Debugger\Is64bit)  
  MOV    r15,qword [rsp+168]
  MOV    rbp,qword [rsp+PS0+16]
  MOVSXD rax,dword [rbp+32]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+176]
  PUSH   qword [rsp+232]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure246
  ADD    rsp,32
  ADD    r15,rax
  MOV    qword [rsp+168],r15
; 
; 
; If i <= 25
  MOV    r15,qword [rsp+80]
  CMP    r15,25
  JG    _EndIf3916
; If Len(Line$) > 100 
  PUSH   qword [rsp+312]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,32
  MOV    r15,rax
  CMP    r15,100
  JLE   _EndIf3918
; Line$ = Left(Line$, 96) + " ..."
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 96
  PUSH   qword [rsp+344]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  MOV    rcx,_S322
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+320]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; EndIf
_EndIf3918:
; 
; Message$ + Line$
  MOV    rcx,qword [rsp+248]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+320]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+256]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; EndIf          
_EndIf3916:
; Next i
_NextContinue3902:
  INC    qword [rsp+80]
  JNO   _For3901
_Next3902:
; 
; If Count > 25
  MOV    r15,qword [rsp+288]
  CMP    r15,25
  JLE   _EndIf3920
; Message$ + Chr(10) + "..."
  MOV    rcx,qword [rsp+248]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S628
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+256]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; EndIf
_EndIf3920:
; 
; Name$ = PeekS(*Pointer) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+192]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,40
  LEA    rcx,[rsp+248]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; 
; Message$ = "Structure: " + Name$ + Message$
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S629
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+248]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+256]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+256]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; 
; 
; CodePage = ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_GETCODEPAGE)
  PUSH   qword 2137
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage
  ADD    rsp,32
  MOV    qword [rsp+264],rax
; *Buffer = StringToCodePage(CodePage, Message$)            
  PUSH   qword [rsp+248]
  PUSH   qword [rsp+272]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure194
  ADD    rsp,32
  MOV    qword [rsp+272],rax
; If *Buffer
  CMP    qword [rsp+272],0
  JE    _EndIf3922
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_CALLTIPSHOW, MouseDwellPosition, *Buffer)            
  PUSH   qword [rsp+272]
  PUSH   qword [v_MouseDwellPosition]
  PUSH   qword 2200
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,32
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_CALLTIPSETHLT, 0, CodePageLength(CodePage, Name$) + 11)   
  PUSH   qword [rsp+240]
  PUSH   qword [rsp+272]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure196
  ADD    rsp,32
  MOV    r15,rax
  ADD    r15,11
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 2204
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,32
; FreeMemory(*Buffer)
  PUSH   qword [rsp+272]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FreeMemory
  ADD    rsp,32
; EndIf                          
_EndIf3922:
; 
; Case 6 
  JMP   _EndSelect62
_Case402:
  MOV    r15,6
  CMP    r15,[rsp]
  JNE   _Case416
; Name$    = PeekS(*Debugger\CommandData+4, (*Debugger\Command\DataSize-4) / SizeOf(Character))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+40]
  MOVSXD r15,dword [rbp+56]
  ADD    r15,-4
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS0+48]
  MOV    r15,qword [rbp+72]
  ADD    r15,4
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_PeekS2
  ADD    rsp,40
  LEA    rcx,[rsp+248]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Message$ = Name$ + " = " + Str(PeekL(*Debugger\CommandData))
  MOV    rcx,qword [rsp+240]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S245
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS0+48]
  PUSH   qword [rbp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+256]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_CALLTIPSHOW, MouseDwellPosition, ToAscii(Message$))
  PUSH   qword [rsp+248]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure96
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [v_MouseDwellPosition]
  PUSH   qword 2200
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,32
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_CALLTIPSETHLT, 0, Len(Name$))
  PUSH   qword [rsp+240]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 2204
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,32
; 
; Case 7 
  JMP   _EndSelect62
_Case416:
  MOV    r15,7
  CMP    r15,[rsp]
  JNE   _Case417
; Name$    = PeekS(*Debugger\CommandData+4, (*Debugger\Command\DataSize-4) / SizeOf(Character))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+40]
  MOVSXD r15,dword [rbp+56]
  ADD    r15,-4
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS0+48]
  MOV    r15,qword [rbp+72]
  ADD    r15,4
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_PeekS2
  ADD    rsp,40
  LEA    rcx,[rsp+248]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Message$ = Name$ + " = " + StrF_Debug(PeekF(*Debugger\CommandData))
  MOV    rcx,qword [rsp+240]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S245
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS0+48]
  PUSH   qword [rbp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekF
  ADD    rsp,32
  MOVSS  [rsp-8],xmm0
  FLD    dword [rsp-8]
  SUB    rsp,8
  FSTP   dword [rsp]
  MOVSS  xmm0,dword [rsp]
  ADD    rsp,8
  SUB    rsp,32
  CALL  _Procedure254
  ADD    rsp,48
  POP    rax
  LEA    rcx,[rsp+256]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_CALLTIPSHOW, MouseDwellPosition, ToAscii(Message$))
  PUSH   qword [rsp+248]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure96
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [v_MouseDwellPosition]
  PUSH   qword 2200
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,32
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_CALLTIPSETHLT, 0, Len(Name$))            
  PUSH   qword [rsp+240]
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 2204
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,32
; 
; EndSelect        
_Case417:
_EndSelect62:
  POP    rax
; 
; EndIf                  
_EndIf3894:
; 
; EndSelect
_Case396:
_EndSelect57:
  POP    rax
; 
; 
; EndProcedure
_EndProcedureZero1:
  XOR    rax,rax
_EndProcedure1:
  PUSH   rax
  MOV    rcx,qword [rsp+192]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+272]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+304]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+240]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+232]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+88]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+176]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+144]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+248]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+152]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+168]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,304
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure GetWordBoundary(*Buffer, BufferLength, Position, *StartIndex.INTEGER, *EndIndex.INTEGER, Mode)
_Procedure650:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PUSH   r13
  PS650=128
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; *WordStart.Character = *Buffer
  PUSH   qword [rsp+PS650+0]
  POP    rax
  MOV    qword [rsp+40],rax
; *WordEnd.Character   = *Buffer + BufferLength
  MOV    r15,qword [rsp+PS650+0]
  ADD    r15,qword [rsp+PS650+8]
  MOV    qword [rsp+48],r15
; 
; If Position >= 0 And Position < BufferLength+#CharSize And (Mode = 1 Or Position < BufferLength)
  MOV    r15,qword [rsp+PS650+16]
  AND    r15,r15
  JL     No348
  MOV    r15,qword [rsp+PS650+16]
  MOV    r14,qword [rsp+PS650+8]
  ADD    r14,2
  CMP    r15,r14
  JGE    No348
  MOV    r15,qword [rsp+PS650+40]
  CMP    r15,1
  JE     Ok349
  MOV    r15,qword [rsp+PS650+16]
  CMP    r15,qword [rsp+PS650+8]
  JL     Ok349
  JMP    No349
Ok349:
  MOV    rax,1
  JMP    End349
No349:
  XOR    rax,rax
End349:
  AND    rax,rax
  JE     No348
Ok348:
  MOV    rax,1
  JMP    End348
No348:
  XOR    rax,rax
End348:
  AND    rax,rax
  JE    _EndIf3470
; *Cursor.Character = *Buffer + Position*#CharSize
  MOV    r15,qword [rsp+PS650+0]
  MOV    r14,qword [rsp+PS650+16]
  ADD    r14,r14
  ADD    r15,r14
  MOV    qword [rsp+56],r15
; 
; If Mode = 1 
  MOV    r15,qword [rsp+PS650+40]
  CMP    r15,1
  JNE   _EndIf3472
; *Cursor-#CharSize
  MOV    r15,qword [rsp+56]
  ADD    r15,-2
  MOV    qword [rsp+56],r15
; ElseIf ValidCharacters(*Cursor\c) = 0 
  JMP   _EndIf3471
_EndIf3472:
  MOV    rbp,qword [rsp+56]
  MOVZX  r15,word [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  MOVSX  r15,byte [rbp+r15]
  AND    r15,r15
  JNE   _EndIf3473
; *Cursor-#CharSize
  MOV    r15,qword [rsp+56]
  ADD    r15,-2
  MOV    qword [rsp+56],r15
; EndIf
_EndIf3471:
_EndIf3473:
; 
; While *Cursor >= *Buffer
_While3474:
  MOV    r15,qword [rsp+56]
  CMP    r15,qword [rsp+PS650+0]
  JL    _Wend3474
; If ValidCharacters(*Cursor\c) = 0 And (Mode = 0 Or (*Cursor\c <> '#' And *Cursor\c <> '*'))
  MOV    rbp,qword [rsp+56]
  MOVZX  r15,word [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  MOVSX  r15,byte [rbp+r15]
  AND    r15,r15
  JNE    No350
  MOV    r15,qword [rsp+PS650+40]
  AND    r15,r15
  JE     Ok351
  MOV    rbp,qword [rsp+56]
  MOVZX  r15,word [rbp]
  MOV    rax,35
  CMP    r15,rax
  JE     No352
  MOV    rbp,qword [rsp+56]
  MOVZX  r15,word [rbp]
  MOV    rax,42
  CMP    r15,rax
  JE     No352
Ok352:
  MOV    rax,1
  JMP    End352
No352:
  XOR    rax,rax
End352:
  AND    rax,rax
  JNE    Ok351
  JMP    No351
Ok351:
  MOV    rax,1
  JMP    End351
No351:
  XOR    rax,rax
End351:
  AND    rax,rax
  JE     No350
Ok350:
  MOV    rax,1
  JMP    End350
No350:
  XOR    rax,rax
End350:
  AND    rax,rax
  JE    _EndIf3476
; *WordStart = *Cursor + #CharSize
  MOV    r15,qword [rsp+56]
  ADD    r15,2
  MOV    qword [rsp+40],r15
; Break
  JMP   _Wend3474
; EndIf
_EndIf3476:
; *Cursor - #CharSize
  MOV    r15,qword [rsp+56]
  ADD    r15,-2
  MOV    qword [rsp+56],r15
; Found = 1
  MOV    qword [rsp+64],1
; Wend
  JMP   _While3474
_Wend3474:
; 
; *Cursor.Character = *Buffer + Position*#CharSize
  MOV    r15,qword [rsp+PS650+0]
  MOV    r14,qword [rsp+PS650+16]
  ADD    r14,r14
  ADD    r15,r14
  MOV    qword [rsp+56],r15
; While *Cursor\c
_While3477:
  MOV    rbp,qword [rsp+56]
  CMP    word [rbp],0
  JE    _Wend3477
; If ValidCharacters(*Cursor\c) = 0 And *Cursor\c <> '$'
  MOV    rbp,qword [rsp+56]
  MOVZX  r15,word [rbp]
  MOV    rbp,qword [a_ValidCharacters]
  MOVSX  r15,byte [rbp+r15]
  AND    r15,r15
  JNE    No353
  MOV    rbp,qword [rsp+56]
  MOVZX  r15,word [rbp]
  MOV    rax,36
  CMP    r15,rax
  JE     No353
Ok353:
  MOV    rax,1
  JMP    End353
No353:
  XOR    rax,rax
End353:
  AND    rax,rax
  JE    _EndIf3479
; *WordEnd = *Cursor - #CharSize
  MOV    r15,qword [rsp+56]
  ADD    r15,-2
  MOV    qword [rsp+48],r15
; Break
  JMP   _Wend3477
; EndIf
_EndIf3479:
; *Cursor + #CharSize
  MOV    r15,qword [rsp+56]
  ADD    r15,2
  MOV    qword [rsp+56],r15
; Found = 1
  MOV    qword [rsp+64],1
; Wend
  JMP   _While3477
_Wend3477:
; 
; 
; If Found
  CMP    qword [rsp+64],0
  JE    _EndIf3481
; Repeat
_Repeat3482:
; *Cursor = FindMemoryCharacter(*WordStart+#CharSize, *WordEnd-*WordStart-1, '*')
  MOV    rax,42
  MOV    rax,rax
  PUSH   rax
  MOV    r15,qword [rsp+56]
  SUB    r15,qword [rsp+48]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+56]
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure172
  MOV    qword [rsp+56],rax
; If *Cursor
  CMP    qword [rsp+56],0
  JE    _EndIf3484
; If *Cursor <= *Buffer + Position*#CharSize 
  MOV    r15,qword [rsp+56]
  MOV    r14,qword [rsp+PS650+0]
  MOV    r13,qword [rsp+PS650+16]
  ADD    r13,r13
  ADD    r14,r13
  CMP    r15,r14
  JG    _EndIf3486
; *WordStart = *Cursor+#CharSize
  MOV    r15,qword [rsp+56]
  ADD    r15,2
  MOV    qword [rsp+40],r15
; ElseIf *Cursor < *WordEnd 
  JMP   _EndIf3485
_EndIf3486:
  MOV    r15,qword [rsp+56]
  CMP    r15,qword [rsp+48]
  JGE   _EndIf3487
; *WordEnd = *Cursor
  PUSH   qword [rsp+56]
  POP    rax
  MOV    qword [rsp+48],rax
; EndIf
_EndIf3485:
_EndIf3487:
; EndIf
_EndIf3484:
; Until *Cursor = 0
  MOV    r15,qword [rsp+56]
  AND    r15,r15
  JNE   _Repeat3482
_Until3482:
; 
; 
; *NextCharacter.Character = *WordStart+#CharSize
  MOV    r15,qword [rsp+40]
  ADD    r15,2
  MOV    qword [rsp+72],r15
; If *WordStart\c = '*' And *NextCharacter\c = '#'
  MOV    rbp,qword [rsp+40]
  MOVZX  r15,word [rbp]
  MOV    rax,42
  CMP    r15,rax
  JNE    No354
  MOV    rbp,qword [rsp+72]
  MOVZX  r15,word [rbp]
  MOV    rax,35
  CMP    r15,rax
  JNE    No354
Ok354:
  MOV    rax,1
  JMP    End354
No354:
  XOR    rax,rax
End354:
  AND    rax,rax
  JE    _EndIf3489
; *WordStart+1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; EndIf
_EndIf3489:
; EndIf
_EndIf3481:
; EndIf
_EndIf3470:
; 
; CompilerIf #PB_Compiler_Unicode
; *StartIndex\i = (*WordStart - *Buffer)/#CharSize
  MOV    r15,qword [rsp+40]
  SUB    r15,qword [rsp+PS650+0]
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS650+32]
  POP    rax
  MOV    qword [rbp],rax
; *EndIndex\i   = (*WordEnd   - *Buffer)/#CharSize
  MOV    r15,qword [rsp+48]
  SUB    r15,qword [rsp+PS650+0]
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS650+40]
  POP    rax
  MOV    qword [rbp],rax
; CompilerElse
; 
; ProcedureReturn Found
  MOV    rax,qword [rsp+64]
  JMP   _EndProcedure651
; EndProcedure
_EndProcedureZero651:
  XOR    rax,rax
_EndProcedure651:
  ADD    rsp,88
  POP    r13
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure Network_Disconnect(*This.Network_Communication)
_Procedure406:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS406=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; LockMutex(Network_Mutex)    
  PUSH   qword [v_Network_Mutex]
  POP    rcx
  CALL   qword [PB_LockMutex]
; 
; *This\Connected = 0
  MOV    rbp,qword [rsp+PS406+0]
  MOV    dword [rbp+28],0
; UnlockMutex(Network_Mutex)
  PUSH   qword [v_Network_Mutex]
  POP    rcx
  CALL   qword [PB_UnlockMutex]
; EndProcedure
_EndProcedureZero407:
  XOR    rax,rax
_EndProcedure407:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure InitSyntaxCheckArrays()
_Procedure218:
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS218=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; 
; 
; 
; For k='0' To '9'            
  MOV    qword [rsp+40],48
  JMP   _ForSkipDebug368
_For368:
_ForSkipDebug368:
  MOV    rax,57
  CMP    rax,qword [rsp+40]
  JL    _Next369
; ValidCharacters(k) = 1
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [a_ValidCharacters]
  MOV    byte [rbp+r15],1
; Next
_NextContinue369:
  INC    qword [rsp+40]
  JNO   _For368
_Next369:
; 
; For k='A' To 'Z'            
  MOV    qword [rsp+40],65
  JMP   _ForSkipDebug370
_For370:
_ForSkipDebug370:
  MOV    rax,90
  CMP    rax,qword [rsp+40]
  JL    _Next371
; ValidCharacters(k) = 1
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [a_ValidCharacters]
  MOV    byte [rbp+r15],1
; Next
_NextContinue371:
  INC    qword [rsp+40]
  JNO   _For370
_Next371:
; 
; For k='a' To 'z'            
  MOV    qword [rsp+40],97
  JMP   _ForSkipDebug372
_For372:
_ForSkipDebug372:
  MOV    rax,122
  CMP    rax,qword [rsp+40]
  JL    _Next373
; ValidCharacters(k) = 1
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [a_ValidCharacters]
  MOV    byte [rbp+r15],1
; Next
_NextContinue373:
  INC    qword [rsp+40]
  JNO   _For372
_Next373:
; 
; ValidCharacters('_') = 1
  MOV    rbp,qword [a_ValidCharacters]
  MOV    byte [rbp+95],1
; 
; 
; 
; 
; 
; CurrentChar = 0
  MOV    qword [rsp+48],0
; Restore BasicKeywords
  MOV    rax,ll_initsyntaxcheckarrays_basickeywords
  MOV    qword [PB_DataPointer],rax
; For k=1 To #NbBasicKeywords
  MOV    qword [rsp+40],1
  JMP   _ForSkipDebug374
_For374:
_ForSkipDebug374:
  MOV    rax,111
  CMP    rax,qword [rsp+40]
  JL    _Next375
; Read.s BasicKeywordsReal(k)
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [a_BasicKeywordsReal]
  SAL    r15,3
  LEA    rcx,[rbp+r15]
  MOV    rdx,qword [PB_DataPointer]
  CALL   SYS_FastAllocateStringFree4
  ADD    qword [PB_DataPointer],rax
; BasicKeywords(k) = LCase(BasicKeywordsReal(k))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+64]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_LCase
  ADD    rsp,40
  MOV    r15,qword [rsp+48]
  MOV    rbp,qword [a_BasicKeywords]
  SAL    r15,3
  LEA    rcx,[rbp+r15]
  POP    rdx
  CALL   SYS_AllocateString4
; Read.s BasicKeywordsEndKeywords(k)
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [a_BasicKeywordsEndKeywords]
  SAL    r15,3
  LEA    rcx,[rbp+r15]
  MOV    rdx,qword [PB_DataPointer]
  CALL   SYS_FastAllocateStringFree4
  ADD    qword [PB_DataPointer],rax
; Read.s BasicKeywordsSpaces(k)
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [a_BasicKeywordsSpaces]
  SAL    r15,3
  LEA    rcx,[rbp+r15]
  MOV    rdx,qword [PB_DataPointer]
  CALL   SYS_FastAllocateStringFree4
  ADD    qword [PB_DataPointer],rax
; 
; Char = Asc(BasicKeywords(k))
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [a_BasicKeywords]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  CALL   PB_Asc
  MOV    qword [rsp+56],rax
; If Char <> CurrentChar
  MOV    r15,qword [rsp+56]
  CMP    r15,qword [rsp+48]
  JE    _EndIf377
; BasicKeywordsHT(Char) = k
  PUSH   qword [rsp+40]
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [a_BasicKeywordsHT]
  SAL    r15,2
  POP    rax
  MOV    dword [rbp+r15],eax
; CurrentChar = Char
  PUSH   qword [rsp+56]
  POP    rax
  MOV    qword [rsp+48],rax
; EndIf
_EndIf377:
; Next
_NextContinue375:
  INC    qword [rsp+40]
  JNO   _For374
_Next375:
; 
; 
; 
; 
; For Char = 'A' To 'Z'
  MOV    qword [rsp+56],65
  JMP   _ForSkipDebug378
_For378:
_ForSkipDebug378:
  MOV    rax,90
  CMP    rax,qword [rsp+56]
  JL    _Next379
; BasicKeywordsHT(Char) = BasicKeywordsHT(Char+('a'-'A'))
  MOV    r15,qword [rsp+56]
  ADD    r15,32
  MOV    rbp,qword [a_BasicKeywordsHT]
  SAL    r15,2
  MOVSXD rax,dword [rbp+r15]
  PUSH   rax
  MOV    r15,qword [rsp+64]
  SAL    r15,2
  POP    rax
  MOV    dword [rbp+r15],eax
; Next Char
_NextContinue379:
  INC    qword [rsp+56]
  JNO   _For378
_Next379:
; 
; 
; 
; CurrentChar = 0
  MOV    qword [rsp+48],0
; Restore ASMKeywords
  MOV    rax,ll_initsyntaxcheckarrays_asmkeywords
  MOV    qword [PB_DataPointer],rax
; 
; Read.l NbASMKeywords
  MOV    rax,qword [PB_DataPointer]
  MOVSXD rax,dword [rax]
  MOV    dword [v_NbASMKeywords],eax
  ADD    qword [PB_DataPointer],4
; 
; Global Dim ASMKeywords.s(NbASMKeywords)
  MOVSXD rax,dword [v_NbASMKeywords]
  INC    rax
  SUB    rsp,24
  MOV    rdx,rax
  MOV    rax,a_ASMKeywords
  PUSH   rax
  MOV    r9,s_s
  MOV    r8,8
  MOV    rcx,8
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_ASMKeywords],rax
; 
; For k=1 To NbASMKeywords
  MOV    qword [rsp+40],1
  JMP   _ForSkipDebug380
_For380:
_ForSkipDebug380:
  MOVSXD rax,dword [v_NbASMKeywords]
  CMP    rax,qword [rsp+40]
  JL    _Next381
; Read.s ASMKeywords(k)
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [a_ASMKeywords]
  SAL    r15,3
  LEA    rcx,[rbp+r15]
  MOV    rdx,qword [PB_DataPointer]
  CALL   SYS_FastAllocateStringFree4
  ADD    qword [PB_DataPointer],rax
; 
; Char = Asc(ASMKeywords(k))
  MOV    r15,qword [rsp+40]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rcx
  CALL   PB_Asc
  MOV    qword [rsp+56],rax
; If Char <> CurrentChar
  MOV    r15,qword [rsp+56]
  CMP    r15,qword [rsp+48]
  JE    _EndIf383
; ASMKeywordsHT(Char) = k
  PUSH   qword [rsp+40]
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [a_ASMKeywordsHT]
  SAL    r15,2
  POP    rax
  MOV    dword [rbp+r15],eax
; CurrentChar = Char
  PUSH   qword [rsp+56]
  POP    rax
  MOV    qword [rsp+48],rax
; EndIf
_EndIf383:
; Next  
_NextContinue381:
  INC    qword [rsp+40]
  JNO   _For380
_Next381:
; 
; 
; For Char = 'A' To 'Z'
  MOV    qword [rsp+56],65
  JMP   _ForSkipDebug384
_For384:
_ForSkipDebug384:
  MOV    rax,90
  CMP    rax,qword [rsp+56]
  JL    _Next385
; ASMKeywordsHT(Char+('a'-'A')) = ASMKeywordsHT(Char)
  MOV    r15,qword [rsp+56]
  MOV    rbp,qword [a_ASMKeywordsHT]
  SAL    r15,2
  MOVSXD rax,dword [rbp+r15]
  PUSH   rax
  MOV    r15,qword [rsp+64]
  ADD    r15,32
  SAL    r15,2
  POP    rax
  MOV    dword [rbp+r15],eax
; Next Char
_NextContinue385:
  INC    qword [rsp+56]
  JNO   _For384
_Next385:
; 
; EndProcedure
_EndProcedureZero219:
  XOR    rax,rax
_EndProcedure219:
  ADD    rsp,64
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure Profiler_RButtonDown(*Debugger.DebuggerData, x, y, *GrabWindow)
_Procedure592:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS592=128
  MOV    rax,7
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; If Profiler_CaptureMode > 0
  MOV    r15,qword [v_Profiler_CaptureMode]
  AND    r15,r15
  JLE   _EndIf3040
; Profiler_ReleaseMouse()
  CALL   ReleaseCapture
; 
; If Profiler_CaptureMode = 2
  MOV    r15,qword [v_Profiler_CaptureMode]
  CMP    r15,2
  JNE   _EndIf3042
; Profiler_DrawSelect(*Debugger, Profiler_DownX, Profiler_DownY, Profiler_OldX, Profiler_OldY) 
  SUB    rsp,8
  PUSH   qword [v_Profiler_OldY]
  PUSH   qword [v_Profiler_OldX]
  PUSH   qword [v_Profiler_DownY]
  PUSH   qword [v_Profiler_DownX]
  PUSH   qword [rsp+PS592+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure580
  ADD    rsp,48
; ElseIf Profiler_CaptureMode = 3
  JMP   _EndIf3041
_EndIf3042:
  MOV    r15,qword [v_Profiler_CaptureMode]
  CMP    r15,3
  JNE   _EndIf3043
; Profiler_DrawCross(*Debugger, Profiler_OldX, Profiler_OldY) 
  PUSH   qword [v_Profiler_OldY]
  PUSH   qword [v_Profiler_OldX]
  PUSH   qword [rsp+PS592+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure582
; EndIf
_EndIf3041:
_EndIf3043:
; 
; Profiler_CaptureMode = 0  
  MOV    qword [v_Profiler_CaptureMode],0
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Image], ImageID(*Debugger\ProfilerImage))
  MOV    rbp,qword [rsp+PS592+0]
  PUSH   qword [rbp+712]
  POP    rcx
  CALL   PB_ImageID
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS592+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2952]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; EndIf
_EndIf3040:
; 
; Profiler_CalculateViewport(*Debugger, @Area.ProfilerDrawing)
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS592+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure566
; 
; If X >= Area\x And X < Area\X+Area\w And Y >= Area\y And Y < Area\y+Area\h
  MOV    r15,qword [rsp+PS592+8]
  LEA    rbp,[rsp+40]
  MOVSXD rax,dword [rbp]
  CMP    r15,rax
  JL     No321
  MOV    r15,qword [rsp+PS592+8]
  MOVSXD r14,dword [rbp]
  MOVSXD rax,dword [rbp+8]
  ADD    r14,rax
  CMP    r15,r14
  JGE    No321
  MOV    r15,qword [rsp+PS592+16]
  MOVSXD rax,dword [rbp+4]
  CMP    r15,rax
  JL     No321
  MOV    r15,qword [rsp+PS592+16]
  MOVSXD r14,dword [rbp+4]
  MOVSXD rax,dword [rbp+12]
  ADD    r14,rax
  CMP    r15,r14
  JGE    No321
Ok321:
  MOV    rax,1
  JMP    End321
No321:
  XOR    rax,rax
End321:
  AND    rax,rax
  JE    _EndIf3045
; Profiler_CurrentLine = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY]) + Int(Round((y - Area\y) / *Debugger\ProfilerRatioY, 0)) 
  MOV    rbp,qword [rsp+PS592+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    r15,rax
  PUSH   qword 0
  FILD   qword [rsp+PS592+24]
  LEA    rbp,[rsp+48]
  FISUB  dword [rbp+4]
  FADD   qword [D1]
  MOV    rbp,qword [rsp+PS592+8]
  FDIV   qword [rbp+732]
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  POP    rdx
  CALL   PB_Round_DOUBLE
  MOVSD  [rsp-8],xmm0
  FLD    qword [rsp-8]
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  CALL   PB_Int
  ADD    r15,rax
  MOV    qword [v_Profiler_CurrentLine],r15
; 
; If CreatePopupMenu(#POPUPMENU_Profiler)      
  PUSH   qword 7
  POP    rcx
  CALL   PB_CreatePopupMenu
  AND    rax,rax
  JE    _EndIf3047
; MenuItem(#DEBUGGER_MENU_Zoomin,   Language("Debugger","Zoomin"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S319
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 7
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MenuItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; MenuItem(#DEBUGGER_MENU_Zoomout,  Language("Debugger","Zoomout"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S320
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 8
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MenuItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; MenuBar()
  CALL   PB_MenuBar
; 
; If *Debugger\NbIncludedFiles = 0
  MOV    rbp,qword [rsp+PS592+0]
  MOVSXD r15,dword [rbp+88]
  AND    r15,r15
  JNE   _EndIf3049
; MenuItem(#DEBUGGER_MENU_File0, Language("Debugger","ViewLine"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S321
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 9
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MenuItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Else
  JMP   _EndIf3048
_EndIf3049:
; OpenSubMenu(Language("Debugger","ViewLine")+" ...")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S321
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S322
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_OpenSubMenu
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; 
; For file = 0 To *Debugger\NbIncludedFiles
  MOV    qword [rsp+72],0
  JMP   _ForSkipDebug3051
_For3051:
_ForSkipDebug3051:
  MOV    rbp,qword [rsp+PS592+0]
  MOVSXD rax,dword [rbp+88]
  CMP    rax,qword [rsp+72]
  JL    _Next3052
; If GetGadgetItemState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], file) & (#PB_ListIcon_Checked|#PB_ListIcon_Selected)
  PUSH   qword [rsp+72]
  MOV    rbp,qword [rsp+PS592+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemState
  MOV    r15,rax
  AND    r15,3
  AND    r15,r15
  JE    _EndIf3054
; index = GetGadgetItemData(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], file) 
  PUSH   qword [rsp+72]
  MOV    rbp,qword [rsp+PS592+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemData
  MOV    qword [rsp+80],rax
; MenuItem(#DEBUGGER_MENU_File0+index, GetDebuggerRelativeFile(*Debugger, index << 24))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+112]
  SAL    r15,24
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+PS592+40]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure250
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    r15,qword [rsp+104]
  ADD    r15,9
  MOV    rax,r15
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MenuItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf3054:
; Next file                  
_NextContinue3052:
  INC    qword [rsp+72]
  JNO   _For3051
_Next3052:
; 
; CloseSubMenu()
  CALL   PB_CloseSubMenu
; EndIf
_EndIf3048:
; 
; DisplayPopupMenu(#POPUPMENU_Profiler, WindowID(*Debugger\Windows[#DEBUGGER_WINDOW_Profiler]))
  MOV    rbp,qword [rsp+PS592+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+888]
  POP    rcx
  CALL   PB_WindowID
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 7
  POP    rcx
  POP    rdx
  CALL   PB_DisplayPopupMenu
; EndIf
_EndIf3047:
; EndIf
_EndIf3045:
; EndProcedure
_EndProcedureZero593:
  XOR    rax,rax
_EndProcedure593:
  ADD    rsp,96
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure SetWindowForeground(Window)
_Procedure106:
  MOV    qword [rsp+8],rcx
  PUSH   r15
  PS106=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; If GetWindowLongPtr_(WindowID(Window), #GWL_STYLE) & #WS_MINIMIZE
  PUSH   qword -16
  SUB    rsp,8
  PUSH   qword [rsp+PS106+16]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   GetWindowLongPtrW
  MOV    r15,rax
  AND    r15,536870912
  AND    r15,r15
  JE    _EndIf28
; ShowWindow_(WindowID(Window), #SW_RESTORE)
  PUSH   qword 9
  SUB    rsp,8
  PUSH   qword [rsp+PS106+16]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   ShowWindow
; EndIf 
_EndIf28:
; 
; BringWindowToTop_(WindowID(Window))
  PUSH   qword [rsp+PS106+0]
  POP    rcx
  CALL   PB_WindowID
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   BringWindowToTop
; SetForegroundWindow_(WindowID(Window))
  PUSH   qword [rsp+PS106+0]
  POP    rcx
  CALL   PB_WindowID
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   SetForegroundWindow
; 
; SetActiveWindow(Window)
  PUSH   qword [rsp+PS106+0]
  POP    rcx
  CALL   PB_SetActiveWindow
; 
; EndProcedure
_EndProcedureZero107:
  XOR    rax,rax
_EndProcedure107:
  ADD    rsp,48
  POP    r15
  RET
; Procedure UnmarkBreakPoint() 
_Procedure678:
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS678=80
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; If SourceFiles(CurrentSource)\IsLoaded
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  CMP    dword [rbp+8],0
  JE    _EndIf3575
; Line = ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_LINEFROMPOSITION, ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_GETCURRENTPOS, 0, 0), 0)
  PUSH   qword 0
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 2008
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 2166
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
  MOV    qword [rsp+40],rax
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_MARKERDELETE, Line, 7)
  PUSH   qword 7
  PUSH   qword [rsp+48]
  PUSH   qword 2044
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_MARKERDELETE, Line, 8)
  PUSH   qword 8
  PUSH   qword [rsp+48]
  PUSH   qword 2044
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; RedrawGadget(SourceFiles(CurrentSource)\Gadget)   
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  CALL  _Procedure122
; ProcedureReturn Line | (CurrentSource<< 24)
  MOV    r15,qword [rsp+40]
  MOV    r14,qword [v_CurrentSource]
  SAL    r14,24
  OR     r15,r14
  MOV    rax,r15
  JMP   _EndProcedure679
; Else
  JMP   _EndIf3574
_EndIf3575:
; ProcedureReturn -1
  MOV    rax,-1
  JMP   _EndProcedure679
; EndIf
_EndIf3574:
; 
; EndProcedure
_EndProcedureZero679:
  XOR    rax,rax
_EndProcedure679:
  ADD    rsp,48
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure Plugin_Xml_RemoveObject(*Object.Plugin_Xml)
_Procedure640:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS640=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; FreeXML(*Object\XmlID)
  MOV    rbp,qword [rsp+PS640+0]
  MOVSXD rax,dword [rbp]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_FreeXML
; FreeMemory(*Object)
  PUSH   qword [rsp+PS640+0]
  POP    rcx
  CALL   PB_FreeMemory
; EndProcedure
_EndProcedureZero641:
  XOR    rax,rax
_EndProcedure641:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure OpenDebugWindow(*Debugger.DebuggerData, ActivateWindow)
_Procedure36:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PS36=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; HideWindow(*Debugger\Windows[#DEBUGGER_WINDOW_Debug], 0, #PB_Window_NoActivate)  
  PUSH   qword 33554432
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS36+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_HideWindow2
; EnsureWindowOnDesktop(*Debugger\Windows[#DEBUGGER_WINDOW_Debug])
  MOV    rbp,qword [rsp+PS36+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  POP    rcx
  CALL  _Procedure162
; 
; 
; 
; If ActivateWindow  
  CMP    qword [rsp+PS36+8],0
  JE    _EndIf1625
; SetWindowforeGround(*Debugger\Windows[#DEBUGGER_WINDOW_Debug])
  MOV    rbp,qword [rsp+PS36+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  POP    rcx
  CALL  _Procedure106
; Else
  JMP   _EndIf1624
_EndIf1625:
; SetWindowforeGround_NoActivate(*Debugger\Windows[#DEBUGGER_WINDOW_Debug])
  MOV    rbp,qword [rsp+PS36+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  POP    rcx
  CALL  _Procedure108
; EndIf
_EndIf1624:
; 
; StatusBarText(*Debugger\OutputStatusbar, 0, "")  
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS36+16]
  PUSH   qword [rbp+772]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_StatusBarText
; *Debugger\IsDebugOutputVisible = 1
  MOV    rbp,qword [rsp+PS36+0]
  MOV    dword [rbp+128],1
; *Debugger\OutputFirstVisible   = 0 
  MOV    rbp,qword [rsp+PS36+0]
  MOV    dword [rbp+780],0
; 
; Debugger_ProcessEvents(*Debugger\Windows[#DEBUGGER_WINDOW_Debug], #PB_Event_ActivateWindow) 
  PUSH   qword 13104
  MOV    rbp,qword [rsp+PS36+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  POP    rcx
  POP    rdx
  CALL  _Procedure14
; 
; EndProcedure
_EndProcedureZero37:
  XOR    rax,rax
_EndProcedure37:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure VariableGadget_Unlock(Gadget)
_Procedure280:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS280=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; *VariableGadget.VariableGadget = GetGadgetData(Gadget)
  PUSH   qword [rsp+PS280+0]
  POP    rcx
  CALL   PB_GetGadgetData
  MOV    qword [rsp+40],rax
; *VariableGadget\IsLocked = #False
  MOV    rbp,qword [rsp+40]
  MOV    dword [rbp+32],0
; 
; CompilerIf #CompileWindows
; SendMessage_(GadgetID(Gadget), #WM_SETREDRAW, #True, 0)
  PUSH   qword 0
  PUSH   qword 1
  PUSH   qword 11
  SUB    rsp,8
  PUSH   qword [rsp+PS280+32]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; InvalidateRect_(GadgetID(Gadget), #Null, #True)
  PUSH   qword 1
  PUSH   qword 0
  PUSH   qword [rsp+PS280+16]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   InvalidateRect
; CompilerEndIf
; 
; CompilerIf #CompileLinuxGtk2
; EndProcedure
_EndProcedureZero281:
  XOR    rax,rax
_EndProcedure281:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure.s GetPurifierOptions(*Debugger.DebuggerData)
_Procedure72:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS72=64
  SUB    rsp,40
  MOV    rax,[rsp+PS72+32]
  MOV    qword [PB_StringBasePosition],rax
; If *Debugger\PurifierGlobal = 1 And *Debugger\PurifierLocal = 1 And *Debugger\PurifierString = 64 And *Debugger\PurifierDynamic = 1
  MOV    rbp,qword [rsp+PS72+0]
  MOVSXD r15,dword [rbp+756]
  CMP    r15,1
  JNE    No336
  MOV    rbp,qword [rsp+PS72+0]
  MOVSXD r15,dword [rbp+760]
  CMP    r15,1
  JNE    No336
  MOV    rbp,qword [rsp+PS72+0]
  MOVSXD r15,dword [rbp+764]
  CMP    r15,64
  JNE    No336
  MOV    rbp,qword [rsp+PS72+0]
  MOVSXD r15,dword [rbp+768]
  CMP    r15,1
  JNE    No336
Ok336:
  MOV    rax,1
  JMP    End336
No336:
  XOR    rax,rax
End336:
  AND    rax,rax
  JE    _EndIf3252
; 
; ProcedureReturn ""    
  MOV    rcx,_S3
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure73
; Else
  JMP   _EndIf3251
_EndIf3252:
; ProcedureReturn Str(*Debugger\PurifierGlobal) + "," + Str(*Debugger\PurifierLocal) + "," + Str(*Debugger\PurifierString) + "," + Str(*Debugger\PurifierDynamic)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS72+24]
  MOVSXD rax,dword [rbp+756]
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  MOV    rcx,_S30
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS72+24]
  MOVSXD rax,dword [rbp+760]
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S30
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS72+24]
  MOVSXD rax,dword [rbp+764]
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S30
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS72+24]
  MOVSXD rax,dword [rbp+768]
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure73
; EndIf
_EndIf3251:
; EndProcedure
_EndProcedureZero73:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure73:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure HistoryWindowEvents(*Debugger.DebuggerData, EventID)
_Procedure504:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS504=192
  MOV    rax,16
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; If EventID = #PB_Event_Gadget
  MOV    r15,qword [rsp+PS504+8]
  CMP    r15,13100
  JNE   _EndIf2421
; EventGadgetID = EventGadget()
  CALL   PB_EventGadget
  MOV    qword [rsp+40],rax
; 
; If EventGadgetID = *Debugger\Gadgets[#DEBUGGER_GADGET_History_Update]
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [rsp+PS504+0]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2592]
  JNE   _EndIf2423
; Command.CommandInfo\Command = #COMMAND_GetHistory
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],16
; SendDebuggerCommand(*Debugger, @Command)       
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS504+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; ElseIf EventGadgetID = *Debugger\Gadgets[#DEBUGGER_GADGET_History_Reset]
  JMP   _EndIf2422
_EndIf2423:
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [rsp+PS504+0]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2648]
  JNE   _EndIf2424
; For i = 0 To *Debugger\NbProcedures - 1
  MOV    qword [rsp+72],0
  JMP   _ForSkipDebug2425
_For2425:
_ForSkipDebug2425:
  MOV    rbp,qword [rsp+PS504+0]
  MOVSXD r15,dword [rbp+100]
  DEC    r15
  CMP    r15,qword [rsp+72]
  JL    _Next2426
; If GetGadgetItemState(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Stats], i) & #PB_ListIcon_Selected
  PUSH   qword [rsp+72]
  MOV    rbp,qword [rsp+PS504+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2640]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemState
  MOV    r15,rax
  AND    r15,1
  AND    r15,r15
  JE    _EndIf2428
; Command.CommandInfo\Command = #COMMAND_ResetProcedureStats
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],20
; Command\Value1 = i
  PUSH   qword [rsp+72]
  POP    rax
  MOV    dword [rbp+8],eax
; SendDebuggerCommand(*Debugger, @Command)      
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS504+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; EndIf
_EndIf2428:
; Next i
_NextContinue2426:
  INC    qword [rsp+72]
  JNO   _For2425
_Next2426:
; 
; Command.CommandInfo\Command = #COMMAND_GetProcedureStats
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],19
; SendDebuggerCommand(*Debugger, @Command)      
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS504+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; 
; ElseIf EventGadgetID = *Debugger\Gadgets[#DEBUGGER_GADGET_History_ResetAll]
  JMP   _EndIf2422
_EndIf2424:
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [rsp+PS504+0]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2656]
  JNE   _EndIf2429
; Command.CommandInfo\Command = #COMMAND_ResetProcedureStats
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],20
; Command\Value1 = -1
  MOV    dword [rbp+8],-1
; SendDebuggerCommand(*Debugger, @Command)      
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS504+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; Command.CommandInfo\Command = #COMMAND_GetProcedureStats
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],19
; SendDebuggerCommand(*Debugger, @Command)      
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS504+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; ElseIf EventGadgetID = *Debugger\Gadgets[#DEBUGGER_GADGET_History_UpdateStats]
  JMP   _EndIf2422
_EndIf2429:
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [rsp+PS504+0]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2664]
  JNE   _EndIf2430
; Command.CommandInfo\Command = #COMMAND_GetProcedureStats
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],19
; SendDebuggerCommand(*Debugger, @Command)      
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS504+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; ElseIf *Debugger\History
  JMP   _EndIf2422
_EndIf2430:
  MOV    rbp,qword [rsp+PS504+0]
  CMP    qword [rbp+624],0
  JE    _EndIf2431
; *history.Debugger_History = *Debugger\History
  MOV    rbp,qword [rsp+PS504+0]
  PUSH   qword [rbp+624]
  POP    rax
  MOV    qword [rsp+80],rax
; For i = 0 To *Debugger\HistorySize-1
  MOV    qword [rsp+72],0
  JMP   _ForSkipDebug2432
_For2432:
_ForSkipDebug2432:
  MOV    rbp,qword [rsp+PS504+0]
  MOVSXD r15,dword [rbp+620]
  DEC    r15
  CMP    r15,qword [rsp+72]
  JL    _Next2433
; If EventGadgetID = *history\item[i]\Show      
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  CMP    r15,qword [rbp+24]
  JNE   _EndIf2435
; HistoryWindowEvents(*Debugger, #PB_Event_SizeWindow) 
  PUSH   qword 13118
  PUSH   qword [rsp+PS504+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure504
; Break
  JMP   _Next2433
; 
; ElseIf EventGadgetID = *history\item[i]\Variables
  JMP   _EndIf2434
_EndIf2435:
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  CMP    r15,qword [rbp+40]
  JNE   _EndIf2436
; VariableGadget_Event(*history\item[i]\Variables)  
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+40]
  POP    rcx
  CALL  _Procedure284
; 
; EndIf
_EndIf2434:
_EndIf2436:
; Next i          
_NextContinue2433:
  INC    qword [rsp+72]
  JNO   _For2432
_Next2433:
; EndIf  
_EndIf2422:
_EndIf2431:
; 
; ElseIf EventID = #PB_Event_SizeWindow
  JMP   _EndIf2420
_EndIf2421:
  MOV    r15,qword [rsp+PS504+8]
  CMP    r15,13118
  JNE   _EndIf2437
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Panel], 10, 10, WindowWidth(*Debugger\Windows[#DEBUGGER_WINDOW_History])-20, WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_History])-20)    
  SUB    rsp,8
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS504+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+864]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowHeight
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS504+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+864]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowWidth
  ADD    rsp,32
  MOV    r15,rax
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS504+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2576]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; Width  = GetPanelWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Panel])
  MOV    rbp,qword [rsp+PS504+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2576]
  POP    rcx
  CALL  _Procedure114
  MOV    qword [rsp+88],rax
; Height = GetPanelHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Panel])
  MOV    rbp,qword [rsp+PS504+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2576]
  POP    rcx
  CALL  _Procedure116
  MOV    qword [rsp+96],rax
; 
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Update], @ButtonWidth, @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+120]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+120]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS504+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2592]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; ButtonWidth = Max(ButtonWidth, 120)
  PUSH   qword 120
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+104],rax
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_ScrollArea], 10, 10, Width-20, Height-30-ButtonHeight)
  SUB    rsp,8
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+120]
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+104]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS504+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2584]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Update], Width-10-ButtonWidth, Height-10-ButtonHeight, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+120]
  MOV    r15,qword [rsp+120]
  SUB    r15,qword [rsp+136]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+120]
  SUB    r15,qword [rsp+136]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS504+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2592]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Updating], 10, 10, Width-20, Height-30-ButtonHeight)
  SUB    rsp,8
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+120]
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+104]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS504+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2632]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; Top = 10
  MOV    qword [rsp+120],10
; InnerWidth = Width - 70
  MOV    r15,qword [rsp+88]
  ADD    r15,-70
  MOV    qword [rsp+128],r15
; ContainerWidth  = Width - 55
  MOV    r15,qword [rsp+88]
  ADD    r15,-55
  MOV    qword [rsp+136],r15
; ContainerHeight = ButtonHeight * 3 + 25   
  MOV    r15,qword [rsp+112]
  IMUL   r15,3
  ADD    r15,25
  MOV    qword [rsp+144],r15
; 
; If *Debugger\History
  MOV    rbp,qword [rsp+PS504+0]
  CMP    qword [rbp+624],0
  JE    _EndIf2439
; *history.Debugger_History = *Debugger\History      
  MOV    rbp,qword [rsp+PS504+0]
  PUSH   qword [rbp+624]
  POP    rax
  MOV    qword [rsp+80],rax
; If *Debugger\HistorySize > 0
  MOV    rbp,qword [rsp+PS504+0]
  MOVSXD r15,dword [rbp+620]
  AND    r15,r15
  JLE   _EndIf2441
; ButtonWidth = Max(110, GetRequiredWidth(*history\item[0]\Show))
  PUSH   qword 0
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+24]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 110
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+104],rax
; EndIf
_EndIf2441:
; 
; For i = 0 To *Debugger\HistorySize-1      
  MOV    qword [rsp+72],0
  JMP   _ForSkipDebug2442
_For2442:
_ForSkipDebug2442:
  MOV    rbp,qword [rsp+PS504+0]
  MOVSXD r15,dword [rbp+620]
  DEC    r15
  CMP    r15,qword [rsp+72]
  JL    _Next2443
; ResizeGadget(*history\item[i]\Line, 5, 5, InnerWidth-15-ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+120]
  MOV    r15,qword [rsp+144]
  SUB    r15,qword [rsp+120]
  ADD    r15,-15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 5
  PUSH   qword 5
  MOV    rbp,qword [rsp+120]
  PUSH   rbp
  MOV    rax,qword [rsp+120]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+8]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*history\item[i]\File, 5, 5+ButtonHeight, InnerWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+144]
  MOV    r15,qword [rsp+136]
  ADD    r15,5
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 5
  MOV    rbp,qword [rsp+120]
  PUSH   rbp
  MOV    rax,qword [rsp+120]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*history\item[i]\Show, 5+InnerWidth-ButtonWidth, 5, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+120]
  PUSH   qword 5
  MOV    r15,qword [rsp+160]
  SUB    r15,qword [rsp+136]
  ADD    r15,5
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+120]
  PUSH   rbp
  MOV    rax,qword [rsp+120]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+24]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*history\item[i]\Call, 5, 15+ButtonHeight*2, InnerWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+144]
  MOV    r15,qword [rsp+136]
  ADD    r15,r15
  ADD    r15,15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 5
  MOV    rbp,qword [rsp+120]
  PUSH   rbp
  MOV    rax,qword [rsp+120]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+32]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*history\item[i]\Variables, 5, 5+ContainerHeight, InnerWidth, 195)
  SUB    rsp,8
  PUSH   qword 195
  PUSH   qword [rsp+144]
  MOV    r15,qword [rsp+168]
  ADD    r15,5
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 5
  MOV    rbp,qword [rsp+120]
  PUSH   rbp
  MOV    rax,qword [rsp+120]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; If GetGadgetState(*history\item[i]\Show) = 0
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+24]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf2445
; ResizeGadget(*history\item[i]\Container, 5, Top, ContainerWidth, ContainerHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  PUSH   qword [rsp+152]
  PUSH   qword [rsp+144]
  PUSH   qword 5
  MOV    rbp,qword [rsp+120]
  PUSH   rbp
  MOV    rax,qword [rsp+120]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; Top + ContainerHeight + 10
  MOV    r15,qword [rsp+120]
  ADD    r15,qword [rsp+144]
  ADD    r15,10
  MOV    qword [rsp+120],r15
; Else
  JMP   _EndIf2444
_EndIf2445:
; ResizeGadget(*history\item[i]\Container, 5, Top, ContainerWidth, ContainerHeight+210)
  SUB    rsp,8
  MOV    r15,qword [rsp+152]
  ADD    r15,210
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+152]
  PUSH   qword [rsp+144]
  PUSH   qword 5
  MOV    rbp,qword [rsp+120]
  PUSH   rbp
  MOV    rax,qword [rsp+120]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; Top + ContainerHeight + 220
  MOV    r15,qword [rsp+120]
  ADD    r15,qword [rsp+144]
  ADD    r15,220
  MOV    qword [rsp+120],r15
; EndIf               
_EndIf2444:
; Next i  
_NextContinue2443:
  INC    qword [rsp+72]
  JNO   _For2442
_Next2443:
; EndIf    
_EndIf2439:
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_CurrentText], 5, 5, InnerWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+144]
  PUSH   qword 5
  PUSH   qword 5
  MOV    rbp,qword [rsp+PS504+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2616]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_CurrentFile], 5, 10+ButtonHeight, InnerWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+144]
  MOV    r15,qword [rsp+136]
  ADD    r15,10
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 5
  MOV    rbp,qword [rsp+PS504+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2608]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_CurrentLine], 5, 15+ButtonHeight*2, InnerWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+144]
  MOV    r15,qword [rsp+136]
  ADD    r15,r15
  ADD    r15,15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 5
  MOV    rbp,qword [rsp+PS504+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2600]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_CurrentContainer], 5, Top, ContainerWidth, ContainerHeight)
  SUB    rsp,8
  PUSH   qword [rsp+152]
  PUSH   qword [rsp+152]
  PUSH   qword [rsp+144]
  PUSH   qword 5
  MOV    rbp,qword [rsp+PS504+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2624]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; Top + ContainerHeight + 10
  MOV    r15,qword [rsp+120]
  ADD    r15,qword [rsp+144]
  ADD    r15,10
  MOV    qword [rsp+120],r15
; 
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_History_ScrollArea], #PB_ScrollArea_InnerWidth, Width - 50)
  MOV    r15,qword [rsp+88]
  ADD    r15,-50
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS504+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2584]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_History_ScrollArea], #PB_ScrollArea_InnerHeight, Top + 10)     
  MOV    r15,qword [rsp+120]
  ADD    r15,10
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS504+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2584]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; 
; ResetAllWidth = Max(120, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_History_ResetAll]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS504+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2656]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 120
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+152],rax
; ResetWidth    = Max(120, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Reset]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS504+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2648]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 120
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+160],rax
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Stats], 10, 10, Width-20, Height-30-ButtonHeight)
  SUB    rsp,8
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+120]
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+104]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS504+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2640]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_ResetAll], 10, Height-10-ButtonHeight, ResetAllWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+168]
  MOV    r15,qword [rsp+120]
  SUB    r15,qword [rsp+136]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS504+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2656]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_Reset], 20+ResetAllWidth, Height-10-ButtonHeight, ResetWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+176]
  MOV    r15,qword [rsp+120]
  SUB    r15,qword [rsp+136]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+184]
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS504+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2648]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_History_UpdateStats], Width-10-ButtonWidth, Height-10-ButtonHeight, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+120]
  MOV    r15,qword [rsp+120]
  SUB    r15,qword [rsp+136]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+120]
  SUB    r15,qword [rsp+136]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS504+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2664]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; 
; ElseIf EventID = #PB_Event_CloseWindow
  JMP   _EndIf2420
_EndIf2437:
  MOV    r15,qword [rsp+PS504+8]
  CMP    r15,13116
  JNE   _EndIf2447
; If DebuggerMemorizeWindows And IsWindowMinimized(*Debugger\Windows[#DEBUGGER_WINDOW_History]) = 0
  CMP    qword [v_DebuggerMemorizeWindows],0
  JE     No279
  MOV    rbp,qword [rsp+PS504+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+864]
  POP    rcx
  CALL  _Procedure104
  MOV    r15,rax
  AND    r15,r15
  JNE    No279
Ok279:
  MOV    rax,1
  JMP    End279
No279:
  XOR    rax,rax
End279:
  AND    rax,rax
  JE    _EndIf2449
; HistoryMaximize = IsWindowMaximized(*Debugger\Windows[#DEBUGGER_WINDOW_History])
  MOV    rbp,qword [rsp+PS504+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+864]
  POP    rcx
  CALL  _Procedure102
  MOV    qword [v_HistoryMaximize],rax
; If HistoryMaximize = 0
  MOV    r15,qword [v_HistoryMaximize]
  AND    r15,r15
  JNE   _EndIf2451
; HistoryWindowX = WindowX(*Debugger\Windows[#DEBUGGER_WINDOW_History])
  MOV    rbp,qword [rsp+PS504+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+864]
  POP    rcx
  CALL   PB_WindowX
  MOV    qword [v_HistoryWindowX],rax
; HistoryWindowY = WindowY(*Debugger\Windows[#DEBUGGER_WINDOW_History])
  MOV    rbp,qword [rsp+PS504+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+864]
  POP    rcx
  CALL   PB_WindowY
  MOV    qword [v_HistoryWindowY],rax
; HistoryWindowWidth  = WindowWidth (*Debugger\Windows[#DEBUGGER_WINDOW_History])
  MOV    rbp,qword [rsp+PS504+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+864]
  POP    rcx
  CALL   PB_WindowWidth
  MOV    qword [v_HistoryWindowWidth],rax
; HistoryWindowHeight = WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_History])
  MOV    rbp,qword [rsp+PS504+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+864]
  POP    rcx
  CALL   PB_WindowHeight
  MOV    qword [v_HistoryWindowHeight],rax
; EndIf
_EndIf2451:
; EndIf
_EndIf2449:
; 
; If *Debugger\History
  MOV    rbp,qword [rsp+PS504+0]
  CMP    qword [rbp+624],0
  JE    _EndIf2453
; *history.Debugger_History = *Debugger\History
  MOV    rbp,qword [rsp+PS504+0]
  PUSH   qword [rbp+624]
  POP    rax
  MOV    qword [rsp+80],rax
; For i = 0 To *Debugger\HistorySize - 1
  MOV    qword [rsp+72],0
  JMP   _ForSkipDebug2454
_For2454:
_ForSkipDebug2454:
  MOV    rbp,qword [rsp+PS504+0]
  MOVSXD r15,dword [rbp+620]
  DEC    r15
  CMP    r15,qword [rsp+72]
  JL    _Next2455
; VariableGadget_Free(*history\item[i]\Variables)
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,48
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+40]
  POP    rcx
  CALL  _Procedure276
; Next i
_NextContinue2455:
  INC    qword [rsp+72]
  JNO   _For2454
_Next2455:
; FreeMemory(*Debugger\History)
  MOV    rbp,qword [rsp+PS504+0]
  PUSH   qword [rbp+624]
  POP    rcx
  CALL   PB_FreeMemory
; *Debugger\History = 0
  MOV    rbp,qword [rsp+PS504+0]
  MOV    qword [rbp+624],0
; *Debugger\HistorySize = 0
  MOV    rbp,qword [rsp+PS504+0]
  MOV    dword [rbp+620],0
; EndIf
_EndIf2453:
; 
; CloseWindow(*Debugger\Windows[#DEBUGGER_WINDOW_History])
  MOV    rbp,qword [rsp+PS504+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+864]
  POP    rcx
  CALL   PB_CloseWindow
; *Debugger\Windows[#DEBUGGER_WINDOW_History] = 0
  MOV    rbp,qword [rsp+PS504+0]
  PUSH   rbp
  POP    rbp
  MOV    qword [rbp+864],0
; Debugger_CheckDestroy(*Debugger)    
  PUSH   qword [rsp+PS504+0]
  POP    rcx
  CALL  _Procedure426
; 
; EndIf
_EndIf2420:
_EndIf2447:
; 
; EndProcedure
_EndProcedureZero505:
  XOR    rax,rax
_EndProcedure505:
  ADD    rsp,168
  POP    r15
  POP    rbp
  RET
; Procedure CreateWatchlistWindow(*Debugger.DebuggerData)
_Procedure58:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS58=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; Flags = #PB_Window_SystemMenu|#PB_Window_MinimizeGadget|#PB_Window_SizeGadget|#PB_Window_Invisible|#PB_Window_MaximizeGadget
  MOV    qword [rsp+40],282001408
; If WatchListWindowMaximize
  CMP    qword [v_WatchListWindowMaximize],0
  JE    _EndIf2591
; Flags | #PB_Window_Maximize
  MOV    r15,qword [rsp+40]
  OR     r15,16777216
  MOV    qword [rsp+40],r15
; EndIf  
_EndIf2591:
; 
; Window = OpenWindow(#PB_Any, 0, 0, 0, 0, Language("Debugger","WatchListTitle") + " - " + GetFilePart(*Debugger\FileName$), Flags)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S284
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS58+40]
  PUSH   qword [rbp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetFilePart
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_OpenWindow2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+48],rax
; If Window
  CMP    qword [rsp+48],0
  JE    _EndIf2593
; 
; *Debugger\Windows[#DEBUGGER_WINDOW_WatchList] = Window
  PUSH   qword [rsp+48]
  MOV    rbp,qword [rsp+PS58+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+872],rax
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_List] = VariableGadget_Create(#PB_Any, 0, 0, 0, 0, Language("Debugger","Scope")+Chr(10)+Language("Debugger","Procedure"), #False, #False)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S250
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S273
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure274
  ADD    rsp,72
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS58+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2672],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Frame] = FrameGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","AddVariable")+":")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S285
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_FrameGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS58+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2720],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Text1] = TextGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Procedure")+":", #PB_Text_Right)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S273
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS58+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2728],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Text2] = TextGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Variable")+":", #PB_Text_Right)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S286
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS58+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2736],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Procedure] = ComboBoxGadget(#PB_Any, 0, 0, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ComboBoxGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS58+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2704],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Variable] = StringGadget(#PB_Any, 0, 0, 0, 0, "")
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS58+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2712],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Add] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Add"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S277
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS58+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2680],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Remove] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Remove"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S278
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS58+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2688],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Clear] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Clear"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S208
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS58+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2696],rax
; 
; *Debugger\IsWatchListVisible = 0
  MOV    rbp,qword [rsp+PS58+0]
  MOV    dword [rbp+132],0
; 
; CompilerIf #DEFAULT_CanWindowStayOnTop
; SetWindowStayOnTop(Window, DebuggerOnTop)
  PUSH   qword [v_DebuggerOnTop]
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure112
; CompilerEndIf  
; 
; AddKeyboardShortcut(Window, #PB_Shortcut_Return, #DEBUGGER_MENU_Return)
  PUSH   qword 0
  PUSH   qword 13
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddKeyboardShortcut
; Debugger_AddShortcuts(Window)        
  PUSH   qword [rsp+48]
  POP    rcx
  CALL  _Procedure6
; EndIf
_EndIf2593:
; 
; EndProcedure
_EndProcedureZero59:
  XOR    rax,rax
_EndProcedure59:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure SendDebuggerCommand(*Debugger.DebuggerData, *Command.CommandInfo)
_Procedure10:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PS10=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; *Command\DataSize = 0
  MOV    rbp,qword [rsp+PS10+8]
  MOV    dword [rbp+4],0
; SendDebuggerCommandWithData(*Debugger, *Command, 0)
  PUSH   qword 0
  PUSH   qword [rsp+PS10+16]
  PUSH   qword [rsp+PS10+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure8
; EndProcedure
_EndProcedureZero11:
  XOR    rax,rax
_EndProcedure11:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure Profiler_DrawNumber(x, y, Number, Color, isBold = 0, length = -1)
_Procedure572:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS572=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; If length = -1
  MOV    r15,qword [rsp+PS572+40]
  CMP    r15,-1
  JNE   _EndIf2862
; length = Len(Str(Number))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS572+56]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+PS572+40],rax
; EndIf
_EndIf2862:
; 
; For length = length-1 To 0 Step -1
  MOV    r15,qword [rsp+PS572+40]
  DEC    r15
  MOV    qword [rsp+PS572+40],r15
  JMP   _ForSkipDebug2863
_For2863:
_ForSkipDebug2863:
  XOR    rax,rax
  CMP    rax,qword [rsp+PS572+40]
  JG    _Next2864
; *Pointer.BYTE = ?Profiler_Numbers + (Number % 10)*9
  MOV    rbp,ll_profiler_drawnumber_profiler_numbers
  MOV    r15,rbp
  MOV    r14,qword [rsp+PS572+16]
  MOV    rax,r14
  MOV    rcx,10
  CQO
  IDIV   rcx
  MOV    r14,rdx
  IMUL   r14,9
  ADD    r15,r14
  MOV    qword [rsp+40],r15
; 
; 
; For dy = 0 To 8
  MOV    qword [rsp+48],0
  JMP   _ForSkipDebug2865
_For2865:
_ForSkipDebug2865:
  MOV    rax,8
  CMP    rax,qword [rsp+48]
  JL    _Next2866
; For dx = 0 To 6
  MOV    qword [rsp+56],0
  JMP   _ForSkipDebug2867
_For2867:
_ForSkipDebug2867:
  MOV    rax,6
  CMP    rax,qword [rsp+56]
  JL    _Next2868
; If *Pointer\b & (1 << (6-dx))
  MOV    rbp,qword [rsp+40]
  MOVSX  r15,byte [rbp]
  MOV    r14,qword [rsp+56]
  NEG    r14
  ADD    r14,6
  MOV    rcx,r14
  MOV    rax,1
  SAL    rax,cl
  MOV    r14,rax
  AND    r15,r14
  AND    r15,r15
  JE    _EndIf2870
; px = x + length*7 + dx
  MOV    r15,qword [rsp+PS572+0]
  MOV    r14,qword [rsp+PS572+40]
  IMUL   r14,7
  ADD    r15,r14
  ADD    r15,qword [rsp+56]
  MOV    qword [rsp+64],r15
; py = y+dy
  MOV    r15,qword [rsp+PS572+8]
  ADD    r15,qword [rsp+48]
  MOV    qword [rsp+72],r15
; 
; 
; 
; 
; If px >= 0 And py >= 0 And px < OutputWidth()-1 And py < OutputHeight()
  MOV    r15,qword [rsp+64]
  AND    r15,r15
  JL     No302
  MOV    r15,qword [rsp+72]
  AND    r15,r15
  JL     No302
  MOV    r15,qword [rsp+64]
  CALL   PB_OutputWidth
  MOV    r14,rax
  DEC    r14
  CMP    r15,r14
  JGE    No302
  MOV    r15,qword [rsp+72]
  CALL   PB_OutputHeight
  CMP    r15,rax
  JGE    No302
Ok302:
  MOV    rax,1
  JMP    End302
No302:
  XOR    rax,rax
End302:
  AND    rax,rax
  JE    _EndIf2872
; Plot(px, py, color)
  PUSH   qword [rsp+PS572+24]
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_Plot2
; 
; If isBold
  CMP    qword [rsp+PS572+32],0
  JE    _EndIf2874
; Plot(px+1, py, color) 
  PUSH   qword [rsp+PS572+24]
  PUSH   qword [rsp+80]
  MOV    r15,qword [rsp+80]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_Plot2
; EndIf
_EndIf2874:
; EndIf
_EndIf2872:
; EndIf      
_EndIf2870:
; Next dx      
_NextContinue2868:
  INC    qword [rsp+56]
  JNO   _For2867
_Next2868:
; 
; *Pointer + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; Next dy  
_NextContinue2866:
  INC    qword [rsp+48]
  JNO   _For2865
_Next2866:
; 
; 
; Number / 10
  MOV    r15,qword [rsp+PS572+16]
  MOV    rax,r15
  MOV    rcx,10
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    qword [rsp+PS572+16],r15
; 
; If Number = 0
  MOV    r15,qword [rsp+PS572+16]
  AND    r15,r15
  JNE   _EndIf2876
; Break
  JMP   _Next2864
; EndIf
_EndIf2876:
; Next length
_NextContinue2864:
  DEC    qword [rsp+PS572+40]
  JNO   _For2863
_Next2864:
; EndProcedure
_EndProcedureZero573:
  XOR    rax,rax
_EndProcedure573:
  ADD    rsp,80
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure OpenPurifierWindow(*Debugger.DebuggerData)
_Procedure54:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS54=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Purifier]
  MOV    rbp,qword [rsp+PS54+0]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+904],0
  JE    _EndIf3272
; SetWindowForeground(*Debugger\Windows[#DEBUGGER_WINDOW_Purifier])
  MOV    rbp,qword [rsp+PS54+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+904]
  POP    rcx
  CALL  _Procedure106
; 
; Else
  JMP   _EndIf3271
_EndIf3272:
; Window = OpenWindow(#PB_Any, PurifierWindowX, PurifierWindowY, 100, 100, Language("Debugger","PurifierTitle") + " - " + DebuggerTitle(*Debugger\FileName$), #PB_Window_SystemMenu|#PB_Window_MinimizeGadget|#PB_Window_Invisible)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 281673728
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S332
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS54+48]
  PUSH   qword [rbp+80]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure260
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 100
  PUSH   qword 100
  PUSH   qword [v_PurifierWindowY]
  PUSH   qword [v_PurifierWindowX]
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_OpenWindow2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+40],rax
; If Window 
  CMP    qword [rsp+40],0
  JE    _EndIf3275
; *Debugger\Windows[#DEBUGGER_WINDOW_Purifier] = Window
  PUSH   qword [rsp+40]
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+904],rax
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Frame] = FrameGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","PurifierIntervall")) ; DO NOT FIX TYPO: PurifierIntervall
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S333
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_FrameGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3024],rax
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TextGlobal] = TextGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","GlobalIntervall")) ; DO NOT FIX TYPO: GlobalIntervall
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S334
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3032],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TextLocal] = TextGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","LocalIntervall")) ; DO NOT FIX TYPO: LocalIntervall
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S335
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3056],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TextString] = TextGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","StringIntervall")) ; DO NOT FIX TYPO: StringIntervall
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S336
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3080],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TextDynamic] = TextGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","DynamicIntervall")) ; DO NOT FIX TYPO: DynamicIntervall
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S337
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3104],rax
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarGlobal] = TrackBarGadget(#PB_Any, 0, 0, 0, 0, 0, #MAX_PurifierState, #PB_TrackBar_Ticks)
  PUSH   qword 1
  PUSH   qword 14
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TrackBarGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3040],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarLocal] = TrackBarGadget(#PB_Any, 0, 0, 0, 0, 0, #MAX_PurifierState, #PB_TrackBar_Ticks)
  PUSH   qword 1
  PUSH   qword 14
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TrackBarGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3064],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarString] = TrackBarGadget(#PB_Any, 0, 0, 0, 0, 0, #MAX_PurifierState, #PB_TrackBar_Ticks)
  PUSH   qword 1
  PUSH   qword 14
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TrackBarGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3088],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarDynamic] = TrackBarGadget(#PB_Any, 0, 0, 0, 0, 0, #MAX_PurifierState, #PB_TrackBar_Ticks)
  PUSH   qword 1
  PUSH   qword 14
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TrackBarGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3112],rax
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesGlobal] = TextGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger", "CheckLines")) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S330
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3048],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesLocal] = TextGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger", "CheckLines"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S330
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3072],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesString] = TextGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger", "CheckLines"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S330
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3096],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_LinesDynamic] = TextGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger", "CheckLines"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S330
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3120],rax
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Ok] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Misc","Ok"), #PB_Button_Default)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S113
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3128],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Cancel] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Misc","Cancel"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S112
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3136],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Apply] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Preferences","Apply"))      
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S339
  PUSH   rax
  MOV    rax,_S338
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3144],rax
; 
; CompilerIf #CompileWindows
; 
; SetWindowLongPtr_(WindowID(Window), #GWL_USERDATA, *Debugger)
  PUSH   qword [rsp+PS54+0]
  PUSH   qword -21
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   SetWindowLongPtrW
; SetWindowCallback(@PurifierWindowCallback(), Window)
  PUSH   qword [rsp+40]
  LEA    rax,[_Procedure614]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_SetWindowCallback2
; CompilerEndIf     
; 
; CompilerIf #DEFAULT_CanWindowStayOnTop
; SetWindowStayOnTop(Window, DebuggerOnTop)
  PUSH   qword [v_DebuggerOnTop]
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL  _Procedure112
; CompilerEndIf 
; 
; ResizePurifierWindow(*Debugger)
  PUSH   qword [rsp+PS54+0]
  POP    rcx
  CALL  _Procedure620
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarGlobal], StateFromGranularity(*Debugger\PurifierGlobal))
  MOV    rbp,qword [rsp+PS54+0]
  MOVSXD rax,dword [rbp+756]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure608
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3040]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarLocal], StateFromGranularity(*Debugger\PurifierLocal))
  MOV    rbp,qword [rsp+PS54+0]
  MOVSXD rax,dword [rbp+760]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure608
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3064]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarString], StateFromGranularity(*Debugger\PurifierString))
  MOV    rbp,qword [rsp+PS54+0]
  MOVSXD rax,dword [rbp+764]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure608
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3088]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarDynamic], StateFromGranularity(*Debugger\PurifierDynamic))
  MOV    rbp,qword [rsp+PS54+0]
  MOVSXD rax,dword [rbp+768]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure608
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS54+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3112]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; UpdatePurifierLines(*Debugger) 
  PUSH   qword [rsp+PS54+0]
  POP    rcx
  CALL  _Procedure610
; 
; AddKeyboardShortcut(Window, #PB_Shortcut_Return, #DEBUGGER_MENU_Return)
  PUSH   qword 0
  PUSH   qword 13
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddKeyboardShortcut
; AddKeyboardShortcut(Window, #PB_Shortcut_Escape, #DEBUGGER_MENU_Escape)
  PUSH   qword 1
  PUSH   qword 27
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddKeyboardShortcut
; 
; Debugger_AddShortcuts(Window) 
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure6
; EnsureWindowOnDesktop(Window)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure162
; 
; HideWindow(Window, 0)
  PUSH   qword 0
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_HideWindow
; UpdatePurifierWindowState(*Debugger)  
  PUSH   qword [rsp+PS54+0]
  POP    rcx
  CALL  _Procedure618
; 
; Debugger_ProcessEvents(Window, #PB_Event_ActivateWindow) 
  PUSH   qword 13104
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL  _Procedure14
; EndIf  
_EndIf3275:
; EndIf
_EndIf3271:
; 
; EndProcedure
_EndProcedureZero55:
  XOR    rax,rax
_EndProcedure55:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure CreateDebugWindow(*Debugger.DebuggerData)
_Procedure60:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS60=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; Flags = #PB_Window_SystemMenu|#PB_Window_MinimizeGadget|#PB_Window_SizeGadget|#PB_Window_Invisible|#PB_Window_MaximizeGadget
  MOV    qword [rsp+40],282001408
; If DebugWindowMaximize
  CMP    qword [v_DebugWindowMaximize],0
  JE    _EndIf1619
; Flags | #PB_Window_Maximize
  MOV    r15,qword [rsp+40]
  OR     r15,16777216
  MOV    qword [rsp+40],r15
; EndIf  
_EndIf1619:
; 
; Window = OpenWindow(#PB_Any, DebugWindowX, DebugWindowY, DebugWindowWidth, DebugWindowHeight, Language("Debugger","DebugWindowTitle") + " - " + DebuggerTitle(*Debugger\FileName$), Flags)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S202
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS60+48]
  PUSH   qword [rbp+80]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure260
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [v_DebugWindowHeight]
  PUSH   qword [v_DebugWindowWidth]
  PUSH   qword [v_DebugWindowY]
  PUSH   qword [v_DebugWindowX]
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_OpenWindow2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+48],rax
; If Window
  CMP    qword [rsp+48],0
  JE    _EndIf1621
; *Debugger\Windows[#DEBUGGER_WINDOW_Debug] = Window
  PUSH   qword [rsp+48]
  MOV    rbp,qword [rsp+PS60+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+832],rax
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Debug_List]    = EditorGadget(#PB_Any, 0, 0, 0, 0, #PB_Editor_ReadOnly)
  PUSH   qword 2048
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_EditorGadget2
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS60+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+944],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Entry]   = ComboBoxGadget(#PB_Any, 0, 0, 0, 0, #PB_ComboBox_Editable)
  PUSH   qword 66
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ComboBoxGadget2
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS60+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+984],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Display] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Display"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S204
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS60+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+992],rax
; *Debugger\Gadgets[#DEBUGGER_Gadget_Debug_Text]    = TextGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Debug")+":")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S205
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS60+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+976],rax
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Copy]    = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Copy"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S206
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS60+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+952],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Save]    = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Save"))        
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S207
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS60+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+968],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Clear]   = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Clear"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S208
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS60+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+960],rax
; 
; *Debugger\OutputStatusbar = CreateStatusBar(#PB_Any, WindowID(Window))
  PUSH   qword [rsp+48]
  POP    rcx
  CALL   PB_WindowID
  MOV    rax,rax
  PUSH   rax
  PUSH   qword -1
  POP    rcx
  POP    rdx
  CALL   PB_CreateStatusBar
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS60+8]
  POP    rax
  MOV    qword [rbp+772],rax
; AddStatusBarField(#PB_Ignore)
  PUSH   qword -65535
  POP    rcx
  CALL   PB_AddStatusBarField
; 
; If DebugOutFontID <> #PB_Default
  MOV    r15,qword [v_DebugOutFontID]
  CMP    r15,-1
  JE    _EndIf1623
; SetGadgetFont(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_List], DebugOutFontID)
  PUSH   qword [v_DebugOutFontID]
  MOV    rbp,qword [rsp+PS60+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+944]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetFont
; EndIf
_EndIf1623:
; 
; DebugWindowEvents(*Debugger, #PB_Event_SizeWindow)    
  PUSH   qword 13118
  PUSH   qword [rsp+PS60+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure440
; 
; CompilerIf #DEFAULT_CanWindowStayOnTop
; SetWindowStayOnTop(Window, DebuggerOnTop)
  PUSH   qword [v_DebuggerOnTop]
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure112
; CompilerEndIf
; 
; AddKeyboardShortcut(Window, #PB_Shortcut_Return, #DEBUGGER_MENU_Return)
  PUSH   qword 0
  PUSH   qword 13
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddKeyboardShortcut
; Debugger_AddShortcuts(Window)  
  PUSH   qword [rsp+48]
  POP    rcx
  CALL  _Procedure6
; 
; *Debugger\OutputFirstVisible   = 1
  MOV    rbp,qword [rsp+PS60+0]
  MOV    dword [rbp+780],1
; *Debugger\IsDebugOutputVisible = 0
  MOV    rbp,qword [rsp+PS60+0]
  MOV    dword [rbp+128],0
; EndIf
_EndIf1621:
; 
; 
; EndProcedure
_EndProcedureZero61:
  XOR    rax,rax
_EndProcedure61:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure SetCurrentLine(Line.l)
_Procedure668:
  MOV    qword [rsp+8],rcx
  PS668=48
  SUB    rsp,40
; SourceLineAction(Line, #ACTION_MarkCurrentLine)
  PUSH   qword 0
  MOVSXD rax,dword [rsp+PS668+8]
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL  _Procedure666
; EndProcedure
_EndProcedureZero669:
  XOR    rax,rax
_EndProcedure669:
  ADD    rsp,40
  RET
; Procedure VariableGadget_Set(index, *Value, Is64bit, AutoSync)
_Procedure298:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PUSH   r15
  PS298=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Shared *VariableGadget_Used.VariableGadget
; 
; *items.VariableGadget_ItemList = *VariableGadget_Used\Items  
  MOV    rbp,qword [p_VariableGadget_Used]
  PUSH   qword [rbp+16]
  POP    rax
  MOV    qword [rsp+40],rax
; If *items And index < *VariableGadget_Used\ItemCount And *Value
  CMP    qword [rsp+40],0
  JE     No164
  MOV    r15,qword [rsp+PS298+0]
  MOV    rbp,qword [p_VariableGadget_Used]
  MOVSXD rax,dword [rbp+12]
  CMP    r15,rax
  JGE    No164
  CMP    qword [rsp+PS298+8],0
  JE     No164
Ok164:
  MOV    rax,1
  JMP    End164
No164:
  XOR    rax,rax
End164:
  AND    rax,rax
  JE    _EndIf1006
; Type = *items\item[index]\Type
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+8]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  rax,byte [rbp+1]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+48],rax
; 
; If IS_ARRAY(*items\item[index]\Kind)
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+8]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,byte [rbp]
  AND    r15,63
  CMP    r15,15
  JNE   _EndIf1008
; *items\item[index]\Value$ = PeekAscii(*Value) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+PS298+48]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+16]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; ElseIf IS_LINKEDLIST(*items\item[index]\Kind)
  JMP   _EndIf1007
_EndIf1008:
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+8]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,byte [rbp]
  AND    r15,63
  CMP    r15,14
  JNE   _EndIf1009
; If Is64bit
  CMP    qword [rsp+PS298+16],0
  JE    _EndIf1011
; If PeekQ(*Value) = -1
  PUSH   qword [rsp+PS298+8]
  POP    rcx
  CALL   PB_PeekQ
  MOV    r15,rax
  CMP    r15,-1
  JNE   _EndIf1013
; Size$ = "-"
  MOV    rdx,_S38
  LEA    rcx,[rsp+56]
  CALL   SYS_FastAllocateStringFree4
; Else
  JMP   _EndIf1012
_EndIf1013:
; Size$ = Str(PeekQ(*Value))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf       
_EndIf1012:
; If PeekQ(*Value+8) = -1
  MOV    r15,qword [rsp+PS298+8]
  ADD    r15,8
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_PeekQ
  MOV    r15,rax
  CMP    r15,-1
  JNE   _EndIf1016
; Current$ = "-"
  MOV    rdx,_S38
  LEA    rcx,[rsp+64]
  CALL   SYS_FastAllocateStringFree4
; Else
  JMP   _EndIf1015
_EndIf1016:
; Current$ = Str(PeekQ(*Value+8))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    r15,qword [rsp+PS298+40]
  ADD    r15,8
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  LEA    rcx,[rsp+72]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf       
_EndIf1015:
; Else
  JMP   _EndIf1010
_EndIf1011:
; If PeekL(*Value) = -1
  PUSH   qword [rsp+PS298+8]
  POP    rcx
  CALL   PB_PeekL
  MOV    r15,rax
  CMP    r15,-1
  JNE   _EndIf1020
; Size$ = "-"
  MOV    rdx,_S38
  LEA    rcx,[rsp+56]
  CALL   SYS_FastAllocateStringFree4
; Else
  JMP   _EndIf1019
_EndIf1020:
; Size$ = Str(PeekL(*Value))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf1019:
; If PeekL(*Value+4) = -1
  MOV    r15,qword [rsp+PS298+8]
  ADD    r15,4
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_PeekL
  MOV    r15,rax
  CMP    r15,-1
  JNE   _EndIf1023
; Current$ = "-"
  MOV    rdx,_S38
  LEA    rcx,[rsp+64]
  CALL   SYS_FastAllocateStringFree4
; Else
  JMP   _EndIf1022
_EndIf1023:
; Current$ = Str(PeekL(*Value+4))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    r15,qword [rsp+PS298+40]
  ADD    r15,4
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  LEA    rcx,[rsp+72]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf   
_EndIf1022:
; EndIf
_EndIf1010:
; *items\item[index]\Value$ = Language("Debugger","Size") + ": " + Size$ + "   " + Language("Debugger","Current") + ": " + Current$
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S95
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S97
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S98
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+72]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+16]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; ElseIf IS_MAP(*items\item[index]\Kind)
  JMP   _EndIf1007
_EndIf1009:
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+8]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,byte [rbp]
  AND    r15,63
  CMP    r15,22
  JNE   _EndIf1025
; *items\item[index]\Value$ = Language("Debugger", "Size")+": "
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S95
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+16]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; If Is64bit
  CMP    qword [rsp+PS298+16],0
  JE    _EndIf1027
; If PeekQ(*Value) = -1
  PUSH   qword [rsp+PS298+8]
  POP    rcx
  CALL   PB_PeekQ
  MOV    r15,rax
  CMP    r15,-1
  JNE   _EndIf1029
; *items\item[index]\Value$ + "-"
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+8]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S38
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+16]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf1028
_EndIf1029:
; *items\item[index]\Value$ +  Str(PeekQ(*Value))
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+8]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+16]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf1028:
; *Value + 8        
  MOV    r15,qword [rsp+PS298+8]
  ADD    r15,8
  MOV    qword [rsp+PS298+8],r15
; Else
  JMP   _EndIf1026
_EndIf1027:
; If PeekL(*Value) = -1
  PUSH   qword [rsp+PS298+8]
  POP    rcx
  CALL   PB_PeekL
  MOV    r15,rax
  CMP    r15,-1
  JNE   _EndIf1033
; *items\item[index]\Value$ +  "-"
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+8]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S38
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+16]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf1032
_EndIf1033:
; *items\item[index]\Value$ +  Str(PeekL(*Value))
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+8]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+16]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf1032:
; *Value + 4   
  MOV    r15,qword [rsp+PS298+8]
  ADD    r15,4
  MOV    qword [rsp+PS298+8],r15
; EndIf        
_EndIf1026:
; *items\item[index]\Value$ + "   " + Language("Debugger","Current")+": "      
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+8]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S97
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S98
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+16]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; If PeekB(*Value) 
  PUSH   qword [rsp+PS298+8]
  POP    rcx
  CALL   PB_PeekB
  AND    rax,rax
  JE    _EndIf1036
; *items\item[index]\Value$ + Chr(34)+PeekS(*Value+1)+Chr(34) 
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+8]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S99
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+PS298+32]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S99
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+16]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf1035
_EndIf1036:
; *items\item[index]\Value$ + "-"
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+8]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S38
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+16]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf                     
_EndIf1035:
; 
; ElseIf IS_POINTER(Type)
  JMP   _EndIf1007
_EndIf1025:
  MOV    r15,qword [rsp+48]
  AND    r15,128
  AND    r15,r15
  JE    _EndIf1038
; If Is64bit And VariableIsHex
  CMP    qword [rsp+PS298+16],0
  JE     No165
  CMP    qword [v_VariableIsHex],0
  JE     No165
Ok165:
  MOV    rax,1
  JMP    End165
No165:
  XOR    rax,rax
End165:
  AND    rax,rax
  JE    _EndIf1040
; *items\item[index]\Value$ = Hex(PeekQ(*Value), #PB_Quad)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 13
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,40
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+16]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; ElseIf Is64bit
  JMP   _EndIf1039
_EndIf1040:
  CMP    qword [rsp+PS298+16],0
  JE    _EndIf1041
; *items\item[index]\Value$ = Str(PeekQ(*Value))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+16]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; ElseIf VariableIsHex        
  JMP   _EndIf1039
_EndIf1041:
  CMP    qword [v_VariableIsHex],0
  JE    _EndIf1042
; *items\item[index]\Value$ = Hex(PeekL(*Value), #PB_Long)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 5
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,40
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+16]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf1039
_EndIf1042:
; *items\item[index]\Value$ = Str(PeekL(*Value))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+16]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf1039:
; 
; Else         
  JMP   _EndIf1007
_EndIf1038:
; Select Type & #TYPEMASK   
  MOV    r15,qword [rsp+48]
  AND    r15,63
  MOV    rax,r15
  PUSH   rax
; Case #TYPE_BYTE       
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case66
; If VariableIsHex
  CMP    qword [v_VariableIsHex],0
  JE    _EndIf1046
; *items\item[index]\Value$ = Hex(PeekB(*Value), #PB_Byte)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf1045
_EndIf1046:
; *items\item[index]\Value$ = Str(PeekB(*Value))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf 
_EndIf1045:
; 
; Case #TYPE_ASCII       
  JMP   _EndSelect9
_Case66:
  MOV    r15,24
  CMP    r15,[rsp]
  JNE   _Case67
; If VariableIsHex
  CMP    qword [v_VariableIsHex],0
  JE    _EndIf1049
; *items\item[index]\Value$ = Hex(PeekB(*Value) & $FF)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,255
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Hex
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf1048
_EndIf1049:
; *items\item[index]\Value$ = Str(PeekB(*Value) & $FF)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,255
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf 
_EndIf1048:
; 
; Case #TYPE_UNICODE
  JMP   _EndSelect9
_Case67:
  MOV    r15,25
  CMP    r15,[rsp]
  JNE   _Case68
; If VariableIsHex
  CMP    qword [v_VariableIsHex],0
  JE    _EndIf1052
; *items\item[index]\Value$ = Hex(PeekW(*Value) & $FFFF)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekW
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,65535
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Hex
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf1051
_EndIf1052:
; *items\item[index]\Value$ = Str(PeekW(*Value) & $FFFF)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekW
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,65535
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf  
_EndIf1051:
; 
; Case #TYPE_WORD
  JMP   _EndSelect9
_Case68:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case69
; If VariableIsHex
  CMP    qword [v_VariableIsHex],0
  JE    _EndIf1055
; *items\item[index]\Value$ = Hex(PeekW(*Value), #PB_Word)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 3
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekW
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf1054
_EndIf1055:
; *items\item[index]\Value$ = Str(PeekW(*Value))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekW
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf   
_EndIf1054:
; 
; Case #TYPE_LONG, #TYPE_CHARACTER 
  JMP   _EndSelect9
_Case69:
  MOV    r15,5
  CMP    r15,[rsp]
  JE    _Case70
  MOV    r15,11
  CMP    r15,[rsp]
  JNE   _Case71
_Case70:
; If VariableIsHex
  CMP    qword [v_VariableIsHex],0
  JE    _EndIf1058
; *items\item[index]\Value$ = Hex(PeekL(*Value), #PB_Long)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 5
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf1057
_EndIf1058:
; *items\item[index]\Value$ = Str(PeekL(*Value))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf 
_EndIf1057:
; 
; Case #TYPE_STRING, #TYPE_FIXEDSTRING
  JMP   _EndSelect9
_Case71:
  MOV    r15,8
  CMP    r15,[rsp]
  JE    _Case72
  MOV    r15,10
  CMP    r15,[rsp]
  JNE   _Case73
_Case72:
; *items\item[index]\Value$ = Chr(34) + PeekS(*Value) + Chr(34)
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S99
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS298+48]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S99
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Case #TYPE_FLOAT
  JMP   _EndSelect9
_Case73:
  MOV    r15,9
  CMP    r15,[rsp]
  JNE   _Case74
; *items\item[index]\Value$ = StrF_Debug(PeekF(*Value))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekF
  ADD    rsp,32
  MOVSS  [rsp-8],xmm0
  FLD    dword [rsp-8]
  SUB    rsp,8
  FSTP   dword [rsp]
  MOVSS  xmm0,dword [rsp]
  ADD    rsp,8
  SUB    rsp,32
  CALL  _Procedure254
  ADD    rsp,48
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Case #TYPE_DOUBLE        
  JMP   _EndSelect9
_Case74:
  MOV    r15,12
  CMP    r15,[rsp]
  JNE   _Case75
; *items\item[index]\Value$ = StrD_Debug(PeekD(*Value))      
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 25
  SUB    rsp,8
  PUSH   qword [rsp+PS298+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekD
  ADD    rsp,40
  MOVSD  [rsp-8],xmm0
  FLD    qword [rsp-8]
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure256
  ADD    rsp,48
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Case #TYPE_QUAD
  JMP   _EndSelect9
_Case75:
  MOV    r15,13
  CMP    r15,[rsp]
  JNE   _Case76
; If VariableIsHex
  CMP    qword [v_VariableIsHex],0
  JE    _EndIf1061
; *items\item[index]\Value$ = Hex(PeekQ(*Value), #PB_Quad)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 13
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf1060
_EndIf1061:
; *items\item[index]\Value$ = Str(PeekQ(*Value))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf   
_EndIf1060:
; 
; Case #TYPE_INTEGER
  JMP   _EndSelect9
_Case76:
  MOV    r15,21
  CMP    r15,[rsp]
  JNE   _Case77
; If Is64bit And VariableIsHex
  CMP    qword [rsp+PS298+24],0
  JE     No166
  CMP    qword [v_VariableIsHex],0
  JE     No166
Ok166:
  MOV    rax,1
  JMP    End166
No166:
  XOR    rax,rax
End166:
  AND    rax,rax
  JE    _EndIf1064
; *items\item[index]\Value$ = Hex(PeekQ(*Value), #PB_Quad)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 13
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; ElseIf Is64bit
  JMP   _EndIf1063
_EndIf1064:
  CMP    qword [rsp+PS298+24],0
  JE    _EndIf1065
; *items\item[index]\Value$ = Str(PeekQ(*Value))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; ElseIf VariableIsHex        
  JMP   _EndIf1063
_EndIf1065:
  CMP    qword [v_VariableIsHex],0
  JE    _EndIf1066
; *items\item[index]\Value$ = Hex(PeekL(*Value), #PB_Long)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 5
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf1063
_EndIf1066:
; *items\item[index]\Value$ = Str(PeekL(*Value))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS298+40]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+PS298+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf1063:
; 
; EndSelect               
_Case77:
_EndSelect9:
  POP    rax
; EndIf    
_EndIf1007:
; 
; 
; 
; If AutoSync
  CMP    qword [rsp+PS298+24],0
  JE    _EndIf1069
; VariableGadget_SyncItem(index)
  PUSH   qword [rsp+PS298+0]
  POP    rcx
  CALL  _Procedure296
; EndIf
_EndIf1069:
; 
; EndIf
_EndIf1006:
; 
; EndProcedure
_EndProcedureZero299:
  XOR    rax,rax
_EndProcedure299:
  PUSH   rax
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+72]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure Plugin_Xml_SetObjectSize(*Object.Plugin_Xml, Width, Height)
_Procedure642:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS642=64
  SUB    rsp,40
; ResizeGadget(*Object\Splitter, 5, 5, Width-10, Height-10)  
  SUB    rsp,8
  MOV    r15,qword [rsp+PS642+24]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+PS642+24]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 5
  PUSH   qword 5
  MOV    rbp,qword [rsp+PS642+40]
  MOVSXD rax,dword [rbp+12]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; Width  = GetGadgetAttribute(*Object\Panel, #PB_Panel_ItemWidth)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS642+8]
  MOVSXD rax,dword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  MOV    qword [rsp+PS642+8],rax
; Height = GetGadgetAttribute(*Object\Panel, #PB_Panel_ItemHeight)  
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS642+8]
  MOVSXD rax,dword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  MOV    qword [rsp+PS642+16],rax
; 
; ResizeGadget(*Object\Info, 0, 0, Width, Height)
  SUB    rsp,8
  PUSH   qword [rsp+PS642+24]
  PUSH   qword [rsp+PS642+24]
  PUSH   qword 0
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS642+40]
  MOVSXD rax,dword [rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Object\Attributes, 0, 0, Width, Height)
  SUB    rsp,8
  PUSH   qword [rsp+PS642+24]
  PUSH   qword [rsp+PS642+24]
  PUSH   qword 0
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS642+40]
  MOVSXD rax,dword [rbp+20]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Object\Text, 0, 0, Width, Height)
  SUB    rsp,8
  PUSH   qword [rsp+PS642+24]
  PUSH   qword [rsp+PS642+24]
  PUSH   qword 0
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS642+40]
  MOVSXD rax,dword [rbp+24]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; CompilerIf #CompileWindows
; SendMessage_(GadgetID(*Object\Attributes), #LVM_SETCOLUMNWIDTH, 1, #LVSCW_AUTOSIZE_USEHEADER)
  PUSH   qword -2
  PUSH   qword 1
  PUSH   qword 4126
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS642+32]
  MOVSXD rax,dword [rbp+20]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; CompilerEndIf
; EndProcedure
_EndProcedureZero643:
  XOR    rax,rax
_EndProcedure643:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure Network_SetupEncryption(*This.Network_Communication, Password$)
_Procedure368:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PS368=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS368+8]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; *Key = AllocateMemory(16)
  PUSH   qword 16
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+48],rax
; If *Key
  CMP    qword [rsp+48],0
  JE    _EndIf1159
; 
; Debug "[Network] Setup password: "+Chr(34)+Password$+Chr(34)
; 
; 
; 
; MD5Init(@*This\HashContext)
  MOV    rbp,qword [rsp+PS368+0]
  LEA    rax,[rbp+636]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   MD5Init
; MD5Update(@*This\HashContext, ?CipherInitializer, 16)
  PUSH   qword 16
  MOV    rbp,ll_network_setupencryption_cipherinitializer
  MOV    rax,rbp
  PUSH   rax
  MOV    rbp,qword [rsp+PS368+16]
  LEA    rax,[rbp+636]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   MD5Update
; MD5Update(@*This\HashContext, ToAscii(Password$), StringByteLength(Password$, #PB_Ascii))
  PUSH   qword 24
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_StringByteLength2
  MOV    rax,rax
  PUSH   rax
  SUB    rsp,8
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure96
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS368+16]
  LEA    rax,[rbp+636]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   MD5Update
; MD5Final(*Key, @*This\HashContext)
  MOV    rbp,qword [rsp+PS368+0]
  LEA    rax,[rbp+636]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL   MD5Final
; 
; CompilerIf #PB_Compiler_Debugger
; 
; rijndael_set_key(@*This\CryptContext, *Key, 128)
  PUSH   qword 128
  PUSH   qword [rsp+56]
  MOV    rbp,qword [rsp+PS368+16]
  LEA    rax,[rbp+148]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   rijndael_set_key
  MOVSXD rax,eax
; 
; 
; CopyMemory(?CipherInitializer, @*This\InitializerEncrypt, 16)
  PUSH   qword 16
  MOV    rbp,qword [rsp+PS368+8]
  LEA    rax,[rbp+724]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,ll_network_setupencryption_cipherinitializer
  MOV    rax,rbp
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CopyMemory
; CopyMemory(?CipherInitializer, @*This\InitializerDecrypt, 16)
  PUSH   qword 16
  MOV    rbp,qword [rsp+PS368+8]
  LEA    rax,[rbp+740]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,ll_network_setupencryption_cipherinitializer
  MOV    rax,rbp
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CopyMemory
; 
; FreeMemory(*Key)
  PUSH   qword [rsp+48]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf1159:
; EndProcedure
_EndProcedureZero369:
  XOR    rax,rax
_EndProcedure369:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,64
  POP    rbp
  RET
; Procedure IsDebuggerValid(*Debugger)
_Procedure424:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS424=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Found = 0
  MOV    qword [rsp+40],0
; Index = ListIndex(RunningDebuggers())
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  CALL   PB_ListIndex
  MOV    qword [rsp+48],rax
; 
; ForEach RunningDebuggers()
  MOV    rcx,qword [t_RunningDebuggers]
  CALL   PB_ResetList
_ForEach1397:
  MOV    rcx,qword [t_RunningDebuggers]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next1397
; If @RunningDebuggers() = *Debugger
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    r15,rax
  CMP    r15,qword [rsp+PS424+0]
  JNE   _EndIf1399
; Found = 1
  MOV    qword [rsp+40],1
; Break
  JMP   _Next1397
; EndIf
_EndIf1399:
; Next RunningDebuggers()
  JMP   _ForEach1397
_Next1397:
; 
; If Index = -1
  MOV    r15,qword [rsp+48]
  CMP    r15,-1
  JNE   _EndIf1401
; ResetList(RunningDebuggers())
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  CALL   PB_ResetList
; Else
  JMP   _EndIf1400
_EndIf1401:
; SelectElement(RunningDebuggers(), Index)
  PUSH   qword [rsp+48]
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  POP    rdx
  CALL   PB_SelectElement
; EndIf
_EndIf1400:
; 
; ProcedureReturn Found
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure425
; EndProcedure
_EndProcedureZero425:
  XOR    rax,rax
_EndProcedure425:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure ProfilerWindowEvents(*Debugger.DebuggerData, EventID)
_Procedure602:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS602=256
  MOV    rax,24
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; Static DragItem
; 
; If EventID = #PB_Event_GadgetDrop 
  MOV    r15,qword [rsp+PS602+8]
  CMP    r15,13106
  JNE   _EndIf3100
; If *Debugger\ProfilerFiles
  MOV    rbp,qword [rsp+PS602+0]
  CMP    qword [rbp+696],0
  JE    _EndIf3102
; *files.Debugger_ProfilerList = *Debugger\ProfilerFiles    
  MOV    rbp,qword [rsp+PS602+0]
  PUSH   qword [rbp+696]
  POP    rax
  MOV    qword [rsp+40],rax
; 
; Target = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files])
  MOV    rbp,qword [rsp+PS602+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    qword [rsp+48],rax
; If Target = -1
  MOV    r15,qword [rsp+48]
  CMP    r15,-1
  JNE   _EndIf3104
; Target = CountGadgetItems(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files])
  MOV    rbp,qword [rsp+PS602+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  CALL   PB_CountGadgetItems
  MOV    qword [rsp+48],rax
; EndIf
_EndIf3104:
; 
; index = GetGadgetItemData(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], DragItem)
  PUSH   qword [so_ProfilerWindowEvents.v_DragItem]
  MOV    rbp,qword [rsp+PS602+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemData
  MOV    qword [rsp+56],rax
; Text$ = GetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], DragItem, 0) + Chr(10) + GetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], DragItem, 1) + Chr(10) + GetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], DragItem, 2)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  PUSH   qword [so_ProfilerWindowEvents.v_DragItem]
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_GetGadgetItemText2
  ADD    rsp,40
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [so_ProfilerWindowEvents.v_DragItem]
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_GetGadgetItemText2
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword [so_ProfilerWindowEvents.v_DragItem]
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_GetGadgetItemText2
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+72]
  POP    rdx
  CALL   SYS_AllocateString4
; state = GetGadgetItemState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], DragItem)
  PUSH   qword [so_ProfilerWindowEvents.v_DragItem]
  MOV    rbp,qword [rsp+PS602+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemState
  MOV    qword [rsp+72],rax
; RemoveGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], DragItem)
  PUSH   qword [so_ProfilerWindowEvents.v_DragItem]
  MOV    rbp,qword [rsp+PS602+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  CALL   PB_RemoveGadgetItem
; 
; If DragItem < Target
  MOV    r15,qword [so_ProfilerWindowEvents.v_DragItem]
  CMP    r15,qword [rsp+48]
  JGE   _EndIf3106
; Target - 1
  MOV    r15,qword [rsp+48]
  DEC    r15
  MOV    qword [rsp+48],r15
; EndIf
_EndIf3106:
; 
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], Target, Text$, ImageID(*files\file[index]\ColorImage))
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+64]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+12]
  POP    rcx
  CALL   PB_ImageID
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+64]
  MOV    rbp,qword [rsp+PS602+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_AddGadgetItem2
; SetGadgetItemData(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], Target, index) 
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+56]
  MOV    rbp,qword [rsp+PS602+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetItemData
; If state & #PB_ListIcon_Checked
  MOV    r15,qword [rsp+72]
  AND    r15,2
  AND    r15,r15
  JE    _EndIf3108
; SetGadgetItemState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], Target, #PB_ListIcon_Checked)
  PUSH   qword 2
  PUSH   qword [rsp+56]
  MOV    rbp,qword [rsp+PS602+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetItemState
; EndIf         
_EndIf3108:
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], Target)    
  PUSH   qword [rsp+48]
  MOV    rbp,qword [rsp+PS602+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; 
; Profiler_DrawAll(*Debugger)    
  PUSH   qword [rsp+PS602+0]
  POP    rcx
  CALL  _Procedure576
; 
; EndIf
_EndIf3102:
; 
; ElseIf EventID = #PB_Event_Menu
  JMP   _EndIf3099
_EndIf3100:
  MOV    r15,qword [rsp+PS602+8]
  CMP    r15,13101
  JNE   _EndIf3109
; Select EventMenu()
  CALL   PB_EventMenu
  MOV    rax,rax
  PUSH   rax
; 
; Case #DEBUGGER_MENU_Zoomin  
  MOV    r15,7
  CMP    r15,[rsp]
  JNE   _Case251
; *Debugger\ProfilerRatioX * 1.15
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [rbp+724]
  FMUL   qword [D9]
  MOV    rbp,qword [rsp+PS602+8]
  FSTP   qword [rbp+724]
; *Debugger\ProfilerRatioY * 1.15        
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [rbp+732]
  FMUL   qword [D9]
  MOV    rbp,qword [rsp+PS602+8]
  FSTP   qword [rbp+732]
; If *Debugger\ProfilerRatioX > 30.0: *Debugger\ProfilerRatioX = 30.0: EndIf
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [rbp+724]
  FCOMP  qword [D7]
  FNSTSW ax
  TEST   ah,41h
  JNE   _EndIf3111
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [D7]
  FSTP   qword [rbp+724]
_EndIf3111:
; If *Debugger\ProfilerRatioY > 30.0: *Debugger\ProfilerRatioY = 30.0: EndIf                  
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [rbp+732]
  FCOMP  qword [D7]
  FNSTSW ax
  TEST   ah,41h
  JNE   _EndIf3113
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [D7]
  FSTP   qword [rbp+732]
_EndIf3113:
; Profiler_UpdatePageLength(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS602+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure578
  ADD    rsp,40
; Profiler_DrawAll(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS602+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure576
  ADD    rsp,40
; 
; Case #DEBUGGER_MENU_Zoomout
  JMP   _EndSelect38
_Case251:
  MOV    r15,8
  CMP    r15,[rsp]
  JNE   _Case252
; *Debugger\ProfilerRatioX * 0.85
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [rbp+724]
  FMUL   qword [D10]
  MOV    rbp,qword [rsp+PS602+8]
  FSTP   qword [rbp+724]
; *Debugger\ProfilerRatioY * 0.85        
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [rbp+732]
  FMUL   qword [D10]
  MOV    rbp,qword [rsp+PS602+8]
  FSTP   qword [rbp+732]
; If *Debugger\ProfilerRatioX < 1e-5: *Debugger\ProfilerRatioX = 1e-5: EndIf
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [rbp+724]
  FCOMP  qword [D11]
  FNSTSW ax
  TEST   ah,1h
  JE    _EndIf3115
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [D11]
  FSTP   qword [rbp+724]
_EndIf3115:
; If *Debugger\ProfilerRatioY < 1e-2: *Debugger\ProfilerRatioY = 1e-2: EndIf                  
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [rbp+732]
  FCOMP  qword [D12]
  FNSTSW ax
  TEST   ah,1h
  JE    _EndIf3117
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [D12]
  FSTP   qword [rbp+732]
_EndIf3117:
; Profiler_UpdatePageLength(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS602+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure578
  ADD    rsp,40
; Profiler_DrawAll(*Debugger)      
  SUB    rsp,8
  PUSH   qword [rsp+PS602+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure576
  ADD    rsp,40
; 
; Case #DEBUGGER_MENU_File0 To #DEBUGGER_MENU_File255   
  JMP   _EndSelect38
_Case252:
  MOV    r15,9
  CMP    r15,[rsp]
  JG    _Case254        
  MOV    r15,264
  CMP    r15,[rsp]
  JL    _Case254
_Case253:
; Line = ((EventMenu() - #DEBUGGER_MENU_File0) << 24) | Profiler_CurrentLine
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_EventMenu
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,-9
  SAL    r15,24
  OR     r15,qword [v_Profiler_CurrentLine]
  MOV    qword [rsp+88],r15
; Debugger_ShowLine(*Debugger, Line)
  SUB    rsp,8
  PUSH   qword [rsp+96]
  PUSH   qword [rsp+PS602+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure2
  ADD    rsp,40
; 
; EndSelect
_Case254:
_EndSelect38:
  POP    rax
; 
; 
; ElseIf EventID = #PB_Event_Gadget
  JMP   _EndIf3099
_EndIf3109:
  MOV    r15,qword [rsp+PS602+8]
  CMP    r15,13100
  JNE   _EndIf3118
; Select EventGadget()
  CALL   PB_EventGadget
  MOV    rax,rax
  PUSH   rax
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Start]
  MOV    rbp,qword [rsp+PS602+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2896]
  CMP    r15,[rsp]
  JNE   _Case255
; Command.CommandInfo\Command = #COMMAND_StartProfiler
  LEA    rbp,[rsp+96]
  MOV    dword [rbp],28
; SendDebuggerCommand(*Debugger, @Command)
  SUB    rsp,8
  LEA    rax,[rsp+104]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS602+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; *Debugger\ProfilerRunning = 1
  MOV    rbp,qword [rsp+PS602+8]
  MOV    dword [rbp+692],1
; UpdateProfilerWindowState(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS602+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure600
  ADD    rsp,40
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Stop]
  JMP   _EndSelect39
_Case255:
  MOV    rbp,qword [rsp+PS602+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2904]
  CMP    r15,[rsp]
  JNE   _Case256
; Command.CommandInfo\Command = #COMMAND_StopProfiler
  LEA    rbp,[rsp+96]
  MOV    dword [rbp],29
; SendDebuggerCommand(*Debugger, @Command)   
  SUB    rsp,8
  LEA    rax,[rsp+104]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS602+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; Command.CommandInfo\Command = #COMMAND_GetProfilerData 
  LEA    rbp,[rsp+96]
  MOV    dword [rbp],32
; SendDebuggerCommand(*Debugger, @Command)
  SUB    rsp,8
  LEA    rax,[rsp+104]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS602+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; *Debugger\ProfilerRunning = 0
  MOV    rbp,qword [rsp+PS602+8]
  MOV    dword [rbp+692],0
; UpdateProfilerWindowState(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS602+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure600
  ADD    rsp,40
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Reset]
  JMP   _EndSelect39
_Case256:
  MOV    rbp,qword [rsp+PS602+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2912]
  CMP    r15,[rsp]
  JNE   _Case257
; Command.CommandInfo\Command = #COMMAND_ResetProfiler
  LEA    rbp,[rsp+96]
  MOV    dword [rbp],30
; SendDebuggerCommand(*Debugger, @Command)
  SUB    rsp,8
  LEA    rax,[rsp+104]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS602+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; Command.CommandInfo\Command = #COMMAND_GetProfilerData 
  LEA    rbp,[rsp+96]
  MOV    dword [rbp],32
; SendDebuggerCommand(*Debugger, @Command)
  SUB    rsp,8
  LEA    rax,[rsp+104]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS602+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Update]  
  JMP   _EndSelect39
_Case257:
  MOV    rbp,qword [rsp+PS602+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2920]
  CMP    r15,[rsp]
  JNE   _Case258
; Command.CommandInfo\Command = #COMMAND_GetProfilerData
  LEA    rbp,[rsp+96]
  MOV    dword [rbp],32
; SendDebuggerCommand(*Debugger, @Command)
  SUB    rsp,8
  LEA    rax,[rsp+104]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS602+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Splitter]
  JMP   _EndSelect39
_Case258:
  MOV    rbp,qword [rsp+PS602+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2936]
  CMP    r15,[rsp]
  JNE   _Case259
; Width  = GadgetWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Container])-#ContainerBorder
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS602+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2928]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetWidth
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,-4
  MOV    qword [rsp+120],r15
; Height = GadgetHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Container])-#ContainerBorder
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS602+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2928]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetHeight
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,-4
  MOV    qword [rsp+128],r15
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Image], 0, 0, Width-15, Height-15)
  MOV    r15,qword [rsp+128]
  ADD    r15,-15
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+128]
  ADD    r15,-15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2952]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,40
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], 0, Height-15, Width-15, 15)
  PUSH   qword 15
  MOV    r15,qword [rsp+128]
  ADD    r15,-15
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+144]
  ADD    r15,-15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,40
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], Width-15, 0, 15, Height-15)        
  MOV    r15,qword [rsp+128]
  ADD    r15,-15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 15
  PUSH   qword 0
  MOV    r15,qword [rsp+144]
  ADD    r15,-15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,40
; Profiler_UpdatePageLength(*Debugger) 
  SUB    rsp,8
  PUSH   qword [rsp+PS602+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure578
  ADD    rsp,40
; Profiler_DrawAll(*Debugger) 
  SUB    rsp,8
  PUSH   qword [rsp+PS602+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure576
  ADD    rsp,40
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files]
  JMP   _EndSelect39
_Case259:
  MOV    rbp,qword [rsp+PS602+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2944]
  CMP    r15,[rsp]
  JNE   _Case260
; If EventType() = #PB_EventType_RightClick
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_EventType
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,1
  JNE   _EndIf3120
; index = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS602+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    qword [rsp+64],rax
; If index <> -1 And *Debugger\ProfilerFiles
  MOV    r15,qword [rsp+64]
  CMP    r15,-1
  JE     No326
  MOV    rbp,qword [rsp+PS602+8]
  CMP    qword [rbp+696],0
  JE     No326
Ok326:
  MOV    rax,1
  JMP    End326
No326:
  XOR    rax,rax
End326:
  AND    rax,rax
  JE    _EndIf3122
; file = GetGadgetItemData(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], index) 
  SUB    rsp,8
  PUSH   qword [rsp+72]
  MOV    rbp,qword [rsp+PS602+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetItemData
  ADD    rsp,40
  MOV    qword [rsp+136],rax
; *files.Debugger_ProfilerList = *Debugger\ProfilerFiles                   
  MOV    rbp,qword [rsp+PS602+8]
  PUSH   qword [rbp+696]
  POP    rax
  MOV    qword [rsp+48],rax
; newColor = ColorRequester(*files\file[file]\Color)
  SUB    rsp,8
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+152]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_ColorRequester2
  ADD    rsp,40
  MOV    qword [rsp+144],rax
; 
; If newColor <> -1
  MOV    r15,qword [rsp+144]
  CMP    r15,-1
  JE    _EndIf3124
; *files\file[file]\Color = newColor            
  PUSH   qword [rsp+144]
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+152]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    dword [rbp+8],eax
; 
; newImage = CreateImage(#PB_Any, #DEFAULT_ListIconImageSize, #DEFAULT_ListIconImageSize)
  SUB    rsp,8
  PUSH   qword 16
  PUSH   qword 16
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_CreateImage
  ADD    rsp,40
  MOV    qword [rsp+152],rax
; If newImage And StartDrawing(ImageOutput(newImage))
  CMP    qword [rsp+152],0
  JE     No327
  SUB    rsp,8
  PUSH   qword [rsp+160]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageOutput
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_StartDrawing
  ADD    rsp,40
  AND    rax,rax
  JE     No327
Ok327:
  MOV    rax,1
  JMP    End327
No327:
  XOR    rax,rax
End327:
  AND    rax,rax
  JE    _EndIf3126
; Box(0, 0, #DEFAULT_ListIconImageSize, #DEFAULT_ListIconImageSize, $FFFFFF)
  PUSH   qword 16777215
  PUSH   qword 16
  PUSH   qword 16
  PUSH   qword 0
  PUSH   qword 0
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Box2
  ADD    rsp,40
; Box(#DEFAULT_ListIconImageOffset, #DEFAULT_ListIconImageOffset, 12, 12, $000000)
  PUSH   qword 0
  PUSH   qword 12
  PUSH   qword 12
  PUSH   qword 2
  PUSH   qword 2
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Box2
  ADD    rsp,40
; Box(#DEFAULT_ListIconImageOffset+1, #DEFAULT_ListIconImageOffset+1, 10, 10, newColor)              
  PUSH   qword [rsp+144]
  PUSH   qword 10
  PUSH   qword 10
  PUSH   qword 3
  PUSH   qword 3
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Box2
  ADD    rsp,40
; StopDrawing()
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_StopDrawing
  ADD    rsp,40
; 
; If *files\file[file]\ColorImage
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+144]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  CMP    qword [rbp+12],0
  JE    _EndIf3128
; FreeImage(*files\file[file]\ColorImage)
  SUB    rsp,8
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+152]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+12]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FreeImage
  ADD    rsp,40
; EndIf
_EndIf3128:
; *files\file[file]\ColorImage = newImage
  PUSH   qword [rsp+152]
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+152]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    qword [rbp+12],rax
; 
; Text$ = GetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], index, 0) + Chr(10) + GetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], index, 1) + Chr(10) + GetGadgetItemText(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], index, 2)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  PUSH   qword [rsp+88]
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_GetGadgetItemText2
  ADD    rsp,32
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+104]
  MOV    rbp,qword [rsp+PS602+56]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_GetGadgetItemText2
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S88
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword [rsp+104]
  MOV    rbp,qword [rsp+PS602+56]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_GetGadgetItemText2
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+80]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; state = GetGadgetItemState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], index)
  SUB    rsp,8
  PUSH   qword [rsp+72]
  MOV    rbp,qword [rsp+PS602+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetItemState
  ADD    rsp,40
  MOV    qword [rsp+80],rax
; RemoveGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], index)
  SUB    rsp,8
  PUSH   qword [rsp+72]
  MOV    rbp,qword [rsp+PS602+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_RemoveGadgetItem
  ADD    rsp,40
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], index, Text$, ImageID(newImage))
  SUB    rsp,8
  PUSH   qword [rsp+160]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+88]
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem2
  ADD    rsp,40
; SetGadgetItemData(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], index, file) 
  SUB    rsp,8
  PUSH   qword [rsp+144]
  PUSH   qword [rsp+80]
  MOV    rbp,qword [rsp+PS602+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetItemData
  ADD    rsp,40
; If state & #PB_ListIcon_Checked
  MOV    r15,qword [rsp+80]
  AND    r15,2
  AND    r15,r15
  JE    _EndIf3130
; SetGadgetItemState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], index, #PB_ListIcon_Checked)
  SUB    rsp,8
  PUSH   qword 2
  PUSH   qword [rsp+80]
  MOV    rbp,qword [rsp+PS602+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_SetGadgetItemState
  ADD    rsp,40
; EndIf
_EndIf3130:
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], index)
  SUB    rsp,8
  PUSH   qword [rsp+72]
  MOV    rbp,qword [rsp+PS602+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; EndIf 
_EndIf3126:
; 
; Profiler_DrawAll(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS602+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure576
  ADD    rsp,40
; 
; EndIf            
_EndIf3124:
; EndIf
_EndIf3122:
; 
; ElseIf EventType() = #PB_EventType_DragStart
  JMP   _EndIf3119
_EndIf3120:
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_EventType
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,14002
  JNE   _EndIf3131
; DragItem = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS602+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    qword [so_ProfilerWindowEvents.v_DragItem],rax
; If DragItem <> -1
  MOV    r15,qword [so_ProfilerWindowEvents.v_DragItem]
  CMP    r15,-1
  JE    _EndIf3133
; DragPrivate(#DRAG_Profiler, #PB_Drag_Move)
  SUB    rsp,8
  PUSH   qword 2
  PUSH   qword 0
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DragPrivate2
  ADD    rsp,40
; EndIf
_EndIf3133:
; 
; Else
  JMP   _EndIf3119
_EndIf3131:
; Profiler_UpdateBounds(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS602+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure596
  ADD    rsp,40
; Profiler_DrawAll(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS602+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure576
  ADD    rsp,40
; EndIf        
_EndIf3119:
; 
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Select]
  JMP   _EndSelect39
_Case260:
  MOV    rbp,qword [rsp+PS602+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+3008]
  CMP    r15,[rsp]
  JNE   _Case261
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Select], 1)
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS602+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3008]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Drag], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS602+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3000]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Drag]
  JMP   _EndSelect39
_Case261:
  MOV    rbp,qword [rsp+PS602+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+3000]
  CMP    r15,[rsp]
  JNE   _Case262
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Select], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS602+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3008]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Drag], 1)      
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS602+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3000]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Zoomin]
  JMP   _EndSelect39
_Case262:
  MOV    rbp,qword [rsp+PS602+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2976]
  CMP    r15,[rsp]
  JNE   _Case263
; *Debugger\ProfilerRatioX * 1.15
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [rbp+724]
  FMUL   qword [D9]
  MOV    rbp,qword [rsp+PS602+8]
  FSTP   qword [rbp+724]
; *Debugger\ProfilerRatioY * 1.15        
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [rbp+732]
  FMUL   qword [D9]
  MOV    rbp,qword [rsp+PS602+8]
  FSTP   qword [rbp+732]
; If *Debugger\ProfilerRatioX > 30.0: *Debugger\ProfilerRatioX = 30.0: EndIf
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [rbp+724]
  FCOMP  qword [D7]
  FNSTSW ax
  TEST   ah,41h
  JNE   _EndIf3136
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [D7]
  FSTP   qword [rbp+724]
_EndIf3136:
; If *Debugger\ProfilerRatioY > 30.0: *Debugger\ProfilerRatioY = 30.0: EndIf                  
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [rbp+732]
  FCOMP  qword [D7]
  FNSTSW ax
  TEST   ah,41h
  JNE   _EndIf3138
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [D7]
  FSTP   qword [rbp+732]
_EndIf3138:
; Profiler_UpdatePageLength(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS602+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure578
  ADD    rsp,40
; Profiler_DrawAll(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS602+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure576
  ADD    rsp,40
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Zoomout]
  JMP   _EndSelect39
_Case263:
  MOV    rbp,qword [rsp+PS602+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2984]
  CMP    r15,[rsp]
  JNE   _Case264
; *Debugger\ProfilerRatioX * 0.85
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [rbp+724]
  FMUL   qword [D10]
  MOV    rbp,qword [rsp+PS602+8]
  FSTP   qword [rbp+724]
; *Debugger\ProfilerRatioY * 0.85        
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [rbp+732]
  FMUL   qword [D10]
  MOV    rbp,qword [rsp+PS602+8]
  FSTP   qword [rbp+732]
; If *Debugger\ProfilerRatioX < 1e-5: *Debugger\ProfilerRatioX = 1e-5: EndIf
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [rbp+724]
  FCOMP  qword [D11]
  FNSTSW ax
  TEST   ah,1h
  JE    _EndIf3140
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [D11]
  FSTP   qword [rbp+724]
_EndIf3140:
; If *Debugger\ProfilerRatioY < 1e-2: *Debugger\ProfilerRatioY = 1e-2: EndIf                  
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [rbp+732]
  FCOMP  qword [D12]
  FNSTSW ax
  TEST   ah,1h
  JE    _EndIf3142
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [D12]
  FSTP   qword [rbp+732]
_EndIf3142:
; Profiler_UpdatePageLength(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS602+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure578
  ADD    rsp,40
; Profiler_DrawAll(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS602+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure576
  ADD    rsp,40
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Zoomall]
  JMP   _EndSelect39
_Case264:
  MOV    rbp,qword [rsp+PS602+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2992]
  CMP    r15,[rsp]
  JNE   _Case265
; MaxCount = GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], #PB_ScrollBar_Maximum)
  SUB    rsp,8
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS602+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetAttribute
  ADD    rsp,40
  MOV    qword [rsp+160],rax
; MaxLine  = GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], #PB_ScrollBar_Maximum)
  SUB    rsp,8
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS602+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetAttribute
  ADD    rsp,40
  MOV    qword [rsp+168],rax
; Profiler_CalculateViewport(*Debugger, @Area.ProfilerDrawing)    
  SUB    rsp,8
  LEA    rax,[rsp+184]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS602+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure566
  ADD    rsp,40
; 
; *Debugger\ProfilerRatioX = (Area\w / MaxCount) * 0.995
  LEA    rbp,[rsp+176]
  FILD   dword [rbp+8]
  FILD   qword [rsp+160]
  FDIVP  st1,st0
  FMUL   qword [D8]
  MOV    rbp,qword [rsp+PS602+8]
  FSTP   qword [rbp+724]
; *Debugger\ProfilerRatioY = (Area\h / MaxLine)  * 0.995
  LEA    rbp,[rsp+176]
  FILD   dword [rbp+12]
  FILD   qword [rsp+168]
  FDIVP  st1,st0
  FMUL   qword [D8]
  MOV    rbp,qword [rsp+PS602+8]
  FSTP   qword [rbp+732]
; 
; If *Debugger\ProfilerRatioX > 30.0: *Debugger\ProfilerRatioX = 30.0: EndIf
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [rbp+724]
  FCOMP  qword [D7]
  FNSTSW ax
  TEST   ah,41h
  JNE   _EndIf3144
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [D7]
  FSTP   qword [rbp+724]
_EndIf3144:
; If *Debugger\ProfilerRatioY > 30.0: *Debugger\ProfilerRatioY = 30.0: EndIf 
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [rbp+732]
  FCOMP  qword [D7]
  FNSTSW ax
  TEST   ah,41h
  JNE   _EndIf3146
  MOV    rbp,qword [rsp+PS602+8]
  FLD    qword [D7]
  FSTP   qword [rbp+732]
_EndIf3146:
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS602+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS602+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; Profiler_UpdatePageLength(*Debugger)  
  SUB    rsp,8
  PUSH   qword [rsp+PS602+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure578
  ADD    rsp,40
; Profiler_DrawAll(*Debugger)      
  SUB    rsp,8
  PUSH   qword [rsp+PS602+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure576
  ADD    rsp,40
; 
; 
; CompilerIf #CompileWindows = 0
; 
; EndSelect
_Case265:
_EndSelect39:
  POP    rax
; 
; ElseIf EventID = #PB_Event_SizeWindow
  JMP   _EndIf3099
_EndIf3118:
  MOV    r15,qword [rsp+PS602+8]
  CMP    r15,13118
  JNE   _EndIf3147
; Width  = WindowWidth (*Debugger\Windows[#DEBUGGER_WINDOW_Profiler])
  MOV    rbp,qword [rsp+PS602+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+888]
  POP    rcx
  CALL   PB_WindowWidth
  MOV    qword [rsp+112],rax
; Height = WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_Profiler])   
  MOV    rbp,qword [rsp+PS602+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+888]
  POP    rcx
  CALL   PB_WindowHeight
  MOV    qword [rsp+120],rax
; 
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Start], @NewWidth, @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+216]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+216]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS602+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2896]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; ButtonWidth = Max(100, NewWidth)
  PUSH   qword [rsp+200]
  PUSH   qword 100
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+216],rax
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Stop], @NewWidth, @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+216]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+216]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS602+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2904]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; ButtonWidth = Max(ButtonWidth, NewWidth)
  PUSH   qword [rsp+200]
  PUSH   qword [rsp+224]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+216],rax
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Reset], @NewWidth, @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+216]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+216]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS602+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2912]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; ButtonWidth = Max(ButtonWidth, NewWidth)
  PUSH   qword [rsp+200]
  PUSH   qword [rsp+224]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+216],rax
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Update], @NewWidth, @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+216]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+216]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS602+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2920]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; ButtonWidth = Max(ButtonWidth, NewWidth)
  PUSH   qword [rsp+200]
  PUSH   qword [rsp+224]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+216],rax
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Start],  10, 10,                ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+216]
  PUSH   qword [rsp+232]
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2896]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Stop],   10, 15+ButtonHeight,   ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+216]
  PUSH   qword [rsp+232]
  MOV    r15,qword [rsp+232]
  ADD    r15,15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2904]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Reset],  10, 20+ButtonHeight*2, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+216]
  PUSH   qword [rsp+232]
  MOV    r15,qword [rsp+232]
  ADD    r15,r15
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2912]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Update], 10, 35+ButtonHeight*3, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+216]
  PUSH   qword [rsp+232]
  MOV    r15,qword [rsp+232]
  IMUL   r15,3
  ADD    r15,35
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2920]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Drag],    ButtonWidth-90, 50+ButtonHeight*4, 30, 30)    
  SUB    rsp,8
  PUSH   qword 30
  PUSH   qword 30
  MOV    r15,qword [rsp+232]
  SAL    r15,2
  ADD    r15,50
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+248]
  ADD    r15,-90
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3000]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Select],  ButtonWidth-55, 50+ButtonHeight*4, 30, 30)    
  SUB    rsp,8
  PUSH   qword 30
  PUSH   qword 30
  MOV    r15,qword [rsp+232]
  SAL    r15,2
  ADD    r15,50
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+248]
  ADD    r15,-55
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3008]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Cross],   ButtonWidth-20, 50+ButtonHeight*4, 30, 30)    
  SUB    rsp,8
  PUSH   qword 30
  PUSH   qword 30
  MOV    r15,qword [rsp+232]
  SAL    r15,2
  ADD    r15,50
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+248]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3016]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Zoomin],  ButtonWidth-90, 85+ButtonHeight*4, 30, 30)
  SUB    rsp,8
  PUSH   qword 30
  PUSH   qword 30
  MOV    r15,qword [rsp+232]
  SAL    r15,2
  ADD    r15,85
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+248]
  ADD    r15,-90
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2976]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Zoomout], ButtonWidth-55, 85+ButtonHeight*4, 30, 30)        
  SUB    rsp,8
  PUSH   qword 30
  PUSH   qword 30
  MOV    r15,qword [rsp+232]
  SAL    r15,2
  ADD    r15,85
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+248]
  ADD    r15,-55
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2984]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Zoomall], ButtonWidth-20, 85+ButtonHeight*4, 30, 30)
  SUB    rsp,8
  PUSH   qword 30
  PUSH   qword 30
  MOV    r15,qword [rsp+232]
  SAL    r15,2
  ADD    r15,85
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+248]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2992]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; 
; 
; 
; If *Debugger\NbIncludedFiles > 0
  MOV    rbp,qword [rsp+PS602+0]
  MOVSXD r15,dword [rbp+88]
  AND    r15,r15
  JLE   _EndIf3149
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Splitter], 20+ButtonWidth, 10, Width-30-ButtonWidth, Height-20)
  SUB    rsp,8
  MOV    r15,qword [rsp+128]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+128]
  SUB    r15,qword [rsp+232]
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    r15,qword [rsp+248]
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2936]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; Width  = GadgetWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Container])-#ContainerBorder
  MOV    rbp,qword [rsp+PS602+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2928]
  POP    rcx
  CALL   PB_GadgetWidth
  MOV    r15,rax
  ADD    r15,-4
  MOV    qword [rsp+112],r15
; Height = GadgetHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Container])-#ContainerBorder
  MOV    rbp,qword [rsp+PS602+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2928]
  POP    rcx
  CALL   PB_GadgetHeight
  MOV    r15,rax
  ADD    r15,-4
  MOV    qword [rsp+120],r15
; Else      
  JMP   _EndIf3148
_EndIf3149:
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Container], 20+ButtonWidth, 10, Width-30-ButtonWidth, Height-20)
  SUB    rsp,8
  MOV    r15,qword [rsp+128]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+128]
  SUB    r15,qword [rsp+232]
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    r15,qword [rsp+248]
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2928]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; Width  = Width-30-ButtonWidth - #ContainerBorder
  MOV    r15,qword [rsp+112]
  SUB    r15,qword [rsp+216]
  ADD    r15,-34
  MOV    qword [rsp+112],r15
; Height = Height-20 - #ContainerBorder
  MOV    r15,qword [rsp+120]
  ADD    r15,-24
  MOV    qword [rsp+120],r15
; EndIf
_EndIf3148:
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Image], 0, 0, Width-#Profiler_ScrollbarWidth, Height-#Profiler_ScrollbarWidth)
  SUB    rsp,8
  MOV    r15,qword [rsp+128]
  ADD    r15,-15
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+128]
  ADD    r15,-15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2952]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], 0, Height-#Profiler_ScrollbarWidth, Width-#Profiler_ScrollbarWidth, #Profiler_ScrollbarWidth)
  SUB    rsp,8
  PUSH   qword 15
  MOV    r15,qword [rsp+128]
  ADD    r15,-15
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+144]
  ADD    r15,-15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], Width-#Profiler_ScrollbarWidth, 0, #Profiler_ScrollbarWidth, Height-#Profiler_ScrollbarWidth)        
  SUB    rsp,8
  MOV    r15,qword [rsp+128]
  ADD    r15,-15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 15
  PUSH   qword 0
  MOV    r15,qword [rsp+144]
  ADD    r15,-15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS602+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; Profiler_UpdatePageLength(*Debugger) 
  PUSH   qword [rsp+PS602+0]
  POP    rcx
  CALL  _Procedure578
; Profiler_DrawAll(*Debugger) 
  PUSH   qword [rsp+PS602+0]
  POP    rcx
  CALL  _Procedure576
; 
; 
; ElseIf EventID = #PB_Event_CloseWindow
  JMP   _EndIf3099
_EndIf3147:
  MOV    r15,qword [rsp+PS602+8]
  CMP    r15,13116
  JNE   _EndIf3151
; 
; If DebuggerMemorizeWindows And IsWindowMinimized(*Debugger\Windows[#DEBUGGER_WINDOW_Profiler]) = 0
  CMP    qword [v_DebuggerMemorizeWindows],0
  JE     No328
  MOV    rbp,qword [rsp+PS602+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+888]
  POP    rcx
  CALL  _Procedure104
  MOV    r15,rax
  AND    r15,r15
  JNE    No328
Ok328:
  MOV    rax,1
  JMP    End328
No328:
  XOR    rax,rax
End328:
  AND    rax,rax
  JE    _EndIf3153
; ProfilerMaximize = IsWindowMaximized(*Debugger\Windows[#DEBUGGER_WINDOW_Profiler])
  MOV    rbp,qword [rsp+PS602+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+888]
  POP    rcx
  CALL  _Procedure102
  MOV    qword [v_ProfilerMaximize],rax
; If ProfilerMaximize = 0
  MOV    r15,qword [v_ProfilerMaximize]
  AND    r15,r15
  JNE   _EndIf3155
; ProfilerX = WindowX(*Debugger\Windows[#DEBUGGER_WINDOW_Profiler])
  MOV    rbp,qword [rsp+PS602+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+888]
  POP    rcx
  CALL   PB_WindowX
  MOV    qword [v_ProfilerX],rax
; ProfilerY = WindowY(*Debugger\Windows[#DEBUGGER_WINDOW_Profiler])
  MOV    rbp,qword [rsp+PS602+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+888]
  POP    rcx
  CALL   PB_WindowY
  MOV    qword [v_ProfilerY],rax
; ProfilerWidth  = WindowWidth (*Debugger\Windows[#DEBUGGER_WINDOW_Profiler])
  MOV    rbp,qword [rsp+PS602+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+888]
  POP    rcx
  CALL   PB_WindowWidth
  MOV    qword [v_ProfilerWidth],rax
; ProfilerHeight = WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_Profiler])
  MOV    rbp,qword [rsp+PS602+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+888]
  POP    rcx
  CALL   PB_WindowHeight
  MOV    qword [v_ProfilerHeight],rax
; EndIf
_EndIf3155:
; EndIf
_EndIf3153:
; 
; If *Debugger\NbIncludedFiles > 0
  MOV    rbp,qword [rsp+PS602+0]
  MOVSXD r15,dword [rbp+88]
  AND    r15,r15
  JLE   _EndIf3157
; ProfilerSplitter  = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Splitter])
  MOV    rbp,qword [rsp+PS602+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2936]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    qword [v_ProfilerSplitter],rax
; EndIf
_EndIf3157:
; 
; 
; 
; If *Debugger\ProfilerData
  MOV    rbp,qword [rsp+PS602+0]
  CMP    qword [rbp+704],0
  JE    _EndIf3159
; FreeMemory(*Debugger\ProfilerData)
  MOV    rbp,qword [rsp+PS602+0]
  PUSH   qword [rbp+704]
  POP    rcx
  CALL   PB_FreeMemory
; *Debugger\ProfilerData = 0
  MOV    rbp,qword [rsp+PS602+0]
  MOV    qword [rbp+704],0
; EndIf
_EndIf3159:
; 
; CloseWindow(*Debugger\Windows[#DEBUGGER_WINDOW_Profiler])
  MOV    rbp,qword [rsp+PS602+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+888]
  POP    rcx
  CALL   PB_CloseWindow
; 
; If *Debugger\ProfilerImage 
  MOV    rbp,qword [rsp+PS602+0]
  CMP    qword [rbp+712],0
  JE    _EndIf3161
; FreeImage(*Debugger\ProfilerImage)
  MOV    rbp,qword [rsp+PS602+0]
  PUSH   qword [rbp+712]
  POP    rcx
  CALL   PB_FreeImage
; *Debugger\ProfilerImage = 0
  MOV    rbp,qword [rsp+PS602+0]
  MOV    qword [rbp+712],0
; EndIf
_EndIf3161:
; 
; 
; 
; 
; 
; 
; *Debugger\Windows[#DEBUGGER_WINDOW_Profiler] = 0
  MOV    rbp,qword [rsp+PS602+0]
  PUSH   rbp
  POP    rbp
  MOV    qword [rbp+888],0
; Debugger_CheckDestroy(*Debugger)
  PUSH   qword [rsp+PS602+0]
  POP    rcx
  CALL  _Procedure426
; 
; EndIf
_EndIf3099:
_EndIf3151:
; EndProcedure
_EndProcedureZero603:
  XOR    rax,rax
_EndProcedure603:
  PUSH   rax
  MOV    rcx,qword [rsp+72]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,232
  POP    r15
  POP    rbp
  RET
; Procedure VariableGadget_GetState(Gadget)
_Procedure304:
  MOV    qword [rsp+8],rcx
  PUSH   r15
  PS304=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; index = GetGadgetState(Gadget)
  PUSH   qword [rsp+PS304+0]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    qword [rsp+40],rax
; If index = -1
  MOV    r15,qword [rsp+40]
  CMP    r15,-1
  JNE   _EndIf1078
; ProcedureReturn -1
  MOV    rax,-1
  JMP   _EndProcedure305
; Else
  JMP   _EndIf1077
_EndIf1078:
; ProcedureReturn GetGadgetItemData(Gadget, index)
  PUSH   qword [rsp+40]
  PUSH   qword [rsp+PS304+8]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemData
  JMP   _EndProcedure305
; EndIf
_EndIf1077:
; EndProcedure
_EndProcedureZero305:
  XOR    rax,rax
_EndProcedure305:
  ADD    rsp,48
  POP    r15
  RET
; Procedure MemoryViewer_AsciiUtf8(*Debugger.DebuggerData, Mode)
_Procedure478:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS478=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; 
; 
; Size = *Debugger\MemoryDumpSize
  MOV    rbp,qword [rsp+PS478+0]
  PUSH   qword [rbp+604]
  POP    rax
  MOV    qword [rsp+40],rax
; *Pointer.BYTE = *Debugger\MemoryDump
  MOV    rbp,qword [rsp+PS478+0]
  PUSH   qword [rbp+596]
  POP    rax
  MOV    qword [rsp+48],rax
; *BufferEnd    = *Debugger\MemoryDump + *Debugger\MemoryDumpSize
  MOV    rbp,qword [rsp+PS478+0]
  MOV    r15,qword [rbp+596]
  MOV    rbp,qword [rsp+PS478+0]
  ADD    r15,qword [rbp+604]
  MOV    qword [rsp+56],r15
; 
; While *Pointer < *BufferEnd
_While1819:
  MOV    r15,qword [rsp+48]
  CMP    r15,qword [rsp+56]
  JGE   _Wend1819
; If *Pointer\b >= 0 And *Pointer\b < 32 
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  AND    r15,r15
  JL     No219
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  CMP    r15,32
  JGE    No219
Ok219:
  MOV    rax,1
  JMP    End219
No219:
  XOR    rax,rax
End219:
  AND    rax,rax
  JE    _EndIf1821
; Size + Len(MemoryViewer_Chars(*Pointer\b)) - 1 
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [rsp+48]
  MOVSX  r14,byte [rbp]
  MOV    rbp,qword [a_MemoryViewer_Chars]
  SAL    r14,3
  PUSH   qword [rbp+r14]
  POP    rcx
  CALL   PB_Len
  ADD    r15,rax
  DEC    r15
  MOV    qword [rsp+40],r15
; If *Pointer\b = 0 Or *Pointer\b = 10 Or *Pointer\b = 13
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  AND    r15,r15
  JE     Ok220
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  CMP    r15,10
  JE     Ok220
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  CMP    r15,13
  JE     Ok220
  JMP    No220
Ok220:
  MOV    rax,1
  JMP    End220
No220:
  XOR    rax,rax
End220:
  AND    rax,rax
  JE    _EndIf1823
; Size + Len(#NewLine) 
  MOV    r15,qword [rsp+40]
  MOV    rax,_S63
  PUSH   rax
  POP    rcx
  CALL   PB_Len
  ADD    r15,rax
  MOV    qword [rsp+40],r15
; EndIf
_EndIf1823:
; EndIf
_EndIf1821:
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; Wend
  JMP   _While1819
_Wend1819:
; 
; *Buffer = AllocateMemory(Size + 1) 
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+64],rax
; 
; 
; 
; If *Buffer
  CMP    qword [rsp+64],0
  JE    _EndIf1825
; *Pointer      = *Debugger\MemoryDump
  MOV    rbp,qword [rsp+PS478+0]
  PUSH   qword [rbp+596]
  POP    rax
  MOV    qword [rsp+48],rax
; *Output.BYTE  = *Buffer
  PUSH   qword [rsp+64]
  POP    rax
  MOV    qword [rsp+72],rax
; 
; While *Pointer < *BufferEnd    
_While1826:
  MOV    r15,qword [rsp+48]
  CMP    r15,qword [rsp+56]
  JGE   _Wend1826
; If *Pointer\b >= 0 And *Pointer\b < 32 
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  AND    r15,r15
  JL     No221
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  CMP    r15,32
  JGE    No221
Ok221:
  MOV    rax,1
  JMP    End221
No221:
  XOR    rax,rax
End221:
  AND    rax,rax
  JE    _EndIf1828
; PokeS(*Output, MemoryViewer_Chars(*Pointer\b), -1, #PB_Ascii)
  PUSH   qword 24
  PUSH   qword -1
  MOV    rbp,qword [rsp+64]
  MOVSX  r15,byte [rbp]
  MOV    rbp,qword [a_MemoryViewer_Chars]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_PokeS3
; *Output + Len(MemoryViewer_Chars(*Pointer\b))
  MOV    r15,qword [rsp+72]
  MOV    rbp,qword [rsp+48]
  MOVSX  r14,byte [rbp]
  MOV    rbp,qword [a_MemoryViewer_Chars]
  SAL    r14,3
  PUSH   qword [rbp+r14]
  POP    rcx
  CALL   PB_Len
  ADD    r15,rax
  MOV    qword [rsp+72],r15
; 
; 
; If *Pointer\b = 0 Or *Pointer\b = 10 Or (*Pointer\b = 13 And PeekB(*Pointer+1) <> 10)
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  AND    r15,r15
  JE     Ok222
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  CMP    r15,10
  JE     Ok222
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  CMP    r15,13
  JNE    No223
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_PeekB
  MOV    r15,rax
  CMP    r15,10
  JE     No223
Ok223:
  MOV    rax,1
  JMP    End223
No223:
  XOR    rax,rax
End223:
  AND    rax,rax
  JNE    Ok222
  JMP    No222
Ok222:
  MOV    rax,1
  JMP    End222
No222:
  XOR    rax,rax
End222:
  AND    rax,rax
  JE    _EndIf1830
; PokeS(*Output, #NewLine, -1, #PB_Ascii)
  PUSH   qword 24
  PUSH   qword -1
  MOV    rax,_S63
  PUSH   rax
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_PokeS3
; *Output + Len(#NewLine) 
  MOV    r15,qword [rsp+72]
  MOV    rax,_S63
  PUSH   rax
  POP    rcx
  CALL   PB_Len
  ADD    r15,rax
  MOV    qword [rsp+72],r15
; EndIf        
_EndIf1830:
; Else
  JMP   _EndIf1827
_EndIf1828:
; *Output\b = *Pointer\b
  MOV    rbp,qword [rsp+48]
  MOVSX  rax,byte [rbp]
  PUSH   rax
  MOV    rbp,qword [rsp+80]
  POP    rax
  MOV    byte [rbp],al
; *Output + 1
  MOV    r15,qword [rsp+72]
  INC    r15
  MOV    qword [rsp+72],r15
; EndIf
_EndIf1827:
; 
; *Pointer + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; Wend
  JMP   _While1826
_Wend1826:
; *Output\b = 0
  MOV    rbp,qword [rsp+72]
  MOV    byte [rbp],0
; 
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Editor], PeekS(*Buffer, -1, Mode))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS478+48]
  PUSH   qword -1
  PUSH   qword [rsp+120]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS478+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2264]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; FreeMemory(*Buffer)
  PUSH   qword [rsp+64]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf1825:
; 
; EndProcedure
_EndProcedureZero479:
  XOR    rax,rax
_EndProcedure479:
  ADD    rsp,80
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure.s Language(Group$, Name$)
_Procedure206:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS206=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS206+32]
  MOV    qword [PB_StringBasePosition],rax
  MOV    rdx,[rsp+PS206+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
  MOV    rdx,[rsp+PS206+8]
  LEA    rcx,[rsp+48]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; Static Group.l  
; Protected String$, StringIndex, Result
; 
; Group$  = UCase(Group$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; Name$   = UCase(Name$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; String$ = "##### String not found! #####"  
  MOV    rdx,_S61
  LEA    rcx,[rsp+56]
  CALL   SYS_FastAllocateStringFree4
; 
; If LanguageGroups(Group)\Name$ <> Group$  
  MOVSXD r15,dword [so_Language.v_Group]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  PUSH   qword [rbp]
  MOV    rcx,qword [rsp+48]
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf342
; For Group = 1 To NbLanguageGroups
  MOV    dword [so_Language.v_Group],1
  JMP   _ForSkipDebug343
_For343:
_ForSkipDebug343:
  MOV    rax,qword [v_NbLanguageGroups]
  CMP    eax,dword [so_Language.v_Group]
  JL    _Next344
; If Group$ = LanguageGroups(Group)\Name$
  PUSH   qword [rsp+40]
  MOVSXD r15,dword [so_Language.v_Group]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  MOV    rcx,qword [rbp]
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf346
; Break
  JMP   _Next344
; EndIf
_EndIf346:
; Next Group
_NextContinue344:
  INC    dword [so_Language.v_Group]
  JNO   _For343
_Next344:
; 
; If Group > NbLanguageGroups  
  MOVSXD r15,dword [so_Language.v_Group]
  CMP    r15,qword [v_NbLanguageGroups]
  JLE   _EndIf348
; Group = 0
  MOV    dword [so_Language.v_Group],0
; EndIf
_EndIf348:
; EndIf
_EndIf342:
; 
; If Group <> 0
  MOVSXD r15,dword [so_Language.v_Group]
  AND    r15,r15
  JE    _EndIf350
; StringIndex = LanguageGroups(Group)\IndexTable[ Asc(Left(Name$, 1)) ]
  MOVSXD r15,dword [so_Language.v_Group]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r15,1040
  ADD    rbp,r15
  PUSH   rbp
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Asc
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp+16]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+64],rax
; If StringIndex <> 0
  MOV    r15,qword [rsp+64]
  AND    r15,r15
  JE    _EndIf352
; 
; Repeat
_Repeat353:
; Result = CompareMemoryString(@Name$, @LanguageNames(StringIndex))
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [a_LanguageNames]
  SAL    r15,3
  MOV    rax,qword [rbp+r15]
  MOV    rax,rax
  PUSH   rax
  MOV    rax,qword [rsp+56]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_CompareMemoryString
  MOV    qword [rsp+72],rax
; 
; If Result = 0
  MOV    r15,qword [rsp+72]
  AND    r15,r15
  JNE   _EndIf355
; String$ = LanguageStrings(StringIndex)
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [a_LanguageStrings]
  SAL    r15,3
  MOV    rcx,qword [rbp+r15]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; Break
  JMP   _Until353
; 
; ElseIf Result = -1 
  JMP   _EndIf354
_EndIf355:
  MOV    r15,qword [rsp+72]
  CMP    r15,-1
  JNE   _EndIf356
; Break
  JMP   _Until353
; 
; EndIf
_EndIf354:
_EndIf356:
; 
; StringIndex + 1
  MOV    r15,qword [rsp+64]
  INC    r15
  MOV    qword [rsp+64],r15
; Until StringIndex > LanguageGroups(Group)\GroupEnd
  MOV    r15,qword [rsp+64]
  MOVSXD r14,dword [so_Language.v_Group]
  MOV    rbp,qword [a_LanguageGroups]
  IMUL   r14,1040
  ADD    rbp,r14
  MOVSXD rax,dword [rbp+12]
  CMP    r15,rax
  JLE   _Repeat353
_Until353:
; 
; EndIf
_EndIf352:
; 
; EndIf
_EndIf350:
; 
; ProcedureReturn ReplaceString(String$, "%newline%", #NewLine, #PB_String_NoCase)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  MOV    rax,_S63
  PUSH   rax
  MOV    rax,_S62
  PUSH   rax
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ReplaceString2
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure207
; EndProcedure
_EndProcedureZero207:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure207:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,80
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure WinPipe_FatalError(*This.WinPipe_Communication, *Command.CommandInfo, FatalError)
_Procedure308:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS308=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; *This\IsFatalError = #True
  MOV    rbp,qword [rsp+PS308+0]
  MOV    dword [rbp+60],1
; 
; CompilerIf #NOTHREAD = 0
; 
; For i = 0 To *This\StackCount-1
  MOV    qword [rsp+40],0
  JMP   _ForSkipDebug1080
_For1080:
_ForSkipDebug1080:
  MOV    rbp,qword [rsp+PS308+0]
  MOVSXD r15,dword [rbp+88]
  DEC    r15
  CMP    r15,qword [rsp+40]
  JL    _Next1081
; If *This\Stack[i]\CommandData
  MOV    rbp,qword [rsp+PS308+0]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  CMP    qword [rbp+112],0
  JE    _EndIf1083
; FreeMemory(*This\Stack[i]\CommandData)
  MOV    rbp,qword [rsp+PS308+0]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  IMUL   rax,28
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+112]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf1083:
; Next i
_NextContinue1081:
  INC    qword [rsp+40]
  JNO   _For1080
_Next1081:
; 
; *This\Stack[0]\Command\Command   = #COMMAND_FatalError
  MOV    rbp,qword [rsp+PS308+0]
  PUSH   rbp
  POP    rbp
  MOV    dword [rbp+92],-1
; *This\Stack[0]\Command\Value1    = FatalError
  PUSH   qword [rsp+PS308+16]
  MOV    rbp,qword [rsp+PS308+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    dword [rbp+100],eax
; *This\Stack[0]\Command\Value2    = 0
  MOV    rbp,qword [rsp+PS308+0]
  PUSH   rbp
  POP    rbp
  MOV    dword [rbp+104],0
; *This\Stack[0]\Command\TimeStamp = Date()
  CALL   PB_Date
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS308+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    dword [rbp+108],eax
; *This\Stack[0]\CommandData       = 0
  MOV    rbp,qword [rsp+PS308+0]
  PUSH   rbp
  POP    rbp
  MOV    qword [rbp+112],0
; *This\StackCount = 1     
  MOV    rbp,qword [rsp+PS308+0]
  MOV    dword [rbp+88],1
; 
; CompilerElse
; 
; EndProcedure
_EndProcedureZero309:
  XOR    rax,rax
_EndProcedure309:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure UpdateDebugWindow(*Debugger.DebuggerData)
_Procedure444:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS444=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; SetWindowTitle(*Debugger\Windows[#DEBUGGER_WINDOW_Debug], Language("Debugger","DebugWindowTitle") + " - " + DebuggerTitle(*Debugger\FileName$))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S202
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS444+48]
  PUSH   qword [rbp+80]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure260
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS444+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetWindowTitle
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Copy], Language("Debugger","Copy"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S206
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS444+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+952]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Save], Language("Debugger","Save"))  
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S207
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS444+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+968]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Clear], Language("Debugger","Clear"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S208
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS444+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+960]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_Display], Language("Debugger","Display"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S204
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS444+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+992]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_Gadget_Debug_Text], Language("Debugger","Debug")+":")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S205
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS444+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+976]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; 
; 
; SetGadgetFont(*Debugger\Gadgets[#DEBUGGER_GADGET_Debug_List], DebugOutFontID)
  PUSH   qword [v_DebugOutFontID]
  MOV    rbp,qword [rsp+PS444+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+944]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetFont
; 
; DebugWindowEvents(*Debugger, #PB_Event_SizeWindow) 
  PUSH   qword 13118
  PUSH   qword [rsp+PS444+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure440
; EndProcedure
_EndProcedureZero445:
  XOR    rax,rax
_EndProcedure445:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure.s MemoryViewer_PeekB(*Pointer):  ProcedureReturn Str(PeekB(*Pointer)): EndProcedure
_Procedure458:
  MOV    qword [rsp+8],rcx
  PS458=48
  SUB    rsp,40
  MOV    rax,[rsp+PS458+32]
  MOV    qword [PB_StringBasePosition],rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS458+32]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure459
_EndProcedureZero459:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure459:
  ADD    rsp,40
  RET
; Procedure.s MemoryViewer_PeekD(*Pointer):  ProcedureReturn StrD(PeekD(*Pointer)): EndProcedure
_Procedure472:
  MOV    qword [rsp+8],rcx
  PS472=48
  SUB    rsp,40
  MOV    rax,[rsp+PS472+32]
  MOV    qword [PB_StringBasePosition],rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS472+32]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekD
  ADD    rsp,40
  MOVSD  [rsp-8],xmm0
  FLD    qword [rsp-8]
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  POP    rdx
  SUB    rsp,32
  CALL   PB_StrD
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure473
_EndProcedureZero473:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure473:
  ADD    rsp,40
  RET
; Procedure.s MemoryViewer_PeekF(*Pointer):  ProcedureReturn StrF(PeekF(*Pointer)): EndProcedure
_Procedure470:
  MOV    qword [rsp+8],rcx
  PS470=48
  SUB    rsp,40
  MOV    rax,[rsp+PS470+32]
  MOV    qword [PB_StringBasePosition],rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS470+32]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekF
  ADD    rsp,40
  MOVSS  [rsp-8],xmm0
  FLD    dword [rsp-8]
  SUB    rsp,8
  FSTP   dword [rsp]
  MOVSS  xmm0,dword [rsp]
  ADD    rsp,8
  POP    rdx
  SUB    rsp,32
  CALL   PB_StrF
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure471
_EndProcedureZero471:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure471:
  ADD    rsp,40
  RET
; Procedure VariableGadget_Event(Gadget)
_Procedure284:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS284=144
  MOV    rax,10
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; DoSort = 0
  MOV    qword [rsp+40],0
; 
; If EventType() = #PB_EventType_LeftDoubleClick
  CALL   PB_EventType
  MOV    r15,rax
  CMP    r15,2
  JNE   _EndIf854
; index = GetGadgetState(Gadget)
  PUSH   qword [rsp+PS284+0]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    qword [rsp+48],rax
; 
; If index <> -1
  MOV    r15,qword [rsp+48]
  CMP    r15,-1
  JE    _EndIf856
; 
; *VariableGadget.VariableGadget = GetGadgetData(Gadget)
  PUSH   qword [rsp+PS284+0]
  POP    rcx
  CALL   PB_GetGadgetData
  MOV    qword [rsp+56],rax
; ChangeCurrentElement(VariableGadget_List(), *VariableGadget)
  PUSH   qword [rsp+56]
  PUSH   qword [t_VariableGadget_List]
  POP    rcx
  POP    rdx
  CALL   PB_ChangeCurrentElement
; 
; If VariableGadget_List()\IsLocked = #False And VariableGadget_List()\Items
  MOV    rbp,qword [t_VariableGadget_List+8]
  MOVSXD r15,dword [rbp+48]
  AND    r15,r15
  JNE    No153
  CMP    qword [rbp+32],0
  JE     No153
Ok153:
  MOV    rax,1
  JMP    End153
No153:
  XOR    rax,rax
End153:
  AND    rax,rax
  JE    _EndIf858
; *items.VariableGadget_ItemList = VariableGadget_List()\Items
  MOV    rbp,qword [t_VariableGadget_List+8]
  PUSH   qword [rbp+32]
  POP    rax
  MOV    qword [rsp+64],rax
; 
; realindex = GetGadgetItemData(Gadget, index)        
  PUSH   qword [rsp+48]
  PUSH   qword [rsp+PS284+8]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemData
  MOV    qword [rsp+72],rax
; indexbefore = index
  PUSH   qword [rsp+48]
  POP    rax
  MOV    qword [rsp+80],rax
; 
; VariableGadget_Lock(Gadget)
  PUSH   qword [rsp+PS284+0]
  POP    rcx
  CALL  _Procedure278
; 
; If *items\item[realindex]\Node = 1
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+2]
  CMP    r15,1
  JNE   _EndIf860
; RemoveGadgetItem(Gadget, index) 
  PUSH   qword [rsp+48]
  PUSH   qword [rsp+PS284+8]
  POP    rcx
  POP    rdx
  CALL   PB_RemoveGadgetItem
; AddGadgetItem(Gadget, index, VariableGadget_EntryText(*VariableGadget, realindex), ImageID(VariableGadget_NodeClose))                         
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [v_VariableGadget_NodeClose]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure282
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+PS284+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemData(Gadget, index, realindex)
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+PS284+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetItemData
; 
; *items\item[realindex]\Node = 2
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    word [rbp+2],2
; sublevel = *items\item[realindex]\Sublevel
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  rax,word [rbp+4]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+88],rax
; index + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; realindex + 1
  MOV    r15,qword [rsp+72]
  INC    r15
  MOV    qword [rsp+72],r15
; 
; While realindex < VariableGadget_List()\ItemCount And *items\item[realindex]\sublevel > sublevel
_While861:
  MOV    r15,qword [rsp+72]
  MOV    rbp,qword [t_VariableGadget_List+8]
  MOVSXD rax,dword [rbp+28]
  CMP    r15,rax
  JGE    No154
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+4]
  CMP    r15,qword [rsp+88]
  JLE    No154
Ok154:
  MOV    rax,1
  JMP    End154
No154:
  XOR    rax,rax
End154:
  AND    rax,rax
  JE    _Wend861
; If *items\item[realindex]\Node = 1                    
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+2]
  CMP    r15,1
  JNE   _EndIf863
; AddGadgetItem(Gadget, index, VariableGadget_EntryText(*VariableGadget, realindex), ImageID(VariableGadget_NodeOpen))  
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [v_VariableGadget_NodeOpen]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure282
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+PS284+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemData(Gadget, index, realindex)
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+PS284+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetItemData
; index + 1                  
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; 
; 
; sublevel2 = *items\item[realindex]\Sublevel
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  rax,word [rbp+4]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+96],rax
; realindex + 1
  MOV    r15,qword [rsp+72]
  INC    r15
  MOV    qword [rsp+72],r15
; While  realindex < VariableGadget_List()\ItemCount And *items\item[realindex]\sublevel > sublevel2
_While864:
  MOV    r15,qword [rsp+72]
  MOV    rbp,qword [t_VariableGadget_List+8]
  MOVSXD rax,dword [rbp+28]
  CMP    r15,rax
  JGE    No155
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+4]
  CMP    r15,qword [rsp+96]
  JLE    No155
Ok155:
  MOV    rax,1
  JMP    End155
No155:
  XOR    rax,rax
End155:
  AND    rax,rax
  JE    _Wend864
; realindex + 1
  MOV    r15,qword [rsp+72]
  INC    r15
  MOV    qword [rsp+72],r15
; Wend                  
  JMP   _While864
_Wend864:
; Else
  JMP   _EndIf862
_EndIf863:
; If *items\item[realindex]\Node = 2
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+2]
  CMP    r15,2
  JNE   _EndIf867
; Image = VariableGadget_NodeClose
  PUSH   qword [v_VariableGadget_NodeClose]
  POP    rax
  MOV    qword [rsp+104],rax
; Else
  JMP   _EndIf866
_EndIf867:
; Image = VariableGadget_Icons(*items\item[realindex]\Type & #TYPEMASK)
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,byte [rbp+1]
  AND    r15,63
  MOV    rbp,qword [a_VariableGadget_Icons]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rax
  MOV    qword [rsp+104],rax
; EndIf                   
_EndIf866:
; AddGadgetItem(Gadget, index, VariableGadget_EntryText(*VariableGadget, realindex), ImageID(Image)) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+120]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure282
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+PS284+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemData(Gadget, index, realindex)              
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+PS284+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetItemData
; index + 1                   
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; realindex + 1
  MOV    r15,qword [rsp+72]
  INC    r15
  MOV    qword [rsp+72],r15
; EndIf                             
_EndIf862:
; Wend   
  JMP   _While861
_Wend861:
; 
; DoSort = 1                    
  MOV    qword [rsp+40],1
; 
; 
; ElseIf *items\item[realindex]\Node = 2
  JMP   _EndIf859
_EndIf860:
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+2]
  CMP    r15,2
  JNE   _EndIf869
; RemoveGadgetItem(Gadget, index) 
  PUSH   qword [rsp+48]
  PUSH   qword [rsp+PS284+8]
  POP    rcx
  POP    rdx
  CALL   PB_RemoveGadgetItem
; AddGadgetItem(Gadget, index, VariableGadget_EntryText(*VariableGadget, realindex), ImageID(VariableGadget_NodeOpen))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [v_VariableGadget_NodeOpen]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure282
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+PS284+40]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemData(Gadget, index, realindex)
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+PS284+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetItemData
; 
; *items\item[realindex]\Node = 1
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    word [rbp+2],1
; sublevel = *items\item[realindex]\Sublevel
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  rax,word [rbp+4]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+88],rax
; index + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; realindex + 1                        
  MOV    r15,qword [rsp+72]
  INC    r15
  MOV    qword [rsp+72],r15
; 
; While realindex < VariableGadget_List()\ItemCount And *items\item[realindex]\sublevel > sublevel
_While870:
  MOV    r15,qword [rsp+72]
  MOV    rbp,qword [t_VariableGadget_List+8]
  MOVSXD rax,dword [rbp+28]
  CMP    r15,rax
  JGE    No156
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+4]
  CMP    r15,qword [rsp+88]
  JLE    No156
Ok156:
  MOV    rax,1
  JMP    End156
No156:
  XOR    rax,rax
End156:
  AND    rax,rax
  JE    _Wend870
; If *items\item[realindex]\Node = 1
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+2]
  CMP    r15,1
  JNE   _EndIf872
; RemoveGadgetItem(Gadget, index)               
  PUSH   qword [rsp+48]
  PUSH   qword [rsp+PS284+8]
  POP    rcx
  POP    rdx
  CALL   PB_RemoveGadgetItem
; 
; 
; sublevel2 = *items\item[realindex]\Sublevel
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  rax,word [rbp+4]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+96],rax
; realindex + 1
  MOV    r15,qword [rsp+72]
  INC    r15
  MOV    qword [rsp+72],r15
; While  realindex < VariableGadget_List()\ItemCount And *items\item[realindex]\sublevel > sublevel2
_While873:
  MOV    r15,qword [rsp+72]
  MOV    rbp,qword [t_VariableGadget_List+8]
  MOVSXD rax,dword [rbp+28]
  CMP    r15,rax
  JGE    No157
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+4]
  CMP    r15,qword [rsp+96]
  JLE    No157
Ok157:
  MOV    rax,1
  JMP    End157
No157:
  XOR    rax,rax
End157:
  AND    rax,rax
  JE    _Wend873
; realindex + 1
  MOV    r15,qword [rsp+72]
  INC    r15
  MOV    qword [rsp+72],r15
; Wend                  
  JMP   _While873
_Wend873:
; Else
  JMP   _EndIf871
_EndIf872:
; RemoveGadgetItem(Gadget, index)                
  PUSH   qword [rsp+48]
  PUSH   qword [rsp+PS284+8]
  POP    rcx
  POP    rdx
  CALL   PB_RemoveGadgetItem
; realindex + 1
  MOV    r15,qword [rsp+72]
  INC    r15
  MOV    qword [rsp+72],r15
; EndIf                             
_EndIf871:
; Wend    
  JMP   _While870
_Wend870:
; 
; EndIf
_EndIf859:
_EndIf869:
; 
; VariableGadget_Unlock(Gadget)  
  PUSH   qword [rsp+PS284+0]
  POP    rcx
  CALL  _Procedure280
; 
; SetGadgetState(Gadget, indexbefore)
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+PS284+8]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; 
; If DoSort
  CMP    qword [rsp+40],0
  JE    _EndIf876
; 
; VariableGadget_Sort(Gadget)  
  PUSH   qword [rsp+PS284+0]
  POP    rcx
  CALL  _Procedure272
; EndIf
_EndIf876:
; 
; EndIf 
_EndIf858:
; 
; 
; EndIf
_EndIf856:
; 
; EndIf
_EndIf854:
; 
; EndProcedure
_EndProcedureZero285:
  XOR    rax,rax
_EndProcedure285:
  ADD    rsp,120
  POP    r15
  POP    rbp
  RET
; Procedure CreateNetworkCommunication(Mode, Host$, Port, Password$)
_Procedure418:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PUSH   r15
  PS418=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS418+8]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
  MOV    rdx,[rsp+PS418+24]
  LEA    rcx,[rsp+48]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; *Result = 0
  MOV    qword [rsp+56],0
; 
; 
; 
; If Network_Initialized = 0
  MOV    r15,qword [v_Network_Initialized]
  AND    r15,r15
  JNE   _EndIf1381
; Network_Initialized = Network_Initialize()
  CALL   Network_Initialize
  MOV    qword [v_Network_Initialized],rax
; EndIf
_EndIf1381:
; 
; If Network_Initialized
  CMP    qword [v_Network_Initialized],0
  JE    _EndIf1383
; 
; 
; CompilerIf #NOTHREAD = 0
; If Network_Thread = 0
  MOV    r15,qword [v_Network_Thread]
  AND    r15,r15
  JNE   _EndIf1385
; Network_Thread = CreateThread(@Network_ReceiveThread(), 0)
  PUSH   qword 0
  LEA    rax,[_Procedure402]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_CreateThread
  MOV    qword [v_Network_Thread],rax
; EndIf
_EndIf1385:
; 
; If Network_Thread
  CMP    qword [v_Network_Thread],0
  JE    _EndIf1387
; CompilerEndIf
; 
; LockMutex(Network_Mutex)
  PUSH   qword [v_Network_Mutex]
  POP    rcx
  CALL   qword [PB_LockMutex]
; 
; AddElement(Network_Data())
  PUSH   qword [t_Network_Data]
  POP    rcx
  CALL   PB_AddElement
; If Mode = 1
  MOV    r15,qword [rsp+PS418+0]
  CMP    r15,1
  JNE   _EndIf1389
; Network_Data()\Vtbl = ?NetworkClient_Vtbl 
  MOV    rbp,ll_createnetworkcommunication_networkclient_vtbl
  MOV    rax,rbp
  PUSH   rax
  MOV    rbp,qword [t_Network_Data+8]
  POP    rax
  MOV    qword [rbp+16],rax
; Else
  JMP   _EndIf1388
_EndIf1389:
; Network_Data()\Vtbl = ?NetworkServer_Vtbl 
  MOV    rbp,ll_createnetworkcommunication_networkserver_vtbl
  MOV    rax,rbp
  PUSH   rax
  MOV    rbp,qword [t_Network_Data+8]
  POP    rax
  MOV    qword [rbp+16],rax
; EndIf
_EndIf1388:
; Network_Data()\Host$      = Host$
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [t_Network_Data+8]
  LEA    rcx,[rbp+24]
  POP    rdx
  CALL   SYS_AllocateString4
; Network_Data()\Port       = Port
  PUSH   qword [rsp+PS418+16]
  POP    rax
  MOV    dword [rbp+40],eax
; Network_Data()\Password$  = Password$
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rbp+32]
  POP    rdx
  CALL   SYS_AllocateString4
; Network_Data()\StackMutex = CreateMutex()  
  CALL   PB_CreateMutex
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    qword [rbp+84],rax
; Network_Data()\Socket     = Network_CreateSocket()
  CALL   Network_CreateSocket
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [t_Network_Data+8]
  POP    rax
  MOV    qword [rbp+76],rax
; 
; If Network_Data()\Socket <> #INVALID_SOCKET      
  MOV    r15,qword [rbp+76]
  CMP    r15,-1
  JE    _EndIf1392
; *Result = @Network_Data()
  MOV    rbp,qword [t_Network_Data+8]
  LEA    rax,[rbp+16]
  MOV    qword [rsp+56],rax
; Else
  JMP   _EndIf1391
_EndIf1392:
; DeleteElement(Network_Data())
  PUSH   qword [t_Network_Data]
  POP    rcx
  CALL   PB_DeleteElement
; EndIf
_EndIf1391:
; 
; UnlockMutex(Network_Mutex)  
  PUSH   qword [v_Network_Mutex]
  POP    rcx
  CALL   qword [PB_UnlockMutex]
; 
; CompilerIf #NOTHREAD = 0
; EndIf
_EndIf1387:
; CompilerEndIf
; 
; EndIf
_EndIf1383:
; 
; If *Result = 0
  MOV    r15,qword [rsp+56]
  AND    r15,r15
  JNE   _EndIf1395
; 
; MessageRequester("PureBasic Debugger", Language("NetworkDebugger","Unavailable"), #FLAG_Error)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 16
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S178
  PUSH   rax
  MOV    rax,_S114
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S156
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_MessageRequester2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf1395:
; 
; ProcedureReturn *Result
  MOV    rax,qword [rsp+56]
  JMP   _EndProcedure419
; EndProcedure
_EndProcedureZero419:
  XOR    rax,rax
_EndProcedure419:
  PUSH   rax
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure.s MemoryViewer_PeekL(*Pointer):  ProcedureReturn Str(PeekL(*Pointer)):  EndProcedure
_Procedure466:
  MOV    qword [rsp+8],rcx
  PS466=48
  SUB    rsp,40
  MOV    rax,[rsp+PS466+32]
  MOV    qword [PB_StringBasePosition],rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS466+32]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure467
_EndProcedureZero467:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure467:
  ADD    rsp,40
  RET
; Procedure.s StrD_Debug(Value.d, Digits = 25)
_Procedure256:
  MOVSD  qword [rsp+8],xmm0
  MOV    qword [rsp+16],rdx
  PUSH   r15
  PS256=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS256+32]
  MOV    qword [PB_StringBasePosition],rax
; String$ = StrD(Value, Digits) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS256+32]
  PUSH   qword [rsp+PS256+32]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StrD2
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; If FindString(String$, ".", 1) = 0
  PUSH   qword 1
  MOV    rax,_S52
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_FindString2
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf742
; ProcedureReturn String$
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure257
; Else
  JMP   _EndIf741
_EndIf742:
; length = Len(String$)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_Len
  MOV    qword [rsp+48],rax
; While Mid(String$, length, 1) = "0"
_While744:
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S84
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _Wend744
; length - 1
  MOV    r15,qword [rsp+48]
  DEC    r15
  MOV    qword [rsp+48],r15
; Wend
  JMP   _While744
_Wend744:
; If Mid(String$, length, 1) = "."
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S52
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf746
; length + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; EndIf
_EndIf746:
; ProcedureReturn Left(String$, length)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure257
; EndIf
_EndIf741:
; EndProcedure
_EndProcedureZero257:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure257:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,64
  POP    r15
  RET
; Procedure VariableGadget_GadgetIndexToReal(Gadget, index)
_Procedure302:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   r15
  PS302=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; If index = -1
  MOV    r15,qword [rsp+PS302+8]
  CMP    r15,-1
  JNE   _EndIf1075
; ProcedureReturn -1
  MOV    rax,-1
  JMP   _EndProcedure303
; Else
  JMP   _EndIf1074
_EndIf1075:
; ProcedureReturn GetGadgetItemData(Gadget, index)
  PUSH   qword [rsp+PS302+8]
  PUSH   qword [rsp+PS302+8]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemData
  JMP   _EndProcedure303
; EndIf
_EndIf1074:
; EndProcedure
_EndProcedureZero303:
  XOR    rax,rax
_EndProcedure303:
  ADD    rsp,48
  POP    r15
  RET
; Procedure.s MemoryViewer_PeekQ(*Pointer):  ProcedureReturn Str(PeekQ(*Pointer)): EndProcedure
_Procedure468:
  MOV    qword [rsp+8],rcx
  PS468=48
  SUB    rsp,40
  MOV    rax,[rsp+PS468+32]
  MOV    qword [PB_StringBasePosition],rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS468+32]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure469
_EndProcedureZero469:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure469:
  ADD    rsp,40
  RET
; Procedure Network_OpenWindow(*This.Network_Communication, Title$)
_Procedure384:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS384=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS384+8]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; CompilerIf Defined(PUREBASIC_IDE, #PB_Constant)
; DisableWindow(#WINDOW_Main, 1)
  PUSH   qword 1
  PUSH   qword 1
  POP    rcx
  POP    rdx
  CALL   PB_DisableWindow
; Parent = WindowID(#WINDOW_Main)
  PUSH   qword 1
  POP    rcx
  CALL   PB_WindowID
  MOV    qword [rsp+48],rax
; CompilerEndIf
; 
; *This\Window = OpenWindow(#PB_Any, 0, 0, 350, 250, Title$, #PB_Window_TitleBar|#PB_Window_WindowCentered|#PB_Window_Invisible, Parent)
  PUSH   qword [rsp+48]
  PUSH   qword 281018370
  PUSH   qword [rsp+56]
  PUSH   qword 250
  PUSH   qword 350
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_OpenWindow3
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS384+8]
  POP    rax
  MOV    qword [rbp+76],rax
; If *This\Window
  MOV    rbp,qword [rsp+PS384+0]
  CMP    qword [rbp+76],0
  JE    _EndIf1208
; *This\LogGadget      = ListViewGadget(#PB_Any, 0, 0, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ListViewGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS384+8]
  POP    rax
  MOV    qword [rbp+84],rax
; *This\PasswordGadget = StringGadget(#PB_Any, 0, 0, 0, 0, "", #PB_String_Password)
  SUB    rsp,8
  PUSH   qword 32
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS384+8]
  POP    rax
  MOV    qword [rbp+92],rax
; *This\AbortGadget    = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Misc", "Cancel"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S112
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS384+8]
  POP    rax
  MOV    qword [rbp+100],rax
; *This\OkGadget       = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Misc", "Ok"))    
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S113
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS384+8]
  POP    rax
  MOV    qword [rbp+108],rax
; 
; AddKeyboardShortcut(*This\Window, #PB_Shortcut_Return, 1)
  PUSH   qword 1
  PUSH   qword 13
  MOV    rbp,qword [rsp+PS384+16]
  PUSH   qword [rbp+76]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddKeyboardShortcut
; 
; 
; 
; 
; *This\InvisibleTimeout = ElapsedMilliseconds() + 500
  CALL   PB_ElapsedMilliseconds
  MOV    r15,rax
  ADD    r15,500
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS384+8]
  POP    rax
  MOV    qword [rbp+124],rax
; 
; Network_ShowPasswordEntry(*This, #False) 
  PUSH   qword 0
  PUSH   qword [rsp+PS384+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure382
; *This\AbortPressed = #False
  MOV    rbp,qword [rsp+PS384+0]
  MOV    dword [rbp+120],0
; EndIf  
_EndIf1208:
; EndProcedure
_EndProcedureZero385:
  XOR    rax,rax
_EndProcedure385:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure UpdateProfilerWindowState(*Debugger.DebuggerData)
_Procedure600:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS600=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; If *Debugger\ProgramState = -1
  MOV    rbp,qword [rsp+PS600+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JNE   _EndIf3091
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Start], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS600+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2896]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Stop], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS600+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2904]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Reset], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS600+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2912]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Update], 1)    
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS600+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2920]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; Else
  JMP   _EndIf3090
_EndIf3091:
; 
; If *Debugger\ProfilerRunning
  MOV    rbp,qword [rsp+PS600+0]
  CMP    dword [rbp+692],0
  JE    _EndIf3094
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Start], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS600+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2896]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Stop], 0)    
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS600+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2904]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; Else
  JMP   _EndIf3093
_EndIf3094:
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Start], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS600+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2896]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Stop], 1)  
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS600+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2904]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; EndIf
_EndIf3093:
; 
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Reset], 0)  
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS600+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2912]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; If *Debugger\ProgramState <> 0 And *Debugger\ProgramState <> -2
  MOV    rbp,qword [rsp+PS600+0]
  MOVSXD r15,dword [rbp+112]
  AND    r15,r15
  JE     No325
  MOV    rbp,qword [rsp+PS600+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-2
  JE     No325
Ok325:
  MOV    rax,1
  JMP    End325
No325:
  XOR    rax,rax
End325:
  AND    rax,rax
  JE    _EndIf3097
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Update], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS600+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2920]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; 
; 
; Command.CommandInfo\Command = #COMMAND_GetProfilerData 
  LEA    rbp,[rsp+40]
  MOV    dword [rbp],32
; SendDebuggerCommand(*Debugger, @Command)
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS600+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; Else
  JMP   _EndIf3096
_EndIf3097:
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Update], 0)           
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS600+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2920]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; EndIf
_EndIf3096:
; 
; EndIf
_EndIf3090:
; 
; EndProcedure
_EndProcedureZero601:
  XOR    rax,rax
_EndProcedure601:
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure.s MemoryViewer_PeekW(*Pointer):  ProcedureReturn Str(PeekW(*Pointer)):  EndProcedure
_Procedure464:
  MOV    qword [rsp+8],rcx
  PS464=48
  SUB    rsp,40
  MOV    rax,[rsp+PS464+32]
  MOV    qword [PB_StringBasePosition],rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS464+32]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekW
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure465
_EndProcedureZero465:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure465:
  ADD    rsp,40
  RET
; Procedure SetSortArrow_NoTheme(Gadget, Column, Direction)
_Procedure138:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS138=192
  MOV    rax,16
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; Static UpImage, DownImage
; 
; If UpImage = 0
  MOV    r15,qword [so_SetSortArrow_NoTheme.v_UpImage]
  AND    r15,r15
  JNE   _EndIf55
; UpImage   = CreateImage(#PB_Any, 10, 10)
  PUSH   qword 10
  PUSH   qword 10
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CreateImage
  MOV    qword [so_SetSortArrow_NoTheme.v_UpImage],rax
; DownImage = CreateImage(#PB_Any, 10, 10)
  PUSH   qword 10
  PUSH   qword 10
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CreateImage
  MOV    qword [so_SetSortArrow_NoTheme.v_DownImage],rax
; 
; If StartDrawing(ImageOutput(DownImage))
  PUSH   qword [so_SetSortArrow_NoTheme.v_DownImage]
  POP    rcx
  CALL   PB_ImageOutput
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_StartDrawing
  AND    rax,rax
  JE    _EndIf57
; Box(0, 0, 10, 10, GetSysColor_(#COLOR_BTNFACE))
  SUB    rsp,8
  SUB    rsp,8
  PUSH   qword 15
  POP    rcx
  SUB    rsp,32
  CALL   GetSysColor
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  PUSH   qword 0
  PUSH   qword 0
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Box2
  ADD    rsp,48
; Restore SortArrowImage
  MOV    rax,ll_setsortarrow_notheme_sortarrowimage
  MOV    qword [PB_DataPointer],rax
; For y = 0 To 9
  MOV    qword [rsp+40],0
  JMP   _ForSkipDebug58
_For58:
_ForSkipDebug58:
  MOV    rax,9
  CMP    rax,qword [rsp+40]
  JL    _Next59
; For x = 0 To 9
  MOV    qword [rsp+48],0
  JMP   _ForSkipDebug60
_For60:
_ForSkipDebug60:
  MOV    rax,9
  CMP    rax,qword [rsp+48]
  JL    _Next61
; Read.b Pixel
  MOV    rax,qword [PB_DataPointer]
  MOVSX  rax,byte [rax]
  MOV    qword [rsp+56],rax
  INC    qword [PB_DataPointer]
; If Pixel 
  CMP    qword [rsp+56],0
  JE    _EndIf63
; Plot(x, y, $000000)
  PUSH   qword 0
  PUSH   qword [rsp+48]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_Plot2
; EndIf
_EndIf63:
; Next x
_NextContinue61:
  INC    qword [rsp+48]
  JNO   _For60
_Next61:
; Next y
_NextContinue59:
  INC    qword [rsp+40]
  JNO   _For58
_Next59:
; StopDrawing()
  CALL   PB_StopDrawing
; EndIf
_EndIf57:
; 
; If StartDrawing(ImageOutput(UpImage))
  PUSH   qword [so_SetSortArrow_NoTheme.v_UpImage]
  POP    rcx
  CALL   PB_ImageOutput
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_StartDrawing
  AND    rax,rax
  JE    _EndIf65
; Box(0, 0, 10, 10, GetSysColor_(#COLOR_BTNFACE))
  SUB    rsp,8
  SUB    rsp,8
  PUSH   qword 15
  POP    rcx
  SUB    rsp,32
  CALL   GetSysColor
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  PUSH   qword 0
  PUSH   qword 0
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Box2
  ADD    rsp,48
; Restore SortArrowImage
  MOV    rax,ll_setsortarrow_notheme_sortarrowimage
  MOV    qword [PB_DataPointer],rax
; For y = 9 To 0 Step -1
  MOV    qword [rsp+40],9
  JMP   _ForSkipDebug66
_For66:
_ForSkipDebug66:
  XOR    rax,rax
  CMP    rax,qword [rsp+40]
  JG    _Next67
; For x = 0 To 9
  MOV    qword [rsp+48],0
  JMP   _ForSkipDebug68
_For68:
_ForSkipDebug68:
  MOV    rax,9
  CMP    rax,qword [rsp+48]
  JL    _Next69
; Read.b Pixel
  MOV    rax,qword [PB_DataPointer]
  MOVSX  rax,byte [rax]
  MOV    qword [rsp+56],rax
  INC    qword [PB_DataPointer]
; If Pixel 
  CMP    qword [rsp+56],0
  JE    _EndIf71
; Plot(x, y, $000000)
  PUSH   qword 0
  PUSH   qword [rsp+48]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_Plot2
; EndIf
_EndIf71:
; Next x
_NextContinue69:
  INC    qword [rsp+48]
  JNO   _For68
_Next69:
; Next y
_NextContinue67:
  DEC    qword [rsp+40]
  JNO   _For66
_Next67:
; StopDrawing()
  CALL   PB_StopDrawing
; EndIf
_EndIf65:
; 
; EndIf
_EndIf55:
; 
; Protected item.HD_ITEM, Header, Columns, Text$, i
; 
; Header = SendMessage_(GadgetID(Gadget), #LVM_GETHEADER, 0, 0)
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 4127
  SUB    rsp,8
  PUSH   qword [rsp+PS138+32]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
  MOV    qword [rsp+128],rax
; If Header    
  CMP    qword [rsp+128],0
  JE    _EndIf73
; Columns = SendMessage_(Header, #HDM_GETITEMCOUNT, 0, 0)
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 4608
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
  MOV    qword [rsp+136],rax
; 
; For i = 0 To Columns-1
  MOV    qword [rsp+152],0
  JMP   _ForSkipDebug74
_For74:
_ForSkipDebug74:
  MOV    r15,qword [rsp+136]
  DEC    r15
  CMP    r15,qword [rsp+152]
  JL    _Next75
; Text$ = GetGadgetItemText(Gadget, -1, i)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+176]
  PUSH   qword -1
  PUSH   qword [rsp+PS138+40]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_GetGadgetItemText2
  ADD    rsp,40
  LEA    rcx,[rsp+152]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; If Column = i
  MOV    r15,qword [rsp+PS138+8]
  CMP    r15,qword [rsp+152]
  JNE   _EndIf77
; item\mask       = #HDI_BITMAP | #HDI_FORMAT | #HDI_TEXT
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],22
; item\fmt        = #HDF_BITMAP | #HDF_BITMAP_ON_RIGHT | #HDF_STRING 
  MOV    dword [rbp+28],28672
; item\pszText    = @Text$
  MOV    rax,qword [rsp+144]
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    qword [rbp+8],rax
; item\cchTextMax = Len(Text$)      
  PUSH   qword [rsp+144]
  POP    rcx
  CALL   PB_Len
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    dword [rbp+24],eax
; 
; If Direction = 1
  MOV    r15,qword [rsp+PS138+16]
  CMP    r15,1
  JNE   _EndIf79
; item\hbm = ImageID(UpImage)
  PUSH   qword [so_SetSortArrow_NoTheme.v_UpImage]
  POP    rcx
  CALL   PB_ImageID
  MOV    rax,rax
  PUSH   rax
  LEA    rbp,[rsp+72]
  POP    rax
  MOV    qword [rbp+16],rax
; Else
  JMP   _EndIf78
_EndIf79:
; item\hbm = ImageID(DownImage)
  PUSH   qword [so_SetSortArrow_NoTheme.v_DownImage]
  POP    rcx
  CALL   PB_ImageID
  MOV    rax,rax
  PUSH   rax
  LEA    rbp,[rsp+72]
  POP    rax
  MOV    qword [rbp+16],rax
; EndIf
_EndIf78:
; Else
  JMP   _EndIf76
_EndIf77:
; item\mask       = #HDI_FORMAT | #HDI_TEXT
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],6
; item\fmt        = #HDF_STRING 
  MOV    dword [rbp+28],16384
; item\pszText    = @Text$
  MOV    rax,qword [rsp+144]
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    qword [rbp+8],rax
; item\cchTextMax = Len(Text$)      
  PUSH   qword [rsp+144]
  POP    rcx
  CALL   PB_Len
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    dword [rbp+24],eax
; item\hbm        = 0
  MOV    qword [rbp+16],0
; EndIf
_EndIf76:
; 
; SendMessage_(Header, #HDM_SETITEM, i, @item)      
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+160]
  PUSH   qword 4620
  PUSH   qword [rsp+152]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; Next i
_NextContinue75:
  INC    qword [rsp+152]
  JNO   _For74
_Next75:
; EndIf  
_EndIf73:
; EndProcedure
_EndProcedureZero139:
  XOR    rax,rax
_EndProcedure139:
  PUSH   rax
  MOV    rcx,qword [rsp+152]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,168
  POP    r15
  POP    rbp
  RET
; Procedure Profiler_ScrollbarCallback(Window, Message, wParam, lParam)   
_Procedure584:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PUSH   r15
  PS584=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Result = 0
  MOV    qword [rsp+40],0
; 
; *Debugger.DebuggerData = GetWindowLongPtr_(Window, #GWL_USERDATA)
  PUSH   qword -21
  PUSH   qword [rsp+PS584+8]
  POP    rcx
  POP    rdx
  CALL   GetWindowLongPtrW
  MOV    qword [rsp+48],rax
; If *Debugger  
  CMP    qword [rsp+48],0
  JE    _EndIf2983
; 
; 
; 
; Result = CallWindowProc_(*Debugger\ProfilerScrollCallback, Window, Message, wParam, lParam)
  SUB    rsp,8
  PUSH   qword [rsp+PS584+32]
  PUSH   qword [rsp+PS584+32]
  PUSH   qword [rsp+PS584+32]
  PUSH   qword [rsp+PS584+32]
  MOV    rbp,qword [rsp+88]
  PUSH   qword [rbp+740]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   CallWindowProcW
  ADD    rsp,48
  MOV    qword [rsp+40],rax
; 
; 
; 
; If Message = #WM_HSCROLL Or Message = #WM_VSCROLL         
  MOV    r15,qword [rsp+PS584+8]
  CMP    r15,276
  JE     Ok314
  MOV    r15,qword [rsp+PS584+8]
  CMP    r15,277
  JE     Ok314
  JMP    No314
Ok314:
  MOV    rax,1
  JMP    End314
No314:
  XOR    rax,rax
End314:
  AND    rax,rax
  JE    _EndIf2985
; Profiler_DrawAll(*Debugger)
  PUSH   qword [rsp+48]
  POP    rcx
  CALL  _Procedure576
; EndIf      
_EndIf2985:
; Else
  JMP   _EndIf2982
_EndIf2983:
; Result = DefWindowProc_(Window, Message, wParam, lParam)
  PUSH   qword [rsp+PS584+24]
  PUSH   qword [rsp+PS584+24]
  PUSH   qword [rsp+PS584+24]
  PUSH   qword [rsp+PS584+24]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   DefWindowProcW
  MOV    qword [rsp+40],rax
; EndIf
_EndIf2982:
; 
; ProcedureReturn Result
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure585
; EndProcedure
_EndProcedureZero585:
  XOR    rax,rax
_EndProcedure585:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure VariableGadget_Sort(Gadget)
_Procedure272:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS272=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; *Gadget.VariableGadget = GetGadgetData(Gadget)
  PUSH   qword [rsp+PS272+0]
  POP    rcx
  CALL   PB_GetGadgetData
  MOV    qword [rsp+40],rax
; 
; CompilerIf #CompileWindows
; If *Gadget\SortColumn <> -1
  MOV    rbp,qword [rsp+40]
  MOVSXD r15,dword [rbp+44]
  CMP    r15,-1
  JE    _EndIf828
; SendMessage_(GadgetID(Gadget), #LVM_SORTITEMS, *Gadget, @VariableGadget_SortProc())
  LEA    rax,[_Procedure268]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+48]
  PUSH   qword 4144
  SUB    rsp,8
  PUSH   qword [rsp+PS272+32]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; EndIf
_EndIf828:
; 
; SetSortArrow(Gadget, *Gadget\SortColumn, *Gadget\SortDirection) 
  MOV    rbp,qword [rsp+40]
  MOVSXD rax,dword [rbp+48]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+48]
  MOVSXD rax,dword [rbp+44]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS272+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure142
; CompilerEndIf
; 
; CompilerIf #CompileMac
; EndProcedure
_EndProcedureZero273:
  XOR    rax,rax
_EndProcedure273:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure LibraryViewer_Init()
_Procedure64:
  PUSH   rbp
  PUSH   r15
  PS64=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Static IsInitialized
; 
; If IsInitialized = 0
  MOV    r15,qword [so_LibraryViewer_Init.v_IsInitialized]
  AND    r15,r15
  JNE   _EndIf2620
; 
; If ExamineDirectory(0, PureBasicPath$+#DEFAILT_LibraryViewerPlugin, "*."+#DEFAULT_DLLExtension)    
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rax,_S294
  PUSH   rax
  MOV    rcx,qword [v_PureBasicPath$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S293
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ExamineDirectory
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  AND    rax,rax
  JE    _EndIf2622
; 
; DeleteFile(PureBasicPath$+#DEFAILT_LibraryViewerPlugin+"LibraryViewer.log")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rcx,qword [v_PureBasicPath$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S288
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_DeleteFile
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; While NextDirectoryEntry(0)
_While2623:
  PUSH   qword 0
  POP    rcx
  CALL   PB_NextDirectoryEntry
  AND    rax,rax
  JE    _Wend2623
; entry = DirectoryEntryType(0)
  PUSH   qword 0
  POP    rcx
  CALL   PB_DirectoryEntryType
  MOV    qword [rsp+40],rax
; If entry = 1
  MOV    r15,qword [rsp+40]
  CMP    r15,1
  JNE   _EndIf2625
; 
; File$   = PureBasicPath$+#DEFAILT_LibraryViewerPlugin+DirectoryEntryName(0)
  MOV    rcx,qword [v_PureBasicPath$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S293
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 0
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DirectoryEntryName
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; Library = OpenLibrary(#PB_Any, File$)
  PUSH   qword [rsp+48]
  PUSH   qword -1
  POP    rcx
  POP    rdx
  CALL   PB_OpenLibrary
  MOV    qword [rsp+56],rax
; Success = 0
  MOV    qword [rsp+64],0
; 
; If Library
  CMP    qword [rsp+56],0
  JE    _EndIf2627
; 
; InitFunction.PLUGIN_InitLibraryPlugin = GetFunction(Library, "InitLibraryPlugin")
  MOV    rax,_S295
  PUSH   rax
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL   PB_GetFunction
  MOV    qword [rsp+72],rax
; If InitFunction
  CMP    qword [rsp+72],0
  JE    _EndIf2629
; LibraryID$ = Space(1000)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1000
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Space
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; If InitFunction(@LibraryID$)
  MOV    rax,qword [rsp+80]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   qword [rsp+72]
  AND    rax,rax
  JE    _EndIf2631
; LibraryID$ = PeekAscii(@LibraryID$) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  MOV    rax,qword [rsp+120]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  CALL   SYS_AllocateString4
; If Trim(LibraryID$) <> "" 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S3
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf2633
; 
; 
; 
; Success = 1 
  MOV    qword [rsp+64],1
; 
; AddElement(LibraryPlugins())
  PUSH   qword [t_LibraryPlugins]
  POP    rcx
  CALL   PB_AddElement
; LibraryPlugins()\LibraryID$      = LibraryID$
  MOV    rcx,qword [rsp+80]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [t_LibraryPlugins+8]
  LEA    rcx,[rbp+16]
  POP    rdx
  CALL   SYS_AllocateString4
; LibraryPlugins()\DllNumber       = Library
  PUSH   qword [rsp+56]
  POP    rax
  MOV    dword [rbp+24],eax
; LibraryPlugins()\EndViewer       = GetFunction(Library, "EndViewer")
  MOV    rax,_S296
  PUSH   rax
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL   PB_GetFunction
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    qword [rbp+28],rax
; LibraryPlugins()\DisplayObject   = GetFunction(Library, "DisplayObject")
  MOV    rax,_S297
  PUSH   rax
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL   PB_GetFunction
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    qword [rbp+36],rax
; LibraryPlugins()\RemoveObject    = GetFunction(Library, "RemoveObject")
  MOV    rax,_S298
  PUSH   rax
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL   PB_GetFunction
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    qword [rbp+44],rax
; LibraryPlugins()\GetObjectWidth  = GetFunction(Library, "GetObjectWidth")
  MOV    rax,_S299
  PUSH   rax
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL   PB_GetFunction
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    qword [rbp+52],rax
; LibraryPlugins()\GetObjectHeight = GetFunction(Library, "GetObjectHeight")
  MOV    rax,_S300
  PUSH   rax
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL   PB_GetFunction
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    qword [rbp+60],rax
; LibraryPlugins()\SetObjectSize   = GetFunction(Library, "SetObjectSize")
  MOV    rax,_S301
  PUSH   rax
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL   PB_GetFunction
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    qword [rbp+68],rax
; LibraryPlugins()\ProcessEvents   = GetFunction(Library, "ProcessEvents")
  MOV    rax,_S302
  PUSH   rax
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL   PB_GetFunction
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    qword [rbp+76],rax
; 
; 
; 
; If LibraryPlugins()\DisplayObject = 0
  MOV    r15,qword [rbp+36]
  AND    r15,r15
  JNE   _EndIf2635
; LibraryViewer_Init_Log(File$, "Function: DisplayObject(WindowID, *data, size)")          
  MOV    rax,_S303
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; LibraryViewer_Init_Log(File$, "  Required Function missing! Cannot use this plugin")
  MOV    rax,_S304
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; Success = 0
  MOV    qword [rsp+64],0
; EndIf
_EndIf2635:
; 
; If LibraryPlugins()\RemoveObject = 0
  MOV    rbp,qword [t_LibraryPlugins+8]
  MOV    r15,qword [rbp+44]
  AND    r15,r15
  JNE   _EndIf2637
; LibraryViewer_Init_Log(File$, "Function: RemoveObject(*Object)")          
  MOV    rax,_S305
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; LibraryViewer_Init_Log(File$, "  Required Function missing! Cannot use this plugin")
  MOV    rax,_S304
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; Success = 0
  MOV    qword [rsp+64],0
; EndIf
_EndIf2637:
; 
; If LibraryPlugins()\SetObjectSize = 0
  MOV    rbp,qword [t_LibraryPlugins+8]
  MOV    r15,qword [rbp+68]
  AND    r15,r15
  JNE   _EndIf2639
; 
; If LibraryPlugins()\GetObjectWidth = 0
  MOV    rbp,qword [t_LibraryPlugins+8]
  MOV    r15,qword [rbp+52]
  AND    r15,r15
  JNE   _EndIf2641
; LibraryViewer_Init_Log(File$, "Function: GetObjectWidth(*Object)")          
  MOV    rax,_S306
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; LibraryViewer_Init_Log(File$, "  Required Function missing! Cannot use this plugin")
  MOV    rax,_S304
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; LibraryViewer_Init_Log(File$, "  Optionally, SetObjectSize() could be implemented instead.")
  MOV    rax,_S307
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; Success = 0
  MOV    qword [rsp+64],0
; EndIf
_EndIf2641:
; 
; If LibraryPlugins()\GetObjectHeight = 0
  MOV    rbp,qword [t_LibraryPlugins+8]
  MOV    r15,qword [rbp+60]
  AND    r15,r15
  JNE   _EndIf2643
; LibraryViewer_Init_Log(File$, "Function: GetObjectHeight(*Object)")                          
  MOV    rax,_S308
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; LibraryViewer_Init_Log(File$, "  Required Function missing! Cannot use this plugin")    
  MOV    rax,_S304
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; LibraryViewer_Init_Log(File$, "  Optionally, SetObjectSize() could be implemented instead.")
  MOV    rax,_S307
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; Success = 0
  MOV    qword [rsp+64],0
; EndIf  
_EndIf2643:
; Else                    
  JMP   _EndIf2638
_EndIf2639:
; If LibraryPlugins()\GetObjectWidth = 0
  MOV    rbp,qword [t_LibraryPlugins+8]
  MOV    r15,qword [rbp+52]
  AND    r15,r15
  JNE   _EndIf2646
; LibraryViewer_Init_Log(File$, "Function: GetObjectWidth(*Object)")          
  MOV    rax,_S306
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; LibraryViewer_Init_Log(File$, "  SetObjectSize() is already implemented. This function is ignored.")                      
  MOV    rax,_S309
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; EndIf
_EndIf2646:
; 
; If LibraryPlugins()\GetObjectHeight = 0
  MOV    rbp,qword [t_LibraryPlugins+8]
  MOV    r15,qword [rbp+60]
  AND    r15,r15
  JNE   _EndIf2648
; LibraryViewer_Init_Log(File$, "Function: GetObjectHeight(*Object)")                          
  MOV    rax,_S308
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; LibraryViewer_Init_Log(File$, "  SetObjectSize() is already implemented. This function is ignored.")
  MOV    rax,_S309
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; EndIf  
_EndIf2648:
; EndIf
_EndIf2638:
; 
; 
; 
; If Success = 0  
  MOV    r15,qword [rsp+64]
  AND    r15,r15
  JNE   _EndIf2650
; If LibraryPlugins()\EndViewer
  MOV    rbp,qword [t_LibraryPlugins+8]
  CMP    qword [rbp+28],0
  JE    _EndIf2652
; LibraryPlugins()\EndViewer()
  MOV    rbp,qword [t_LibraryPlugins+8]
  PUSH   qword [rbp+28]
  SUB    rsp,8
  SUB    rsp,32
  CALL   qword [rsp+40]
  ADD    rsp,40
  ADD    rsp,8
; EndIf
_EndIf2652:
; DeleteElement(LibraryPlugins())
  PUSH   qword [t_LibraryPlugins]
  POP    rcx
  CALL   PB_DeleteElement
; EndIf
_EndIf2650:
; 
; Else
  JMP   _EndIf2632
_EndIf2633:
; LibraryViewer_Init_Log(File$, "Function: InitLibraryPlugin(*IdBuffer)")          
  MOV    rax,_S310
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; LibraryViewer_Init_Log(File$, "  *IdBuffer is empty. A Library ID String must be put there.")                
  MOV    rax,_S311
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; EndIf
_EndIf2632:
; Else
  JMP   _EndIf2630
_EndIf2631:
; LibraryViewer_Init_Log(File$, "Function: InitLibraryPlugin(*IdBuffer)")          
  MOV    rax,_S310
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; LibraryViewer_Init_Log(File$, "  Returnvalue was 0! Plugin not correctly initialized.")                
  MOV    rax,_S312
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; EndIf              
_EndIf2630:
; Else
  JMP   _EndIf2628
_EndIf2629:
; LibraryViewer_Init_Log(File$, "Function: InitLibraryPlugin(*IdBuffer)")          
  MOV    rax,_S310
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; LibraryViewer_Init_Log(File$, "  Init function missing! Not a valid LibraryViewer Plugin DLL.")                        
  MOV    rax,_S313
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; EndIf
_EndIf2628:
; 
; If Success = 0  
  MOV    r15,qword [rsp+64]
  AND    r15,r15
  JNE   _EndIf2657
; CloseLibrary(Library)
  PUSH   qword [rsp+56]
  POP    rcx
  CALL   PB_CloseLibrary
; EndIf
_EndIf2657:
; Else
  JMP   _EndIf2626
_EndIf2627:
; LibraryViewer_Init_Log(File$, "Cannot load the DLL!")
  MOV    rax,_S314
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure546
; EndIf
_EndIf2626:
; 
; EndIf
_EndIf2625:
; Wend
  JMP   _While2623
_Wend2623:
; 
; FinishDirectory(0)
  PUSH   qword 0
  POP    rcx
  CALL   PB_FinishDirectory
; EndIf
_EndIf2622:
; 
; IsInitialized = 1
  MOV    qword [so_LibraryViewer_Init.v_IsInitialized],1
; EndIf
_EndIf2620:
; 
; EndProcedure
_EndProcedureZero65:
  XOR    rax,rax
_EndProcedure65:
  PUSH   rax
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+88]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure Network_ReadCommandCrypt(*This.Network_Communication, *Command.CommandInfo, *pCommandData.INTEGER)
_Procedure398:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS398=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Protected CommandCrypt.CommandInfo
; 
; If Network_ReceiveData(*This\Socket, @CommandCrypt, SizeOf(CommandInfo)) = 0
  PUSH   qword 20
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS398+16]
  PUSH   qword [rbp+60]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   Network_ReceiveData
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1314
; ProcedureReturn #False
  XOR    rax,rax
  JMP   _EndProcedure399
; EndIf
_EndIf1314:
; 
; rijndael_cbc_decrypt(@*This\CryptContext, @CommandCrypt, *Command, SizeOf(CommandInfo), @*This\InitializerDecrypt)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS398+8]
  LEA    rax,[rbp+740]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 20
  PUSH   qword [rsp+PS398+32]
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS398+40]
  LEA    rax,[rbp+148]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   rijndael_cbc_decrypt
  MOVSXD rax,eax
  ADD    rsp,48
; 
; 
; 
; If *Command\DataSize > 0
  MOV    rbp,qword [rsp+PS398+8]
  MOVSXD r15,dword [rbp+4]
  AND    r15,r15
  JLE   _EndIf1316
; 
; 
; If *Command\DataSize < 16
  MOV    rbp,qword [rsp+PS398+8]
  MOVSXD r15,dword [rbp+4]
  CMP    r15,16
  JGE   _EndIf1318
; Size = 16
  MOV    qword [rsp+64],16
; Else
  JMP   _EndIf1317
_EndIf1318:
; Size = *Command\DataSize
  MOV    rbp,qword [rsp+PS398+8]
  MOVSXD rax,dword [rbp+4]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+64],rax
; EndIf
_EndIf1317:
; 
; *pCommandData\i   = AllocateMemory(Size)
  PUSH   qword [rsp+64]
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS398+24]
  POP    rax
  MOV    qword [rbp],rax
; *CommandDataCrypt = AllocateMemory(Size)
  PUSH   qword [rsp+64]
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+72],rax
; If *pCommandData\i = 0 Or *CommandDataCrypt = 0
  MOV    rbp,qword [rsp+PS398+16]
  MOV    r15,qword [rbp]
  AND    r15,r15
  JE     Ok194
  MOV    r15,qword [rsp+72]
  AND    r15,r15
  JE     Ok194
  JMP    No194
Ok194:
  MOV    rax,1
  JMP    End194
No194:
  XOR    rax,rax
End194:
  AND    rax,rax
  JE    _EndIf1321
; ProcedureReturn #False
  XOR    rax,rax
  JMP   _EndProcedure399
; EndIf
_EndIf1321:
; 
; If Network_ReceiveData(*This\Socket, *CommandDataCrypt, Size) = 0
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+80]
  MOV    rbp,qword [rsp+PS398+16]
  PUSH   qword [rbp+60]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   Network_ReceiveData
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1323
; FreeMemory(*pCommandData\i)
  MOV    rbp,qword [rsp+PS398+16]
  PUSH   qword [rbp]
  POP    rcx
  CALL   PB_FreeMemory
; FreeMemory(*CommandDataCrypt)
  PUSH   qword [rsp+72]
  POP    rcx
  CALL   PB_FreeMemory
; *pCommandData\i = 0
  MOV    rbp,qword [rsp+PS398+16]
  MOV    qword [rbp],0
; ProcedureReturn #False
  XOR    rax,rax
  JMP   _EndProcedure399
; EndIf
_EndIf1323:
; 
; rijndael_cbc_decrypt(@*This\CryptContext, *CommandDataCrypt, *pCommandData\i, Size, @*This\InitializerDecrypt)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS398+8]
  LEA    rax,[rbp+740]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+80]
  MOV    rbp,qword [rsp+PS398+40]
  PUSH   qword [rbp]
  PUSH   qword [rsp+104]
  MOV    rbp,qword [rsp+PS398+40]
  LEA    rax,[rbp+148]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   rijndael_cbc_decrypt
  MOVSXD rax,eax
  ADD    rsp,48
; 
; 
; 
; FreeMemory(*CommandDataCrypt)
  PUSH   qword [rsp+72]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf1316:
; 
; ProcedureReturn #True  
  MOV    rax,1
  JMP   _EndProcedure399
; EndProcedure
_EndProcedureZero399:
  XOR    rax,rax
_EndProcedure399:
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure VariableGadget_Compare(*Gadget.VariableGadget, index1, index2)
_Procedure266:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS266=224
  MOV    rax,19
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; *items.VariableGadget_ItemList = *Gadget\Items    
  MOV    rbp,qword [rsp+PS266+0]
  PUSH   qword [rbp+16]
  POP    rax
  MOV    qword [rsp+40],rax
; *entry1.VariableGadget_Entry   = @*items\item[index1]
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS266+16]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rax,[rbp]
  MOV    qword [rsp+48],rax
; *entry2.VariableGadget_Entry   = @*items\item[index2]  
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+PS266+24]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rax,[rbp]
  MOV    qword [rsp+56],rax
; 
; If *entry1\Parent = -1 And *entry2\Parent = -1
  MOV    rbp,qword [rsp+48]
  MOVSXD r15,dword [rbp+6]
  CMP    r15,-1
  JNE    No150
  MOV    rbp,qword [rsp+56]
  MOVSXD r15,dword [rbp+6]
  CMP    r15,-1
  JNE    No150
Ok150:
  MOV    rax,1
  JMP    End150
No150:
  XOR    rax,rax
End150:
  AND    rax,rax
  JE    _EndIf763
; 
; 
; 
; 
; 
; If *Gadget\IndexSort
  MOV    rbp,qword [rsp+PS266+0]
  CMP    dword [rbp+52],0
  JE    _EndIf765
; NameResult = (index1 - index2) * *Gadget\SortDirection 
  MOV    r15,qword [rsp+PS266+8]
  SUB    r15,qword [rsp+PS266+16]
  MOV    rbp,qword [rsp+PS266+0]
  MOVSXD rax,dword [rbp+48]
  IMUL   r15,rax
  MOV    qword [rsp+64],r15
; Else
  JMP   _EndIf764
_EndIf765:
; 
; *Name1 = @*entry1\Name$
  MOV    rbp,qword [rsp+48]
  MOV    rax,qword [rbp+10]
  MOV    qword [rsp+72],rax
; If PeekC(*Name1) = '*'
  PUSH   qword [rsp+72]
  POP    rcx
  CALL   PB_PeekC
  MOV    r15,rax
  CMP    r15,42
  JNE   _EndIf768
; *Name1 + SizeOf(Character)
  MOV    r15,qword [rsp+72]
  ADD    r15,2
  MOV    qword [rsp+72],r15
; EndIf
_EndIf768:
; 
; *Name2 = @*entry2\Name$
  MOV    rbp,qword [rsp+56]
  MOV    rax,qword [rbp+10]
  MOV    qword [rsp+80],rax
; If PeekC(*Name2) = '*'
  PUSH   qword [rsp+80]
  POP    rcx
  CALL   PB_PeekC
  MOV    r15,rax
  CMP    r15,42
  JNE   _EndIf770
; *Name2 + SizeOf(Character)
  MOV    r15,qword [rsp+80]
  ADD    r15,2
  MOV    qword [rsp+80],r15
; EndIf   
_EndIf770:
; 
; NameResult =  CompareMemoryString(*Name1, *Name2, #PB_String_NoCase) * *Gadget\SortDirection 
  PUSH   qword 1
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CompareMemoryString2
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS266+0]
  MOVSXD rax,dword [rbp+48]
  IMUL   r15,rax
  MOV    qword [rsp+64],r15
; EndIf
_EndIf764:
; 
; If *Gadget\SortColumn = *Gadget\ExtraColumns 
  MOV    rbp,qword [rsp+PS266+0]
  MOVSXD r15,dword [rbp+44]
  MOV    rbp,qword [rsp+PS266+0]
  CMP    r15d,dword [rbp+8]
  JNE   _EndIf772
; ProcedureReturn NameResult
  MOV    rax,qword [rsp+64]
  JMP   _EndProcedure267
; 
; ElseIf *Gadget\SortColumn = *Gadget\ExtraColumns+1 
  JMP   _EndIf771
_EndIf772:
  MOV    rbp,qword [rsp+PS266+0]
  MOVSXD r15,dword [rbp+44]
  MOV    rbp,qword [rsp+PS266+0]
  MOVSXD r14,dword [rbp+8]
  INC    r14
  CMP    r15,r14
  JNE   _EndIf773
; 
; If *entry1\Value$ = "---" 
  MOV    rbp,qword [rsp+48]
  PUSH   qword [rbp+18]
  MOV    rcx,_S87
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf775
; If *entry2\Value$ <> "---"
  MOV    rbp,qword [rsp+56]
  PUSH   qword [rbp+18]
  MOV    rcx,_S87
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf777
; ProcedureReturn 1
  MOV    rax,1
  JMP   _EndProcedure267
; EndIf
_EndIf777:
; ElseIf *entry2\Value$ = "---"
  JMP   _EndIf774
_EndIf775:
  MOV    rbp,qword [rsp+56]
  PUSH   qword [rbp+18]
  MOV    rcx,_S87
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf778
; ProcedureReturn -1
  MOV    rax,-1
  JMP   _EndProcedure267
; EndIf              
_EndIf774:
_EndIf778:
; 
; 
; Type1 = VariableGadget_SortType(*entry1\Type)
  MOV    rbp,qword [rsp+48]
  MOVSX  rax,byte [rbp+1]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure264
  MOV    qword [rsp+88],rax
; Type2 = VariableGadget_SortType(*entry2\Type)
  MOV    rbp,qword [rsp+56]
  MOVSX  rax,byte [rbp+1]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure264
  MOV    qword [rsp+96],rax
; 
; If Type1 <> Type2
  MOV    r15,qword [rsp+88]
  CMP    r15,qword [rsp+96]
  JE    _EndIf780
; ProcedureReturn (Type1 - Type2) * *Gadget\SortDirection
  MOV    r15,qword [rsp+88]
  SUB    r15,qword [rsp+96]
  MOV    rbp,qword [rsp+PS266+0]
  MOVSXD rax,dword [rbp+48]
  IMUL   r15,rax
  MOV    rax,r15
  JMP   _EndProcedure267
; 
; ElseIf Type1 = #SORTTYPE_Structure 
  JMP   _EndIf779
_EndIf780:
  MOV    r15,qword [rsp+88]
  CMP    r15,14
  JNE   _EndIf781
; Struct1$ = StringField(*entry1\Name$, 2, ".")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S52
  PUSH   rax
  PUSH   qword 2
  MOV    rbp,qword [rsp+88]
  PUSH   qword [rbp+10]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  LEA    rcx,[rsp+112]
  POP    rdx
  CALL   SYS_AllocateString4
; Struct2$ = StringField(*entry2\Name$, 2, ".")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S52
  PUSH   rax
  PUSH   qword 2
  MOV    rbp,qword [rsp+96]
  PUSH   qword [rbp+10]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  LEA    rcx,[rsp+120]
  POP    rdx
  CALL   SYS_AllocateString4
; Result = CompareMemoryString(@Struct1$, @Struct2$, #PB_String_NoCase) * *Gadget\SortDirection
  PUSH   qword 1
  MOV    rax,qword [rsp+120]
  MOV    rax,rax
  PUSH   rax
  MOV    rax,qword [rsp+120]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CompareMemoryString2
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS266+0]
  MOVSXD rax,dword [rbp+48]
  IMUL   r15,rax
  MOV    qword [rsp+120],r15
; If Result = 0
  MOV    r15,qword [rsp+120]
  AND    r15,r15
  JNE   _EndIf783
; ProcedureReturn NameResult
  MOV    rax,qword [rsp+64]
  JMP   _EndProcedure267
; Else
  JMP   _EndIf782
_EndIf783:
; ProcedureReturn Result
  MOV    rax,qword [rsp+120]
  JMP   _EndProcedure267
; EndIf            
_EndIf782:
; 
; ElseIf *entry1\Value$ = *entry2\Value$ Or Type1 = #SORTTYPE_Unknown 
  JMP   _EndIf779
_EndIf781:
  MOV    rbp,qword [rsp+48]
  PUSH   qword [rbp+18]
  MOV    rbp,qword [rsp+64]
  MOV    rcx,qword [rbp+18]
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE    Ok151
  MOV    r15,qword [rsp+88]
  AND    r15,r15
  JE     Ok151
  JMP    No151
Ok151:
  MOV    rax,1
  JMP    End151
No151:
  XOR    rax,rax
End151:
  AND    rax,rax
  JE    _EndIf785
; ProcedureReturn NameResult
  MOV    rax,qword [rsp+64]
  JMP   _EndProcedure267
; 
; ElseIf Type1 <= #SORTTYPE_Pointer 
  JMP   _EndIf779
_EndIf785:
  MOV    r15,qword [rsp+88]
  CMP    r15,9
  JG    _EndIf786
; If VariableIsHex
  CMP    qword [v_VariableIsHex],0
  JE    _EndIf788
; Quad1.q = Val("$" + *entry1\Value$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S20
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+72]
  MOV    rcx,qword [rbp+18]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+128],rax
; Quad2.q = Val("$" + *entry2\Value$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S20
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+80]
  MOV    rcx,qword [rbp+18]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+136],rax
; Else
  JMP   _EndIf787
_EndIf788:
; Quad1.q = Val(*entry1\Value$)
  MOV    rbp,qword [rsp+48]
  PUSH   qword [rbp+18]
  POP    rcx
  CALL   PB_Val
  MOV    qword [rsp+128],rax
; Quad2.q = Val(*entry2\Value$)            
  MOV    rbp,qword [rsp+56]
  PUSH   qword [rbp+18]
  POP    rcx
  CALL   PB_Val
  MOV    qword [rsp+136],rax
; EndIf
_EndIf787:
; 
; 
; If Quad1 = Quad2
  MOV    r15,qword [rsp+128]
  CMP    r15,qword [rsp+136]
  JNE   _EndIf791
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure267
; ElseIf Quad1 < Quad2
  JMP   _EndIf790
_EndIf791:
  MOV    r15,qword [rsp+128]
  CMP    r15,qword [rsp+136]
  JGE   _EndIf792
; ProcedureReturn (-1) * *Gadget\SortDirection
  MOV    rbp,qword [rsp+PS266+0]
  MOVSXD r15,dword [rbp+48]
  IMUL   r15,-1
  MOV    rax,r15
  JMP   _EndProcedure267
; Else
  JMP   _EndIf790
_EndIf792:
; ProcedureReturn *Gadget\SortDirection
  MOV    rbp,qword [rsp+PS266+0]
  MOVSXD rax,dword [rbp+48]
  JMP   _EndProcedure267
; EndIf
_EndIf790:
; 
; ElseIf Type1 <= #SORTTYPE_Double  
  JMP   _EndIf779
_EndIf786:
  MOV    r15,qword [rsp+88]
  CMP    r15,11
  JG    _EndIf794
; Double1.d = ValD(*entry1\Value$)
  MOV    rbp,qword [rsp+48]
  PUSH   qword [rbp+18]
  POP    rcx
  CALL   PB_ValD
  MOVSD  [rsp-8],xmm0
  FLD    qword [rsp-8]
  FSTP   qword [rsp+144]
; Double2.d = ValD(*entry2\Value$)
  MOV    rbp,qword [rsp+56]
  PUSH   qword [rbp+18]
  POP    rcx
  CALL   PB_ValD
  MOVSD  [rsp-8],xmm0
  FLD    qword [rsp-8]
  FSTP   qword [rsp+152]
; 
; If Double1 = Double2
  FLD    qword [rsp+144]
  FLD    qword [rsp+152]
  FCOMPP
  FNSTSW ax
  TEST   ah,40h
  JE    _EndIf796
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure267
; ElseIf Double1 < Double2
  JMP   _EndIf795
_EndIf796:
  FLD    qword [rsp+144]
  FLD    qword [rsp+152]
  FCOMPP
  FNSTSW ax
  TEST   ah,41h
  JNE   _EndIf797
; ProcedureReturn (-1) * *Gadget\SortDirection
  MOV    rbp,qword [rsp+PS266+0]
  MOVSXD r15,dword [rbp+48]
  IMUL   r15,-1
  MOV    rax,r15
  JMP   _EndProcedure267
; Else
  JMP   _EndIf795
_EndIf797:
; ProcedureReturn *Gadget\SortDirection
  MOV    rbp,qword [rsp+PS266+0]
  MOVSXD rax,dword [rbp+48]
  JMP   _EndProcedure267
; EndIf          
_EndIf795:
; 
; Else 
  JMP   _EndIf779
_EndIf794:
; ProcedureReturn CompareMemoryString(@*entry1\Value$, @*entry2\Value$) * *Gadget\SortDirection 
  MOV    rbp,qword [rsp+56]
  MOV    rax,qword [rbp+18]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  MOV    rax,qword [rbp+18]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_CompareMemoryString
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS266+0]
  MOVSXD rax,dword [rbp+48]
  IMUL   r15,rax
  MOV    rax,r15
  JMP   _EndProcedure267
; 
; EndIf
_EndIf779:
; 
; Else  
  JMP   _EndIf771
_EndIf773:
; Extra1$ = StringField(*entry1\Extra$, *Gadget\SortColumn+1, Chr(10))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S88
  PUSH   rax
  MOV    rbp,qword [rsp+PS266+32]
  MOVSXD r15,dword [rbp+44]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+88]
  PUSH   qword [rbp+26]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  LEA    rcx,[rsp+168]
  POP    rdx
  CALL   SYS_AllocateString4
; Extra2$ = StringField(*entry2\Extra$, *Gadget\SortColumn+1, Chr(10))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S88
  PUSH   rax
  MOV    rbp,qword [rsp+PS266+32]
  MOVSXD r15,dword [rbp+44]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+96]
  PUSH   qword [rbp+26]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  LEA    rcx,[rsp+176]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; Result = CompareMemoryString(@Extra1$, @Extra2$, #PB_String_NoCase)
  PUSH   qword 1
  MOV    rax,qword [rsp+176]
  MOV    rax,rax
  PUSH   rax
  MOV    rax,qword [rsp+176]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CompareMemoryString2
  MOV    qword [rsp+120],rax
; If Result = #PB_String_Equal
  MOV    r15,qword [rsp+120]
  AND    r15,r15
  JNE   _EndIf802
; ProcedureReturn NameResult
  MOV    rax,qword [rsp+64]
  JMP   _EndProcedure267
; Else
  JMP   _EndIf801
_EndIf802:
; ProcedureReturn Result * *Gadget\SortDirection
  MOV    r15,qword [rsp+120]
  MOV    rbp,qword [rsp+PS266+0]
  MOVSXD rax,dword [rbp+48]
  IMUL   r15,rax
  MOV    rax,r15
  JMP   _EndProcedure267
; EndIf
_EndIf801:
; EndIf           
_EndIf771:
; 
; Else
  JMP   _EndIf762
_EndIf763:
; 
; 
; topindex1 = index1
  PUSH   qword [rsp+PS266+8]
  POP    rax
  MOV    qword [rsp+176],rax
; While *items\item[topindex1]\Parent <> -1
_While805:
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+184]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSXD r15,dword [rbp+6]
  CMP    r15,-1
  JE    _Wend805
; topindex1 = *items\item[topindex1]\Parent 
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+184]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp+6]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+176],rax
; Wend
  JMP   _While805
_Wend805:
; 
; topindex2 = index2
  PUSH   qword [rsp+PS266+16]
  POP    rax
  MOV    qword [rsp+184],rax
; While *items\item[topindex2]\Parent <> -1
_While806:
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+192]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSXD r15,dword [rbp+6]
  CMP    r15,-1
  JE    _Wend806
; topindex2 = *items\item[topindex2]\Parent 
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+192]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp+6]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+184],rax
; Wend    
  JMP   _While806
_Wend806:
; 
; If topindex1 = topindex2
  MOV    r15,qword [rsp+176]
  CMP    r15,qword [rsp+184]
  JNE   _EndIf808
; 
; 
; 
; ProcedureReturn index1 - index2
  MOV    r15,qword [rsp+PS266+8]
  SUB    r15,qword [rsp+PS266+16]
  MOV    rax,r15
  JMP   _EndProcedure267
; 
; Else
  JMP   _EndIf807
_EndIf808:
; 
; ProcedureReturn VariableGadget_Compare(*Gadget, topindex1, topindex2)
  PUSH   qword [rsp+184]
  PUSH   qword [rsp+184]
  PUSH   qword [rsp+PS266+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure266
  JMP   _EndProcedure267
; EndIf
_EndIf807:
; EndIf
_EndIf762:
; 
; ProcedureReturn Result
  MOV    rax,qword [rsp+120]
  JMP   _EndProcedure267
; EndProcedure
_EndProcedureZero267:
  XOR    rax,rax
_EndProcedure267:
  PUSH   rax
  MOV    rcx,qword [rsp+112]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+120]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+168]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+176]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,192
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure Plugin_Image_DisplayObject(WindowID, *Buffer, Size)
_Procedure626:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS626=160
  MOV    rax,11
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; *Header.PB_LibraryViewer_Image = *Buffer    
  PUSH   qword [rsp+PS626+8]
  POP    rax
  MOV    qword [rsp+40],rax
; Success = 0
  MOV    qword [rsp+48],0
; 
; If *Buffer And Size > 0  
  CMP    qword [rsp+PS626+8],0
  JE     No344
  MOV    r15,qword [rsp+PS626+16]
  AND    r15,r15
  JLE    No344
Ok344:
  MOV    rax,1
  JMP    End344
No344:
  XOR    rax,rax
End344:
  AND    rax,rax
  JE    _EndIf3326
; *Object = CreateImage(#PB_Any, *Header\Width, *Header\Height, *Header\BytesPerPixel * 8)
  MOV    rbp,qword [rsp+40]
  MOVSXD r15,dword [rbp+4]
  SAL    r15,3
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+48]
  MOVSXD rax,dword [rbp+16]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  MOVSXD rax,dword [rbp+12]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_CreateImage2
  MOV    qword [rsp+56],rax
; If *Object And StartDrawing(ImageOutput(*Object))
  CMP    qword [rsp+56],0
  JE     No345
  PUSH   qword [rsp+56]
  POP    rcx
  CALL   PB_ImageOutput
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_StartDrawing
  AND    rax,rax
  JE     No345
Ok345:
  MOV    rax,1
  JMP    End345
No345:
  XOR    rax,rax
End345:
  AND    rax,rax
  JE    _EndIf3328
; *OutputBuffer = DrawingBuffer()
  CALL   PB_DrawingBuffer
  MOV    qword [rsp+64],rax
; OutputFormat  = DrawingBufferPixelFormat()
  CALL   PB_DrawingBufferPixelFormat
  MOV    qword [rsp+72],rax
; OutputPitch   = DrawingBufferPitch()
  CALL   PB_DrawingBufferPitch
  MOV    qword [rsp+80],rax
; 
; If *OutputBuffer
  CMP    qword [rsp+64],0
  JE    _EndIf3330
; 
; 
; If OutputFormat & #PB_PixelFormat_ReversedY          
  MOV    r15,qword [rsp+72]
  AND    r15,32768
  AND    r15,r15
  JE    _EndIf3332
; *OutputBuffer + (*Header\Height-1) * OutputPitch
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [rsp+40]
  MOVSXD r14,dword [rbp+16]
  DEC    r14
  IMUL   r14,qword [rsp+80]
  ADD    r15,r14
  MOV    qword [rsp+64],r15
; OutputPitch  = -OutputPitch
  MOV    r15,qword [rsp+80]
  NEG    r15
  MOV    qword [rsp+80],r15
; OutputFormat = OutputFormat & (~#PB_PixelFormat_ReversedY)
  MOV    r15,qword [rsp+72]
  AND    r15,-32769
  MOV    qword [rsp+72],r15
; EndIf
_EndIf3332:
; 
; *InputBuffer = *Buffer + SizeOf(PB_LibraryViewer_Image)  
  MOV    r15,qword [rsp+PS626+8]
  ADD    r15,20
  MOV    qword [rsp+88],r15
; 
; 
; 
; 
; 
; For y = 0 To *Header\Height-1
  MOV    qword [rsp+96],0
  JMP   _ForSkipDebug3333
_For3333:
_ForSkipDebug3333:
  MOV    rbp,qword [rsp+40]
  MOVSXD r15,dword [rbp+16]
  DEC    r15
  CMP    r15,qword [rsp+96]
  JL    _Next3334
; *Input.Local_Array  = *InputBuffer + (y * *Header\Pitch)
  MOV    r15,qword [rsp+88]
  MOV    r14,qword [rsp+96]
  MOV    rbp,qword [rsp+40]
  MOVSXD rax,dword [rbp+8]
  IMUL   r14,rax
  ADD    r15,r14
  MOV    qword [rsp+104],r15
; *Output.Local_Array = *OutputBuffer + (y * OutputPitch)
  MOV    r15,qword [rsp+64]
  MOV    r14,qword [rsp+96]
  IMUL   r14,qword [rsp+80]
  ADD    r15,r14
  MOV    qword [rsp+112],r15
; 
; If OutputFormat = *Header\Format
  MOV    r15,qword [rsp+72]
  MOV    rbp,qword [rsp+40]
  MOVSXD rax,dword [rbp]
  CMP    r15,rax
  JNE   _EndIf3336
; CopyMemory(*Input, *Output, *Header\Width * *Header\BytesPerPixel)
  MOV    rbp,qword [rsp+40]
  MOVSXD r15,dword [rbp+12]
  MOV    rbp,qword [rsp+40]
  MOVSXD rax,dword [rbp+4]
  IMUL   r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+120]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CopyMemory
; 
; ElseIf *Header\BytesPerPixel = 3 
  JMP   _EndIf3335
_EndIf3336:
  MOV    rbp,qword [rsp+40]
  MOVSXD r15,dword [rbp+4]
  CMP    r15,3
  JNE   _EndIf3337
; 
; CompilerIf #CompileMac 
; For x = 1 To *Header\Width
  MOV    qword [rsp+120],1
  JMP   _ForSkipDebug3338
_For3338:
_ForSkipDebug3338:
  MOV    rbp,qword [rsp+40]
  MOVSXD rax,dword [rbp+12]
  CMP    rax,qword [rsp+120]
  JL    _Next3339
; *Output\b[0] = *Input\b[2]
  MOV    rbp,qword [rsp+104]
  PUSH   rbp
  POP    rbp
  MOVSX  rax,byte [rbp+2]
  PUSH   rax
  MOV    rbp,qword [rsp+120]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    byte [rbp],al
; *Output\b[1] = *Input\b[1]
  MOV    rbp,qword [rsp+104]
  PUSH   rbp
  POP    rbp
  MOVSX  rax,byte [rbp+1]
  PUSH   rax
  MOV    rbp,qword [rsp+120]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    byte [rbp+1],al
; *Output\b[2] = *Input\b[0]
  MOV    rbp,qword [rsp+104]
  PUSH   rbp
  POP    rbp
  MOVSX  rax,byte [rbp]
  PUSH   rax
  MOV    rbp,qword [rsp+120]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    byte [rbp+2],al
; 
; *Input + 3
  MOV    r15,qword [rsp+104]
  ADD    r15,3
  MOV    qword [rsp+104],r15
; *Output + 3
  MOV    r15,qword [rsp+112]
  ADD    r15,3
  MOV    qword [rsp+112],r15
; Next x
_NextContinue3339:
  INC    qword [rsp+120]
  JNO   _For3338
_Next3339:
; 
; CompilerEndIf
; 
; Else
  JMP   _EndIf3335
_EndIf3337:
; For x = 1 To *Header\Width
  MOV    qword [rsp+120],1
  JMP   _ForSkipDebug3341
_For3341:
_ForSkipDebug3341:
  MOV    rbp,qword [rsp+40]
  MOVSXD rax,dword [rbp+12]
  CMP    rax,qword [rsp+120]
  JL    _Next3342
; *Output\b[0] = *Input\b[2]
  MOV    rbp,qword [rsp+104]
  PUSH   rbp
  POP    rbp
  MOVSX  rax,byte [rbp+2]
  PUSH   rax
  MOV    rbp,qword [rsp+120]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    byte [rbp],al
; *Output\b[1] = *Input\b[1]
  MOV    rbp,qword [rsp+104]
  PUSH   rbp
  POP    rbp
  MOVSX  rax,byte [rbp+1]
  PUSH   rax
  MOV    rbp,qword [rsp+120]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    byte [rbp+1],al
; *Output\b[2] = *Input\b[0]
  MOV    rbp,qword [rsp+104]
  PUSH   rbp
  POP    rbp
  MOVSX  rax,byte [rbp]
  PUSH   rax
  MOV    rbp,qword [rsp+120]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    byte [rbp+2],al
; *Output\b[3] = *Input\b[3] 
  MOV    rbp,qword [rsp+104]
  PUSH   rbp
  POP    rbp
  MOVSX  rax,byte [rbp+3]
  PUSH   rax
  MOV    rbp,qword [rsp+120]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    byte [rbp+3],al
; 
; *Input + 4
  MOV    r15,qword [rsp+104]
  ADD    r15,4
  MOV    qword [rsp+104],r15
; *Output + 4
  MOV    r15,qword [rsp+112]
  ADD    r15,4
  MOV    qword [rsp+112],r15
; Next x    
_NextContinue3342:
  INC    qword [rsp+120]
  JNO   _For3341
_Next3342:
; 
; EndIf        
_EndIf3335:
; Next y    
_NextContinue3334:
  INC    qword [rsp+96]
  JNO   _For3333
_Next3334:
; 
; Success = 1
  MOV    qword [rsp+48],1
; EndIf
_EndIf3330:
; StopDrawing()
  CALL   PB_StopDrawing
; EndIf
_EndIf3328:
; EndIf
_EndIf3326:
; 
; If Success     
  CMP    qword [rsp+48],0
  JE    _EndIf3344
; 
; ImageGadget(#PB_Any, 0, 0, *Header\Width, *Header\Height, ImageID(*Object))  
  PUSH   qword [rsp+56]
  POP    rcx
  CALL   PB_ImageID
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+48]
  MOVSXD rax,dword [rbp+16]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  MOVSXD rax,dword [rbp+12]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ImageGadget
  ADD    rsp,48
; 
; 
; ProcedureReturn *Object
  MOV    rax,qword [rsp+56]
  JMP   _EndProcedure627
; Else
  JMP   _EndIf3343
_EndIf3344:
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure627
; EndIf
_EndIf3343:
; EndProcedure
_EndProcedureZero627:
  XOR    rax,rax
_EndProcedure627:
  ADD    rsp,128
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure Profiler_WindowsMouseHandler(Window, Message, wParam, lParam)   
_Procedure594:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PUSH   r15
  PS594=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Result = 0
  MOV    qword [rsp+40],0
; 
; *Debugger.DebuggerData = GetWindowLongPtr_(Window, #GWL_USERDATA)
  PUSH   qword -21
  PUSH   qword [rsp+PS594+8]
  POP    rcx
  POP    rdx
  CALL   GetWindowLongPtrW
  MOV    qword [rsp+48],rax
; If *Debugger
  CMP    qword [rsp+48],0
  JE    _EndIf3056
; 
; If *Debugger\ProfilerFiles And *Debugger\ProfilerData And *Debugger\ProfilerImage
  MOV    rbp,qword [rsp+48]
  CMP    qword [rbp+696],0
  JE     No322
  MOV    rbp,qword [rsp+48]
  CMP    qword [rbp+704],0
  JE     No322
  MOV    rbp,qword [rsp+48]
  CMP    qword [rbp+712],0
  JE     No322
Ok322:
  MOV    rax,1
  JMP    End322
No322:
  XOR    rax,rax
End322:
  AND    rax,rax
  JE    _EndIf3058
; 
; If Message = #WM_LBUTTONDOWN
  MOV    r15,qword [rsp+PS594+8]
  CMP    r15,513
  JNE   _EndIf3060
; 
; Profiler_LButtonDown(*Debugger, PeekW(@lParam), PeekW(@lParam+2), Window)       
  PUSH   qword [rsp+PS594+0]
  SUB    rsp,8
  LEA    rax,[rsp+PS594+40]
  MOV    r15,rax
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekW
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+PS594+40]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekW
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure586
; 
; ElseIf Message = #WM_LBUTTONUP
  JMP   _EndIf3059
_EndIf3060:
  MOV    r15,qword [rsp+PS594+8]
  CMP    r15,514
  JNE   _EndIf3061
; Profiler_LButtonUp(*Debugger)
  PUSH   qword [rsp+48]
  POP    rcx
  CALL  _Procedure588
; 
; ElseIf Message = #WM_MOUSEMOVE           
  JMP   _EndIf3059
_EndIf3061:
  MOV    r15,qword [rsp+PS594+8]
  CMP    r15,512
  JNE   _EndIf3062
; Profiler_MouseMove(*Debugger, PeekW(@lParam), PeekW(@lParam+2), Window)
  PUSH   qword [rsp+PS594+0]
  SUB    rsp,8
  LEA    rax,[rsp+PS594+40]
  MOV    r15,rax
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekW
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+PS594+40]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekW
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure590
; 
; ElseIf Message = #WM_RBUTTONDOWN
  JMP   _EndIf3059
_EndIf3062:
  MOV    r15,qword [rsp+PS594+8]
  CMP    r15,516
  JNE   _EndIf3063
; Profiler_RButtonDown(*Debugger, PeekW(@lParam), PeekW(@lParam+2), Window)
  PUSH   qword [rsp+PS594+0]
  SUB    rsp,8
  LEA    rax,[rsp+PS594+40]
  MOV    r15,rax
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekW
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+PS594+40]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekW
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure592
; 
; Else
  JMP   _EndIf3059
_EndIf3063:
; Result = CallWindowProc_(*Debugger\ProfilerImageCallback, Window, Message, wParam, lParam)
  SUB    rsp,8
  PUSH   qword [rsp+PS594+32]
  PUSH   qword [rsp+PS594+32]
  PUSH   qword [rsp+PS594+32]
  PUSH   qword [rsp+PS594+32]
  MOV    rbp,qword [rsp+88]
  PUSH   qword [rbp+748]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   CallWindowProcW
  ADD    rsp,48
  MOV    qword [rsp+40],rax
; 
; EndIf
_EndIf3059:
; 
; Else
  JMP   _EndIf3057
_EndIf3058:
; Result = CallWindowProc_(*Debugger\ProfilerImageCallback, Window, Message, wParam, lParam)
  SUB    rsp,8
  PUSH   qword [rsp+PS594+32]
  PUSH   qword [rsp+PS594+32]
  PUSH   qword [rsp+PS594+32]
  PUSH   qword [rsp+PS594+32]
  MOV    rbp,qword [rsp+88]
  PUSH   qword [rbp+748]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   CallWindowProcW
  ADD    rsp,48
  MOV    qword [rsp+40],rax
; 
; EndIf      
_EndIf3057:
; 
; Else
  JMP   _EndIf3055
_EndIf3056:
; Result = DefWindowProc_(Window, Message, wParam, lParam)
  PUSH   qword [rsp+PS594+24]
  PUSH   qword [rsp+PS594+24]
  PUSH   qword [rsp+PS594+24]
  PUSH   qword [rsp+PS594+24]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   DefWindowProcW
  MOV    qword [rsp+40],rax
; EndIf
_EndIf3055:
; 
; ProcedureReturn Result
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure595
; EndProcedure
_EndProcedureZero595:
  XOR    rax,rax
_EndProcedure595:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure Plugin_Image_RemoveObject(*Object)
_Procedure628:
  MOV    qword [rsp+8],rcx
  PS628=48
  SUB    rsp,40
; FreeImage(*Object)
  PUSH   qword [rsp+PS628+0]
  POP    rcx
  CALL   PB_FreeImage
; EndProcedure
_EndProcedureZero629:
  XOR    rax,rax
_EndProcedure629:
  ADD    rsp,40
  RET
; Procedure ToAscii(String$)
_Procedure96:
  MOV    qword [rsp+8],rcx
  PUSH   r15
  PS96=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS96+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; Static *Buffer
; 
; If *Buffer
  CMP    qword [so_ToAscii.p_Buffer],0
  JE    _EndIf24
; FreeMemory(*Buffer)
  PUSH   qword [so_ToAscii.p_Buffer]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf24:
; 
; *Buffer = AllocateMemory(StringByteLength(String$, #PB_Ascii) + 1)
  PUSH   qword 24
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_StringByteLength2
  MOV    r15,rax
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [so_ToAscii.p_Buffer],rax
; PokeS(*Buffer, String$, -1, #PB_Ascii)
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+56]
  PUSH   qword [so_ToAscii.p_Buffer]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_PokeS3
; ProcedureReturn *Buffer
  MOV    rax,qword [so_ToAscii.p_Buffer]
  JMP   _EndProcedure97
; EndProcedure
_EndProcedureZero97:
  XOR    rax,rax
_EndProcedure97:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,48
  POP    r15
  RET
; Procedure WinPipe_ReadCommand(*This.WinPipe_Communication, *Command.CommandInfo, *pCommandData.INTEGER)
_Procedure310:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS310=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; *pCommandData\i = 0
  MOV    rbp,qword [rsp+PS310+16]
  MOV    qword [rbp],0
; BytesAvailable  = 0
  MOV    qword [rsp+40],0
; PeekNamedPipe_(*This\InPipeHandle, #Null, 0, #Null, @BytesAvailable, #Null)  
  PUSH   qword 0
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS310+40]
  PUSH   qword [rbp+24]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PeekNamedPipe
  ADD    rsp,48
; 
; 
; If BytesAvailable >= SizeOf(CommandInfo)
  MOV    r15,qword [rsp+40]
  CMP    r15,20
  JL    _EndIf1085
; 
; 
; Received = 0
  MOV    qword [rsp+48],0
; Repeat
_Repeat1086:
; Result = ReadFile_(*This\InPipeHandle, *Command+Received, SizeOf(CommandInfo)-Received, @BytesRead, #Null)
  SUB    rsp,8
  PUSH   qword 0
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  MOV    r15,qword [rsp+72]
  NEG    r15
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+PS310+40]
  ADD    r15,qword [rsp+80]
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS310+40]
  PUSH   qword [rbp+24]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   ReadFile
  ADD    rsp,48
  MOV    qword [rsp+56],rax
; Received + BytesRead
  MOV    r15,qword [rsp+48]
  ADD    r15,qword [rsp+64]
  MOV    qword [rsp+48],r15
; Until Result = 0 Or Received = SizeOf(CommandInfo)
  MOV    r15,qword [rsp+56]
  AND    r15,r15
  JE     Ok168
  MOV    r15,qword [rsp+48]
  CMP    r15,20
  JE     Ok168
  JMP    No168
Ok168:
  MOV    rax,1
  JMP    End168
No168:
  XOR    rax,rax
End168:
  AND    rax,rax
  JE    _Repeat1086
_Until1086:
; 
; If Received = SizeOf(CommandInfo)
  MOV    r15,qword [rsp+48]
  CMP    r15,20
  JNE   _EndIf1088
; 
; If *Command\DataSize > 0
  MOV    rbp,qword [rsp+PS310+8]
  MOVSXD r15,dword [rbp+4]
  AND    r15,r15
  JLE   _EndIf1090
; 
; *CommandData = AllocateMemory(*Command\DataSize)
  MOV    rbp,qword [rsp+PS310+8]
  MOVSXD rax,dword [rbp+4]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+72],rax
; If *CommandData
  CMP    qword [rsp+72],0
  JE    _EndIf1092
; 
; 
; 
; 
; Received = 0
  MOV    qword [rsp+48],0
; Repeat
_Repeat1093:
; Result = ReadFile_(*This\InPipeHandle, *CommandData+Received, *Command\DataSize-Received, @BytesRead, #Null)
  SUB    rsp,8
  PUSH   qword 0
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS310+32]
  MOVSXD r15,dword [rbp+4]
  SUB    r15,qword [rsp+72]
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+104]
  ADD    r15,qword [rsp+80]
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS310+40]
  PUSH   qword [rbp+24]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   ReadFile
  ADD    rsp,48
  MOV    qword [rsp+56],rax
; Received + BytesRead
  MOV    r15,qword [rsp+48]
  ADD    r15,qword [rsp+64]
  MOV    qword [rsp+48],r15
; Until Result = 0 Or Received = *Command\DataSize         
  MOV    r15,qword [rsp+56]
  AND    r15,r15
  JE     Ok169
  MOV    r15,qword [rsp+48]
  MOV    rbp,qword [rsp+PS310+8]
  MOVSXD rax,dword [rbp+4]
  CMP    r15,rax
  JE     Ok169
  JMP    No169
Ok169:
  MOV    rax,1
  JMP    End169
No169:
  XOR    rax,rax
End169:
  AND    rax,rax
  JE    _Repeat1093
_Until1093:
; 
; If Received = *Command\DataSize
  MOV    r15,qword [rsp+48]
  MOV    rbp,qword [rsp+PS310+8]
  MOVSXD rax,dword [rbp+4]
  CMP    r15,rax
  JNE   _EndIf1095
; *pCommandData\i = *CommandData
  PUSH   qword [rsp+72]
  MOV    rbp,qword [rsp+PS310+24]
  POP    rax
  MOV    qword [rbp],rax
; Else
  JMP   _EndIf1094
_EndIf1095:
; FreeMemory(*CommandData)
  PUSH   qword [rsp+72]
  POP    rcx
  CALL   PB_FreeMemory
; WinPipe_FatalError(*This, *Command, #ERROR_Pipe)
  PUSH   qword 2
  PUSH   qword [rsp+PS310+16]
  PUSH   qword [rsp+PS310+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure308
; EndIf
_EndIf1094:
; 
; Else
  JMP   _EndIf1091
_EndIf1092:
; WinPipe_FatalError(*This, *Command, #ERROR_Memory)
  PUSH   qword 1
  PUSH   qword [rsp+PS310+16]
  PUSH   qword [rsp+PS310+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure308
; EndIf                           
_EndIf1091:
; 
; 
; 
; 
; EndIf     
_EndIf1090:
; 
; Else
  JMP   _EndIf1087
_EndIf1088:
; WinPipe_FatalError(*This, *Command, #ERROR_Pipe)
  PUSH   qword 2
  PUSH   qword [rsp+PS310+16]
  PUSH   qword [rsp+PS310+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure308
; EndIf
_EndIf1087:
; 
; CompilerIf #PRINT_DEBUGGER_COMMANDS
; 
; *This\CommandReceived = 1
  MOV    rbp,qword [rsp+PS310+0]
  MOV    dword [rbp+64],1
; 
; If *Command\Command = #COMMAND_End   
  MOV    rbp,qword [rsp+PS310+8]
  MOVSXD r15,dword [rbp]
  CMP    r15,1
  JNE   _EndIf1100
; *This\EndReceived = 1
  MOV    rbp,qword [rsp+PS310+0]
  MOV    dword [rbp+72],1
; EndIf
_EndIf1100:
; 
; 
; ProcedureReturn #True
  MOV    rax,1
  JMP   _EndProcedure311
; EndIf    
_EndIf1085:
; 
; ProcedureReturn #False
  XOR    rax,rax
  JMP   _EndProcedure311
; EndProcedure
_EndProcedureZero311:
  XOR    rax,rax
_EndProcedure311:
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure Plugin_Image_GetObjectWidth(*Object)
_Procedure630:
  MOV    qword [rsp+8],rcx
  PS630=48
  SUB    rsp,40
; ProcedureReturn ImageWidth(*Object)
  PUSH   qword [rsp+PS630+0]
  POP    rcx
  CALL   PB_ImageWidth
  JMP   _EndProcedure631
; EndProcedure
_EndProcedureZero631:
  XOR    rax,rax
_EndProcedure631:
  ADD    rsp,40
  RET
; Procedure SourceLineAction(Line.l, Action)
_Procedure666:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS666=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; If Action = #ACTION_MarkCurrentLine
  MOV    r15,qword [rsp+PS666+8]
  AND    r15,r15
  JNE   _EndIf3550
; For i = 0 To NbSourceFiles
  MOV    qword [rsp+40],0
  JMP   _ForSkipDebug3551
_For3551:
_ForSkipDebug3551:
  MOV    rax,qword [v_NbSourceFiles]
  CMP    rax,qword [rsp+40]
  JL    _Next3552
; If SourceFiles(i)\IsLoaded
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  CMP    dword [rbp+8],0
  JE    _EndIf3554
; ScintillaSendMessage(SourceFiles(i)\Gadget, #SCI_MARKERDELETEALL, 1, 0)
  PUSH   qword 0
  PUSH   qword 1
  PUSH   qword 2045
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(SourceFiles(i)\Gadget, #SCI_MARKERDELETEALL, 2, 0)
  PUSH   qword 0
  PUSH   qword 2
  PUSH   qword 2045
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; EndIf
_EndIf3554:
; Next i
_NextContinue3552:
  INC    qword [rsp+40]
  JNO   _For3551
_Next3552:
; 
; If Line = -1 
  MOVSXD r15,dword [rsp+PS666+0]
  CMP    r15,-1
  JNE   _EndIf3556
; RedrawGadget(SourceFiles(CurrentSource)\Gadget)
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  CALL  _Procedure122
; ProcedureReturn 
  JMP   _EndProcedure667
; EndIf
_EndIf3556:
; EndIf
_EndIf3550:
; 
; If SourceFiles(CurrentSource)\IsLoaded
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  CMP    dword [rbp+8],0
  JE    _EndIf3558
; HideGadget(SourceFiles(CurrentSource)\Gadget, 1)
  PUSH   qword 1
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; EndIf
_EndIf3558:
; 
; CurrentSource = (Line >> 24) & $FF 
  MOVSXD r15,dword [rsp+PS666+0]
  SAR    r15,24
  AND    r15,255
  MOV    qword [v_CurrentSource],r15
; SetGadgetState(#GADGET_SelectSource, CurrentSource)
  PUSH   qword [v_CurrentSource]
  PUSH   qword 22
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; 
; If SourceFiles(CurrentSource)\IsLoaded
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  CMP    dword [rbp+8],0
  JE    _EndIf3560
; HideGadget(SourceFiles(CurrentSource)\Gadget, 0)
  PUSH   qword 0
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; Else
  JMP   _EndIf3559
_EndIf3560:
; SourceFiles(CurrentSource)\Gadget = LoadSource(SourceFiles(CurrentSource)\FileName$)
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp]
  POP    rcx
  CALL  _Procedure660
  MOV    rax,rax
  PUSH   rax
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  POP    rax
  MOV    qword [rbp+16],rax
; If SourceFiles(CurrentSource)\Gadget
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  CMP    qword [rbp+16],0
  JE    _EndIf3563
; SourceFiles(CurrentSource)\IsLoaded = 1
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  MOV    dword [rbp+8],1
; Else
  JMP   _EndIf3562
_EndIf3563:
; HideGadget(#GADGET_Waiting, 0) 
  PUSH   qword 0
  PUSH   qword 18
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; 
; If *DebuggerData\IsNetwork And *DebuggerData\ProgramState <> -1 And SourceFiles(CurrentSource)\IsRequested = 0
  MOV    rbp,qword [p_DebuggerData]
  CMP    dword [rbp+40],0
  JE     No358
  MOV    rbp,qword [p_DebuggerData]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JE     No358
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  MOVSXD r15,dword [rbp+12]
  AND    r15,r15
  JNE    No358
Ok358:
  MOV    rax,1
  JMP    End358
No358:
  XOR    rax,rax
End358:
  AND    rax,rax
  JE    _EndIf3566
; Command.CommandInfo\Command = #COMMAND_GetFile
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],38
; Command\Value1 = CurrentSource
  PUSH   qword [v_CurrentSource]
  POP    rax
  MOV    dword [rbp+8],eax
; SendDebuggerCommand(*DebuggerData, @Command)  
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [p_DebuggerData]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; SourceFiles(CurrentSource)\IsRequested = 1
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  MOV    dword [rbp+12],1
; 
; 
; 
; LastElement(DelayedActions()) 
  PUSH   qword [t_DelayedActions]
  POP    rcx
  CALL   PB_LastElement
; AddElement(DelayedActions())
  PUSH   qword [t_DelayedActions]
  POP    rcx
  CALL   PB_AddElement
; DelayedActions()\FileIndex = CurrentSource
  PUSH   qword [v_CurrentSource]
  MOV    rbp,qword [t_DelayedActions+8]
  POP    rax
  MOV    dword [rbp+16],eax
; DelayedActions()\Line      = Line
  MOVSXD rax,dword [rsp+PS666+0]
  PUSH   rax
  POP    rax
  MOV    dword [rbp+20],eax
; DelayedActions()\Action    = Action
  PUSH   qword [rsp+PS666+8]
  POP    rax
  MOV    dword [rbp+24],eax
; 
; Standalone_ResizeGUI()
  CALL  _Procedure664
; EndIf    
_EndIf3566:
; 
; ProcedureReturn
  JMP   _EndProcedure667
; EndIf
_EndIf3562:
; EndIf
_EndIf3559:
; 
; Standalone_ResizeGUI()
  CALL  _Procedure664
; 
; Select Action
  PUSH   qword [rsp+PS666+8]
; 
; Case #ACTION_MarkCurrentLine  
  XOR    r15,r15
  CMP    r15,[rsp]
  JNE   _Case321
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_MARKERADD, Line & $FFFFFF, 1)
  SUB    rsp,8
  PUSH   qword 1
  MOVSXD r15,dword [rsp+PS666+24]
  AND    r15,16777215
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 2043
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_MARKERADD, Line & $FFFFFF, 2)
  SUB    rsp,8
  PUSH   qword 2
  MOVSXD r15,dword [rsp+PS666+24]
  AND    r15,16777215
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 2043
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
; 
; 
; Position = ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_POSITIONFROMLINE, Line & $FFFFFF, 0)
  SUB    rsp,8
  PUSH   qword 0
  MOVSXD r15,dword [rsp+PS666+24]
  AND    r15,16777215
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 2167
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
  MOV    qword [rsp+80],rax
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_SETSEL, Position, Position)
  SUB    rsp,8
  PUSH   qword [rsp+88]
  PUSH   qword [rsp+96]
  PUSH   qword 2160
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_SCROLLCARET, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 2169
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
; 
; Case #ACTION_MarkError
  JMP   _EndSelect52
_Case321:
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case322
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_MARKERADD, Line & $FFFFFF, 5)
  SUB    rsp,8
  PUSH   qword 5
  MOVSXD r15,dword [rsp+PS666+24]
  AND    r15,16777215
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 2043
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_MARKERADD, Line & $FFFFFF, 6)    
  SUB    rsp,8
  PUSH   qword 6
  MOVSXD r15,dword [rsp+PS666+24]
  AND    r15,16777215
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 2043
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
; 
; Case #ACTION_MarkWarning
  JMP   _EndSelect52
_Case322:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case323
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_MARKERADD, Line & $FFFFFF, 3)
  SUB    rsp,8
  PUSH   qword 3
  MOVSXD r15,dword [rsp+PS666+24]
  AND    r15,16777215
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 2043
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
; ScintillaSendMessage(SourceFiles(CurrentSource)\Gadget, #SCI_MARKERADD, Line & $FFFFFF, 4)    
  SUB    rsp,8
  PUSH   qword 4
  MOVSXD r15,dword [rsp+PS666+24]
  AND    r15,16777215
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 2043
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
; 
; EndSelect
_Case323:
_EndSelect52:
  POP    rax
; 
; RedrawGadget(SourceFiles(CurrentSource)\Gadget)
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  CALL  _Procedure122
; 
; EndProcedure
_EndProcedureZero667:
  XOR    rax,rax
_EndProcedure667:
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure VariableWindowEvents(*Debugger.DebuggerData, EventID)
_Procedure498:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS498=256
  MOV    rax,23
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; Static PopupVariableGadget
; Shared *VariableGadget_Used.VariableGadget 
; 
; If EventID = #PB_Event_Menu
  MOV    r15,qword [rsp+PS498+8]
  CMP    r15,13101
  JNE   _EndIf2048
; Select EventMenu()
  CALL   PB_EventMenu
  MOV    rax,rax
  PUSH   rax
; 
; Case #DEBUGGER_MENU_WatchlistAdd
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case179
; If IsGadget(PopupVariableGadget)
  SUB    rsp,8
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  SUB    rsp,32
  CALL   PB_IsGadget
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf2050
; index = GetGadgetState(PopupVariableGadget)
  SUB    rsp,8
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    qword [rsp+48],rax
; If index <> -1
  MOV    r15,qword [rsp+48]
  CMP    r15,-1
  JE    _EndIf2052
; Variable$ = VariableListElement(*Debugger, PopupVariableGadget, index)          
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+72]
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  PUSH   qword [rsp+PS498+48]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure496
  ADD    rsp,48
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; If Variable$ <> ""
  PUSH   qword [rsp+56]
  MOV    rcx,_S3
  POP    rdx
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JNE   _EndIf2054
; Command.CommandInfo\Command = #COMMAND_WatchlistAdd
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],21
; 
; 
; 
; If PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Local]
  MOV    r15,qword [so_VariableWindowEvents.v_PopupVariableGadget]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2360]
  JNE   _EndIf2056
; VariableGadget_Use(PopupVariableGadget)
  SUB    rsp,8
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure290
  ADD    rsp,40
; Command\Value1 = *VariableGadget_Used\CustomData
  MOV    rbp,qword [p_VariableGadget_Used]
  PUSH   qword [rbp+24]
  LEA    rbp,[rsp+72]
  POP    rax
  MOV    dword [rbp+8],eax
; Else
  JMP   _EndIf2055
_EndIf2056:
; Command\Value1 = -1
  LEA    rbp,[rsp+64]
  MOV    dword [rbp+8],-1
; EndIf              
_EndIf2055:
; 
; Command\Value2 = 1 
  LEA    rbp,[rsp+64]
  MOV    dword [rbp+12],1
; Command\DataSize = StringByteLength(Variable$, #PB_UTF8)+1
  SUB    rsp,8
  PUSH   qword 2
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_StringByteLength2
  ADD    rsp,40
  MOV    r15,rax
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rax
  MOV    dword [rbp+4],eax
; 
; *Buffer = AllocateMemory(Command\DataSize)
  SUB    rsp,8
  MOVSXD rax,dword [rbp+4]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_AllocateMemory
  ADD    rsp,40
  MOV    qword [rsp+88],rax
; If *Buffer
  CMP    qword [rsp+88],0
  JE    _EndIf2059
; PokeS(*Buffer, Variable$, -1, #PB_UTF8)
  SUB    rsp,8
  PUSH   qword 2
  PUSH   qword -1
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+120]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PokeS3
  ADD    rsp,40
; SendDebuggerCommandWithData(*Debugger, @Command, *Buffer)
  SUB    rsp,8
  PUSH   qword [rsp+96]
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS498+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure8
  ADD    rsp,40
; FreeMemory(*Buffer)
  SUB    rsp,8
  PUSH   qword [rsp+96]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FreeMemory
  ADD    rsp,40
; EndIf
_EndIf2059:
; 
; Command.CommandInfo\Command = #COMMAND_GetWatchlist
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],23
; SendDebuggerCommand(*Debugger, @Command)                            
  SUB    rsp,8
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS498+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; EndIf            
_EndIf2054:
; EndIf
_EndIf2052:
; EndIf
_EndIf2050:
; 
; Case #DEBUGGER_MENU_CopyVariable        
  JMP   _EndSelect26
_Case179:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case180
; If IsGadget(PopupVariableGadget)
  SUB    rsp,8
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  SUB    rsp,32
  CALL   PB_IsGadget
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf2061
; index = GetGadgetState(PopupVariableGadget)
  SUB    rsp,8
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    qword [rsp+48],rax
; If index <> -1
  MOV    r15,qword [rsp+48]
  CMP    r15,-1
  JE    _EndIf2063
; Variable$ = VariableListElement(*Debugger, PopupVariableGadget, index) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+72]
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  PUSH   qword [rsp+PS498+48]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure496
  ADD    rsp,48
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; If Variable$ 
  MOV    rcx,qword [rsp+56]
  XOR    rdx,rdx
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JNE   _EndIf2065
; VariableGadget_Use(PopupVariableGadget)
  SUB    rsp,8
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure290
  ADD    rsp,40
; index = VariableGadget_GadgetIndexToReal(PopupVariableGadget, index)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure302
  ADD    rsp,40
  MOV    qword [rsp+48],rax
; *items.VariableGadget_ItemList = *VariableGadget_Used\Items               
  MOV    rbp,qword [p_VariableGadget_Used]
  PUSH   qword [rbp+16]
  POP    rax
  MOV    qword [rsp+96],rax
; 
; If *items\item[index]\Value$ <> ""
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+56]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+18]
  MOV    rcx,_S3
  POP    rdx
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JNE   _EndIf2067
; Variable$ + " = " + *items\item[index]\Value$
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S245
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rbp,qword [rsp+104]
  PUSH   rbp
  MOV    rax,qword [rsp+64]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+64]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf            
_EndIf2067:
; SetClipboardText(Variable$)                          
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL   PB_SetClipboardText
  ADD    rsp,40
; EndIf
_EndIf2065:
; EndIf
_EndIf2063:
; EndIf   
_EndIf2061:
; 
; Case #DEBUGGER_MENU_ViewAll    
  JMP   _EndSelect26
_Case180:
  MOV    r15,4
  CMP    r15,[rsp]
  JNE   _Case181
; If IsGadget(PopupVariableGadget)
  SUB    rsp,8
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  SUB    rsp,32
  CALL   PB_IsGadget
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf2069
; item = GetGadgetState(PopupVariableGadget)
  SUB    rsp,8
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    qword [rsp+104],rax
; If item <> -1
  MOV    r15,qword [rsp+104]
  CMP    r15,-1
  JE    _EndIf2071
; Command.CommandInfo\Command = #COMMAND_GetArrayListData
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],15
; Command\Value1 = 0                      
  MOV    dword [rbp+8],0
; 
; If PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ArrayInfo] Or PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListInfo] Or PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapInfo] Or PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global]
  MOV    r15,qword [so_VariableWindowEvents.v_PopupVariableGadget]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2376]
  JE     Ok239
  MOV    r15,qword [so_VariableWindowEvents.v_PopupVariableGadget]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2408]
  JE     Ok239
  MOV    r15,qword [so_VariableWindowEvents.v_PopupVariableGadget]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2440]
  JE     Ok239
  MOV    r15,qword [so_VariableWindowEvents.v_PopupVariableGadget]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2352]
  JE     Ok239
  JMP    No239
Ok239:
  MOV    rax,1
  JMP    End239
No239:
  XOR    rax,rax
End239:
  AND    rax,rax
  JE    _EndIf2073
; Command\Value2 = 1 
  LEA    rbp,[rsp+64]
  MOV    dword [rbp+12],1
; Else              
  JMP   _EndIf2072
_EndIf2073:
; Command\Value2 = 0
  LEA    rbp,[rsp+64]
  MOV    dword [rbp+12],0
; EndIf
_EndIf2072:
; 
; Name$ = VariableListElement(*Debugger, PopupVariableGadget, item)                      
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+128]
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  PUSH   qword [rsp+PS498+48]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure496
  ADD    rsp,48
  LEA    rcx,[rsp+120]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Command\DataSize = StringByteLength(Name$)+#CharSize
  SUB    rsp,8
  PUSH   qword [rsp+120]
  POP    rcx
  SUB    rsp,32
  CALL   PB_StringByteLength
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  LEA    rbp,[rsp+72]
  POP    rax
  MOV    dword [rbp+4],eax
; SendDebuggerCommandWithData(*Debugger, @Command, @Name$)           
  SUB    rsp,8
  MOV    rax,qword [rsp+120]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS498+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure8
  ADD    rsp,40
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_AllItems], 1)          
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2480]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_NonZeroItems], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2488]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ItemRange], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2496]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_InputRange], 1)
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2504]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; EndIf
_EndIf2071:
; EndIf   
_EndIf2069:
; 
; Case #DEBUGGER_MENU_ViewNonZero    
  JMP   _EndSelect26
_Case181:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case182
; If IsGadget(PopupVariableGadget)
  SUB    rsp,8
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  SUB    rsp,32
  CALL   PB_IsGadget
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf2076
; item = GetGadgetState(PopupVariableGadget)
  SUB    rsp,8
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    qword [rsp+104],rax
; If item <> -1
  MOV    r15,qword [rsp+104]
  CMP    r15,-1
  JE    _EndIf2078
; Command.CommandInfo\Command = #COMMAND_GetArrayListData
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],15
; Command\Value1 = 1                      
  MOV    dword [rbp+8],1
; 
; If PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ArrayInfo] Or PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListInfo] Or PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapInfo] Or PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global]
  MOV    r15,qword [so_VariableWindowEvents.v_PopupVariableGadget]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2376]
  JE     Ok240
  MOV    r15,qword [so_VariableWindowEvents.v_PopupVariableGadget]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2408]
  JE     Ok240
  MOV    r15,qword [so_VariableWindowEvents.v_PopupVariableGadget]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2440]
  JE     Ok240
  MOV    r15,qword [so_VariableWindowEvents.v_PopupVariableGadget]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2352]
  JE     Ok240
  JMP    No240
Ok240:
  MOV    rax,1
  JMP    End240
No240:
  XOR    rax,rax
End240:
  AND    rax,rax
  JE    _EndIf2080
; Command\Value2 = 1 
  LEA    rbp,[rsp+64]
  MOV    dword [rbp+12],1
; Else              
  JMP   _EndIf2079
_EndIf2080:
; Command\Value2 = 0
  LEA    rbp,[rsp+64]
  MOV    dword [rbp+12],0
; EndIf
_EndIf2079:
; 
; Name$ = VariableListElement(*Debugger, PopupVariableGadget, item)                      
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+128]
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  PUSH   qword [rsp+PS498+48]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure496
  ADD    rsp,48
  LEA    rcx,[rsp+120]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Command\DataSize = StringByteLength(Name$)+#CharSize
  SUB    rsp,8
  PUSH   qword [rsp+120]
  POP    rcx
  SUB    rsp,32
  CALL   PB_StringByteLength
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  LEA    rbp,[rsp+72]
  POP    rax
  MOV    dword [rbp+4],eax
; SendDebuggerCommandWithData(*Debugger, @Command, @Name$)    
  SUB    rsp,8
  MOV    rax,qword [rsp+120]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS498+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure8
  ADD    rsp,40
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_AllItems], 0)          
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2480]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_NonZeroItems], 1)
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2488]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ItemRange], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2496]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_InputRange], 1)
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2504]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; EndIf
_EndIf2078:
; EndIf      
_EndIf2076:
; 
; Case #DEBUGGER_MENU_ViewRange   
  JMP   _EndSelect26
_Case182:
  MOV    r15,6
  CMP    r15,[rsp]
  JNE   _Case183
; If IsGadget(PopupVariableGadget)
  SUB    rsp,8
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  SUB    rsp,32
  CALL   PB_IsGadget
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf2083
; item = GetGadgetState(PopupVariableGadget)
  SUB    rsp,8
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    qword [rsp+104],rax
; If item <> -1
  MOV    r15,qword [rsp+104]
  CMP    r15,-1
  JE    _EndIf2085
; Command.CommandInfo\Command = #COMMAND_GetArrayListData
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],15
; Command\Value1 = 2                      
  MOV    dword [rbp+8],2
; 
; If PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ArrayInfo] Or PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListInfo] Or PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapInfo] Or PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global]
  MOV    r15,qword [so_VariableWindowEvents.v_PopupVariableGadget]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2376]
  JE     Ok241
  MOV    r15,qword [so_VariableWindowEvents.v_PopupVariableGadget]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2408]
  JE     Ok241
  MOV    r15,qword [so_VariableWindowEvents.v_PopupVariableGadget]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2440]
  JE     Ok241
  MOV    r15,qword [so_VariableWindowEvents.v_PopupVariableGadget]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2352]
  JE     Ok241
  JMP    No241
Ok241:
  MOV    rax,1
  JMP    End241
No241:
  XOR    rax,rax
End241:
  AND    rax,rax
  JE    _EndIf2087
; Command\Value2 = 1 
  LEA    rbp,[rsp+64]
  MOV    dword [rbp+12],1
; Else              
  JMP   _EndIf2086
_EndIf2087:
; Command\Value2 = 0
  LEA    rbp,[rsp+64]
  MOV    dword [rbp+12],0
; EndIf
_EndIf2086:
; 
; Name$ = VariableListElement(*Debugger, PopupVariableGadget, item)                     
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+128]
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  PUSH   qword [rsp+PS498+48]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure496
  ADD    rsp,48
  LEA    rcx,[rsp+120]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Range$ = InputRequester(Language("Debugger","ViewArrayList"), Language("Debugger","EnterRange")+":", "")
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S247
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S246
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_InputRequester
  ADD    rsp,32
  LEA    rcx,[rsp+128]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; If Range$ <> ""
  PUSH   qword [rsp+120]
  MOV    rcx,_S3
  POP    rdx
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JNE   _EndIf2090
; size = StringByteLength(Name$) + StringByteLength(Range$) + 2*#CharSize
  SUB    rsp,8
  PUSH   qword [rsp+120]
  POP    rcx
  SUB    rsp,32
  CALL   PB_StringByteLength
  ADD    rsp,40
  MOV    r15,rax
  SUB    rsp,8
  PUSH   qword [rsp+128]
  POP    rcx
  SUB    rsp,32
  CALL   PB_StringByteLength
  ADD    rsp,40
  ADD    r15,rax
  ADD    r15,4
  MOV    qword [rsp+128],r15
; *buffer = AllocateMemory(size)
  SUB    rsp,8
  PUSH   qword [rsp+136]
  POP    rcx
  SUB    rsp,32
  CALL   PB_AllocateMemory
  ADD    rsp,40
  MOV    qword [rsp+88],rax
; If *buffer
  CMP    qword [rsp+88],0
  JE    _EndIf2092
; PokeS(*buffer, Name$)
  SUB    rsp,8
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PokeS
  ADD    rsp,40
; PokeS(*buffer + StringByteLength(Name$)+#CharSize, Range$)
  SUB    rsp,8
  PUSH   qword [rsp+128]
  MOV    r15,qword [rsp+104]
  SUB    rsp,8
  PUSH   qword [rsp+136]
  POP    rcx
  SUB    rsp,32
  CALL   PB_StringByteLength
  ADD    rsp,40
  ADD    r15,rax
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PokeS
  ADD    rsp,40
; 
; Command\DataSize = size
  PUSH   qword [rsp+128]
  LEA    rbp,[rsp+72]
  POP    rax
  MOV    dword [rbp+4],eax
; SendDebuggerCommandWithData(*Debugger, @Command, *buffer)            
  SUB    rsp,8
  PUSH   qword [rsp+96]
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS498+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure8
  ADD    rsp,40
; FreeMemory(*buffer)
  SUB    rsp,8
  PUSH   qword [rsp+96]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FreeMemory
  ADD    rsp,40
; EndIf
_EndIf2092:
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_AllItems], 0)          
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2480]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_NonZeroItems], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2488]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ItemRange], 1)
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2496]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_InputRange], 0)              
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2504]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_InputRange], Range$)
  SUB    rsp,8
  PUSH   qword [rsp+128]
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2504]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
; EndIf
_EndIf2090:
; EndIf
_EndIf2085:
; EndIf                 
_EndIf2083:
; 
; EndSelect
_Case183:
_EndSelect26:
  POP    rax
; 
; ElseIf EventID = #PB_Event_Gadget
  JMP   _EndIf2047
_EndIf2048:
  MOV    r15,qword [rsp+PS498+8]
  CMP    r15,13100
  JNE   _EndIf2093
; Select EventGadget()
  CALL   PB_EventGadget
  MOV    rax,rax
  PUSH   rax
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Splitter]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2328]
  CMP    r15,[rsp]
  JNE   _Case184
; If GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Splitter], #PB_Splitter_FirstGadget) = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer] Or GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Splitter], #PB_Splitter_SecondGadget) = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer]             
  SUB    rsp,8
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2328]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetAttribute
  ADD    rsp,40
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2336]
  JE     Ok242
  SUB    rsp,8
  PUSH   qword 4
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2328]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetAttribute
  ADD    rsp,40
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2336]
  JE     Ok242
  JMP    No242
Ok242:
  MOV    rax,1
  JMP    End242
No242:
  XOR    rax,rax
End242:
  AND    rax,rax
  JE    _EndIf2095
; ContainerWidth = GadgetWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2336]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetWidth
  ADD    rsp,40
  MOV    qword [rsp+136],rax
; ContainerHeight = GadgetHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2336]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetHeight
  ADD    rsp,40
  MOV    qword [rsp+144],rax
; If ContainerWidth > 20+300
  MOV    r15,qword [rsp+136]
  CMP    r15,320
  JLE   _EndIf2097
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Progress], (ContainerWidth-300) / 2, (ContainerHeight-20)/2, 300, 20)
  PUSH   qword 20
  PUSH   qword 300
  MOV    r15,qword [rsp+160]
  ADD    r15,-20
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+160]
  ADD    r15,-300
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2344]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,40
; Else
  JMP   _EndIf2096
_EndIf2097:
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Progress], 10, (ContainerHeight-20)/2, ContainerWidth-20, 20)
  PUSH   qword 20
  MOV    r15,qword [rsp+144]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+160]
  ADD    r15,-20
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2344]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,40
; EndIf    
_EndIf2096:
; EndIf   
_EndIf2095:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global]
  JMP   _EndSelect27
_Case184:
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2352]
  CMP    r15,[rsp]
  JNE   _Case185
; VariableGadget_Event(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2352]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure284
  ADD    rsp,40
; If EventType() = #PB_EventType_RightClick
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_EventType
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,1
  JNE   _EndIf2100
; PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2352]
  POP    rax
  MOV    qword [so_VariableWindowEvents.v_PopupVariableGadget],rax
; index = VariableGadget_GadgetIndexToReal(PopupVariableGadget, GetGadgetState(PopupVariableGadget))
  SUB    rsp,8
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure302
  ADD    rsp,40
  MOV    qword [rsp+48],rax
; If index <> -1
  MOV    r15,qword [rsp+48]
  CMP    r15,-1
  JE    _EndIf2102
; VariableGadget_Use(PopupVariableGadget)
  SUB    rsp,8
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure290
  ADD    rsp,40
; *items.VariableGadget_ItemList = *VariableGadget_Used\Items 
  MOV    rbp,qword [p_VariableGadget_Used]
  PUSH   qword [rbp+16]
  POP    rax
  MOV    qword [rsp+96],rax
; 
; If *items\item[index]\Kind = 0 
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+56]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,byte [rbp]
  AND    r15,r15
  JNE   _EndIf2104
; DisplayPopupMenu(#POPUPMENU_VariableViewer, WindowID(*Debugger\Windows[#DEBUGGER_WINDOW_Variable]))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 3
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisplayPopupMenu
  ADD    rsp,40
; Else  
  JMP   _EndIf2103
_EndIf2104:
; DisplayPopupMenu(#POPUPMENU_ArrayViewer, WindowID(*Debugger\Windows[#DEBUGGER_WINDOW_Variable]))              
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 4
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisplayPopupMenu
  ADD    rsp,40
; EndIf          
_EndIf2103:
; EndIf
_EndIf2102:
; EndIf
_EndIf2100:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Local]
  JMP   _EndSelect27
_Case185:
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2360]
  CMP    r15,[rsp]
  JNE   _Case186
; VariableGadget_Event(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Local])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2360]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure284
  ADD    rsp,40
; If EventType() = #PB_EventType_RightClick
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_EventType
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,1
  JNE   _EndIf2107
; PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Local]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2360]
  POP    rax
  MOV    qword [so_VariableWindowEvents.v_PopupVariableGadget],rax
; index = VariableGadget_GadgetIndexToReal(PopupVariableGadget, GetGadgetState(PopupVariableGadget))
  SUB    rsp,8
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure302
  ADD    rsp,40
  MOV    qword [rsp+48],rax
; If index <> -1
  MOV    r15,qword [rsp+48]
  CMP    r15,-1
  JE    _EndIf2109
; VariableGadget_Use(PopupVariableGadget)
  SUB    rsp,8
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure290
  ADD    rsp,40
; *items.VariableGadget_ItemList = *VariableGadget_Used\Items 
  MOV    rbp,qword [p_VariableGadget_Used]
  PUSH   qword [rbp+16]
  POP    rax
  MOV    qword [rsp+96],rax
; 
; If *items\item[index]\Kind = 0 
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+56]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,byte [rbp]
  AND    r15,r15
  JNE   _EndIf2111
; DisplayPopupMenu(#POPUPMENU_VariableViewer, WindowID(*Debugger\Windows[#DEBUGGER_WINDOW_Variable]))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 3
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisplayPopupMenu
  ADD    rsp,40
; Else  
  JMP   _EndIf2110
_EndIf2111:
; DisplayPopupMenu(#POPUPMENU_ArrayViewer, WindowID(*Debugger\Windows[#DEBUGGER_WINDOW_Variable]))              
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 4
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisplayPopupMenu
  ADD    rsp,40
; EndIf          
_EndIf2110:
; EndIf
_EndIf2109:
; EndIf      
_EndIf2107:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer]
  JMP   _EndSelect27
_Case186:
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2472]
  CMP    r15,[rsp]
  JNE   _Case187
; VariableGadget_Event(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure284
  ADD    rsp,40
; If EventType() = #PB_EventType_RightClick
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_EventType
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,1
  JNE   _EndIf2114
; PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rax
  MOV    qword [so_VariableWindowEvents.v_PopupVariableGadget],rax
; index = VariableGadget_GadgetIndexToReal(PopupVariableGadget, GetGadgetState(PopupVariableGadget))
  SUB    rsp,8
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure302
  ADD    rsp,40
  MOV    qword [rsp+48],rax
; If index <> -1
  MOV    r15,qword [rsp+48]
  CMP    r15,-1
  JE    _EndIf2116
; VariableGadget_Use(PopupVariableGadget)
  SUB    rsp,8
  PUSH   qword [so_VariableWindowEvents.v_PopupVariableGadget]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure290
  ADD    rsp,40
; *items.VariableGadget_ItemList = *VariableGadget_Used\Items 
  MOV    rbp,qword [p_VariableGadget_Used]
  PUSH   qword [rbp+16]
  POP    rax
  MOV    qword [rsp+96],rax
; 
; If *items\item[index]\Kind <> 0 
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+56]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,byte [rbp]
  AND    r15,r15
  JE    _EndIf2118
; DisplayPopupMenu(#POPUPMENU_ArrayViewer, WindowID(*Debugger\Windows[#DEBUGGER_WINDOW_Variable]))              
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 4
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisplayPopupMenu
  ADD    rsp,40
; EndIf          
_EndIf2118:
; EndIf
_EndIf2116:
; EndIf         
_EndIf2114:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ArrayInfo]
  JMP   _EndSelect27
_Case187:
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2376]
  CMP    r15,[rsp]
  JNE   _Case188
; If EventType() = #PB_EventType_RightClick
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_EventType
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,1
  JNE   _EndIf2120
; If GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ArrayInfo]) <> -1
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2376]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JE    _EndIf2122
; DisplayPopupMenu(#POPUPMENU_ArrayViewer, WindowID(*Debugger\Windows[#DEBUGGER_WINDOW_Variable]))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 4
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisplayPopupMenu
  ADD    rsp,40
; PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ArrayInfo]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2376]
  POP    rax
  MOV    qword [so_VariableWindowEvents.v_PopupVariableGadget],rax
; EndIf
_EndIf2122:
; EndIf          
_EndIf2120:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalArrayInfo]
  JMP   _EndSelect27
_Case188:
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2384]
  CMP    r15,[rsp]
  JNE   _Case189
; If EventType() = #PB_EventType_RightClick
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_EventType
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,1
  JNE   _EndIf2124
; If GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalArrayInfo]) <> -1
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2384]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JE    _EndIf2126
; DisplayPopupMenu(#POPUPMENU_ArrayViewer, WindowID(*Debugger\Windows[#DEBUGGER_WINDOW_Variable]))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 4
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisplayPopupMenu
  ADD    rsp,40
; PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalArrayInfo]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2384]
  POP    rax
  MOV    qword [so_VariableWindowEvents.v_PopupVariableGadget],rax
; EndIf
_EndIf2126:
; EndIf  
_EndIf2124:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListInfo]
  JMP   _EndSelect27
_Case189:
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2408]
  CMP    r15,[rsp]
  JNE   _Case190
; If EventType() = #PB_EventType_RightClick
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_EventType
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,1
  JNE   _EndIf2128
; If GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListInfo]) <> -1
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2408]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JE    _EndIf2130
; DisplayPopupMenu(#POPUPMENU_ArrayViewer, WindowID(*Debugger\Windows[#DEBUGGER_WINDOW_Variable]))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 4
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisplayPopupMenu
  ADD    rsp,40
; PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListInfo]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2408]
  POP    rax
  MOV    qword [so_VariableWindowEvents.v_PopupVariableGadget],rax
; EndIf
_EndIf2130:
; EndIf  
_EndIf2128:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalListInfo]
  JMP   _EndSelect27
_Case190:
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2416]
  CMP    r15,[rsp]
  JNE   _Case191
; If EventType() = #PB_EventType_RightClick
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_EventType
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,1
  JNE   _EndIf2132
; If GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalListInfo]) <> -1
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2416]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JE    _EndIf2134
; DisplayPopupMenu(#POPUPMENU_ArrayViewer, WindowID(*Debugger\Windows[#DEBUGGER_WINDOW_Variable]))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 4
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisplayPopupMenu
  ADD    rsp,40
; PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalListInfo]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2416]
  POP    rax
  MOV    qword [so_VariableWindowEvents.v_PopupVariableGadget],rax
; EndIf
_EndIf2134:
; EndIf                            
_EndIf2132:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapInfo]
  JMP   _EndSelect27
_Case191:
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2440]
  CMP    r15,[rsp]
  JNE   _Case192
; If EventType() = #PB_EventType_RightClick
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_EventType
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,1
  JNE   _EndIf2136
; If GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapInfo]) <> -1
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2440]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JE    _EndIf2138
; DisplayPopupMenu(#POPUPMENU_ArrayViewer, WindowID(*Debugger\Windows[#DEBUGGER_WINDOW_Variable]))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 4
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisplayPopupMenu
  ADD    rsp,40
; PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapInfo]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2440]
  POP    rax
  MOV    qword [so_VariableWindowEvents.v_PopupVariableGadget],rax
; EndIf
_EndIf2138:
; EndIf  
_EndIf2136:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalMapInfo]
  JMP   _EndSelect27
_Case192:
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2448]
  CMP    r15,[rsp]
  JNE   _Case193
; If EventType() = #PB_EventType_RightClick
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_EventType
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,1
  JNE   _EndIf2140
; If GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalMapInfo]) <> -1
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2448]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,-1
  JE    _EndIf2142
; DisplayPopupMenu(#POPUPMENU_ArrayViewer, WindowID(*Debugger\Windows[#DEBUGGER_WINDOW_Variable]))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 4
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisplayPopupMenu
  ADD    rsp,40
; PopupVariableGadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_LocalMapInfo]
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2448]
  POP    rax
  MOV    qword [so_VariableWindowEvents.v_PopupVariableGadget],rax
; EndIf
_EndIf2142:
; EndIf             
_EndIf2140:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Update]
  JMP   _EndSelect27
_Case193:
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2368]
  CMP    r15,[rsp]
  JNE   _Case194
; If *Debugger\ProgramState <> -1
  MOV    rbp,qword [rsp+PS498+8]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JE    _EndIf2144
; 
; 
; Command.CommandInfo\Command = #COMMAND_GetGlobals
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],10
; SendDebuggerCommand(*Debugger, @Command)          
  SUB    rsp,8
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS498+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; Command.CommandInfo\Command = #COMMAND_GetLocals
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],11
; SendDebuggerCommand(*Debugger, @Command)          
  SUB    rsp,8
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS498+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; EndIf  
_EndIf2144:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateArray] 
  JMP   _EndSelect27
_Case194:
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2392]
  CMP    r15,[rsp]
  JNE   _Case195
; If *Debugger\ProgramState <> -1
  MOV    rbp,qword [rsp+PS498+8]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JE    _EndIf2146
; Command.CommandInfo\Command = #COMMAND_GetArrayInfo
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],12
; Command\Value1 = #True
  MOV    dword [rbp+8],1
; SendDebuggerCommand(*Debugger, @Command)        
  SUB    rsp,8
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS498+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; Command.CommandInfo\Command = #COMMAND_GetArrayInfo
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],12
; Command\Value1 = #False
  MOV    dword [rbp+8],0
; SendDebuggerCommand(*Debugger, @Command)            
  SUB    rsp,8
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS498+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; EndIf
_EndIf2146:
; 
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateList]
  JMP   _EndSelect27
_Case195:
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2424]
  CMP    r15,[rsp]
  JNE   _Case196
; If *Debugger\ProgramState <> -1
  MOV    rbp,qword [rsp+PS498+8]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JE    _EndIf2148
; Command.CommandInfo\Command = #COMMAND_GetListInfo
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],13
; Command\Value1 = #True
  MOV    dword [rbp+8],1
; SendDebuggerCommand(*Debugger, @Command)            
  SUB    rsp,8
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS498+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; Command.CommandInfo\Command = #COMMAND_GetListInfo
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],13
; Command\Value1 = #False
  MOV    dword [rbp+8],0
; SendDebuggerCommand(*Debugger, @Command)                      
  SUB    rsp,8
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS498+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; EndIf
_EndIf2148:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateMap]
  JMP   _EndSelect27
_Case196:
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2456]
  CMP    r15,[rsp]
  JNE   _Case197
; If *Debugger\ProgramState <> -1
  MOV    rbp,qword [rsp+PS498+8]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JE    _EndIf2150
; Command.CommandInfo\Command = #COMMAND_GetMapInfo
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],14
; Command\Value1 = #True
  MOV    dword [rbp+8],1
; SendDebuggerCommand(*Debugger, @Command)            
  SUB    rsp,8
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS498+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; Command.CommandInfo\Command = #COMMAND_GetMapInfo
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],14
; Command\Value1 = #False
  MOV    dword [rbp+8],0
; SendDebuggerCommand(*Debugger, @Command)                      
  SUB    rsp,8
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS498+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; EndIf
_EndIf2150:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_AllItems],  *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_NonZeroItems], *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ItemRange]
  JMP   _EndSelect27
_Case197:
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2480]
  CMP    r15,[rsp]
  JE    _Case198
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2488]
  CMP    r15,[rsp]
  JE    _Case198
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2496]
  CMP    r15,[rsp]
  JNE   _Case199
_Case198:
; If GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ItemRange])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2496]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf2152
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_InputRange], 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2504]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; Else
  JMP   _EndIf2151
_EndIf2152:
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_InputRange], 1)
  SUB    rsp,8
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2504]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_DisableGadget
  ADD    rsp,40
; EndIf
_EndIf2151:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Display]
  JMP   _EndSelect27
_Case199:
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2536]
  CMP    r15,[rsp]
  JNE   _Case200
; Name$ = Trim(GetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_InputName]))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2512]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetText
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,32
  LEA    rcx,[rsp+120]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Command.CommandInfo\Command = #COMMAND_GetArrayListData
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],15
; Command\Value2 = 0 
  MOV    dword [rbp+12],0
; 
; 
; 
; 
; 
; If Right(RemoveString(RemoveString(Name$, " "), Chr(9)), 2) <> "()"
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S26
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S25
  PUSH   rax
  PUSH   qword [rsp+200]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_RemoveString
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_RemoveString
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Right
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S244
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  SUB    rsp,40
  CALL   SYS_StringEqual
  ADD    rsp,40
  OR     rax,rax
  JNE   _EndIf2155
; Name$ + "()"
  MOV    rcx,qword [rsp+112]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S244
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+120]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf2155:
; 
; If GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_AllItems])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2480]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf2157
; Command\Value1 = 0
  LEA    rbp,[rsp+64]
  MOV    dword [rbp+8],0
; Command\DataSize = StringByteLength(Name$)+#CharSize
  SUB    rsp,8
  PUSH   qword [rsp+120]
  POP    rcx
  SUB    rsp,32
  CALL   PB_StringByteLength
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  POP    rax
  MOV    dword [rbp+4],eax
; SendDebuggerCommandWithData(*Debugger, @Command, @Name$) 
  SUB    rsp,8
  MOV    rax,qword [rsp+120]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS498+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure8
  ADD    rsp,40
; 
; ElseIf GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_NonZeroItems])
  JMP   _EndIf2156
_EndIf2157:
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2488]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf2158
; Command\Value1 = 1
  LEA    rbp,[rsp+64]
  MOV    dword [rbp+8],1
; Command\DataSize = StringByteLength(Name$)+#CharSize
  SUB    rsp,8
  PUSH   qword [rsp+120]
  POP    rcx
  SUB    rsp,32
  CALL   PB_StringByteLength
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  POP    rax
  MOV    dword [rbp+4],eax
; SendDebuggerCommandWithData(*Debugger, @Command, @Name$)
  SUB    rsp,8
  MOV    rax,qword [rsp+120]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS498+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure8
  ADD    rsp,40
; 
; Else
  JMP   _EndIf2156
_EndIf2158:
; Range$ = Trim(GetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_InputRange]))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2504]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetText
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,32
  LEA    rcx,[rsp+128]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; 
; size = StringByteLength(Name$) + StringByteLength(Range$) + #CharSize*2
  SUB    rsp,8
  PUSH   qword [rsp+120]
  POP    rcx
  SUB    rsp,32
  CALL   PB_StringByteLength
  ADD    rsp,40
  MOV    r15,rax
  SUB    rsp,8
  PUSH   qword [rsp+128]
  POP    rcx
  SUB    rsp,32
  CALL   PB_StringByteLength
  ADD    rsp,40
  ADD    r15,rax
  ADD    r15,4
  MOV    qword [rsp+128],r15
; *buffer = AllocateMemory(size)
  SUB    rsp,8
  PUSH   qword [rsp+136]
  POP    rcx
  SUB    rsp,32
  CALL   PB_AllocateMemory
  ADD    rsp,40
  MOV    qword [rsp+88],rax
; If *buffer
  CMP    qword [rsp+88],0
  JE    _EndIf2161
; PokeS(*Buffer, Name$)
  SUB    rsp,8
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PokeS
  ADD    rsp,40
; PokeS(*Buffer + StringByteLength(Name$)+#CharSize, Range$)
  SUB    rsp,8
  PUSH   qword [rsp+128]
  MOV    r15,qword [rsp+104]
  SUB    rsp,8
  PUSH   qword [rsp+136]
  POP    rcx
  SUB    rsp,32
  CALL   PB_StringByteLength
  ADD    rsp,40
  ADD    r15,rax
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PokeS
  ADD    rsp,40
; Command\Value1 = 2
  LEA    rbp,[rsp+64]
  MOV    dword [rbp+8],2
; Command\DataSize = size
  PUSH   qword [rsp+128]
  POP    rax
  MOV    dword [rbp+4],eax
; SendDebuggerCommandWithData(*Debugger, @Command, *Buffer)
  SUB    rsp,8
  PUSH   qword [rsp+96]
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS498+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure8
  ADD    rsp,40
; FreeMemory(*Buffer)   
  SUB    rsp,8
  PUSH   qword [rsp+96]
  POP    rcx
  SUB    rsp,32
  CALL   PB_FreeMemory
  ADD    rsp,40
; EndIf     
_EndIf2161:
; EndIf
_EndIf2156:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Copy]
  JMP   _EndSelect27
_Case200:
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2544]
  CMP    r15,[rsp]
  JNE   _Case201
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Save]
  JMP   _EndSelect27
_Case201:
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2552]
  CMP    r15,[rsp]
  JNE   _Case202
; 
; 
; EndSelect
_Case202:
_EndSelect27:
  POP    rax
; 
; ElseIf EventID = #PB_Event_SizeWindow
  JMP   _EndIf2047
_EndIf2093:
  MOV    r15,qword [rsp+PS498+8]
  CMP    r15,13118
  JNE   _EndIf2162
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel], 10, 10, WindowWidth(*Debugger\Windows[#DEBUGGER_WINDOW_Variable])-20, WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_Variable])-20)
  SUB    rsp,8
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowHeight
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS498+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowWidth
  ADD    rsp,32
  MOV    r15,rax
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2320]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; CompilerIf #CompileLinux
; 
; Width  = GetPanelWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel])
  MOV    rbp,qword [rsp+PS498+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2320]
  POP    rcx
  CALL  _Procedure114
  MOV    qword [rsp+144],rax
; Height = GetPanelHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Panel])
  MOV    rbp,qword [rsp+PS498+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2320]
  POP    rcx
  CALL  _Procedure116
  MOV    qword [rsp+152],rax
; 
; 
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Update], @ButtonWidth, @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+176]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+176]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2368]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; ButtonWidth = Max(ButtonWidth, 120)
  PUSH   qword 120
  PUSH   qword [rsp+168]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+160],rax
; 
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Splitter], 10, 10, Width-20, Height-30-ButtonHeight)
  SUB    rsp,8
  MOV    r15,qword [rsp+160]
  SUB    r15,qword [rsp+176]
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+160]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2328]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Update], Width-10-ButtonWidth, Height-35, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+176]
  PUSH   qword [rsp+176]
  MOV    r15,qword [rsp+176]
  ADD    r15,-35
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+176]
  SUB    r15,qword [rsp+192]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2368]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; If GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Splitter], #PB_Splitter_FirstGadget) = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer] Or GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Splitter], #PB_Splitter_SecondGadget) = *Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer]
  PUSH   qword 3
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2328]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS498+0]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2336]
  JE     Ok243
  PUSH   qword 4
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2328]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS498+0]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2336]
  JE     Ok243
  JMP    No243
Ok243:
  MOV    rax,1
  JMP    End243
No243:
  XOR    rax,rax
End243:
  AND    rax,rax
  JE    _EndIf2164
; ContainerWidth = GadgetWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer])
  MOV    rbp,qword [rsp+PS498+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2336]
  POP    rcx
  CALL   PB_GadgetWidth
  MOV    qword [rsp+128],rax
; ContainerHeight = GadgetHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ProgressContainer])
  MOV    rbp,qword [rsp+PS498+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2336]
  POP    rcx
  CALL   PB_GadgetHeight
  MOV    qword [rsp+136],rax
; If ContainerWidth > 20+300
  MOV    r15,qword [rsp+128]
  CMP    r15,320
  JLE   _EndIf2166
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Progress], (ContainerWidth-300) / 2, (ContainerHeight-20)/2, 300, 20)
  SUB    rsp,8
  PUSH   qword 20
  PUSH   qword 300
  MOV    r15,qword [rsp+160]
  ADD    r15,-20
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+160]
  ADD    r15,-300
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2344]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; Else
  JMP   _EndIf2165
_EndIf2166:
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Progress], 10, (ContainerHeight-20)/2, ContainerWidth-20, 20)
  SUB    rsp,8
  PUSH   qword 20
  MOV    r15,qword [rsp+144]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+160]
  ADD    r15,-20
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2344]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; EndIf    
_EndIf2165:
; EndIf       
_EndIf2164:
; 
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ArraySplitter], 10, 10, Width-20, Height-30-ButtonHeight)
  SUB    rsp,8
  MOV    r15,qword [rsp+160]
  SUB    r15,qword [rsp+176]
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+160]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2400]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateArray], Width-10-ButtonWidth, Height-35, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+176]
  PUSH   qword [rsp+176]
  MOV    r15,qword [rsp+176]
  ADD    r15,-35
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+176]
  SUB    r15,qword [rsp+192]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2392]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ListSplitter], 10, 10, Width-20, Height-30-ButtonHeight)
  SUB    rsp,8
  MOV    r15,qword [rsp+160]
  SUB    r15,qword [rsp+176]
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+160]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2432]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateList], Width-10-ButtonWidth, Height-35, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+176]
  PUSH   qword [rsp+176]
  MOV    r15,qword [rsp+176]
  ADD    r15,-35
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+176]
  SUB    r15,qword [rsp+192]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2424]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_MapSplitter], 10, 10, Width-20, Height-30-ButtonHeight)
  SUB    rsp,8
  MOV    r15,qword [rsp+160]
  SUB    r15,qword [rsp+176]
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+160]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2464]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_UpdateMap], Width-10-ButtonWidth, Height-35, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+176]
  PUSH   qword [rsp+176]
  MOV    r15,qword [rsp+176]
  ADD    r15,-35
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+176]
  SUB    r15,qword [rsp+192]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2456]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; 
; ButtonWidth = Max(80, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Display]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2536]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 80
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+160],rax
; TextWidth   = GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Text])  
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2528]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    qword [rsp+176],rax
; 
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_AllItems], @OptionWidth, @OptionHeight)
  PUSH   qword 0
  LEA    rax,[rsp+200]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+200]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS498+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2480]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; OptionWidth = Max(200, OptionWidth)
  PUSH   qword [rsp+184]
  PUSH   qword 200
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+184],rax
; OptionWidth = Max(OptionWidth, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_NonZeroItems]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2488]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+192]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+184],rax
; OptionWidth = Max(OptionWidth, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ItemRange]))    
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2496]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+192]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+184],rax
; BoxWidth    = TextWidth+ButtonWidth+OptionWidth+35
  MOV    r15,qword [rsp+176]
  ADD    r15,qword [rsp+160]
  ADD    r15,qword [rsp+184]
  ADD    r15,35
  MOV    qword [rsp+200],r15
; BoxHeight   = ButtonHeight*2 + OptionHeight*3 + 50
  MOV    r15,qword [rsp+168]
  ADD    r15,r15
  MOV    r14,qword [rsp+192]
  IMUL   r14,3
  ADD    r15,r14
  ADD    r15,50
  MOV    qword [rsp+208],r15
; 
; Offset = (Width-BoxWidth)/2
  MOV    r15,qword [rsp+144]
  SUB    r15,qword [rsp+200]
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    qword [rsp+216],r15
; If Offset < 10
  MOV    r15,qword [rsp+216]
  CMP    r15,10
  JGE   _EndIf2169
; Offset = Width-BoxWidth
  MOV    r15,qword [rsp+144]
  SUB    r15,qword [rsp+200]
  MOV    qword [rsp+216],r15
; EndIf    
_EndIf2169:
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer], 10, 10, Width-20, Height-25-BoxHeight)
  SUB    rsp,8
  MOV    r15,qword [rsp+160]
  SUB    r15,qword [rsp+216]
  ADD    r15,-25
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+160]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Container], 10, Height-10-BoxHeight, Width-20, BoxHeight)
  SUB    rsp,8
  PUSH   qword [rsp+216]
  MOV    r15,qword [rsp+160]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+176]
  SUB    r15,qword [rsp+232]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2520]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerContainer], 10, 10, Width-20, Height-25-BoxHeight)
  SUB    rsp,8
  MOV    r15,qword [rsp+160]
  SUB    r15,qword [rsp+216]
  ADD    r15,-25
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+160]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2568]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; If Width > 40+300
  MOV    r15,qword [rsp+144]
  CMP    r15,340
  JLE   _EndIf2171
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerProgress], (Width-20-300) / 2, (Height-25-BoxHeight-20)/2, 300, 20)
  SUB    rsp,8
  PUSH   qword 20
  PUSH   qword 300
  MOV    r15,qword [rsp+176]
  SUB    r15,qword [rsp+232]
  ADD    r15,-45
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+176]
  ADD    r15,-320
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2560]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; Else
  JMP   _EndIf2170
_EndIf2171:
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ViewerProgress], 10, (Height-25-BoxHeight-20)/2, Width-40, 20)
  SUB    rsp,8
  PUSH   qword 20
  MOV    r15,qword [rsp+160]
  ADD    r15,-40
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+176]
  SUB    r15,qword [rsp+232]
  ADD    r15,-45
  MOV    rax,r15
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2560]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; EndIf
_EndIf2170:
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Text], Offset, 15, TextWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+176]
  PUSH   qword [rsp+192]
  PUSH   qword 15
  PUSH   qword [rsp+248]
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2528]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_InputName], Offset+5+TextWidth, 15, OptionWidth+10, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+176]
  MOV    r15,qword [rsp+200]
  ADD    r15,10
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 15
  MOV    r15,qword [rsp+248]
  ADD    r15,qword [rsp+208]
  ADD    r15,5
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2512]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_AllItems], Offset+15+TextWidth, 20+ButtonHeight, OptionWidth, OptionHeight)
  SUB    rsp,8
  PUSH   qword [rsp+200]
  PUSH   qword [rsp+200]
  MOV    r15,qword [rsp+192]
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+248]
  ADD    r15,qword [rsp+208]
  ADD    r15,15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2480]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_NonZeroItems], Offset+15+TextWidth, 25+ButtonHeight+OptionHeight, OptionWidth, OptionHeight)
  SUB    rsp,8
  PUSH   qword [rsp+200]
  PUSH   qword [rsp+200]
  MOV    r15,qword [rsp+192]
  ADD    r15,qword [rsp+216]
  ADD    r15,25
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+248]
  ADD    r15,qword [rsp+208]
  ADD    r15,15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2488]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_ItemRange], Offset+15+TextWidth, 30+ButtonHeight+OptionHeight*2, OptionWidth, OptionHeight)
  SUB    rsp,8
  PUSH   qword [rsp+200]
  PUSH   qword [rsp+200]
  MOV    r15,qword [rsp+192]
  MOV    r14,qword [rsp+216]
  ADD    r14,r14
  ADD    r15,r14
  ADD    r15,30
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+248]
  ADD    r15,qword [rsp+208]
  ADD    r15,15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2496]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_InputRange], Offset+35+TextWidth, 35+ButtonHeight+OptionHeight*3, OptionWidth-20, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+176]
  MOV    r15,qword [rsp+200]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+192]
  MOV    r14,qword [rsp+216]
  IMUL   r14,3
  ADD    r15,r14
  ADD    r15,35
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+248]
  ADD    r15,qword [rsp+208]
  ADD    r15,35
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2504]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Display], Offset+35+TextWidth+OptionWidth, 15, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+176]
  PUSH   qword [rsp+176]
  PUSH   qword 15
  MOV    r15,qword [rsp+248]
  ADD    r15,qword [rsp+208]
  ADD    r15,qword [rsp+216]
  ADD    r15,35
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS498+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2536]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; 
; 
; ElseIf EventID = #PB_Event_CloseWindow
  JMP   _EndIf2047
_EndIf2162:
  MOV    r15,qword [rsp+PS498+8]
  CMP    r15,13116
  JNE   _EndIf2173
; If DebuggerMemorizeWindows And IsWindowMinimized(*Debugger\Windows[#DEBUGGER_WINDOW_Variable]) = 0
  CMP    qword [v_DebuggerMemorizeWindows],0
  JE     No244
  MOV    rbp,qword [rsp+PS498+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  CALL  _Procedure104
  MOV    r15,rax
  AND    r15,r15
  JNE    No244
Ok244:
  MOV    rax,1
  JMP    End244
No244:
  XOR    rax,rax
End244:
  AND    rax,rax
  JE    _EndIf2175
; VariableViewerMaximize = IsWindowMaximized(*Debugger\Windows[#DEBUGGER_WINDOW_Variable])
  MOV    rbp,qword [rsp+PS498+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  CALL  _Procedure102
  MOV    qword [v_VariableViewerMaximize],rax
; If VariableViewerMaximize = 0
  MOV    r15,qword [v_VariableViewerMaximize]
  AND    r15,r15
  JNE   _EndIf2177
; VariableWindowX = WindowX(*Debugger\Windows[#DEBUGGER_WINDOW_Variable])
  MOV    rbp,qword [rsp+PS498+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  CALL   PB_WindowX
  MOV    qword [v_VariableWindowX],rax
; VariableWindowY = WindowY(*Debugger\Windows[#DEBUGGER_WINDOW_Variable])
  MOV    rbp,qword [rsp+PS498+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  CALL   PB_WindowY
  MOV    qword [v_VariableWindowY],rax
; VariableWindowWidth  = WindowWidth(*Debugger\Windows[#DEBUGGER_WINDOW_Variable])
  MOV    rbp,qword [rsp+PS498+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  CALL   PB_WindowWidth
  MOV    qword [v_VariableWindowWidth],rax
; VariableWindowHeight = WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_Variable])
  MOV    rbp,qword [rsp+PS498+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  CALL   PB_WindowHeight
  MOV    qword [v_VariableWindowHeight],rax
; EndIf
_EndIf2177:
; EndIf 
_EndIf2175:
; 
; HideWindow(*Debugger\Windows[#DEBUGGER_WINDOW_Variable], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS498+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  POP    rdx
  CALL   PB_HideWindow
; VariableGadget_Free(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Global])
  MOV    rbp,qword [rsp+PS498+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2352]
  POP    rcx
  CALL  _Procedure276
; VariableGadget_Free(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Local])   
  MOV    rbp,qword [rsp+PS498+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2360]
  POP    rcx
  CALL  _Procedure276
; VariableGadget_Free(*Debugger\Gadgets[#DEBUGGER_GADGET_Variable_Viewer])   
  MOV    rbp,qword [rsp+PS498+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2472]
  POP    rcx
  CALL  _Procedure276
; CloseWindow(*Debugger\Windows[#DEBUGGER_WINDOW_Variable])
  MOV    rbp,qword [rsp+PS498+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  CALL   PB_CloseWindow
; 
; *Debugger\Windows[#DEBUGGER_WINDOW_Variable] = 0
  MOV    rbp,qword [rsp+PS498+0]
  PUSH   rbp
  POP    rbp
  MOV    qword [rbp+856],0
; Debugger_CheckDestroy(*Debugger)
  PUSH   qword [rsp+PS498+0]
  POP    rcx
  CALL  _Procedure426
; 
; EndIf
_EndIf2047:
_EndIf2173:
; 
; EndProcedure
_EndProcedureZero499:
  XOR    rax,rax
_EndProcedure499:
  PUSH   rax
  MOV    rcx,qword [rsp+112]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+120]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,224
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure DeleteDataBreakPoint(*Debugger.DebuggerData, *Point.DataBreakPoint)
_Procedure512:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS512=64
  SUB    rsp,40
; If *Point\Next
  MOV    rbp,qword [rsp+PS512+8]
  CMP    qword [rbp],0
  JE    _EndIf2504
; *Point\Next\Previous = *Point\Previous
  MOV    rbp,qword [rsp+PS512+8]
  PUSH   qword [rbp+8]
  MOV    rbp,qword [rsp+PS512+16]
  MOV    rbp,[rbp]
  POP    rax
  MOV    qword [rbp+8],rax
; EndIf
_EndIf2504:
; If *Point\Previous
  MOV    rbp,qword [rsp+PS512+8]
  CMP    qword [rbp+8],0
  JE    _EndIf2506
; *Point\Previous\Next = *Point\Next
  MOV    rbp,qword [rsp+PS512+8]
  PUSH   qword [rbp]
  MOV    rbp,qword [rsp+PS512+16]
  MOV    rbp,qword [rbp+8]
  POP    rax
  MOV    qword [rbp],rax
; EndIf
_EndIf2506:
; If *Point = *Debugger\FirstDataBreakPoint
  MOV    r15,qword [rsp+PS512+8]
  MOV    rbp,qword [rsp+PS512+0]
  CMP    r15,qword [rbp+140]
  JNE   _EndIf2508
; *Debugger\FirstDataBreakPoint = *Point\Next
  MOV    rbp,qword [rsp+PS512+8]
  PUSH   qword [rbp]
  MOV    rbp,qword [rsp+PS512+8]
  POP    rax
  MOV    qword [rbp+140],rax
; EndIf  
_EndIf2508:
; 
; CompilerIf #CompilePPC
; ClearStructure(*Point, DataBreakPoint)
  MOV    rax,s_databreakpoint
  PUSH   rax
  PUSH   qword 40
  PUSH   qword [rsp+PS512+24]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_ClearStructure
; CompilerEndIf
; 
; FreeMemory(*Point)
  PUSH   qword [rsp+PS512+8]
  POP    rcx
  CALL   PB_FreeMemory
; EndProcedure
_EndProcedureZero513:
  XOR    rax,rax
_EndProcedure513:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure Profiler_DrawAll(*Debugger.DebuggerData)
_Procedure576:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS576=224
  MOV    rax,19
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; w = DesktopScaledX(GadgetWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Image]))
  MOV    rbp,qword [rsp+PS576+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2952]
  POP    rcx
  CALL   PB_GadgetWidth
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_DesktopScaledX
  MOV    qword [rsp+40],rax
; h = DesktopScaledY(GadgetHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Image]))
  MOV    rbp,qword [rsp+PS576+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2952]
  POP    rcx
  CALL   PB_GadgetHeight
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_DesktopScaledY
  MOV    qword [rsp+48],rax
; 
; 
; 
; If *Debugger\ProfilerImage
  MOV    rbp,qword [rsp+PS576+0]
  CMP    qword [rbp+712],0
  JE    _EndIf2911
; If w <> ImageWidth(*Debugger\ProfilerImage) Or h <> ImageHeight(*Debugger\ProfilerImage)    
  MOV    r15,qword [rsp+40]
  MOV    rbp,qword [rsp+PS576+0]
  PUSH   qword [rbp+712]
  POP    rcx
  CALL   PB_ImageWidth
  CMP    r15,rax
  JNE    Ok306
  MOV    r15,qword [rsp+48]
  MOV    rbp,qword [rsp+PS576+0]
  PUSH   qword [rbp+712]
  POP    rcx
  CALL   PB_ImageHeight
  CMP    r15,rax
  JNE    Ok306
  JMP    No306
Ok306:
  MOV    rax,1
  JMP    End306
No306:
  XOR    rax,rax
End306:
  AND    rax,rax
  JE    _EndIf2913
; FreeImage(*Debugger\ProfilerImage)
  MOV    rbp,qword [rsp+PS576+0]
  PUSH   qword [rbp+712]
  POP    rcx
  CALL   PB_FreeImage
; *Debugger\ProfilerImage = 0
  MOV    rbp,qword [rsp+PS576+0]
  MOV    qword [rbp+712],0
; EndIf
_EndIf2913:
; EndIf
_EndIf2911:
; 
; If *Debugger\ProfilerImage = 0 And w > 0 And h > 0
  MOV    rbp,qword [rsp+PS576+0]
  MOV    r15,qword [rbp+712]
  AND    r15,r15
  JNE    No307
  MOV    r15,qword [rsp+40]
  AND    r15,r15
  JLE    No307
  MOV    r15,qword [rsp+48]
  AND    r15,r15
  JLE    No307
Ok307:
  MOV    rax,1
  JMP    End307
No307:
  XOR    rax,rax
End307:
  AND    rax,rax
  JE    _EndIf2915
; *Debugger\ProfilerImage = CreateImage(#PB_Any, w, h)
  PUSH   qword [rsp+48]
  PUSH   qword [rsp+48]
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CreateImage
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS576+8]
  POP    rax
  MOV    qword [rbp+712],rax
; EndIf
_EndIf2915:
; 
; If *Debugger\ProfilerImage
  MOV    rbp,qword [rsp+PS576+0]
  CMP    qword [rbp+712],0
  JE    _EndIf2917
; If StartDrawing(ImageOutput(*Debugger\ProfilerImage))
  MOV    rbp,qword [rsp+PS576+0]
  PUSH   qword [rbp+712]
  POP    rcx
  CALL   PB_ImageOutput
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_StartDrawing
  AND    rax,rax
  JE    _EndIf2919
; Box(0, 0, w, h, $FFFFFF)
  SUB    rsp,8
  PUSH   qword 16777215
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+64]
  PUSH   qword 0
  PUSH   qword 0
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Box2
  ADD    rsp,48
; 
; If *Debugger\ProfilerFiles And *Debugger\ProfilerData
  MOV    rbp,qword [rsp+PS576+0]
  CMP    qword [rbp+696],0
  JE     No308
  MOV    rbp,qword [rsp+PS576+0]
  CMP    qword [rbp+704],0
  JE     No308
Ok308:
  MOV    rax,1
  JMP    End308
No308:
  XOR    rax,rax
End308:
  AND    rax,rax
  JE    _EndIf2921
; *files.Debugger_ProfilerList = *Debugger\ProfilerFiles
  MOV    rbp,qword [rsp+PS576+0]
  PUSH   qword [rbp+696]
  POP    rax
  MOV    qword [rsp+56],rax
; 
; Profiler_CalculateViewport(*Debugger, @Area.ProfilerDrawing)
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS576+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure566
; DrawingMode(#PB_2DDrawing_Outlined)
  PUSH   qword 4
  POP    rcx
  CALL   PB_DrawingMode
; Box(Area\x-1, Area\y-1, Area\w+2, Area\h+2, $000000)    
  SUB    rsp,8
  PUSH   qword 0
  LEA    rbp,[rsp+80]
  MOVSXD r15,dword [rbp+12]
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  MOVSXD r15,dword [rbp+8]
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  MOVSXD r15,dword [rbp+4]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  MOVSXD r15,dword [rbp]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Box2
  ADD    rsp,48
; 
; Area\lineStart  = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY])
  MOV    rbp,qword [rsp+PS576+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    rax,rax
  PUSH   rax
  LEA    rbp,[rsp+72]
  POP    rax
  MOV    dword [rbp+16],eax
; Area\countStart = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX])
  MOV    rbp,qword [rsp+PS576+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    rax,rax
  PUSH   rax
  LEA    rbp,[rsp+72]
  POP    rax
  MOV    dword [rbp+24],eax
; Area\lines      = Area\h / *Debugger\ProfilerRatioY
  MOVSXD r15,dword [rbp+12]
  MOV    rbp,qword [rsp+PS576+0]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FDIV   qword [rbp+732]
  LEA    rbp,[rsp+64]
  FISTP  dword [rsp-4]
  MOVSXD rax,dword [rsp-4]
  MOV    dword [rbp+20],eax
; Area\counts     = Area\w / *Debugger\ProfilerRatioX
  MOVSXD r15,dword [rbp+8]
  MOV    rbp,qword [rsp+PS576+0]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FDIV   qword [rbp+724]
  LEA    rbp,[rsp+64]
  FISTP  dword [rsp-4]
  MOVSXD rax,dword [rsp-4]
  MOV    dword [rbp+28],eax
; 
; DrawingMode(#PB_2DDrawing_Default)
  PUSH   qword 0
  POP    rcx
  CALL   PB_DrawingMode
; 
; 
; 
; If *Debugger\NbIncludedFiles = 0        
  MOV    rbp,qword [rsp+PS576+0]
  MOVSXD r15,dword [rbp+88]
  AND    r15,r15
  JNE   _EndIf2923
; Profiler_DrawFile(*Debugger, @Area, 0, $FF0000)
  PUSH   qword 16711680
  PUSH   qword 0
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS576+24]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure574
; 
; Else
  JMP   _EndIf2922
_EndIf2923:
; Gadget = *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files]
  MOV    rbp,qword [rsp+PS576+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rax
  MOV    qword [rsp+96],rax
; 
; 
; For i = *Debugger\NbIncludedFiles To 0 Step -1
  MOV    rbp,qword [rsp+PS576+0]
  MOVSXD rax,dword [rbp+88]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+104],rax
  JMP   _ForSkipDebug2925
_For2925:
_ForSkipDebug2925:
  XOR    rax,rax
  CMP    rax,qword [rsp+104]
  JG    _Next2926
; If GetGadgetItemState(Gadget, i) & (#PB_ListIcon_Checked|#PB_ListIcon_Selected)
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemState
  MOV    r15,rax
  AND    r15,3
  AND    r15,r15
  JE    _EndIf2928
; index = GetGadgetItemData(Gadget, i) 
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemData
  MOV    qword [rsp+112],rax
; Profiler_DrawFile(*Debugger, @Area, index, *files\file[index]\Color)   
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rax,qword [rsp+120]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+120]
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS576+24]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure574
; EndIf
_EndIf2928:
; Next i
_NextContinue2926:
  DEC    qword [rsp+104]
  JNO   _For2925
_Next2926:
; 
; EndIf
_EndIf2922:
; 
; 
; 
; maxline   = GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY], #PB_ScrollBar_Maximum)
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS576+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2968]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  MOV    qword [rsp+120],rax
; stepvalue = Profiler_StepValue(20 / *Debugger\ProfilerRatioY) 
  MOV    rbp,qword [rsp+PS576+0]
  FLD    qword [rbp+732]
  FDIVR  dword [F11]
  SUB    rsp,8
  FSTP   dword [rsp]
  MOVSS  xmm0,dword [rsp]
  ADD    rsp,8
  CALL  _Procedure570
  MOV    qword [rsp+128],rax
; first     = Int(Round((Area\lineStart+1) / stepvalue, 1) * stepvalue) 
  PUSH   qword 1
  LEA    rbp,[rsp+72]
  FILD   dword [rbp+16]
  FADD   qword [D2]
  FILD   qword [rsp+136]
  FDIVP  st1,st0
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  POP    rdx
  CALL   PB_Round_DOUBLE
  MOVSD  [rsp-8],xmm0
  FLD    qword [rsp-8]
  FILD   qword [rsp+128]
  FMULP  st1,st0
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  CALL   PB_Int
  MOV    qword [rsp+136],rax
; offset    = Area\y + Int((first-Area\lineStart-1)  * *Debugger\ProfilerRatioY + *Debugger\ProfilerRatioY/2)
  MOVSXD r15,dword [rbp+4]
  FILD   qword [rsp+136]
  FISUB  dword [rbp+16]
  FADD   qword [D5]
  MOV    rbp,qword [rsp+PS576+0]
  FMUL   qword [rbp+732]
  MOV    rbp,qword [rsp+PS576+0]
  FLD    qword [rbp+732]
  FDIV   qword [D6]
  FADDP  st1,st0
  FADD   qword [D1]
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  CALL   PB_Int
  ADD    r15,rax
  MOV    qword [rsp+144],r15
; i         = 0
  MOV    qword [rsp+104],0
; x         = Area\x-4
  LEA    rbp,[rsp+64]
  MOVSXD r15,dword [rbp]
  ADD    r15,-4
  MOV    qword [rsp+152],r15
; y         = 0
  MOV    qword [rsp+160],0
; 
; While y <= Area\y+Area\h And (first + i*stepvalue -1) <= maxline          
_While2929:
  MOV    r15,qword [rsp+160]
  LEA    rbp,[rsp+64]
  MOVSXD r14,dword [rbp+4]
  MOVSXD rax,dword [rbp+12]
  ADD    r14,rax
  CMP    r15,r14
  JG     No309
  MOV    r15,qword [rsp+136]
  MOV    r14,qword [rsp+104]
  IMUL   r14,qword [rsp+128]
  ADD    r15,r14
  DEC    r15
  CMP    r15,qword [rsp+120]
  JG     No309
Ok309:
  MOV    rax,1
  JMP    End309
No309:
  XOR    rax,rax
End309:
  AND    rax,rax
  JE    _Wend2929
; y = offset + i * stepvalue * *Debugger\ProfilerRatioY
  MOV    r15,qword [rsp+144]
  MOV    r14,qword [rsp+104]
  IMUL   r14,qword [rsp+128]
  MOV    rbp,qword [rsp+PS576+0]
  MOV    [rsp-8],r14
  FILD   qword [rsp-8]
  FMUL   qword [rbp+732]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FADDP  st1,st0
  FADD   qword [D1]
  FISTP  qword [rsp+160]
; If y >= Area\y And y <= Area\y+Area\h
  MOV    r15,qword [rsp+160]
  LEA    rbp,[rsp+64]
  MOVSXD rax,dword [rbp+4]
  CMP    r15,rax
  JL     No310
  MOV    r15,qword [rsp+160]
  MOVSXD r14,dword [rbp+4]
  MOVSXD rax,dword [rbp+12]
  ADD    r14,rax
  CMP    r15,r14
  JG     No310
Ok310:
  MOV    rax,1
  JMP    End310
No310:
  XOR    rax,rax
End310:
  AND    rax,rax
  JE    _EndIf2931
; Line(x, y, 3, 1, $000000)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 1
  PUSH   qword 3
  PUSH   qword [rsp+192]
  PUSH   qword [rsp+192]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Line2
  ADD    rsp,48
; Profiler_DrawNumber(10, y - 4, (first + i*stepvalue), $000000, 0, *Debugger\ProfilerNumberLength)
  MOV    rbp,qword [rsp+PS576+0]
  MOVSXD rax,dword [rbp+720]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  MOV    r15,qword [rsp+160]
  MOV    r14,qword [rsp+128]
  IMUL   r14,qword [rsp+152]
  ADD    r15,r14
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+192]
  ADD    r15,-4
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure572
  ADD    rsp,48
; EndIf
_EndIf2931:
; i + 1
  MOV    r15,qword [rsp+104]
  INC    r15
  MOV    qword [rsp+104],r15
; Wend
  JMP   _While2929
_Wend2929:
; 
; 
; 
; maxcount  = GetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX], #PB_ScrollBar_Maximum)
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS576+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2960]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  MOV    qword [rsp+168],rax
; stepvalue = Profiler_StepValue((Len(Str(maxcount))*7+10) / *Debugger\ProfilerRatioX) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+208]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp-8],rax
  FILD   qword [rsp-8]
  FMUL   dword [F14]
  FADD   dword [F10]
  MOV    rbp,qword [rsp+PS576+0]
  FDIV   qword [rbp+724]
  SUB    rsp,8
  FSTP   dword [rsp]
  MOVSS  xmm0,dword [rsp]
  ADD    rsp,8
  CALL  _Procedure570
  MOV    qword [rsp+128],rax
; 
; If Area\countStart = 0
  LEA    rbp,[rsp+64]
  MOVSXD r15,dword [rbp+24]
  AND    r15,r15
  JNE   _EndIf2933
; first = 0
  MOV    qword [rsp+136],0
; Else
  JMP   _EndIf2932
_EndIf2933:
; first = Int(Round(Area\countStart / stepvalue, 1) * stepvalue) 
  PUSH   qword 1
  LEA    rbp,[rsp+72]
  FILD   dword [rbp+24]
  FILD   qword [rsp+136]
  FDIVP  st1,st0
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  POP    rdx
  CALL   PB_Round_DOUBLE
  MOVSD  [rsp-8],xmm0
  FLD    qword [rsp-8]
  FILD   qword [rsp+128]
  FMULP  st1,st0
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  CALL   PB_Int
  MOV    qword [rsp+136],rax
; EndIf
_EndIf2932:
; 
; offset = Area\x + Int((first-Area\countStart)  * *Debugger\ProfilerRatioX)
  LEA    rbp,[rsp+64]
  MOVSXD r15,dword [rbp]
  FILD   qword [rsp+136]
  FISUB  dword [rbp+24]
  FADD   qword [D1]
  MOV    rbp,qword [rsp+PS576+0]
  FMUL   qword [rbp+724]
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  CALL   PB_Int
  ADD    r15,rax
  MOV    qword [rsp+144],r15
; i      = 0
  MOV    qword [rsp+104],0
; x      = 0
  MOV    qword [rsp+152],0
; y      = Area\y+Area\h+1
  LEA    rbp,[rsp+64]
  MOVSXD r15,dword [rbp+4]
  MOVSXD rax,dword [rbp+12]
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+160],r15
; 
; While x <= Area\x+Area\w And (first + i*stepvalue) <= maxcount
_While2935:
  MOV    r15,qword [rsp+152]
  LEA    rbp,[rsp+64]
  MOVSXD r14,dword [rbp]
  MOVSXD rax,dword [rbp+8]
  ADD    r14,rax
  CMP    r15,r14
  JG     No311
  MOV    r15,qword [rsp+136]
  MOV    r14,qword [rsp+104]
  IMUL   r14,qword [rsp+128]
  ADD    r15,r14
  CMP    r15,qword [rsp+168]
  JG     No311
Ok311:
  MOV    rax,1
  JMP    End311
No311:
  XOR    rax,rax
End311:
  AND    rax,rax
  JE    _Wend2935
; x = offset + i * stepvalue * *Debugger\ProfilerRatioX
  MOV    r15,qword [rsp+144]
  MOV    r14,qword [rsp+104]
  IMUL   r14,qword [rsp+128]
  MOV    rbp,qword [rsp+PS576+0]
  MOV    [rsp-8],r14
  FILD   qword [rsp-8]
  FMUL   qword [rbp+724]
  MOV    [rsp-8],r15
  FILD   qword [rsp-8]
  FADDP  st1,st0
  FADD   qword [D1]
  FISTP  qword [rsp+152]
; If x >= Area\x And x <= Area\x+Area\w
  MOV    r15,qword [rsp+152]
  LEA    rbp,[rsp+64]
  MOVSXD rax,dword [rbp]
  CMP    r15,rax
  JL     No312
  MOV    r15,qword [rsp+152]
  MOVSXD r14,dword [rbp]
  MOVSXD rax,dword [rbp+8]
  ADD    r14,rax
  CMP    r15,r14
  JG     No312
Ok312:
  MOV    rax,1
  JMP    End312
No312:
  XOR    rax,rax
End312:
  AND    rax,rax
  JE    _EndIf2937
; count = first + i*stepvalue
  MOV    r15,qword [rsp+136]
  MOV    r14,qword [rsp+104]
  IMUL   r14,qword [rsp+128]
  ADD    r15,r14
  MOV    qword [rsp+176],r15
; Line(x, y, 1, 3, $000000)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 3
  PUSH   qword 1
  PUSH   qword [rsp+192]
  PUSH   qword [rsp+192]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Line2
  ADD    rsp,48
; Profiler_DrawNumber(x - (Len(Str(count))*7 - 1)/2, y + 7, count, $000000)
  PUSH   qword -1
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword [rsp+200]
  MOV    r15,qword [rsp+192]
  ADD    r15,7
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+192]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+248]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
  MOV    r14,rax
  IMUL   r14,7
  DEC    r14
  MOV    rax,r14
  MOV    rcx,2
  CQO
  IDIV   rcx
  MOV    r14,rax
  SUB    r15,r14
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL  _Procedure572
  ADD    rsp,48
; EndIf
_EndIf2937:
; i + 1
  MOV    r15,qword [rsp+104]
  INC    r15
  MOV    qword [rsp+104],r15
; Wend        
  JMP   _While2935
_Wend2935:
; 
; Else
  JMP   _EndIf2920
_EndIf2921:
; DrawText(10, 10, Language("Debugger","ProfilerNoData"), $000000, $FFFFFF)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 16777215
  PUSH   qword 0
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S318
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 10
  PUSH   qword 10
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_DrawText3
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf2920:
; 
; StopDrawing()
  CALL   PB_StopDrawing
; EndIf
_EndIf2919:
; 
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Image], ImageID(*Debugger\ProfilerImage))
  MOV    rbp,qword [rsp+PS576+0]
  PUSH   qword [rbp+712]
  POP    rcx
  CALL   PB_ImageID
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS576+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2952]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; Else
  JMP   _EndIf2916
_EndIf2917:
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Image], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS576+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2952]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; EndIf
_EndIf2916:
; 
; EndProcedure
_EndProcedureZero577:
  XOR    rax,rax
_EndProcedure577:
  ADD    rsp,192
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure ProcessEvent(EventID)
_Procedure690:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS690=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; 
; If EventID = #PB_Event_Menu
  MOV    r15,qword [rsp+PS690+0]
  CMP    r15,13101
  JNE   _EndIf3678
; Select EventMenu()
  CALL   PB_EventMenu
  MOV    rax,rax
  PUSH   rax
; 
; 
; 
; CompilerIf #CompileMac
; 
; Case #MENU_Stop
  MOV    r15,265
  CMP    r15,[rsp]
  JNE   _Case339
; Command.CommandInfo\Command = #COMMAND_Stop
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],0
; SendDebuggerCommand(*DebuggerData, @Command)
  SUB    rsp,8
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [p_DebuggerData]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; 
; Case #MENU_Step
  JMP   _EndSelect55
_Case339:
  MOV    r15,267
  CMP    r15,[rsp]
  JNE   _Case340
; Command.CommandInfo\Command = #COMMAND_Step
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],1
; Command\Value1 = Val(GetGadgetText(#GADGET_StepCount))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 4
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetText
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    dword [rbp+8],eax
; SendDebuggerCommand(*DebuggerData, @Command)       
  SUB    rsp,8
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [p_DebuggerData]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; *DebuggerData\ProgramState = -2
  MOV    rbp,qword [p_DebuggerData]
  MOV    dword [rbp+112],-2
; UpdateGadgetStates()   
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure686
  ADD    rsp,40
; 
; Case #MENU_StepOver
  JMP   _EndSelect55
_Case340:
  MOV    r15,268
  CMP    r15,[rsp]
  JNE   _Case341
; Command.CommandInfo\Command = #COMMAND_Step
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],1
; Command\Value1 = -1 
  MOV    dword [rbp+8],-1
; SendDebuggerCommand(*DebuggerData, @Command)       
  SUB    rsp,8
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [p_DebuggerData]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; *DebuggerData\ProgramState = -2
  MOV    rbp,qword [p_DebuggerData]
  MOV    dword [rbp+112],-2
; UpdateGadgetStates() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure686
  ADD    rsp,40
; 
; Case #MENU_StepOut
  JMP   _EndSelect55
_Case341:
  MOV    r15,269
  CMP    r15,[rsp]
  JNE   _Case342
; Command.CommandInfo\Command = #COMMAND_Step
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],1
; Command\Value1 = -2 
  MOV    dword [rbp+8],-2
; SendDebuggerCommand(*DebuggerData, @Command)       
  SUB    rsp,8
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [p_DebuggerData]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; *DebuggerData\ProgramState = -2
  MOV    rbp,qword [p_DebuggerData]
  MOV    dword [rbp+112],-2
; UpdateGadgetStates()                    
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure686
  ADD    rsp,40
; 
; Case #MENU_Run
  JMP   _EndSelect55
_Case342:
  MOV    r15,266
  CMP    r15,[rsp]
  JNE   _Case343
; Command.CommandInfo\Command = #COMMAND_Run
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],2
; Command\Value1 = 1 
  MOV    dword [rbp+8],1
; SendDebuggerCommand(*DebuggerData, @Command)  
  SUB    rsp,8
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [p_DebuggerData]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; 
; EndSelect
_Case343:
_EndSelect55:
  POP    rax
; EndIf 
_EndIf3678:
; 
; If EventWindow() = #WINDOW_Main
  CALL   PB_EventWindow
  MOV    r15,rax
  CMP    r15,1
  JNE   _EndIf3680
; 
; If EventID = #PB_Event_CloseWindow
  MOV    r15,qword [rsp+PS690+0]
  CMP    r15,13116
  JNE   _EndIf3682
; If *DebuggerData\IsPurifier
  MOV    rbp,qword [p_DebuggerData]
  CMP    dword [rbp+36],0
  JE    _EndIf3684
; PurifierSettings$ =  GetPurifierOptions(*DebuggerData)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [p_DebuggerData]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure72
  ADD    rsp,40
  LEA    rcx,[v_PurifierSettings$]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf        
_EndIf3684:
; Debugger_ForceDestroy(*DebuggerData)
  PUSH   qword [p_DebuggerData]
  POP    rcx
  CALL  _Procedure420
; Standalone_Quit = 1
  MOV    qword [v_Standalone_Quit],1
; 
; ElseIf EventID = #PB_Event_SizeWindow
  JMP   _EndIf3681
_EndIf3682:
  MOV    r15,qword [rsp+PS690+0]
  CMP    r15,13118
  JNE   _EndIf3685
; Standalone_ResizeGUI()
  CALL  _Procedure664
; 
; ElseIf EventID = #PB_Event_Gadget
  JMP   _EndIf3681
_EndIf3685:
  MOV    r15,qword [rsp+PS690+0]
  CMP    r15,13100
  JNE   _EndIf3686
; Select EventGadget()
  CALL   PB_EventGadget
  MOV    rax,rax
  PUSH   rax
; 
; Case #GADGET_Minimize
  MOV    r15,23
  CMP    r15,[rsp]
  JNE   _Case344
; IsMiniDebugger = 1
  MOV    qword [v_IsMiniDebugger],1
; HideGadget(#GADGET_Minimize, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 23
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; HideGadget(#GADGET_Log, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 8
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; HideGadget(#GADGET_Maximize, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 24
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; Standalone_ResizeGUI()           
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure664
  ADD    rsp,40
; 
; Case #GADGET_Maximize
  JMP   _EndSelect56
_Case344:
  MOV    r15,24
  CMP    r15,[rsp]
  JNE   _Case345
; IsMiniDebugger = 0
  MOV    qword [v_IsMiniDebugger],0
; HideGadget(#GADGET_Minimize, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 23
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; HideGadget(#GADGET_Log, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 8
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; HideGadget(#GADGET_Maximize, 1) 
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 24
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; If WindowHeight(#WINDOW_Main) < 260
  SUB    rsp,8
  PUSH   qword 1
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowHeight
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,260
  JGE   _EndIf3688
; ResizeWindow(#WINDOW_Main, #PB_Ignore, #PB_Ignore, WindowWidth(#WINDOW_Main), 260)
  PUSH   qword 260
  PUSH   qword 1
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowWidth
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword -65535
  PUSH   qword -65535
  PUSH   qword 1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeWindow
  ADD    rsp,40
; EndIf         
_EndIf3688:
; Standalone_ResizeGUI()           
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure664
  ADD    rsp,40
; 
; Case #GADGET_Stop
  JMP   _EndSelect56
_Case345:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case346
; Command.CommandInfo\Command = #COMMAND_Stop
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],0
; SendDebuggerCommand(*DebuggerData, @Command)
  SUB    rsp,8
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [p_DebuggerData]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; 
; Case #GADGET_Run
  JMP   _EndSelect56
_Case346:
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case347
; Command.CommandInfo\Command = #COMMAND_Run
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],2
; Command\Value1 = 1 
  MOV    dword [rbp+8],1
; SendDebuggerCommand(*DebuggerData, @Command)  
  SUB    rsp,8
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [p_DebuggerData]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; 
; 
; Case #GADGET_Step
  JMP   _EndSelect56
_Case347:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case348
; Command.CommandInfo\Command = #COMMAND_Step
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],1
; Command\Value1 = Val(GetGadgetText(#GADGET_StepCount))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 4
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetText
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  POP    rax
  MOV    dword [rbp+8],eax
; SendDebuggerCommand(*DebuggerData, @Command)       
  SUB    rsp,8
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [p_DebuggerData]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; *DebuggerData\ProgramState = -2
  MOV    rbp,qword [p_DebuggerData]
  MOV    dword [rbp+112],-2
; UpdateGadgetStates()
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure686
  ADD    rsp,40
; 
; Case #GADGET_StepOver
  JMP   _EndSelect56
_Case348:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case349
; Command.CommandInfo\Command = #COMMAND_Step
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],1
; Command\Value1 = -1
  MOV    dword [rbp+8],-1
; SendDebuggerCommand(*DebuggerData, @Command)       
  SUB    rsp,8
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [p_DebuggerData]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; *DebuggerData\ProgramState = -2
  MOV    rbp,qword [p_DebuggerData]
  MOV    dword [rbp+112],-2
; UpdateGadgetStates()
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure686
  ADD    rsp,40
; 
; Case #GADGET_StepOut
  JMP   _EndSelect56
_Case349:
  MOV    r15,6
  CMP    r15,[rsp]
  JNE   _Case350
; Command.CommandInfo\Command = #COMMAND_Step
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],1
; Command\Value1 = -2
  MOV    dword [rbp+8],-2
; SendDebuggerCommand(*DebuggerData, @Command)       
  SUB    rsp,8
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [p_DebuggerData]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; *DebuggerData\ProgramState = -2
  MOV    rbp,qword [p_DebuggerData]
  MOV    dword [rbp+112],-2
; UpdateGadgetStates()          
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure686
  ADD    rsp,40
; 
; Case #GADGET_Quit
  JMP   _EndSelect56
_Case350:
  MOV    r15,7
  CMP    r15,[rsp]
  JNE   _Case351
; If *DebuggerData\IsPurifier
  MOV    rbp,qword [p_DebuggerData]
  CMP    dword [rbp+36],0
  JE    _EndIf3690
; PurifierSettings$ =  GetPurifierOptions(*DebuggerData)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [p_DebuggerData]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure72
  ADD    rsp,48
  LEA    rcx,[v_PurifierSettings$]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf        
_EndIf3690:
; Debugger_ForceDestroy(*DebuggerData)
  SUB    rsp,8
  PUSH   qword [p_DebuggerData]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure420
  ADD    rsp,40
; Standalone_Quit = 1
  MOV    qword [v_Standalone_Quit],1
; 
; Case #GADGET_BreakSet   
  JMP   _EndSelect56
_Case351:
  MOV    r15,19
  CMP    r15,[rsp]
  JNE   _Case352
; If IsBreakPoint()
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure674
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf3692
; Line = UnmarkBreakPoint() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure678
  ADD    rsp,40
  MOV    qword [rsp+72],rax
; If Line <> -1 And FindBreakpoint(Line) = 1
  MOV    r15,qword [rsp+72]
  CMP    r15,-1
  JE     No366
  SUB    rsp,8
  PUSH   qword [rsp+80]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure688
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,1
  JNE    No366
Ok366:
  MOV    rax,1
  JMP    End366
No366:
  XOR    rax,rax
End366:
  AND    rax,rax
  JE    _EndIf3694
; Command.CommandInfo\Command = #COMMAND_BreakPoint
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],3
; Command\Value1 = 2
  MOV    dword [rbp+8],2
; Command\Value2 = Line
  PUSH   qword [rsp+72]
  POP    rax
  MOV    dword [rbp+12],eax
; SendDebuggerCommand(*DebuggerData, @Command)
  SUB    rsp,8
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [p_DebuggerData]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; DeleteElement(Breakpoints())
  SUB    rsp,8
  PUSH   qword [t_Breakpoints]
  POP    rcx
  SUB    rsp,32
  CALL   PB_DeleteElement
  ADD    rsp,40
; EndIf                                 
_EndIf3694:
; 
; Else        
  JMP   _EndIf3691
_EndIf3692:
; Line = MarkBreakPoint() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure676
  ADD    rsp,40
  MOV    qword [rsp+72],rax
; If Line <> -1 And FindBreakpoint(Line) = 0
  MOV    r15,qword [rsp+72]
  CMP    r15,-1
  JE     No367
  SUB    rsp,8
  PUSH   qword [rsp+80]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure688
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,r15
  JNE    No367
Ok367:
  MOV    rax,1
  JMP    End367
No367:
  XOR    rax,rax
End367:
  AND    rax,rax
  JE    _EndIf3697
; Command.CommandInfo\Command = #COMMAND_BreakPoint
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],3
; Command\Value1 = 1
  MOV    dword [rbp+8],1
; Command\Value2 = Line
  PUSH   qword [rsp+72]
  POP    rax
  MOV    dword [rbp+12],eax
; SendDebuggerCommand(*DebuggerData, @Command)
  SUB    rsp,8
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [p_DebuggerData]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; AddElement(Breakpoints())
  SUB    rsp,8
  PUSH   qword [t_Breakpoints]
  POP    rcx
  SUB    rsp,32
  CALL   PB_AddElement
  ADD    rsp,40
; Breakpoints() = Line
  PUSH   qword [rsp+72]
  MOV    rbp,qword [t_Breakpoints+8]
  POP    rax
  MOV    dword [rbp+16],eax
; EndIf
_EndIf3697:
; EndIf
_EndIf3691:
; 
; Case #GADGET_BreakClear
  JMP   _EndSelect56
_Case352:
  MOV    r15,20
  CMP    r15,[rsp]
  JNE   _Case353
; ClearBreakPoints() 
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure680
  ADD    rsp,40
; Command.CommandInfo\Command = #COMMAND_BreakPoint
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],3
; Command\Value1 = 3
  MOV    dword [rbp+8],3
; Command\Value2 = CurrentSource
  PUSH   qword [v_CurrentSource]
  POP    rax
  MOV    dword [rbp+12],eax
; SendDebuggerCommand(*DebuggerData, @Command)          
  SUB    rsp,8
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [p_DebuggerData]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; ForEach Breakpoints()
  MOV    rcx,qword [t_Breakpoints]
  CALL   PB_ResetList
_ForEach3698:
  MOV    rcx,qword [t_Breakpoints]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next3698
; If (Breakpoints()>>24) & $FF = CurrentSource
  MOV    rbp,qword [t_Breakpoints+8]
  MOVSXD r15,dword [rbp+16]
  SAR    r15,24
  AND    r15,255
  CMP    r15,qword [v_CurrentSource]
  JNE   _EndIf3700
; If ListIndex(Breakpoints()) = 1
  SUB    rsp,8
  PUSH   qword [t_Breakpoints]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ListIndex
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,1
  JNE   _EndIf3702
; DeleteElement(Breakpoints())
  SUB    rsp,8
  PUSH   qword [t_Breakpoints]
  POP    rcx
  SUB    rsp,32
  CALL   PB_DeleteElement
  ADD    rsp,40
; ResetList(Breakpoints())
  SUB    rsp,8
  PUSH   qword [t_Breakpoints]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ResetList
  ADD    rsp,40
; Else
  JMP   _EndIf3701
_EndIf3702:
; DeleteElement(Breakpoints())
  SUB    rsp,8
  PUSH   qword [t_Breakpoints]
  POP    rcx
  SUB    rsp,32
  CALL   PB_DeleteElement
  ADD    rsp,40
; EndIf
_EndIf3701:
; EndIf
_EndIf3700:
; Next Breakpoints()                  
  JMP   _ForEach3698
_Next3698:
; 
; Case #GADGET_SelectSource           
  JMP   _EndSelect56
_Case353:
  MOV    r15,22
  CMP    r15,[rsp]
  JNE   _Case354
; If GetGadgetState(#GADGET_SelectSource) <> CurrentSource
  SUB    rsp,8
  PUSH   qword 22
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    r15,rax
  CMP    r15,qword [v_CurrentSource]
  JE    _EndIf3705
; If SourceFiles(CurrentSource)\IsLoaded
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  CMP    dword [rbp+8],0
  JE    _EndIf3707
; HideGadget(SourceFiles(CurrentSource)\Gadget, 1)
  SUB    rsp,8
  PUSH   qword 1
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; EndIf
_EndIf3707:
; 
; CurrentSource = GetGadgetState(#GADGET_SelectSource)
  SUB    rsp,8
  PUSH   qword 22
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    qword [v_CurrentSource],rax
; If CurrentSource <> -1              
  MOV    r15,qword [v_CurrentSource]
  CMP    r15,-1
  JE    _EndIf3709
; If SourceFiles(CurrentSource)\IsLoaded
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  CMP    dword [rbp+8],0
  JE    _EndIf3711
; HideGadget(SourceFiles(CurrentSource)\Gadget, 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; Else
  JMP   _EndIf3710
_EndIf3711:
; SourceFiles(CurrentSource)\Gadget = LoadSource(SourceFiles(CurrentSource)\FileName$)
  SUB    rsp,8
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  PUSH   qword [rbp]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure660
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  POP    rax
  MOV    qword [rbp+16],rax
; If SourceFiles(CurrentSource)\Gadget
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  CMP    qword [rbp+16],0
  JE    _EndIf3714
; SourceFiles(CurrentSource)\IsLoaded = 1    
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  MOV    dword [rbp+8],1
; Else
  JMP   _EndIf3713
_EndIf3714:
; HideGadget(#GADGET_Waiting, 0) 
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 18
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_HideGadget
  ADD    rsp,40
; If *DebuggerData\IsNetwork And *DebuggerData\ProgramState <> -1 And SourceFiles(CurrentSource)\IsRequested = 0
  MOV    rbp,qword [p_DebuggerData]
  CMP    dword [rbp+40],0
  JE     No368
  MOV    rbp,qword [p_DebuggerData]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JE     No368
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  MOVSXD r15,dword [rbp+12]
  AND    r15,r15
  JNE    No368
Ok368:
  MOV    rax,1
  JMP    End368
No368:
  XOR    rax,rax
End368:
  AND    rax,rax
  JE    _EndIf3717
; 
; Command.CommandInfo\Command = #COMMAND_GetFile
  LEA    rbp,[rsp+48]
  MOV    dword [rbp],38
; Command\Value1 = CurrentSource
  PUSH   qword [v_CurrentSource]
  POP    rax
  MOV    dword [rbp+8],eax
; SendDebuggerCommand(*DebuggerData, @Command)                          
  SUB    rsp,8
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [p_DebuggerData]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; SourceFiles(CurrentSource)\IsRequested = 1
  MOV    r15,qword [v_CurrentSource]
  MOV    rbp,qword [a_SourceFiles]
  IMUL   r15,24
  ADD    rbp,r15
  MOV    dword [rbp+12],1
; EndIf
_EndIf3717:
; EndIf
_EndIf3713:
; EndIf        
_EndIf3710:
; Standalone_ResizeGUI()  
  SUB    rsp,8
  SUB    rsp,32
  CALL  _Procedure664
  ADD    rsp,40
; Else
  JMP   _EndIf3708
_EndIf3709:
; CurrentSource = 0     
  MOV    qword [v_CurrentSource],0
; EndIf 
_EndIf3708:
; EndIf
_EndIf3705:
; 
; Case #GADGET_DataBreak
  JMP   _EndSelect56
_Case354:
  MOV    r15,21
  CMP    r15,[rsp]
  JNE   _Case355
; If GetGadgetState(#GADGET_DataBreak)
  SUB    rsp,8
  PUSH   qword 21
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf3720
; OpenDataBreakpointWindow(*DebuggerData)
  SUB    rsp,8
  PUSH   qword [p_DebuggerData]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure52
  ADD    rsp,40
; Else
  JMP   _EndIf3719
_EndIf3720:
; Debugger_ProcessEvents(*DebuggerData\Windows[#DEBUGGER_WINDOW_DataBreakPoints], #PB_Event_CloseWindow)          
  SUB    rsp,8
  PUSH   qword 13116
  MOV    rbp,qword [p_DebuggerData]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure14
  ADD    rsp,40
; EndIf
_EndIf3719:
; 
; Case #GADGET_Debug
  JMP   _EndSelect56
_Case355:
  MOV    r15,9
  CMP    r15,[rsp]
  JNE   _Case356
; If GetGadgetState(#GADGET_Debug)
  SUB    rsp,8
  PUSH   qword 9
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf3723
; OpenDebugWindow(*DebuggerData, #True)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword [p_DebuggerData]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure36
  ADD    rsp,40
; Else
  JMP   _EndIf3722
_EndIf3723:
; Debugger_ProcessEvents(*DebuggerData\Windows[#DEBUGGER_WINDOW_Debug], #PB_Event_CloseWindow)          
  SUB    rsp,8
  PUSH   qword 13116
  MOV    rbp,qword [p_DebuggerData]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+832]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure14
  ADD    rsp,40
; EndIf
_EndIf3722:
; 
; Case #GADGET_Watchlist
  JMP   _EndSelect56
_Case356:
  MOV    r15,10
  CMP    r15,[rsp]
  JNE   _Case357
; If GetGadgetState(#GADGET_Watchlist)
  SUB    rsp,8
  PUSH   qword 10
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf3726
; OpenWatchListWindow(*DebuggerData)
  SUB    rsp,8
  PUSH   qword [p_DebuggerData]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure46
  ADD    rsp,40
; Else
  JMP   _EndIf3725
_EndIf3726:
; Debugger_ProcessEvents(*DebuggerData\Windows[#DEBUGGER_WINDOW_Watchlist], #PB_Event_CloseWindow)          
  SUB    rsp,8
  PUSH   qword 13116
  MOV    rbp,qword [p_DebuggerData]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+872]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure14
  ADD    rsp,40
; EndIf
_EndIf3725:
; 
; Case #GADGET_Variables
  JMP   _EndSelect56
_Case357:
  MOV    r15,11
  CMP    r15,[rsp]
  JNE   _Case358
; If GetGadgetState(#GADGET_Variables)
  SUB    rsp,8
  PUSH   qword 11
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf3729
; OpenVariableWindow(*DebuggerData)
  SUB    rsp,8
  PUSH   qword [p_DebuggerData]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure42
  ADD    rsp,40
; Else
  JMP   _EndIf3728
_EndIf3729:
; Debugger_ProcessEvents(*DebuggerData\Windows[#DEBUGGER_WINDOW_Variable], #PB_Event_CloseWindow)          
  SUB    rsp,8
  PUSH   qword 13116
  MOV    rbp,qword [p_DebuggerData]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure14
  ADD    rsp,40
; EndIf   
_EndIf3728:
; 
; Case #GADGET_Profiler
  JMP   _EndSelect56
_Case358:
  MOV    r15,12
  CMP    r15,[rsp]
  JNE   _Case359
; If GetGadgetState(#GADGET_Profiler)
  SUB    rsp,8
  PUSH   qword 12
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf3732
; OpenProfilerWindow(*DebuggerData)
  SUB    rsp,8
  PUSH   qword [p_DebuggerData]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure50
  ADD    rsp,40
; Else
  JMP   _EndIf3731
_EndIf3732:
; Debugger_ProcessEvents(*DebuggerData\Windows[#DEBUGGER_WINDOW_Profiler], #PB_Event_CloseWindow)
  SUB    rsp,8
  PUSH   qword 13116
  MOV    rbp,qword [p_DebuggerData]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+888]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure14
  ADD    rsp,40
; EndIf     
_EndIf3731:
; 
; Case #GADGET_History
  JMP   _EndSelect56
_Case359:
  MOV    r15,13
  CMP    r15,[rsp]
  JNE   _Case360
; If GetGadgetState(#GADGET_History)
  SUB    rsp,8
  PUSH   qword 13
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf3735
; OpenHistoryWindow(*DebuggerData)
  SUB    rsp,8
  PUSH   qword [p_DebuggerData]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure44
  ADD    rsp,40
; Else
  JMP   _EndIf3734
_EndIf3735:
; Debugger_ProcessEvents(*DebuggerData\Windows[#DEBUGGER_WINDOW_History], #PB_Event_CloseWindow)          
  SUB    rsp,8
  PUSH   qword 13116
  MOV    rbp,qword [p_DebuggerData]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+864]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure14
  ADD    rsp,40
; EndIf      
_EndIf3734:
; 
; Case #GADGET_Memory
  JMP   _EndSelect56
_Case360:
  MOV    r15,14
  CMP    r15,[rsp]
  JNE   _Case361
; If GetGadgetState(#GADGET_Memory)
  SUB    rsp,8
  PUSH   qword 14
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf3738
; OpenMemoryViewerWindow(*DebuggerData)
  SUB    rsp,8
  PUSH   qword [p_DebuggerData]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure40
  ADD    rsp,40
; Else
  JMP   _EndIf3737
_EndIf3738:
; Debugger_ProcessEvents(*DebuggerData\Windows[#DEBUGGER_WINDOW_Memory], #PB_Event_CloseWindow)          
  SUB    rsp,8
  PUSH   qword 13116
  MOV    rbp,qword [p_DebuggerData]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+848]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure14
  ADD    rsp,40
; EndIf      
_EndIf3737:
; 
; Case #GADGET_Library
  JMP   _EndSelect56
_Case361:
  MOV    r15,16
  CMP    r15,[rsp]
  JNE   _Case362
; If GetGadgetState(#GADGET_Library)
  SUB    rsp,8
  PUSH   qword 16
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf3741
; OpenLibraryViewerWindow(*DebuggerData)
  SUB    rsp,8
  PUSH   qword [p_DebuggerData]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure48
  ADD    rsp,40
; Else
  JMP   _EndIf3740
_EndIf3741:
; Debugger_ProcessEvents(*DebuggerData\Windows[#DEBUGGER_WINDOW_Library], #PB_Event_CloseWindow)          
  SUB    rsp,8
  PUSH   qword 13116
  MOV    rbp,qword [p_DebuggerData]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+880]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure14
  ADD    rsp,40
; EndIf      
_EndIf3740:
; 
; Case #GADGET_Assembly        
  JMP   _EndSelect56
_Case362:
  MOV    r15,15
  CMP    r15,[rsp]
  JNE   _Case363
; If GetGadgetState(#GADGET_Assembly)
  SUB    rsp,8
  PUSH   qword 15
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf3744
; OpenAsmWindow(*DebuggerData)
  SUB    rsp,8
  PUSH   qword [p_DebuggerData]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure38
  ADD    rsp,40
; Else
  JMP   _EndIf3743
_EndIf3744:
; Debugger_ProcessEvents(*DebuggerData\Windows[#DEBUGGER_WINDOW_Asm], #PB_Event_CloseWindow)          
  SUB    rsp,8
  PUSH   qword 13116
  MOV    rbp,qword [p_DebuggerData]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+840]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure14
  ADD    rsp,40
; EndIf      
_EndIf3743:
; 
; Case #GADGET_Purifier 
  JMP   _EndSelect56
_Case363:
  MOV    r15,17
  CMP    r15,[rsp]
  JNE   _Case364
; If GetGadgetState(#GADGET_Purifier)
  SUB    rsp,8
  PUSH   qword 17
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf3747
; OpenPurifierWindow(*DebuggerData)
  SUB    rsp,8
  PUSH   qword [p_DebuggerData]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure54
  ADD    rsp,40
; Else
  JMP   _EndIf3746
_EndIf3747:
; Debugger_ProcessEvents(*DebuggerData\Windows[#DEBUGGER_WINDOW_Purifier], #PB_Event_CloseWindow)          
  SUB    rsp,8
  PUSH   qword 13116
  MOV    rbp,qword [p_DebuggerData]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+904]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure14
  ADD    rsp,40
; EndIf         
_EndIf3746:
; 
; EndSelect
_Case364:
_EndSelect56:
  POP    rax
; 
; EndIf
_EndIf3681:
_EndIf3686:
; 
; Else   
  JMP   _EndIf3679
_EndIf3680:
; 
; 
; Debugger_ProcessEvents(EventWindow(), EventID)
  PUSH   qword [rsp+PS690+0]
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_EventWindow
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL  _Procedure14
; 
; If EventID = #PB_Event_CloseWindow
  MOV    r15,qword [rsp+PS690+0]
  CMP    r15,13116
  JNE   _EndIf3751
; 
; 
; 
; 
; If IsDebuggerValid(*DebuggerData)
  PUSH   qword [p_DebuggerData]
  POP    rcx
  CALL  _Procedure424
  AND    rax,rax
  JE    _EndIf3753
; SetGadgetState(#GADGET_Debug, *DebuggerData\IsDebugOutputVisible)
  MOV    rbp,qword [p_DebuggerData]
  MOVSXD rax,dword [rbp+128]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 9
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(#GADGET_Watchlist, *DebuggerData\IsWatchlistVisible)
  MOV    rbp,qword [p_DebuggerData]
  MOVSXD rax,dword [rbp+132]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 10
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(#GADGET_Variables, *DebuggerData\Windows[#DEBUGGER_WINDOW_Variable])
  MOV    rbp,qword [p_DebuggerData]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  PUSH   qword 11
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(#GADGET_Profiler, *DebuggerData\Windows[#DEBUGGER_WINDOW_Profiler])
  MOV    rbp,qword [p_DebuggerData]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+888]
  PUSH   qword 12
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(#GADGET_History, *DebuggerData\Windows[#DEBUGGER_WINDOW_History])
  MOV    rbp,qword [p_DebuggerData]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+864]
  PUSH   qword 13
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(#GADGET_Memory, *DebuggerData\Windows[#DEBUGGER_WINDOW_Memory])
  MOV    rbp,qword [p_DebuggerData]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+848]
  PUSH   qword 14
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(#GADGET_Library, *DebuggerData\Windows[#DEBUGGER_WINDOW_Library])
  MOV    rbp,qword [p_DebuggerData]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+880]
  PUSH   qword 16
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(#GADGET_Assembly, *DebuggerData\Windows[#DEBUGGER_WINDOW_Asm])      
  MOV    rbp,qword [p_DebuggerData]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+840]
  PUSH   qword 15
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(#GADGET_DataBreak, *DebuggerData\DataBreakpointsVisible)      
  MOV    rbp,qword [p_DebuggerData]
  MOVSXD rax,dword [rbp+136]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 21
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(#GADGET_Purifier, *DebuggerData\Windows[#DEBUGGER_WINDOW_Purifier])      
  MOV    rbp,qword [p_DebuggerData]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+904]
  PUSH   qword 17
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; EndIf
_EndIf3753:
; 
; EndIf    
_EndIf3751:
; 
; EndIf  
_EndIf3679:
; 
; ProcedureReturn EventID
  MOV    rax,qword [rsp+PS690+0]
  JMP   _EndProcedure691
; EndProcedure
_EndProcedureZero691:
  XOR    rax,rax
_EndProcedure691:
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure Network_Receive(*This.Network_Communication, *Command.CommandInfo, *pCommandData.INTEGER)
_Procedure412:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS412=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Result = 0
  MOV    qword [rsp+40],0
; 
; CompilerIf #NOTHREAD = 0
; 
; LockMutex(*This\StackMutex)
  MOV    rbp,qword [rsp+PS412+0]
  PUSH   qword [rbp+68]
  POP    rcx
  CALL   qword [PB_LockMutex]
; 
; If *This\StackCount > 0            
  MOV    rbp,qword [rsp+PS412+0]
  MOVSXD r15,dword [rbp+756]
  AND    r15,r15
  JLE   _EndIf1369
; CopyMemory(@*This\Stack[0]\command, *Command, SizeOf(CommandInfo))
  PUSH   qword 20
  PUSH   qword [rsp+PS412+16]
  MOV    rbp,qword [rsp+PS412+16]
  PUSH   rbp
  POP    rbp
  LEA    rax,[rbp+760]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CopyMemory
; *pCommandData\i = *This\Stack[0]\commanddata
  MOV    rbp,qword [rsp+PS412+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+780]
  MOV    rbp,qword [rsp+PS412+24]
  POP    rax
  MOV    qword [rbp],rax
; 
; 
; *This\StackCount - 1
  MOV    rbp,qword [rsp+PS412+0]
  MOVSXD r15,dword [rbp+756]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS412+8]
  POP    rax
  MOV    dword [rbp+756],eax
; If *This\StackCount > 0
  MOV    rbp,qword [rsp+PS412+0]
  MOVSXD r15,dword [rbp+756]
  AND    r15,r15
  JLE   _EndIf1371
; MoveMemory(@*This\Stack[1], @*This\Stack[0], SizeOf(CommandStackStruct) * *This\StackCount)      
  MOV    rbp,qword [rsp+PS412+0]
  MOVSXD r15,dword [rbp+756]
  IMUL   r15,28
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS412+8]
  PUSH   rbp
  POP    rbp
  LEA    rax,[rbp+760]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS412+16]
  PUSH   rbp
  POP    rbp
  LEA    rax,[rbp+788]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_MoveMemory
; EndIf
_EndIf1371:
; 
; Result = 1
  MOV    qword [rsp+40],1
; EndIf
_EndIf1369:
; 
; UnlockMutex(*This\StackMutex)   
  MOV    rbp,qword [rsp+PS412+0]
  PUSH   qword [rbp+68]
  POP    rcx
  CALL   qword [PB_UnlockMutex]
; 
; 
; CompilerElse
; 
; ProcedureReturn Result
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure413
; EndProcedure
_EndProcedureZero413:
  XOR    rax,rax
_EndProcedure413:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure VariableGadget_Allocate(Gadget, NbItems)
_Procedure286:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS286=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; *VariableGadget.VariableGadget = GetGadgetData(Gadget)
  PUSH   qword [rsp+PS286+0]
  POP    rcx
  CALL   PB_GetGadgetData
  MOV    qword [rsp+40],rax
; ChangeCurrentElement(VariableGadget_List(), *VariableGadget)
  PUSH   qword [rsp+40]
  PUSH   qword [t_VariableGadget_List]
  POP    rcx
  POP    rdx
  CALL   PB_ChangeCurrentElement
; 
; 
; 
; If VariableGadget_List()\Items
  MOV    rbp,qword [t_VariableGadget_List+8]
  CMP    qword [rbp+32],0
  JE    _EndIf878
; *items.VariableGadget_ItemList = VariableGadget_List()\Items
  MOV    rbp,qword [t_VariableGadget_List+8]
  PUSH   qword [rbp+32]
  POP    rax
  MOV    qword [rsp+48],rax
; For i = 0 To VariableGadget_List()\ItemCount-1
  MOV    qword [rsp+56],0
  JMP   _ForSkipDebug879
_For879:
_ForSkipDebug879:
  MOV    rbp,qword [t_VariableGadget_List+8]
  MOVSXD r15,dword [rbp+28]
  DEC    r15
  CMP    r15,qword [rsp+56]
  JL    _Next880
; FreePBString(@*items\item[i]\Name$)
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+64]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rax,qword [rbp+10]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure74
; FreePBString(@*items\item[i]\Value$)          
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+64]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rax,qword [rbp+18]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure74
; FreePBString(@*items\item[i]\Extra$) 
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+64]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rax,qword [rbp+26]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure74
; Next i
_NextContinue880:
  INC    qword [rsp+56]
  JNO   _For879
_Next880:
; 
; FreeMemory(VariableGadget_List()\Items)
  MOV    rbp,qword [t_VariableGadget_List+8]
  PUSH   qword [rbp+32]
  POP    rcx
  CALL   PB_FreeMemory
; VariableGadget_List()\Items = 0
  MOV    qword [rbp+32],0
; EndIf
_EndIf878:
; 
; 
; 
; VariableGadget_List()\ItemCount       = 0
  MOV    rbp,qword [t_VariableGadget_List+8]
  MOV    dword [rbp+28],0
; VariableGadget_List()\CurrentParent   = -1 
  MOV    dword [rbp+52],-1
; VariableGadget_List()\CurrentSublevel = 0
  MOV    dword [rbp+56],0
; 
; 
; 
; If NbItems > 0
  MOV    r15,qword [rsp+PS286+8]
  AND    r15,r15
  JLE   _EndIf882
; VariableGadget_List()\Items = AllocateMemory(NbItems * SizeOf(VariableGadget_Entry))
  MOV    r15,qword [rsp+PS286+8]
  IMUL   r15,34
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [t_VariableGadget_List+8]
  POP    rax
  MOV    qword [rbp+32],rax
; EndIf
_EndIf882:
; 
; ClearGadgetItems(Gadget) 
  PUSH   qword [rsp+PS286+0]
  POP    rcx
  CALL   PB_ClearGadgetItems
; 
; 
; EndProcedure
_EndProcedureZero287:
  XOR    rax,rax
_EndProcedure287:
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure GranularityFromState(State)
_Procedure606:
  MOV    qword [rsp+8],rcx
  PUSH   r15
  PS606=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; If State = #MAX_PurifierState
  MOV    r15,qword [rsp+PS606+0]
  CMP    r15,14
  JNE   _EndIf3223
; ProcedureReturn 0 
  XOR    rax,rax
  JMP   _EndProcedure607
; Else
  JMP   _EndIf3222
_EndIf3223:
; ProcedureReturn 1 << State 
  MOV    r15,qword [rsp+PS606+0]
  MOV    rcx,r15
  MOV    rax,1
  SAL    rax,cl
  MOV    r15,rax
  MOV    rax,r15
  JMP   _EndProcedure607
; EndIf
_EndIf3222:
; EndProcedure
_EndProcedureZero607:
  XOR    rax,rax
_EndProcedure607:
  ADD    rsp,48
  POP    r15
  RET
; Procedure LibraryViewer_FreeObject(*Debugger.DebuggerData)
_Procedure552:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS552=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; If *Debugger\CurrentObjectData
  MOV    rbp,qword [rsp+PS552+0]
  CMP    qword [rbp+684],0
  JE    _EndIf2672
; 
; *Plugin.LibraryViewerPLUGIN = LibraryViewer_GetCurrentPlugin(*Debugger)
  PUSH   qword [rsp+PS552+0]
  POP    rcx
  CALL  _Procedure550
  MOV    qword [rsp+40],rax
; If *Plugin
  CMP    qword [rsp+40],0
  JE    _EndIf2674
; *Plugin\RemoveObject(*Debugger\CurrentObjectData)
  MOV    rbp,qword [rsp+40]
  PUSH   qword [rbp+28]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS552+16]
  PUSH   qword [rbp+684]
  POP    rcx
  SUB    rsp,32
  CALL   qword [rsp+40]
  ADD    rsp,40
  ADD    rsp,8
; EndIf
_EndIf2674:
; 
; FreeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Container])  
  MOV    rbp,qword [rsp+PS552+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2864]
  POP    rcx
  CALL   PB_FreeGadget
; *Debugger\Gadgets[#DEBUGGER_GADGET_Library_Container] = 0
  MOV    rbp,qword [rsp+PS552+0]
  PUSH   rbp
  POP    rbp
  MOV    qword [rbp+2864],0
; *Debugger\CurrentObjectData = 0
  MOV    rbp,qword [rsp+PS552+0]
  MOV    qword [rbp+684],0
; EndIf
_EndIf2672:
; 
; EndProcedure
_EndProcedureZero553:
  XOR    rax,rax
_EndProcedure553:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure Network_CheckErrors(*This.Network_Communication, *Command.CommandInfo, ProcessObject)
_Procedure414:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS414=64
  SUB    rsp,40
; 
; If *This\EndReceived
  MOV    rbp,qword [rsp+PS414+0]
  CMP    dword [rbp+48],0
  JE    _EndIf1373
; 
; ProcedureReturn #False    
  XOR    rax,rax
  JMP   _EndProcedure415
; 
; ElseIf *This\CommandReceived = 0 And ElapsedMilliseconds() - *This\CommandTimeout > DebuggerTimeout
  JMP   _EndIf1372
_EndIf1373:
  MOV    rbp,qword [rsp+PS414+0]
  MOVSXD r15,dword [rbp+36]
  AND    r15,r15
  JNE    No199
  CALL   PB_ElapsedMilliseconds
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS414+0]
  SUB    r15,qword [rbp+40]
  CMP    r15,qword [v_DebuggerTimeout]
  JLE    No199
Ok199:
  MOV    rax,1
  JMP    End199
No199:
  XOR    rax,rax
End199:
  AND    rax,rax
  JE    _EndIf1374
; *Command\Command   = #COMMAND_FatalError
  MOV    rbp,qword [rsp+PS414+8]
  MOV    dword [rbp],-1
; *Command\Value1    = #ERROR_Timeout
  MOV    rbp,qword [rsp+PS414+8]
  MOV    dword [rbp+8],4
; *Command\Value2    = 0
  MOV    rbp,qword [rsp+PS414+8]
  MOV    dword [rbp+12],0
; *Command\TimeStamp = Date()
  CALL   PB_Date
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS414+16]
  POP    rax
  MOV    dword [rbp+16],eax
; *This\IsFatalError = #True
  MOV    rbp,qword [rsp+PS414+0]
  MOV    dword [rbp+32],1
; ProcedureReturn #True
  MOV    rax,1
  JMP   _EndProcedure415
; 
; Else
  JMP   _EndIf1372
_EndIf1374:
; ProcedureReturn #False
  XOR    rax,rax
  JMP   _EndProcedure415
; 
; EndIf
_EndIf1372:
; 
; EndProcedure
_EndProcedureZero415:
  XOR    rax,rax
_EndProcedure415:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure DataBreakpointWindowEvents(*Debugger.DebuggerData, EventID)
_Procedure516:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS516=176
  MOV    rax,13
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; If EventID = #PB_Event_Menu   
  MOV    r15,qword [rsp+PS516+8]
  CMP    r15,13101
  JNE   _EndIf2519
; If EventMenu() = #DEBUGGER_MENU_Return
  CALL   PB_EventMenu
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf2521
; If GetActiveGadget() = *Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Condition]
  CALL   PB_GetActiveGadget
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS516+0]
  PUSH   rbp
  POP    rbp
  CMP    r15,qword [rbp+2784]
  JNE   _EndIf2523
; BreakPoint_AddItem(*Debugger)
  PUSH   qword [rsp+PS516+0]
  POP    rcx
  CALL  _Procedure514
; EndIf
_EndIf2523:
; EndIf
_EndIf2521:
; 
; ElseIf EventID = #PB_Event_Gadget
  JMP   _EndIf2518
_EndIf2519:
  MOV    r15,qword [rsp+PS516+8]
  CMP    r15,13100
  JNE   _EndIf2524
; Select EventGadget()    
  CALL   PB_EventGadget
  MOV    rax,rax
  PUSH   rax
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Add]  
  MOV    rbp,qword [rsp+PS516+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2752]
  CMP    r15,[rsp]
  JNE   _Case220
; BreakPoint_AddItem(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS516+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure514
  ADD    rsp,40
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Remove]  
  JMP   _EndSelect31
_Case220:
  MOV    rbp,qword [rsp+PS516+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2760]
  CMP    r15,[rsp]
  JNE   _Case221
; index = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS516+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    qword [rsp+48],rax
; If index <> -1
  MOV    r15,qword [rsp+48]
  CMP    r15,-1
  JE    _EndIf2526
; Command.CommandInfo\Command = #COMMAND_BreakPoint
  LEA    rbp,[rsp+56]
  MOV    dword [rbp],3
; Command\Value1 = 5 
  MOV    dword [rbp+8],5
; Command\Value2 = GetGadgetItemData(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List], index) 
  SUB    rsp,8
  PUSH   qword [rsp+56]
  MOV    rbp,qword [rsp+PS516+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetGadgetItemData
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  LEA    rbp,[rsp+64]
  POP    rax
  MOV    dword [rbp+12],eax
; SendDebuggerCommand(*Debugger, @Command)              
  SUB    rsp,8
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS516+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; RemoveGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List], index)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  MOV    rbp,qword [rsp+PS516+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_RemoveGadgetItem
  ADD    rsp,40
; EndIf
_EndIf2526:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Clear] 
  JMP   _EndSelect31
_Case221:
  MOV    rbp,qword [rsp+PS516+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2768]
  CMP    r15,[rsp]
  JNE   _Case222
; Command.CommandInfo\Command = #COMMAND_BreakPoint
  LEA    rbp,[rsp+56]
  MOV    dword [rbp],3
; Command\Value1 = 6 
  MOV    dword [rbp+8],6
; SendDebuggerCommand(*Debugger, @Command)  
  SUB    rsp,8
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS516+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; ClearGadgetItems(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS516+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ClearGadgetItems
  ADD    rsp,40
; 
; EndSelect
_Case222:
_EndSelect31:
  POP    rax
; 
; ElseIf EventID = #PB_Event_SizeWindow
  JMP   _EndIf2518
_EndIf2524:
  MOV    r15,qword [rsp+PS516+8]
  CMP    r15,13118
  JNE   _EndIf2527
; Width  = WindowWidth (*Debugger\Windows[#DEBUGGER_WINDOW_DataBreakPoints])
  MOV    rbp,qword [rsp+PS516+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  POP    rcx
  CALL   PB_WindowWidth
  MOV    qword [rsp+72],rax
; Height = WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_DataBreakPoints])       
  MOV    rbp,qword [rsp+PS516+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  POP    rcx
  CALL   PB_WindowHeight
  MOV    qword [rsp+80],rax
; 
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Add], @ButtonWidth, @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+104]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+104]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS516+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2752]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; ButtonWidth  = Max(ButtonWidth, 120)
  PUSH   qword 120
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+88],rax
; ButtonWidth  = Max(ButtonWidth, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Remove])) 
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS516+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2760]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+88],rax
; ButtonWidth  = Max(ButtonWidth, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Clear]))    
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS516+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2768]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+88],rax
; ComboHeight  = GetRequiredHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Procedure])
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS516+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2776]
  POP    rcx
  POP    rdx
  CALL  _Procedure92
  MOV    qword [rsp+104],rax
; StringHeight = GetRequiredHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Condition])
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS516+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2784]
  POP    rcx
  POP    rdx
  CALL  _Procedure92
  MOV    qword [rsp+112],rax
; TextWidth    = Max(80, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Text1]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS516+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2800]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 80
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+120],rax
; TextWidth    = Max(TextWidth, GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Text2]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS516+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2808]
  POP    rcx
  POP    rdx
  CALL  _Procedure90
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+128]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+120],rax
; TopOffset    = Frame3DTopOffset(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Frame]) + 5
  MOV    rbp,qword [rsp+PS516+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2792]
  POP    rcx
  CALL  _Procedure94
  MOV    r15,rax
  ADD    r15,5
  MOV    qword [rsp+128],r15
; 
; BoxHeight    = Max(ButtonHeight*3+20, TopOffset+ComboHeight+StringHeight+20)
  MOV    r15,qword [rsp+128]
  ADD    r15,qword [rsp+104]
  ADD    r15,qword [rsp+112]
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+104]
  IMUL   r15,3
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+136],rax
; ButtonHeight = (BoxHeight-20) / 3
  MOV    r15,qword [rsp+136]
  ADD    r15,-20
  MOV    rax,r15
  MOV    rcx,3
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    qword [rsp+96],r15
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List], 10, 10, Width-20, Height-30-BoxHeight) 
  SUB    rsp,8
  MOV    r15,qword [rsp+88]
  SUB    r15,qword [rsp+144]
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+88]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS516+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Frame], 10, Height-10-BoxHeight, Width-30-ButtonWidth, BoxHeight)
  SUB    rsp,8
  PUSH   qword [rsp+144]
  MOV    r15,qword [rsp+88]
  SUB    r15,qword [rsp+104]
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+160]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS516+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2792]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Text1], 25, Height-10-BoxHeight+TopOffset, TextWidth, ComboHeight)
  SUB    rsp,8
  PUSH   qword [rsp+112]
  PUSH   qword [rsp+136]
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+160]
  ADD    r15,qword [rsp+152]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 25
  MOV    rbp,qword [rsp+PS516+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2800]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Text2], 25, Height-BoxHeight+TopOffset+ComboHeight, TextWidth, StringHeight)
  SUB    rsp,8
  PUSH   qword [rsp+120]
  PUSH   qword [rsp+136]
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+160]
  ADD    r15,qword [rsp+152]
  ADD    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 25
  MOV    rbp,qword [rsp+PS516+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2808]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Procedure], 30+TextWidth, Height-10-BoxHeight+TopOffset, Width-65-ButtonWidth-TextWidth, ComboHeight)
  SUB    rsp,8
  PUSH   qword [rsp+112]
  MOV    r15,qword [rsp+88]
  SUB    r15,qword [rsp+104]
  SUB    r15,qword [rsp+136]
  ADD    r15,-65
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+160]
  ADD    r15,qword [rsp+152]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+152]
  ADD    r15,30
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS516+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2776]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Condition],  30+TextWidth, Height-BoxHeight+TopOffset+ComboHeight, Width-65-ButtonWidth-TextWidth, StringHeight)
  SUB    rsp,8
  PUSH   qword [rsp+120]
  MOV    r15,qword [rsp+88]
  SUB    r15,qword [rsp+104]
  SUB    r15,qword [rsp+136]
  ADD    r15,-65
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+160]
  ADD    r15,qword [rsp+152]
  ADD    r15,qword [rsp+128]
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+152]
  ADD    r15,30
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS516+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2784]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Add],    Width-10-ButtonWidth, Height-30-ButtonHeight*3, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+104]
  MOV    r15,qword [rsp+104]
  MOV    r14,qword [rsp+120]
  IMUL   r14,3
  SUB    r15,r14
  ADD    r15,-30
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+120]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS516+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2752]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Remove], Width-10-ButtonWidth, Height-20-ButtonHeight*2, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+104]
  MOV    r15,qword [rsp+104]
  MOV    r14,qword [rsp+120]
  ADD    r14,r14
  SUB    r15,r14
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+120]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS516+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2760]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Clear],  Width-10-ButtonWidth, Height-10-ButtonHeight*1, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+104]
  MOV    r15,qword [rsp+104]
  MOV    r14,qword [rsp+120]
  SUB    r15,r14
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+104]
  SUB    r15,qword [rsp+120]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS516+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2768]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; ElseIf EventID = #PB_Event_CloseWindow
  JMP   _EndIf2518
_EndIf2527:
  MOV    r15,qword [rsp+PS516+8]
  CMP    r15,13116
  JNE   _EndIf2528
; If DebuggerMemorizeWindows And IsWindowMinimized(*Debugger\Windows[#DEBUGGER_WINDOW_DataBreakPoints]) = 0
  CMP    qword [v_DebuggerMemorizeWindows],0
  JE     No282
  MOV    rbp,qword [rsp+PS516+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  POP    rcx
  CALL  _Procedure104
  MOV    r15,rax
  AND    r15,r15
  JNE    No282
Ok282:
  MOV    rax,1
  JMP    End282
No282:
  XOR    rax,rax
End282:
  AND    rax,rax
  JE    _EndIf2530
; DataBreakpointWindowMaximize = IsWindowMaximized(*Debugger\Windows[#DEBUGGER_WINDOW_DataBreakPoints])
  MOV    rbp,qword [rsp+PS516+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  POP    rcx
  CALL  _Procedure102
  MOV    qword [v_DataBreakpointWindowMaximize],rax
; If DataBreakpointWindowMaximize = 0      
  MOV    r15,qword [v_DataBreakpointWindowMaximize]
  AND    r15,r15
  JNE   _EndIf2532
; DataBreakpointWindowX = WindowX(*Debugger\Windows[#DEBUGGER_WINDOW_DataBreakPoints])
  MOV    rbp,qword [rsp+PS516+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  POP    rcx
  CALL   PB_WindowX
  MOV    qword [v_DataBreakpointWindowX],rax
; DataBreakpointWindowY = WindowY(*Debugger\Windows[#DEBUGGER_WINDOW_DataBreakPoints])
  MOV    rbp,qword [rsp+PS516+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  POP    rcx
  CALL   PB_WindowY
  MOV    qword [v_DataBreakpointWindowY],rax
; DataBreakpointWindowWidth  = WindowWidth (*Debugger\Windows[#DEBUGGER_WINDOW_DataBreakPoints])
  MOV    rbp,qword [rsp+PS516+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  POP    rcx
  CALL   PB_WindowWidth
  MOV    qword [v_DataBreakpointWindowWidth],rax
; DataBreakpointWindowHeight = WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_DataBreakPoints])
  MOV    rbp,qword [rsp+PS516+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  POP    rcx
  CALL   PB_WindowHeight
  MOV    qword [v_DataBreakpointWindowHeight],rax
; EndIf
_EndIf2532:
; EndIf    
_EndIf2530:
; 
; 
; 
; HideWindow(*Debugger\Windows[#DEBUGGER_WINDOW_DataBreakPoints], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS516+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+896]
  POP    rcx
  POP    rdx
  CALL   PB_HideWindow
; *Debugger\DataBreakpointsVisible = 0
  MOV    rbp,qword [rsp+PS516+0]
  MOV    dword [rbp+136],0
; Debugger_CheckDestroy(*Debugger)
  PUSH   qword [rsp+PS516+0]
  POP    rcx
  CALL  _Procedure426
; 
; EndIf  
_EndIf2518:
_EndIf2528:
; 
; EndProcedure
_EndProcedureZero517:
  XOR    rax,rax
_EndProcedure517:
  ADD    rsp,144
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure LibraryViewerEvents(*Debugger.DebuggerData, EventID)
_Procedure560:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS560=144
  MOV    rax,10
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; If EventID = #PB_Event_Gadget
  MOV    r15,qword [rsp+PS560+8]
  CMP    r15,13100
  JNE   _EndIf2698
; Select EventGadget()
  CALL   PB_EventGadget
  MOV    rax,rax
  PUSH   rax
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList]              
  MOV    rbp,qword [rsp+PS560+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2824]
  CMP    r15,[rsp]
  JNE   _Case239
; index = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList])        
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS560+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2824]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    qword [rsp+48],rax
; If index <> *Debugger\CurrentLibrary                    
  MOV    r15,qword [rsp+48]
  MOV    rbp,qword [rsp+PS560+8]
  MOVSXD rax,dword [rbp+660]
  CMP    r15,rax
  JE    _EndIf2700
; LibraryViewer_ClearDisplay(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS560+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure554
  ADD    rsp,40
; 
; If index <> -1
  MOV    r15,qword [rsp+48]
  CMP    r15,-1
  JE    _EndIf2702
; LibraryViewer_DisplayLibrary(*Debugger, index)
  SUB    rsp,8
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+PS560+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure556
  ADD    rsp,40
; EndIf
_EndIf2702:
; 
; EndIf
_EndIf2700:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Library_Update]
  JMP   _EndSelect36
_Case239:
  MOV    rbp,qword [rsp+PS560+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2872]
  CMP    r15,[rsp]
  JNE   _Case240
; If *Debugger\CurrentLibrary <> -1 
  MOV    rbp,qword [rsp+PS560+8]
  MOVSXD r15,dword [rbp+660]
  CMP    r15,-1
  JE    _EndIf2704
; Command.CommandInfo\Command = #COMMAND_GetLibraryInfo
  LEA    rbp,[rsp+56]
  MOV    dword [rbp],25
; Command\Value1 = *Debugger\CurrentLibrary
  MOV    rbp,qword [rsp+PS560+8]
  MOVSXD rax,dword [rbp+660]
  PUSH   rax
  LEA    rbp,[rsp+64]
  POP    rax
  MOV    dword [rbp+8],eax
; SendDebuggerCommand(*Debugger, @Command)
  SUB    rsp,8
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS560+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; EndIf        
_EndIf2704:
; 
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectList]
  JMP   _EndSelect36
_Case240:
  MOV    rbp,qword [rsp+PS560+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2832]
  CMP    r15,[rsp]
  JNE   _Case241
; index = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectList])
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS560+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2832]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetGadgetState
  ADD    rsp,40
  MOV    qword [rsp+48],rax
; If index <> *Debugger\CurrentObject 
  MOV    r15,qword [rsp+48]
  MOV    rbp,qword [rsp+PS560+8]
  MOVSXD rax,dword [rbp+664]
  CMP    r15,rax
  JE    _EndIf2706
; LibraryViewer_DisplayObject(*Debugger, index)        
  SUB    rsp,8
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+PS560+24]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure558
  ADD    rsp,40
; EndIf
_EndIf2706:
; 
; Case *Debugger\Gadgets[#DEBUGGER_GADGET_Library_Splitter1], *Debugger\Gadgets[#DEBUGGER_GADGET_Library_Splitter2]
  JMP   _EndSelect36
_Case241:
  MOV    rbp,qword [rsp+PS560+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2880]
  CMP    r15,[rsp]
  JE    _Case242
  MOV    rbp,qword [rsp+PS560+8]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+2888]
  CMP    r15,[rsp]
  JNE   _Case243
_Case242:
; If *Debugger\CurrentObjectData
  MOV    rbp,qword [rsp+PS560+8]
  CMP    qword [rbp+684],0
  JE    _EndIf2708
; *Plugin.LibraryViewerPLUGIN = LibraryViewer_GetCurrentPlugin(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS560+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure550
  ADD    rsp,40
  MOV    qword [rsp+80],rax
; If *Plugin And *Plugin\SetObjectSize 
  CMP    qword [rsp+80],0
  JE     No290
  MOV    rbp,qword [rsp+80]
  CMP    qword [rbp+52],0
  JE     No290
Ok290:
  MOV    rax,1
  JMP    End290
No290:
  XOR    rax,rax
End290:
  AND    rax,rax
  JE    _EndIf2710
; Width  = GadgetWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectData2])  - 4
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS560+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetWidth
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,-4
  MOV    qword [rsp+88],r15
; Height = GadgetHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectData2]) - 4
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS560+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetHeight
  ADD    rsp,40
  MOV    r15,rax
  ADD    r15,-4
  MOV    qword [rsp+96],r15
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Container], 0, 0, Width, Height)
  PUSH   qword [rsp+96]
  PUSH   qword [rsp+96]
  PUSH   qword 0
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS560+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2864]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,40
; 
; 
; 
; 
; 
; 
; 
; *Plugin\SetObjectSize(*Debugger\CurrentObjectData, Width, Height)
  MOV    rbp,qword [rsp+80]
  PUSH   qword [rbp+52]
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+104]
  MOV    rbp,qword [rsp+PS560+32]
  PUSH   qword [rbp+684]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   qword [rsp+32]
  ADD    rsp,32
  ADD    rsp,8
; EndIf
_EndIf2710:
; EndIf      
_EndIf2708:
; 
; Default
  JMP   _EndSelect36
_Case243:
; If *Debugger\CurrentObjectData
  MOV    rbp,qword [rsp+PS560+8]
  CMP    qword [rbp+684],0
  JE    _EndIf2712
; *Plugin.LibraryViewerPLUGIN = LibraryViewer_GetCurrentPlugin(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS560+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure550
  ADD    rsp,40
  MOV    qword [rsp+80],rax
; If *Plugin And *Plugin\ProcessEvents 
  CMP    qword [rsp+80],0
  JE     No291
  MOV    rbp,qword [rsp+80]
  CMP    qword [rbp+60],0
  JE     No291
Ok291:
  MOV    rax,1
  JMP    End291
No291:
  XOR    rax,rax
End291:
  AND    rax,rax
  JE    _EndIf2714
; *Plugin\ProcessEvents(*Debugger\CurrentObjectData, EventGadget(), EventType())
  MOV    rbp,qword [rsp+80]
  PUSH   qword [rbp+60]
  SUB    rsp,32
  CALL   PB_EventType
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  SUB    rsp,8
  SUB    rsp,32
  CALL   PB_EventGadget
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS560+32]
  PUSH   qword [rbp+684]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   qword [rsp+32]
  ADD    rsp,32
  ADD    rsp,8
; EndIf
_EndIf2714:
; EndIf
_EndIf2712:
; 
; 
; EndSelect
_Case244:
_EndSelect36:
  POP    rax
; 
; ElseIf EventID = #PB_Event_SizeWindow
  JMP   _EndIf2697
_EndIf2698:
  MOV    r15,qword [rsp+PS560+8]
  CMP    r15,13118
  JNE   _EndIf2715
; Width  = WindowWidth (*Debugger\Windows[#DEBUGGER_WINDOW_Library])
  MOV    rbp,qword [rsp+PS560+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+880]
  POP    rcx
  CALL   PB_WindowWidth
  MOV    qword [rsp+80],rax
; Height = WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_Library])
  MOV    rbp,qword [rsp+PS560+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+880]
  POP    rcx
  CALL   PB_WindowHeight
  MOV    qword [rsp+88],rax
; 
; GetRequiredSize(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Update], @ButtonWidth, @ButtonHeight)
  PUSH   qword 0
  LEA    rax,[rsp+112]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+112]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS560+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2872]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; ButtonWidth  = Max(ButtonWidth, 100)
  PUSH   qword 100
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+96],rax
; ButtonHeight = Max(ButtonHeight, GetRequiredHeight(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList]))
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS560+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2824]
  POP    rcx
  POP    rdx
  CALL  _Procedure92
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+104],rax
; TextWidth    = Max(GetRequiredWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Text1]), 120)
  PUSH   qword 120
  SUB    rsp,8
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS560+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2816]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure90
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL  _Procedure86
  MOV    qword [rsp+112],rax
; 
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Text1], 10, 10, TextWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+112]
  PUSH   qword [rsp+128]
  PUSH   qword 10
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS560+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2816]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_LibraryList], 20+TextWidth, 10, Width-40-TextWidth-ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+112]
  MOV    r15,qword [rsp+96]
  SUB    r15,qword [rsp+128]
  SUB    r15,qword [rsp+112]
  ADD    r15,-40
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    r15,qword [rsp+144]
  ADD    r15,20
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS560+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2824]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Update], Width-10-ButtonWidth, 10, ButtonWidth, ButtonHeight)
  SUB    rsp,8
  PUSH   qword [rsp+112]
  PUSH   qword [rsp+112]
  PUSH   qword 10
  MOV    r15,qword [rsp+112]
  SUB    r15,qword [rsp+128]
  ADD    r15,-10
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS560+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2872]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Splitter1], 10, 15+ButtonHeight, Width-20, Height-25-ButtonHeight)
  SUB    rsp,8
  MOV    r15,qword [rsp+96]
  SUB    r15,qword [rsp+112]
  ADD    r15,-25
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+96]
  ADD    r15,-20
  MOV    rax,r15
  PUSH   rax
  MOV    r15,qword [rsp+128]
  ADD    r15,15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 10
  MOV    rbp,qword [rsp+PS560+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2880]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; ElseIf EventID = #PB_Event_CloseWindow
  JMP   _EndIf2697
_EndIf2715:
  MOV    r15,qword [rsp+PS560+8]
  CMP    r15,13116
  JNE   _EndIf2716
; 
; If DebuggerMemorizeWindows And IsWindowMinimized(*Debugger\Windows[#DEBUGGER_WINDOW_Library]) = 0
  CMP    qword [v_DebuggerMemorizeWindows],0
  JE     No292
  MOV    rbp,qword [rsp+PS560+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+880]
  POP    rcx
  CALL  _Procedure104
  MOV    r15,rax
  AND    r15,r15
  JNE    No292
Ok292:
  MOV    rax,1
  JMP    End292
No292:
  XOR    rax,rax
End292:
  AND    rax,rax
  JE    _EndIf2718
; LibraryViewerMaximize = IsWindowMaximized(*Debugger\Windows[#DEBUGGER_WINDOW_Library])
  MOV    rbp,qword [rsp+PS560+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+880]
  POP    rcx
  CALL  _Procedure102
  MOV    qword [v_LibraryViewerMaximize],rax
; If LibraryViewerMaximize = 0    
  MOV    r15,qword [v_LibraryViewerMaximize]
  AND    r15,r15
  JNE   _EndIf2720
; LibraryViewerX = WindowX(*Debugger\Windows[#DEBUGGER_WINDOW_Library])
  MOV    rbp,qword [rsp+PS560+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+880]
  POP    rcx
  CALL   PB_WindowX
  MOV    qword [v_LibraryViewerX],rax
; LibraryViewerY = WindowY(*Debugger\Windows[#DEBUGGER_WINDOW_Library])
  MOV    rbp,qword [rsp+PS560+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+880]
  POP    rcx
  CALL   PB_WindowY
  MOV    qword [v_LibraryViewerY],rax
; LibraryViewerWidth  = WindowWidth (*Debugger\Windows[#DEBUGGER_WINDOW_Library])
  MOV    rbp,qword [rsp+PS560+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+880]
  POP    rcx
  CALL   PB_WindowWidth
  MOV    qword [v_LibraryViewerWidth],rax
; LibraryViewerHeight = WindowHeight(*Debugger\Windows[#DEBUGGER_WINDOW_Library])
  MOV    rbp,qword [rsp+PS560+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+880]
  POP    rcx
  CALL   PB_WindowHeight
  MOV    qword [v_LibraryViewerHeight],rax
; LibraryViewerSplitter1 = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Splitter1])
  MOV    rbp,qword [rsp+PS560+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2880]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    qword [v_LibraryViewerSplitter1],rax
; LibraryViewerSplitter2 = GetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_Splitter2])
  MOV    rbp,qword [rsp+PS560+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2888]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    qword [v_LibraryViewerSplitter2],rax
; EndIf
_EndIf2720:
; EndIf
_EndIf2718:
; 
; LibraryViewer_FreeObject(*Debugger)
  PUSH   qword [rsp+PS560+0]
  POP    rcx
  CALL  _Procedure552
; 
; CloseWindow(*Debugger\Windows[#DEBUGGER_WINDOW_Library])
  MOV    rbp,qword [rsp+PS560+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+880]
  POP    rcx
  CALL   PB_CloseWindow
; *Debugger\Windows[#DEBUGGER_WINDOW_Library] = 0
  MOV    rbp,qword [rsp+PS560+0]
  PUSH   rbp
  POP    rbp
  MOV    qword [rbp+880],0
; 
; If *Debugger\ObjectList 
  MOV    rbp,qword [rsp+PS560+0]
  CMP    qword [rbp+652],0
  JE    _EndIf2722
; FreeMemory(*Debugger\ObjectList)
  MOV    rbp,qword [rsp+PS560+0]
  PUSH   qword [rbp+652]
  POP    rcx
  CALL   PB_FreeMemory
; *Debugger\ObjectList = 0
  MOV    rbp,qword [rsp+PS560+0]
  MOV    qword [rbp+652],0
; EndIf    
_EndIf2722:
; 
; Debugger_CheckDestroy(*Debugger)    
  PUSH   qword [rsp+PS560+0]
  POP    rcx
  CALL  _Procedure426
; 
; EndIf
_EndIf2697:
_EndIf2716:
; 
; EndProcedure
_EndProcedureZero561:
  XOR    rax,rax
_EndProcedure561:
  ADD    rsp,120
  POP    r15
  POP    rbp
  RET
; Procedure.s Network_GetInfo(*This.Network_Communication)
_Procedure404:
  MOV    qword [rsp+8],rcx
  PS404=48
  SUB    rsp,40
  MOV    rax,[rsp+PS404+32]
  MOV    qword [PB_StringBasePosition],rax
; ProcedureReturn "" 
  MOV    rcx,_S3
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure405
; EndProcedure
_EndProcedureZero405:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure405:
  ADD    rsp,40
  RET
; Procedure IsASMKeyword(Word$)
_Procedure228:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS228=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS228+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; 
; Word$ = UCase(Word$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; k = ASMKeywordsHT(Asc(Word$))  
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_Asc
  MOV    r15,rax
  MOV    rbp,qword [a_ASMKeywordsHT]
  SAL    r15,2
  MOVSXD rax,dword [rbp+r15]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+48],rax
; If k
  CMP    qword [rsp+48],0
  JE    _EndIf445
; While Quit = 0 And k <= NbASMKeywords
_While446:
  MOV    r15,qword [rsp+56]
  AND    r15,r15
  JNE    No29
  MOV    r15,qword [rsp+48]
  MOVSXD rax,dword [v_NbASMKeywords]
  CMP    r15,rax
  JG     No29
Ok29:
  MOV    rax,1
  JMP    End29
No29:
  XOR    rax,rax
End29:
  AND    rax,rax
  JE    _Wend446
; 
; If ASMKeywords(k) <= Word$
  MOV    r15,qword [rsp+48]
  MOV    rbp,qword [a_ASMKeywords]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  MOV    rcx,qword [rsp+48]
  POP    rdx
  CALL   SYS_StringSuperior
  OR     rax,rax
  JNE   _EndIf448
; If ASMKeywords(k) = Word$
  MOV    r15,qword [rsp+48]
  MOV    rbp,qword [a_ASMKeywords]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  MOV    rcx,qword [rsp+48]
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf450
; ASMKeyword$ = ASMKeywords(k)
  MOV    r15,qword [rsp+48]
  MOV    rbp,qword [a_ASMKeywords]
  SAL    r15,3
  MOV    rcx,qword [rbp+r15]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[v_ASMKeyword$]
  POP    rdx
  CALL   SYS_AllocateString4
; Result = k
  PUSH   qword [rsp+48]
  POP    rax
  MOV    qword [rsp+64],rax
; Quit = 1
  MOV    qword [rsp+56],1
; EndIf
_EndIf450:
; Else
  JMP   _EndIf447
_EndIf448:
; Quit = 1
  MOV    qword [rsp+56],1
; EndIf
_EndIf447:
; 
; k+1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; Wend
  JMP   _While446
_Wend446:
; EndIf
_EndIf445:
; 
; ProcedureReturn Result
  MOV    rax,qword [rsp+64]
  JMP   _EndProcedure229
; EndProcedure
_EndProcedureZero229:
  XOR    rax,rax
_EndProcedure229:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure Debugger_End(*Debugger.DebuggerData)
_Procedure428:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS428=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; UpdateDebugOutputWindow(*Debugger)
  PUSH   qword [rsp+PS428+0]
  POP    rcx
  CALL  _Procedure56
; 
; *Debugger\CanDestroy = 1  
  MOV    rbp,qword [rsp+PS428+0]
  MOV    dword [rbp+124],1
; Debugger_CheckDestroy(*Debugger) 
  PUSH   qword [rsp+PS428+0]
  POP    rcx
  CALL  _Procedure426
; 
; EndProcedure
_EndProcedureZero429:
  XOR    rax,rax
_EndProcedure429:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure IsDecNumber(*string.BYTE, length)
_Procedure238:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS238=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; If length < 0 Or ByteUcase(*string\b) = 'E' 
  MOV    r15,qword [rsp+PS238+8]
  AND    r15,r15
  JL     Ok44
  MOV    rbp,qword [rsp+PS238+0]
  MOVSX  rax,byte [rbp]
  PUSH   rax
  POP    rcx
  CALL  _Procedure216
  MOV    r15,rax
  CMP    r15,69
  JE     Ok44
  JMP    No44
Ok44:
  MOV    rax,1
  JMP    End44
No44:
  XOR    rax,rax
End44:
  AND    rax,rax
  JE    _EndIf496
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure239
; EndIf
_EndIf496:
; 
; *bufferend = *string + length
  MOV    r15,qword [rsp+PS238+0]
  ADD    r15,qword [rsp+PS238+8]
  MOV    qword [rsp+40],r15
; While *string < *bufferend
_While497:
  MOV    r15,qword [rsp+PS238+0]
  CMP    r15,qword [rsp+40]
  JGE   _Wend497
; If (*string\b < 48 Or *string\b > 57) And *string\b <> 'e' And *string\b <> 'E' And *string\b <> '-' And *string\b <> '+' 
  MOV    rbp,qword [rsp+PS238+0]
  MOVSX  r15,byte [rbp]
  CMP    r15,48
  JL     Ok45
  MOV    rbp,qword [rsp+PS238+0]
  MOVSX  r15,byte [rbp]
  CMP    r15,57
  JG     Ok45
  JMP    No45
Ok45:
  MOV    rax,1
  JMP    End45
No45:
  XOR    rax,rax
End45:
  AND    rax,rax
  JE     No46
  MOV    rbp,qword [rsp+PS238+0]
  MOVSX  r15,byte [rbp]
  CMP    r15,101
  JE     No46
  MOV    rbp,qword [rsp+PS238+0]
  MOVSX  r15,byte [rbp]
  CMP    r15,69
  JE     No46
  MOV    rbp,qword [rsp+PS238+0]
  MOVSX  r15,byte [rbp]
  CMP    r15,45
  JE     No46
  MOV    rbp,qword [rsp+PS238+0]
  MOVSX  r15,byte [rbp]
  CMP    r15,43
  JE     No46
Ok46:
  MOV    rax,1
  JMP    End46
No46:
  XOR    rax,rax
End46:
  AND    rax,rax
  JE    _EndIf499
; ProcedureReturn 0
  XOR    rax,rax
  JMP   _EndProcedure239
; EndIf
_EndIf499:
; *string + 1
  MOV    r15,qword [rsp+PS238+0]
  INC    r15
  MOV    qword [rsp+PS238+0],r15
; Wend
  JMP   _While497
_Wend497:
; ProcedureReturn 1
  MOV    rax,1
  JMP   _EndProcedure239
; EndProcedure
_EndProcedureZero239:
  XOR    rax,rax
_EndProcedure239:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure UpdatePurifierWindow(*Debugger.DebuggerData)
_Procedure622:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS622=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; SetWindowTitle(*Debugger\Windows[#DEBUGGER_WINDOW_Purifier], Language("Debugger","PurifierTitle") + " - " + DebuggerTitle(*Debugger\FileName$))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S332
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS622+48]
  PUSH   qword [rbp+80]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure260
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS622+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+904]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetWindowTitle
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Frame], Language("Debugger","PurifierIntervall")) ; DO NOT FIX TYPO: PurifierIntervall
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S333
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS622+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3024]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TextGlobal], Language("Debugger","GlobalIntervall")) ; DO NOT FIX TYPO: GlobalIntervall
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S334
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS622+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3032]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TextLocal], Language("Debugger","LocalIntervall")) ; DO NOT FIX TYPO: LocalIntervall
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S335
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS622+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3056]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TextString], Language("Debugger","StringIntervall")) ; DO NOT FIX TYPO: StringIntervall
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S336
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS622+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3080]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TextDynamic], Language("Debugger","DynamicIntervall")) ; DO NOT FIX TYPO: DynamicIntervall
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S337
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS622+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3104]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Ok], Language("Misc","Ok"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S113
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS622+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3128]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Cancel], Language("Misc","Cancel"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S112
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS622+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3136]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Apply], Language("Preferences","Apply"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S339
  PUSH   rax
  MOV    rax,_S338
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS622+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3144]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; UpdatePurifierLines(*Debugger)
  PUSH   qword [rsp+PS622+0]
  POP    rcx
  CALL  _Procedure610
; ResizePurifierWindow(*Debugger)
  PUSH   qword [rsp+PS622+0]
  POP    rcx
  CALL  _Procedure620
; 
; EndProcedure
_EndProcedureZero623:
  XOR    rax,rax
_EndProcedure623:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure VariableGadget_Add(Type, DynamicType, Sublevel, Extra$, Name$, ModuleName$, *Value, Is64bit)
_Procedure292:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PUSH   rbp
  PUSH   r15
  PS292=144
  MOV    rax,10
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
  MOV    rdx,[rsp+PS292+24]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
  MOV    rdx,[rsp+PS292+32]
  LEA    rcx,[rsp+48]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
  MOV    rdx,[rsp+PS292+40]
  LEA    rcx,[rsp+56]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; Shared *VariableGadget_Used.VariableGadget
; 
; 
; If ModuleName$ <> ""
  PUSH   qword [rsp+56]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf897
; Name$ = ModuleName$ + "::" + Name$
  MOV    rcx,qword [rsp+56]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S31
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf897:
; 
; If IS_ARRAY(Type) Or IS_LINKEDLIST(Type) Or IS_MAP(Type)
  MOV    r15,qword [rsp+PS292+0]
  AND    r15,63
  CMP    r15,15
  JE     Ok159
  MOV    r15,qword [rsp+PS292+0]
  AND    r15,63
  CMP    r15,14
  JE     Ok160
  MOV    r15,qword [rsp+PS292+0]
  AND    r15,63
  CMP    r15,22
  JE     Ok160
  JMP    No160
Ok160:
  MOV    rax,1
  JMP    End160
No160:
  XOR    rax,rax
End160:
  AND    rax,rax
  JNE    Ok159
  JMP    No159
Ok159:
  MOV    rax,1
  JMP    End159
No159:
  XOR    rax,rax
End159:
  AND    rax,rax
  JE    _EndIf899
; Kind = Type
  PUSH   qword [rsp+PS292+0]
  POP    rax
  MOV    qword [rsp+64],rax
; Type = DynamicType
  PUSH   qword [rsp+PS292+8]
  POP    rax
  MOV    qword [rsp+PS292+0],rax
; Else
  JMP   _EndIf898
_EndIf899:
; Kind = 0
  MOV    qword [rsp+64],0
; EndIf
_EndIf898:
; 
; Type & #IGNORE_PARAM 
  MOV    r15,qword [rsp+PS292+0]
  AND    r15,191
  MOV    qword [rsp+PS292+0],r15
; 
; index = *VariableGadget_Used\ItemCount
  MOV    rbp,qword [p_VariableGadget_Used]
  MOVSXD rax,dword [rbp+12]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+72],rax
; *items.VariableGadget_ItemList = *VariableGadget_Used\Items  
  MOV    rbp,qword [p_VariableGadget_Used]
  PUSH   qword [rbp+16]
  POP    rax
  MOV    qword [rsp+80],rax
; 
; 
; If *VariableGadget_Used\ExtraColumns > 0
  MOV    rbp,qword [p_VariableGadget_Used]
  MOVSXD r15,dword [rbp+8]
  AND    r15,r15
  JLE   _EndIf902
; If Extra$ = ""
  PUSH   qword [rsp+40]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf904
; Extra$ = RSet("", *VariableGadget_Used\ExtraColumns, Chr(10))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S88
  PUSH   rax
  MOV    rbp,qword [p_VariableGadget_Used]
  MOVSXD rax,dword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  MOV    rax,_S3
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_RSet2
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf903
_EndIf904:
; Extra$ + Chr(10)
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf903:
; EndIf
_EndIf902:
; 
; If *items
  CMP    qword [rsp+80],0
  JE    _EndIf907
; 
; While *VariableGadget_Used\CurrentSublevel > Sublevel And *VariableGadget_Used\CurrentParent <> -1
_While908:
  MOV    rbp,qword [p_VariableGadget_Used]
  MOVSXD r15,dword [rbp+40]
  CMP    r15,qword [rsp+PS292+16]
  JLE    No161
  MOV    rbp,qword [p_VariableGadget_Used]
  MOVSXD r15,dword [rbp+36]
  CMP    r15,-1
  JE     No161
Ok161:
  MOV    rax,1
  JMP    End161
No161:
  XOR    rax,rax
End161:
  AND    rax,rax
  JE    _Wend908
; *VariableGadget_Used\CurrentParent = *items\item[*VariableGadget_Used\CurrentParent]\Parent
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rbp,qword [p_VariableGadget_Used]
  MOVSXD rax,dword [rbp+36]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSXD rax,dword [rbp+6]
  PUSH   rax
  MOV    rbp,qword [p_VariableGadget_Used]
  POP    rax
  MOV    dword [rbp+36],eax
; *VariableGadget_Used\CurrentSublevel - 1
  MOV    rbp,qword [p_VariableGadget_Used]
  MOVSXD r15,dword [rbp+40]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [p_VariableGadget_Used]
  POP    rax
  MOV    dword [rbp+40],eax
; Wend
  JMP   _While908
_Wend908:
; *VariableGadget_Used\CurrentSublevel = Sublevel
  PUSH   qword [rsp+PS292+16]
  MOV    rbp,qword [p_VariableGadget_Used]
  POP    rax
  MOV    dword [rbp+40],eax
; 
; *items\item[index]\Kind     = Kind
  PUSH   qword [rsp+64]
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    byte [rbp],al
; *items\item[index]\Type     = Type    
  PUSH   qword [rsp+PS292+0]
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    byte [rbp+1],al
; *items\item[index]\Node     = 0
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    word [rbp+2],0
; *items\item[index]\SubLevel = SubLevel    
  PUSH   qword [rsp+PS292+16]
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    word [rbp+4],ax
; *items\item[index]\Parent   = *VariableGadget_Used\CurrentParent    
  MOV    rbp,qword [p_VariableGadget_Used]
  MOVSXD rax,dword [rbp+36]
  PUSH   rax
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    dword [rbp+6],eax
; *items\item[index]\Name$    = Name$
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+10]
  POP    rdx
  CALL   SYS_AllocateString4
; *items\item[index]\Extra$   = Extra$
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+26]
  POP    rdx
  CALL   SYS_AllocateString4
; *items\item[index]\Value$   = ""
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rdx,_S3
  LEA    rcx,[rbp+18]
  CALL   SYS_FastAllocateStringFree4
; 
; If IS_ARRAY(Kind)
  MOV    r15,qword [rsp+64]
  AND    r15,63
  CMP    r15,15
  JNE   _EndIf910
; If *Value
  CMP    qword [rsp+PS292+48],0
  JE    _EndIf912
; *items\item[index]\Value$ = PeekAscii(*Value) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+PS292+88]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf911
_EndIf912:
; *items\item[index]\Value$ = ""
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rdx,_S3
  LEA    rcx,[rbp+18]
  CALL   SYS_FastAllocateStringFree4
; EndIf
_EndIf911:
; 
; ElseIf IS_LINKEDLIST(Kind)
  JMP   _EndIf909
_EndIf910:
  MOV    r15,qword [rsp+64]
  AND    r15,63
  CMP    r15,14
  JNE   _EndIf914
; If *Value
  CMP    qword [rsp+PS292+48],0
  JE    _EndIf916
; If Is64bit
  CMP    qword [rsp+PS292+56],0
  JE    _EndIf918
; If PeekQ(*Value) = -1
  PUSH   qword [rsp+PS292+48]
  POP    rcx
  CALL   PB_PeekQ
  MOV    r15,rax
  CMP    r15,-1
  JNE   _EndIf920
; Size$ = "-"
  MOV    rdx,_S38
  LEA    rcx,[rsp+88]
  CALL   SYS_FastAllocateStringFree4
; Else
  JMP   _EndIf919
_EndIf920:
; Size$ = Str(PeekQ(*Value))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  LEA    rcx,[rsp+96]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf       
_EndIf919:
; If PeekQ(*Value+8) = -1
  MOV    r15,qword [rsp+PS292+48]
  ADD    r15,8
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_PeekQ
  MOV    r15,rax
  CMP    r15,-1
  JNE   _EndIf923
; Current$ = "-"
  MOV    rdx,_S38
  LEA    rcx,[rsp+96]
  CALL   SYS_FastAllocateStringFree4
; Else
  JMP   _EndIf922
_EndIf923:
; Current$ = Str(PeekQ(*Value+8))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    r15,qword [rsp+PS292+80]
  ADD    r15,8
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  LEA    rcx,[rsp+104]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf       
_EndIf922:
; Else
  JMP   _EndIf917
_EndIf918:
; If PeekL(*Value) = -1
  PUSH   qword [rsp+PS292+48]
  POP    rcx
  CALL   PB_PeekL
  MOV    r15,rax
  CMP    r15,-1
  JNE   _EndIf927
; Size$ = "-"
  MOV    rdx,_S38
  LEA    rcx,[rsp+88]
  CALL   SYS_FastAllocateStringFree4
; Else
  JMP   _EndIf926
_EndIf927:
; Size$ = Str(PeekL(*Value))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  LEA    rcx,[rsp+96]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf926:
; If PeekL(*Value+4) = -1
  MOV    r15,qword [rsp+PS292+48]
  ADD    r15,4
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_PeekL
  MOV    r15,rax
  CMP    r15,-1
  JNE   _EndIf930
; Current$ = "-"
  MOV    rdx,_S38
  LEA    rcx,[rsp+96]
  CALL   SYS_FastAllocateStringFree4
; Else
  JMP   _EndIf929
_EndIf930:
; Current$ = Str(PeekL(*Value+4))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    r15,qword [rsp+PS292+80]
  ADD    r15,4
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  LEA    rcx,[rsp+104]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf   
_EndIf929:
; EndIf
_EndIf917:
; *items\item[index]\Value$ = Language("Debugger","Size") + ": " + Size$ + "   " + Language("Debugger","Current") + ": " + Current$
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S95
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+96]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S97
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S98
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,qword [rsp+104]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf915
_EndIf916:
; *items\item[index]\Value$ = ""
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rdx,_S3
  LEA    rcx,[rbp+18]
  CALL   SYS_FastAllocateStringFree4
; EndIf      
_EndIf915:
; 
; ElseIf IS_MAP(Kind)
  JMP   _EndIf909
_EndIf914:
  MOV    r15,qword [rsp+64]
  AND    r15,63
  CMP    r15,22
  JNE   _EndIf933
; If *Value
  CMP    qword [rsp+PS292+48],0
  JE    _EndIf935
; *items\item[index]\Value$ = Language("Debugger", "Size")+": "
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S95
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; If Is64bit
  CMP    qword [rsp+PS292+56],0
  JE    _EndIf937
; If PeekQ(*Value) = -1
  PUSH   qword [rsp+PS292+48]
  POP    rcx
  CALL   PB_PeekQ
  MOV    r15,rax
  CMP    r15,-1
  JNE   _EndIf939
; *items\item[index]\Value$ + "-"
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S38
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf938
_EndIf939:
; *items\item[index]\Value$ +  Str(PeekQ(*Value))
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf938:
; *Value + 8        
  MOV    r15,qword [rsp+PS292+48]
  ADD    r15,8
  MOV    qword [rsp+PS292+48],r15
; Else
  JMP   _EndIf936
_EndIf937:
; If PeekL(*Value) = -1
  PUSH   qword [rsp+PS292+48]
  POP    rcx
  CALL   PB_PeekL
  MOV    r15,rax
  CMP    r15,-1
  JNE   _EndIf943
; *items\item[index]\Value$ +  "-"
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S38
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf942
_EndIf943:
; *items\item[index]\Value$ +  Str(PeekL(*Value))
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  POP    rax
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf942:
; *Value + 4   
  MOV    r15,qword [rsp+PS292+48]
  ADD    r15,4
  MOV    qword [rsp+PS292+48],r15
; EndIf        
_EndIf936:
; *items\item[index]\Value$ + "   " + Language("Debugger","Current")+": "      
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S97
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S98
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  POP    rax
  MOV    rcx,_S96
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; If PeekB(*Value) 
  PUSH   qword [rsp+PS292+48]
  POP    rcx
  CALL   PB_PeekB
  AND    rax,rax
  JE    _EndIf946
; *items\item[index]\Value$ + Chr(34)+PeekS(*Value+1)+Chr(34) 
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S99
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+PS292+72]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S99
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf945
_EndIf946:
; *items\item[index]\Value$ + "-"
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S38
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf                     
_EndIf945:
; Else
  JMP   _EndIf934
_EndIf935:
; *items\item[index]\Value$ = ""
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rdx,_S3
  LEA    rcx,[rbp+18]
  CALL   SYS_FastAllocateStringFree4
; EndIf
_EndIf934:
; 
; ElseIf IS_POINTER(Type)
  JMP   _EndIf909
_EndIf933:
  MOV    r15,qword [rsp+PS292+0]
  AND    r15,128
  AND    r15,r15
  JE    _EndIf949
; *items\item[index]\Name$ = "*" + *items\item[index]\Name$
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S100
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+10]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+10]
  POP    rdx
  CALL   SYS_AllocateString4
; If *Value
  CMP    qword [rsp+PS292+48],0
  JE    _EndIf951
; If Is64bit And VariableIsHex
  CMP    qword [rsp+PS292+56],0
  JE     No162
  CMP    qword [v_VariableIsHex],0
  JE     No162
Ok162:
  MOV    rax,1
  JMP    End162
No162:
  XOR    rax,rax
End162:
  AND    rax,rax
  JE    _EndIf953
; *items\item[index]\Value$ = Hex(PeekQ(*Value), #PB_Quad)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 13
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,40
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; ElseIf Is64bit
  JMP   _EndIf952
_EndIf953:
  CMP    qword [rsp+PS292+56],0
  JE    _EndIf954
; *items\item[index]\Value$ = Str(PeekQ(*Value))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; ElseIf VariableIsHex        
  JMP   _EndIf952
_EndIf954:
  CMP    qword [v_VariableIsHex],0
  JE    _EndIf955
; *items\item[index]\Value$ = Hex(PeekL(*Value), #PB_Long)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 5
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,40
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; Else
  JMP   _EndIf952
_EndIf955:
; *items\item[index]\Value$ = Str(PeekL(*Value))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf952:
; EndIf
_EndIf951:
; 
; Else 
  JMP   _EndIf909
_EndIf949:
; If Type = #TYPE_STRUCTURE 
  MOV    r15,qword [rsp+PS292+0]
  CMP    r15,7
  JNE   _EndIf959
; *items\item[index]\Node = 1
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    word [rbp+2],1
; *VariableGadget_Used\CurrentParent = index 
  PUSH   qword [rsp+72]
  MOV    rbp,qword [p_VariableGadget_Used]
  POP    rax
  MOV    dword [rbp+36],eax
; 
; ElseIf *Value 
  JMP   _EndIf958
_EndIf959:
  CMP    qword [rsp+PS292+48],0
  JE    _EndIf960
; Select Type & #TYPEMASK   
  MOV    r15,qword [rsp+PS292+0]
  AND    r15,63
  MOV    rax,r15
  PUSH   rax
; Case #TYPE_BYTE       
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case54
; If VariableIsHex
  CMP    qword [v_VariableIsHex],0
  JE    _EndIf962
; *items\item[index]\Value$ = Hex(PeekB(*Value), #PB_Byte)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf961
_EndIf962:
; *items\item[index]\Value$ = Str(PeekB(*Value))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf 
_EndIf961:
; 
; Case #TYPE_ASCII       
  JMP   _EndSelect8
_Case54:
  MOV    r15,24
  CMP    r15,[rsp]
  JNE   _Case55
; If VariableIsHex
  CMP    qword [v_VariableIsHex],0
  JE    _EndIf965
; *items\item[index]\Value$ = Hex(PeekB(*Value) & $FF) 
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,255
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Hex
  ADD    rsp,32
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf964
_EndIf965:
; *items\item[index]\Value$ = Str(PeekB(*Value) & $FF)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekB
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,255
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf 
_EndIf964:
; 
; Case #TYPE_UNICODE
  JMP   _EndSelect8
_Case55:
  MOV    r15,25
  CMP    r15,[rsp]
  JNE   _Case56
; If VariableIsHex
  CMP    qword [v_VariableIsHex],0
  JE    _EndIf968
; *items\item[index]\Value$ = Hex(PeekW(*Value) & $FFFF) 
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekW
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,65535
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Hex
  ADD    rsp,32
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf967
_EndIf968:
; *items\item[index]\Value$ = Str(PeekW(*Value) & $FFFF)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekW
  ADD    rsp,40
  MOV    r15,rax
  AND    r15,65535
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf   
_EndIf967:
; 
; Case #TYPE_WORD
  JMP   _EndSelect8
_Case56:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case57
; If VariableIsHex
  CMP    qword [v_VariableIsHex],0
  JE    _EndIf971
; *items\item[index]\Value$ = Hex(PeekW(*Value), #PB_Word)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 3
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekW
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf970
_EndIf971:
; *items\item[index]\Value$ = Str(PeekW(*Value))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekW
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf   
_EndIf970:
; 
; Case #TYPE_LONG, #TYPE_CHARACTER 
  JMP   _EndSelect8
_Case57:
  MOV    r15,5
  CMP    r15,[rsp]
  JE    _Case58
  MOV    r15,11
  CMP    r15,[rsp]
  JNE   _Case59
_Case58:
; If VariableIsHex
  CMP    qword [v_VariableIsHex],0
  JE    _EndIf974
; *items\item[index]\Value$ = Hex(PeekL(*Value), #PB_Long)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 5
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf973
_EndIf974:
; *items\item[index]\Value$ = Str(PeekL(*Value))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf 
_EndIf973:
; 
; Case #TYPE_STRING, #TYPE_FIXEDSTRING
  JMP   _EndSelect8
_Case59:
  MOV    r15,8
  CMP    r15,[rsp]
  JE    _Case60
  MOV    r15,10
  CMP    r15,[rsp]
  JNE   _Case61
_Case60:
; *items\item[index]\Value$ = Chr(34) + PeekS(*Value) + Chr(34)
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S99
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS292+88]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_PeekS
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S99
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Case #TYPE_FLOAT
  JMP   _EndSelect8
_Case61:
  MOV    r15,9
  CMP    r15,[rsp]
  JNE   _Case62
; *items\item[index]\Value$ = StrF_Debug(PeekF(*Value))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekF
  ADD    rsp,32
  MOVSS  [rsp-8],xmm0
  FLD    dword [rsp-8]
  SUB    rsp,8
  FSTP   dword [rsp]
  MOVSS  xmm0,dword [rsp]
  ADD    rsp,8
  SUB    rsp,32
  CALL  _Procedure254
  ADD    rsp,48
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Case #TYPE_DOUBLE        
  JMP   _EndSelect8
_Case62:
  MOV    r15,12
  CMP    r15,[rsp]
  JNE   _Case63
; *items\item[index]\Value$ = StrD_Debug(PeekD(*Value))      
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 25
  SUB    rsp,8
  PUSH   qword [rsp+PS292+96]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekD
  ADD    rsp,40
  MOVSD  [rsp-8],xmm0
  FLD    qword [rsp-8]
  SUB    rsp,8
  FSTP   qword [rsp]
  MOVSD  xmm0,qword [rsp]
  ADD    rsp,8
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure256
  ADD    rsp,48
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Case #TYPE_QUAD
  JMP   _EndSelect8
_Case63:
  MOV    r15,13
  CMP    r15,[rsp]
  JNE   _Case64
; If VariableIsHex
  CMP    qword [v_VariableIsHex],0
  JE    _EndIf977
; *items\item[index]\Value$ = Hex(PeekQ(*Value), #PB_Quad)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 13
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf976
_EndIf977:
; *items\item[index]\Value$ = Str(PeekQ(*Value))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf   
_EndIf976:
; 
; Case #TYPE_INTEGER
  JMP   _EndSelect8
_Case64:
  MOV    r15,21
  CMP    r15,[rsp]
  JNE   _Case65
; If Is64bit And VariableIsHex
  CMP    qword [rsp+PS292+64],0
  JE     No163
  CMP    qword [v_VariableIsHex],0
  JE     No163
Ok163:
  MOV    rax,1
  JMP    End163
No163:
  XOR    rax,rax
End163:
  AND    rax,rax
  JE    _EndIf980
; *items\item[index]\Value$ = Hex(PeekQ(*Value), #PB_Quad)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 13
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; ElseIf Is64bit
  JMP   _EndIf979
_EndIf980:
  CMP    qword [rsp+PS292+64],0
  JE    _EndIf981
; *items\item[index]\Value$ = Str(PeekQ(*Value))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; ElseIf VariableIsHex        
  JMP   _EndIf979
_EndIf981:
  CMP    qword [v_VariableIsHex],0
  JE    _EndIf982
; *items\item[index]\Value$ = Hex(PeekL(*Value), #PB_Long)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 5
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Else
  JMP   _EndIf979
_EndIf982:
; *items\item[index]\Value$ = Str(PeekL(*Value))
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+PS292+80]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,32
  MOV    rbp,qword [rsp+96]
  PUSH   rbp
  MOV    rax,qword [rsp+96]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+18]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; EndIf
_EndIf979:
; 
; EndSelect     
_Case65:
_EndSelect8:
  POP    rax
; EndIf   
_EndIf958:
_EndIf960:
; EndIf
_EndIf909:
; 
; If Sublevel = 0 
  MOV    r15,qword [rsp+PS292+16]
  AND    r15,r15
  JNE   _EndIf985
; If *items\item[index]\Node = 1
  MOV    rbp,qword [rsp+80]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,word [rbp+2]
  CMP    r15,1
  JNE   _EndIf987
; Image = VariableGadget_NodeOpen
  PUSH   qword [v_VariableGadget_NodeOpen]
  POP    rax
  MOV    qword [rsp+104],rax
; Else
  JMP   _EndIf986
_EndIf987:
; Image = VariableGadget_Icons(Type & #TYPEMASK)
  MOV    r15,qword [rsp+PS292+0]
  AND    r15,63
  MOV    rbp,qword [a_VariableGadget_Icons]
  SAL    r15,3
  PUSH   qword [rbp+r15]
  POP    rax
  MOV    qword [rsp+104],rax
; EndIf     
_EndIf986:
; 
; gadgetindex = CountGadgetItems(*VariableGadget_Used\Gadget)
  MOV    rbp,qword [p_VariableGadget_Used]
  PUSH   qword [rbp]
  POP    rcx
  CALL   PB_CountGadgetItems
  MOV    qword [rsp+112],rax
; AddGadgetItem(*VariableGadget_Used\Gadget, gadgetindex, VariableGadget_EntryText(*VariableGadget_Used, index), ImageID(Image))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+120]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+120]
  PUSH   qword [p_VariableGadget_Used]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure282
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+144]
  MOV    rbp,qword [p_VariableGadget_Used]
  PUSH   qword [rbp]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemData(*VariableGadget_Used\Gadget, gadgetindex, index)
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+120]
  MOV    rbp,qword [p_VariableGadget_Used]
  PUSH   qword [rbp]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetItemData
; EndIf
_EndIf985:
; 
; *items\item[index]\Name$ = Space(SubLevel * 3) + *items\item[index]\Name$
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+PS292+40]
  IMUL   r15,3
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Space
  ADD    rsp,40
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+10]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rbp,qword [rsp+88]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+10]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; *VariableGadget_Used\ItemCount + 1
  MOV    rbp,qword [p_VariableGadget_Used]
  MOVSXD r15,dword [rbp+12]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [p_VariableGadget_Used]
  POP    rax
  MOV    dword [rbp+12],eax
; EndIf
_EndIf907:
; 
; EndProcedure
_EndProcedureZero293:
  XOR    rax,rax
_EndProcedure293:
  PUSH   rax
  MOV    rcx,qword [rsp+96]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+104]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,120
  POP    r15
  POP    rbp
  RET
; Procedure VariableGadget_SyncAll()
_Procedure294:
  PUSH   rbp
  PUSH   r15
  PS294=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Shared *VariableGadget_Used.VariableGadget
; 
; *items.VariableGadget_ItemList = *VariableGadget_Used\Items  
  MOV    rbp,qword [p_VariableGadget_Used]
  PUSH   qword [rbp+16]
  POP    rax
  MOV    qword [rsp+40],rax
; If *items
  CMP    qword [rsp+40],0
  JE    _EndIf990
; Gadget = *VariableGadget_Used\Gadget
  MOV    rbp,qword [p_VariableGadget_Used]
  PUSH   qword [rbp]
  POP    rax
  MOV    qword [rsp+48],rax
; Last   = CountGadgetItems(Gadget) - 1
  PUSH   qword [rsp+48]
  POP    rcx
  CALL   PB_CountGadgetItems
  MOV    r15,rax
  DEC    r15
  MOV    qword [rsp+56],r15
; 
; For i = 0 To Last
  MOV    qword [rsp+64],0
  JMP   _ForSkipDebug991
_For991:
_ForSkipDebug991:
  MOV    rax,qword [rsp+56]
  CMP    rax,qword [rsp+64]
  JL    _Next992
; index = GetGadgetItemData(Gadget, i)
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemData
  MOV    qword [rsp+72],rax
; If *items\item[index]\Kind = #TYPE_ARRAY
  MOV    rbp,qword [rsp+40]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOVSX  r15,byte [rbp]
  CMP    r15,15
  JNE   _EndIf994
; 
; SetGadgetItemText(Gadget, i, *items\item[index]\Name$ + "(" + *items\item[index]\Value$ + ")", *VariableGadget_Used\ExtraColumns)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rbp,qword [p_VariableGadget_Used]
  MOVSXD rax,dword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+104]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+10]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S93
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rbp,qword [rsp+72]
  PUSH   rbp
  MOV    rax,qword [rsp+112]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  MOV    rcx,qword [rbp+18]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S29
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+96]
  PUSH   qword [rsp+88]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemText2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Else
  JMP   _EndIf993
_EndIf994:
; SetGadgetItemText(Gadget, i, *items\item[index]\Value$, *VariableGadget_Used\ExtraColumns+1)
  MOV    rbp,qword [p_VariableGadget_Used]
  MOVSXD r15,dword [rbp+8]
  INC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+48]
  PUSH   rbp
  MOV    rax,qword [rsp+88]
  IMUL   rax,34
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+18]
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_SetGadgetItemText2
; EndIf
_EndIf993:
; Next i  
_NextContinue992:
  INC    qword [rsp+64]
  JNO   _For991
_Next992:
; EndIf
_EndIf990:
; EndProcedure
_EndProcedureZero295:
  XOR    rax,rax
_EndProcedure295:
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure HighlightCallback(*StringStart.BYTE, Length, *Color, IsBold, TextChanged)
_Procedure654:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  MOV    qword [rsp+32],r9
  PS654=48
  SUB    rsp,40
; Shared HighlightGadget
; ScintillaSendMessage(HighlightGadget, #SCI_SETSTYLING, Length, *Color)
  PUSH   qword [rsp+PS654+16]
  PUSH   qword [rsp+PS654+16]
  PUSH   qword 2033
  PUSH   qword [v_HighlightGadget]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; EndProcedure
_EndProcedureZero655:
  XOR    rax,rax
_EndProcedure655:
  ADD    rsp,40
  RET
; Procedure UpdateDataBreakpointWindowState(*Debugger.DebuggerData)
_Procedure518:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS518=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; If *Debugger\ProgramState = -1
  MOV    rbp,qword [rsp+PS518+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JNE   _EndIf2534
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Add], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS518+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2752]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Remove], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS518+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2760]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Clear], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS518+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2768]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Procedure], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS518+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2776]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Condition], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS518+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2784]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; Else
  JMP   _EndIf2533
_EndIf2534:
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Add], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS518+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2752]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Remove], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS518+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2760]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Clear], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS518+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2768]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Procedure], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS518+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2776]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_Condition], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS518+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2784]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; 
; 
; If *Debugger\ProgramState <> 9 And RemoveDataBreakpoints 
  MOV    rbp,qword [rsp+PS518+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,9
  JE     No283
  CMP    qword [v_RemoveDataBreakpoints],0
  JE     No283
Ok283:
  MOV    rax,1
  JMP    End283
No283:
  XOR    rax,rax
End283:
  AND    rax,rax
  JE    _EndIf2537
; 
; For i = CountGadgetItems(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List])-1 To 0 Step -1
  MOV    rbp,qword [rsp+PS518+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  POP    rcx
  CALL   PB_CountGadgetItems
  MOV    r15,rax
  DEC    r15
  MOV    qword [rsp+40],r15
  JMP   _ForSkipDebug2538
_For2538:
_ForSkipDebug2538:
  XOR    rax,rax
  CMP    rax,qword [rsp+40]
  JG    _Next2539
; *Point.DataBreakPoint = GetGadgetItemData(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List], i)
  PUSH   qword [rsp+40]
  MOV    rbp,qword [rsp+PS518+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemData
  MOV    qword [rsp+48],rax
; If *Point And *Point\ConditionTrue
  CMP    qword [rsp+48],0
  JE     No284
  MOV    rbp,qword [rsp+48]
  CMP    dword [rbp+32],0
  JE     No284
Ok284:
  MOV    rax,1
  JMP    End284
No284:
  XOR    rax,rax
End284:
  AND    rax,rax
  JE    _EndIf2541
; RemoveGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_BreakPoint_List], i)
  PUSH   qword [rsp+40]
  MOV    rbp,qword [rsp+PS518+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  POP    rcx
  POP    rdx
  CALL   PB_RemoveGadgetItem
; DeleteDataBreakPoint(*Debugger, *Point)
  PUSH   qword [rsp+48]
  PUSH   qword [rsp+PS518+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure512
; EndIf
_EndIf2541:
; Next i
_NextContinue2539:
  DEC    qword [rsp+40]
  JNO   _For2538
_Next2539:
; 
; RemoveDataBreakpoints = #False
  MOV    qword [v_RemoveDataBreakpoints],0
; EndIf
_EndIf2537:
; 
; EndIf
_EndIf2533:
; 
; EndProcedure
_EndProcedureZero519:
  XOR    rax,rax
_EndProcedure519:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure Debugger_ProcessIncomingCommands()
_Procedure430:
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS430=160
  MOV    rax,11
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; result = 0
  MOV    qword [rsp+40],0
; 
; 
; 
; 
; 
; ForEach RunningDebuggers()
  MOV    rcx,qword [t_RunningDebuggers]
  CALL   PB_ResetList
_ForEach1488:
  MOV    rcx,qword [t_RunningDebuggers]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next1488
; *Debugger.DebuggerData = @RunningDebuggers()
  MOV    rbp,qword [t_RunningDebuggers+8]
  LEA    rax,[rbp+16]
  MOV    qword [rsp+48],rax
; 
; Repeat
_Repeat1489:
; 
; If *Debugger\Communication = 0
  MOV    rbp,qword [rsp+48]
  MOV    r15,qword [rbp+44]
  AND    r15,r15
  JNE   _EndIf1491
; Break
  JMP   _Until1489
; 
; ElseIf *Debugger\Communication\Receive(@*Debugger\Command, @*Debugger\CommandData) = #False
  JMP   _EndIf1490
_EndIf1491:
  MOV    rbp,qword [rsp+48]
  MOV    rbp,qword [rbp+44]
  PUSH   rbp
  SUB    rsp,8
  MOV    rbp,qword [rsp+64]
  LEA    rax,[rbp+72]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+72]
  LEA    rax,[rbp+52]
  MOV    rax,rax
  PUSH   rax
  POP    rdx
  POP    r8
  SUB    rsp,32
  MOV    rax,[rsp+40]
  MOV    rcx,rax
  MOV    rax,[rax]
  CALL   qword [rax+32]
  ADD    rsp,40
  ADD    rsp,8
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1492
; If *Debugger\Communication\CheckErrors(@*Debugger\Command, *Debugger\ProcessObject) = #False
  MOV    rbp,qword [rsp+48]
  MOV    rbp,qword [rbp+44]
  PUSH   rbp
  SUB    rsp,8
  MOV    rbp,qword [rsp+64]
  PUSH   qword [rbp+8]
  MOV    rbp,qword [rsp+72]
  LEA    rax,[rbp+52]
  MOV    rax,rax
  PUSH   rax
  POP    rdx
  POP    r8
  SUB    rsp,32
  MOV    rax,[rsp+40]
  MOV    rcx,rax
  MOV    rax,[rax]
  CALL   qword [rax+40]
  ADD    rsp,40
  ADD    rsp,8
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1494
; Break
  JMP   _Until1489
; EndIf
_EndIf1494:
; *Debugger\CommandData = 0      
  MOV    rbp,qword [rsp+48]
  MOV    qword [rbp+72],0
; EndIf
_EndIf1490:
_EndIf1492:
; 
; result + 1  
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; 
; 
; CompilerIf #PRINT_DEBUGGER_COMMANDS
; 
; CompilerIf #LOG_DEBUGGER_COMMANDS
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; Select *Debugger\Command\Command  
  MOV    rbp,qword [rsp+48]
  MOVSXD rax,dword [rbp+52]
  PUSH   rax
; 
; Case #COMMAND_FatalError  
  MOV    r15,-1
  CMP    r15,[rsp]
  JNE   _Case99
; Select *Debugger\Command\Value1
  MOV    rbp,qword [rsp+56]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
; Case #ERROR_Memory
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case100
; Message$ = Language("Debugger", "MemoryError")
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S179
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  LEA    rcx,[rsp+80]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Case #ERROR_Pipe
  JMP   _EndSelect18
_Case100:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case101
; Message$ = Language("Debugger", "PipeError")
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S180
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  LEA    rcx,[rsp+80]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Case #ERROR_ExeQuit
  JMP   _EndSelect18
_Case101:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case102
; Message$ = Language("Debugger", "ExeQuitError")
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S181
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  LEA    rcx,[rsp+80]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Case #ERROR_Timeout
  JMP   _EndSelect18
_Case102:
  MOV    r15,4
  CMP    r15,[rsp]
  JNE   _Case103
; If DebuggerTimeout % 1000 = 0
  MOV    r15,qword [v_DebuggerTimeout]
  MOV    rax,r15
  MOV    rcx,1000
  CQO
  IDIV   rcx
  MOV    r15,rdx
  AND    r15,r15
  JNE   _EndIf1496
; Timeout$ = Str(DebuggerTimeout/1000)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [v_DebuggerTimeout]
  MOV    rax,r15
  MOV    rcx,1000
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Else
  JMP   _EndIf1495
_EndIf1496:
; Timeout$ = StrF(DebuggerTimeout/1000.0, 1)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  FILD   qword [v_DebuggerTimeout]
  FDIV   dword [F6]
  SUB    rsp,8
  FSTP   dword [rsp]
  MOVSS  xmm0,dword [rsp]
  ADD    rsp,8
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StrF2
  ADD    rsp,40
  LEA    rcx,[rsp+88]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; EndIf
_EndIf1495:
; Message$ = ReplaceString(Language("Debugger", "TimeoutError"), "%timeout%", Timeout$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+104]
  MOV    rax,_S183
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S182
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ReplaceString
  ADD    rsp,40
  LEA    rcx,[rsp+80]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; Case #ERROR_NetworkFail
  JMP   _EndSelect18
_Case103:
  MOV    r15,6
  CMP    r15,[rsp]
  JNE   _Case104
; Message$ = Language("Debugger", "NetworkError")
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S184
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  LEA    rcx,[rsp+80]
  POP    rdx
  SUB    rsp,32
  CALL   SYS_AllocateString4
  ADD    rsp,32
; EndSelect                                 
_Case104:
_EndSelect18:
  POP    rax
; 
; CompilerIf #CompileWindows
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; CompilerIf Defined(PUREBASIC_IDE, #PB_Constant)
; SetWindowForeground_Real(#WINDOW_Main)
  SUB    rsp,8
  PUSH   qword 1
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure110
  ADD    rsp,40
; CompilerEndIf
; CompilerEndIf
; 
; MessageRequester("PureBasic Debugger", Message$, #FLAG_Error)   
  SUB    rsp,8
  PUSH   qword 16
  PUSH   qword [rsp+80]
  MOV    rax,_S156
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_MessageRequester2
  ADD    rsp,40
; 
; 
; RealProgramState = *Debugger\ProgramState 
  MOV    rbp,qword [rsp+56]
  MOVSXD rax,dword [rbp+112]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+80],rax
; *Debugger\ProgramState = -1     
  MOV    rbp,qword [rsp+56]
  MOV    dword [rbp+112],-1
; *Debugger\LastProgramState = -1 
  MOV    rbp,qword [rsp+56]
  MOV    dword [rbp+116],-1
; Debugger_UpdateWindowStates(*Debugger)               
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure12
  ADD    rsp,40
; DebuggerCallback(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure0
  ADD    rsp,40
; 
; *Debugger\ProgramState = RealProgramState
  PUSH   qword [rsp+80]
  MOV    rbp,qword [rsp+64]
  POP    rax
  MOV    dword [rbp+112],eax
; Debugger_ForceDestroy(*Debugger) 
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure420
  ADD    rsp,40
; Break 2
  ADD    rsp,8
  JMP   _Next1488
; 
; 
; Case #COMMAND_Init         
  JMP   _EndSelect17
_Case99:
  XOR    r15,r15
  CMP    r15,[rsp]
  JNE   _Case105
; If *Debugger\Command\Value2 = #DEBUGGER_Version
  MOV    rbp,qword [rsp+56]
  MOVSXD r15,dword [rbp+64]
  CMP    r15,11
  JNE   _EndIf1499
; *Debugger\NbIncludedFiles = *Debugger\Command\Value1  
  MOV    rbp,qword [rsp+56]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
  MOV    rbp,qword [rsp+64]
  POP    rax
  MOV    dword [rbp+88],eax
; *Debugger\IncludedFiles = *Debugger\CommandData          
  MOV    rbp,qword [rsp+56]
  PUSH   qword [rbp+72]
  MOV    rbp,qword [rsp+64]
  POP    rax
  MOV    qword [rbp+92],rax
; *Debugger\CommandData = 0 
  MOV    rbp,qword [rsp+56]
  MOV    qword [rbp+72],0
; *Debugger\LastProgramState = *Debugger\ProgramState
  MOV    rbp,qword [rsp+56]
  MOVSXD rax,dword [rbp+112]
  PUSH   rax
  MOV    rbp,qword [rsp+64]
  POP    rax
  MOV    dword [rbp+116],eax
; *Debugger\ProgramState = 0 
  MOV    rbp,qword [rsp+56]
  MOV    dword [rbp+112],0
; Debugger_UpdateWindowStates(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure12
  ADD    rsp,40
; 
; If IsWindow(*Debugger\Windows[#DEBUGGER_WINDOW_Variable]) 
  SUB    rsp,8
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+856]
  POP    rcx
  SUB    rsp,32
  CALL   PB_IsWindow
  ADD    rsp,40
  AND    rax,rax
  JE    _EndIf1501
; Command.CommandInfo\Command = #COMMAND_GetGlobalNames
  LEA    rbp,[rsp+88]
  MOV    dword [rbp],9
; SendDebuggerCommand(*Debugger, @Command)             
  SUB    rsp,8
  LEA    rax,[rsp+96]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; EndIf
_EndIf1501:
; 
; 
; 
; Command.CommandInfo\Command = #COMMAND_GetModules
  LEA    rbp,[rsp+88]
  MOV    dword [rbp],40
; SendDebuggerCommand(*Debugger, @Command)            
  SUB    rsp,8
  LEA    rax,[rsp+96]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; Command.CommandInfo\Command = #COMMAND_GetProcedures
  LEA    rbp,[rsp+88]
  MOV    dword [rbp],18
; SendDebuggerCommand(*Debugger, @Command)            
  SUB    rsp,8
  LEA    rax,[rsp+96]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; 
; 
; If ProfilerRunAtStart
  CMP    qword [v_ProfilerRunAtStart],0
  JE    _EndIf1503
; Command.CommandInfo\Command = #COMMAND_StartProfiler
  LEA    rbp,[rsp+88]
  MOV    dword [rbp],28
; SendDebuggerCommand(*Debugger, @Command)
  SUB    rsp,8
  LEA    rax,[rsp+96]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; 
; 
; Command.CommandInfo\Command = #COMMAND_GetProfilerOffsets
  LEA    rbp,[rsp+88]
  MOV    dword [rbp],31
; SendDebuggerCommand(*Debugger, @Command)              
  SUB    rsp,8
  LEA    rax,[rsp+96]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure10
  ADD    rsp,40
; 
; *Debugger\ProfilerRunning = 1
  MOV    rbp,qword [rsp+56]
  MOV    dword [rbp+692],1
; EndIf
_EndIf1503:
; 
; 
; 
; If AutoOpenDebugOutput
  CMP    qword [v_AutoOpenDebugOutput],0
  JE    _EndIf1505
; OpenDebugWindow(*Debugger, #True)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure36
  ADD    rsp,40
; EndIf
_EndIf1505:
; 
; If AutoOpenAsmWindow
  CMP    qword [v_AutoOpenAsmWindow],0
  JE    _EndIf1507
; OpenAsmWindow(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure38
  ADD    rsp,40
; EndIf
_EndIf1507:
; 
; If AutoOpenMemoryViewer
  CMP    qword [v_AutoOpenMemoryViewer],0
  JE    _EndIf1509
; OpenMemoryViewerWindow(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure40
  ADD    rsp,40
; EndIf
_EndIf1509:
; 
; If AutoOpenVariableViewer
  CMP    qword [v_AutoOpenVariableViewer],0
  JE    _EndIf1511
; OpenVariableWindow(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure42
  ADD    rsp,40
; EndIf
_EndIf1511:
; 
; If AutoOpenHistory
  CMP    qword [v_AutoOpenHistory],0
  JE    _EndIf1513
; OpenHistoryWindow(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure44
  ADD    rsp,40
; EndIf
_EndIf1513:
; 
; If AutoOpenWatchlist  
  CMP    qword [v_AutoOpenWatchlist],0
  JE    _EndIf1515
; OpenWatchListWindow(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure46
  ADD    rsp,40
; EndIf    
_EndIf1515:
; 
; If AutoOpenLibraryViewer
  CMP    qword [v_AutoOpenLibraryViewer],0
  JE    _EndIf1517
; OpenLibraryViewerWindow(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure48
  ADD    rsp,40
; EndIf     
_EndIf1517:
; 
; If AutoOpenProfiler
  CMP    qword [v_AutoOpenProfiler],0
  JE    _EndIf1519
; OpenProfilerWindow(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure50
  ADD    rsp,40
; EndIf     
_EndIf1519:
; 
; If AutoOpenDataBreakpoints
  CMP    qword [v_AutoOpenDataBreakpoints],0
  JE    _EndIf1521
; OpenDataBreakpointWindow(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure52
  ADD    rsp,40
; EndIf
_EndIf1521:
; 
; If AutoOpenPurifier
  CMP    qword [v_AutoOpenPurifier],0
  JE    _EndIf1523
; OpenPurifierWindow(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure54
  ADD    rsp,40
; EndIf
_EndIf1523:
; 
; Else                 
  JMP   _EndIf1498
_EndIf1499:
; 
; MessageRequester("PureBasic Debugger", Language("Debugger","VersionError"), #FLAG_Error)            
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 16
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S185
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  MOV    rax,_S156
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_MessageRequester2
  ADD    rsp,32
  POP    qword [PB_StringBasePosition]
; 
; 
; *Debugger\Command\Command = #COMMAND_FatalError
  MOV    rbp,qword [rsp+56]
  MOV    dword [rbp+52],-1
; *Debugger\Command\Value1  = #ERROR_Version   
  MOV    rbp,qword [rsp+56]
  MOV    dword [rbp+60],5
; 
; RealProgramState = *Debugger\ProgramState 
  MOV    rbp,qword [rsp+56]
  MOVSXD rax,dword [rbp+112]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+80],rax
; *Debugger\ProgramState = -1     
  MOV    rbp,qword [rsp+56]
  MOV    dword [rbp+112],-1
; *Debugger\LastProgramState = -1 
  MOV    rbp,qword [rsp+56]
  MOV    dword [rbp+116],-1
; Debugger_UpdateWindowStates(*Debugger)               
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure12
  ADD    rsp,40
; DebuggerCallback(*Debugger)   
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure0
  ADD    rsp,40
; 
; *Debugger\ProgramState = RealProgramState
  PUSH   qword [rsp+80]
  MOV    rbp,qword [rsp+64]
  POP    rax
  MOV    dword [rbp+112],eax
; Debugger_ForceDestroy(*Debugger) 
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure420
  ADD    rsp,40
; Break 2
  ADD    rsp,8
  JMP   _Next1488
; EndIf
_EndIf1498:
; 
; Case #COMMAND_ExeMode
  JMP   _EndSelect17
_Case105:
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case106
; If *Debugger\Command\Value1 & (1 << 0)
  MOV    rbp,qword [rsp+56]
  MOVSXD r15,dword [rbp+60]
  AND    r15,1
  AND    r15,r15
  JE    _EndIf1526
; *Debugger\IsUnicode = 1
  MOV    rbp,qword [rsp+56]
  MOV    dword [rbp+24],1
; EndIf
_EndIf1526:
; If *Debugger\Command\Value1 & (1 << 1)
  MOV    rbp,qword [rsp+56]
  MOVSXD r15,dword [rbp+60]
  AND    r15,2
  AND    r15,r15
  JE    _EndIf1528
; *Debugger\IsThread = 1
  MOV    rbp,qword [rsp+56]
  MOV    dword [rbp+28],1
; EndIf
_EndIf1528:
; If *Debugger\Command\Value1 & (1 << 2)
  MOV    rbp,qword [rsp+56]
  MOVSXD r15,dword [rbp+60]
  AND    r15,4
  AND    r15,r15
  JE    _EndIf1530
; *Debugger\Is64Bit = 1
  MOV    rbp,qword [rsp+56]
  MOV    dword [rbp+32],1
; EndIf
_EndIf1530:
; If *Debugger\Command\Value1 & (1 << 3)
  MOV    rbp,qword [rsp+56]
  MOVSXD r15,dword [rbp+60]
  AND    r15,8
  AND    r15,r15
  JE    _EndIf1532
; *Debugger\IsPurifier = 1
  MOV    rbp,qword [rsp+56]
  MOV    dword [rbp+36],1
; EndIf
_EndIf1532:
; 
; 
; 
; DebuggerOutputFile$ = GetPathPart(*Debugger\FileName$)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+72]
  PUSH   qword [rbp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetPathPart
  ADD    rsp,32
  LEA    rcx,[v_DebuggerOutputFile$]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; MemoryViewerFile$ = GetPathPart(*Debugger\FileName$)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+72]
  PUSH   qword [rbp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetPathPart
  ADD    rsp,32
  LEA    rcx,[v_MemoryViewerFile$]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Case #COMMAND_End
  JMP   _EndSelect17
_Case106:
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case107
; *Debugger\ProgramState = -1 
  MOV    rbp,qword [rsp+56]
  MOV    dword [rbp+112],-1
; *Debugger\LastProgramState = -1 
  MOV    rbp,qword [rsp+56]
  MOV    dword [rbp+116],-1
; *Debugger\ProgramEnded = 1 
  MOV    rbp,qword [rsp+56]
  MOV    dword [rbp+120],1
; Debugger_UpdateWindowStates(*Debugger)          
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure12
  ADD    rsp,40
; 
; Case #COMMAND_Error
  JMP   _EndSelect17
_Case107:
  MOV    r15,8
  CMP    r15,[rsp]
  JNE   _Case108
; *Debugger\LastProgramState = *Debugger\ProgramState
  MOV    rbp,qword [rsp+56]
  MOVSXD rax,dword [rbp+112]
  PUSH   rax
  MOV    rbp,qword [rsp+64]
  POP    rax
  MOV    dword [rbp+116],eax
; *Debugger\ProgramState = *Debugger\Command\Value2
  MOV    rbp,qword [rsp+56]
  MOVSXD rax,dword [rbp+64]
  PUSH   rax
  MOV    rbp,qword [rsp+64]
  POP    rax
  MOV    dword [rbp+112],eax
; Debugger_UpdateWindowStates(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure12
  ADD    rsp,40
; 
; 
; 
; 
; 
; Case #COMMAND_Stopped
  JMP   _EndSelect17
_Case108:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case109
; *Debugger\LastProgramState = *Debugger\ProgramState
  MOV    rbp,qword [rsp+56]
  MOVSXD rax,dword [rbp+112]
  PUSH   rax
  MOV    rbp,qword [rsp+64]
  POP    rax
  MOV    dword [rbp+116],eax
; *Debugger\ProgramState = *Debugger\Command\Value2          
  MOV    rbp,qword [rsp+56]
  MOVSXD rax,dword [rbp+64]
  PUSH   rax
  MOV    rbp,qword [rsp+64]
  POP    rax
  MOV    dword [rbp+112],eax
; Debugger_UpdateWindowStates(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure12
  ADD    rsp,40
; 
; Case #COMMAND_Continued
  JMP   _EndSelect17
_Case109:
  MOV    r15,4
  CMP    r15,[rsp]
  JNE   _Case110
; *Debugger\LastProgramState = *Debugger\ProgramState
  MOV    rbp,qword [rsp+56]
  MOVSXD rax,dword [rbp+112]
  PUSH   rax
  MOV    rbp,qword [rsp+64]
  POP    rax
  MOV    dword [rbp+116],eax
; *Debugger\ProgramState = 0 
  MOV    rbp,qword [rsp+56]
  MOV    dword [rbp+112],0
; Debugger_UpdateWindowStates(*Debugger)        
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure12
  ADD    rsp,40
; 
; Case #COMMAND_Debug, #COMMAND_DebugDouble, #COMMAND_DebugQuad, #COMMAND_Expression, #COMMAND_SetVariableResult, #COMMAND_ControlDebugOutput
  JMP   _EndSelect17
_Case110:
  MOV    r15,5
  CMP    r15,[rsp]
  JE    _Case111
  MOV    r15,6
  CMP    r15,[rsp]
  JE    _Case111
  MOV    r15,7
  CMP    r15,[rsp]
  JE    _Case111
  MOV    r15,36
  CMP    r15,[rsp]
  JE    _Case111
  MOV    r15,37
  CMP    r15,[rsp]
  JE    _Case111
  MOV    r15,41
  CMP    r15,[rsp]
  JNE   _Case112
_Case111:
; DebugOutput_DebuggerEvent(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure16
  ADD    rsp,40
; 
; Case #COMMAND_RegisterLayout, #COMMAND_Register, #COMMAND_Stack, #COMMAND_ControlAssemblyViewer
  JMP   _EndSelect17
_Case112:
  MOV    r15,9
  CMP    r15,[rsp]
  JE    _Case113
  MOV    r15,10
  CMP    r15,[rsp]
  JE    _Case113
  MOV    r15,11
  CMP    r15,[rsp]
  JE    _Case113
  MOV    r15,48
  CMP    r15,[rsp]
  JNE   _Case114
_Case113:
; AsmDebug_DebuggerEvent(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure18
  ADD    rsp,40
; 
; Case #COMMAND_Memory, #COMMAND_ControlMemoryViewer
  JMP   _EndSelect17
_Case114:
  MOV    r15,12
  CMP    r15,[rsp]
  JE    _Case115
  MOV    r15,43
  CMP    r15,[rsp]
  JNE   _Case116
_Case115:
; MemoryViewer_DebuggerEvent(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure20
  ADD    rsp,40
; 
; Case #COMMAND_GlobalNames, #COMMAND_Globals, #COMMAND_Locals, #COMMAND_ArrayInfo, #COMMAND_ArrayData, #COMMAND_ListData, #COMMAND_ListInfo, #COMMAND_MapData, #COMMAND_MapInfo, #COMMAND_ControlVariableViewer
  JMP   _EndSelect17
_Case116:
  MOV    r15,13
  CMP    r15,[rsp]
  JE    _Case117
  MOV    r15,14
  CMP    r15,[rsp]
  JE    _Case117
  MOV    r15,15
  CMP    r15,[rsp]
  JE    _Case117
  MOV    r15,16
  CMP    r15,[rsp]
  JE    _Case117
  MOV    r15,17
  CMP    r15,[rsp]
  JE    _Case117
  MOV    r15,19
  CMP    r15,[rsp]
  JE    _Case117
  MOV    r15,18
  CMP    r15,[rsp]
  JE    _Case117
  MOV    r15,21
  CMP    r15,[rsp]
  JE    _Case117
  MOV    r15,20
  CMP    r15,[rsp]
  JE    _Case117
  MOV    r15,46
  CMP    r15,[rsp]
  JNE   _Case118
_Case117:
; VariableDebug_DebuggerEvent(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure22
  ADD    rsp,40
; 
; Case #COMMAND_History, #COMMAND_HistoryLocals, #COMMAND_ControlCallstack
  JMP   _EndSelect17
_Case118:
  MOV    r15,22
  CMP    r15,[rsp]
  JE    _Case119
  MOV    r15,23
  CMP    r15,[rsp]
  JE    _Case119
  MOV    r15,47
  CMP    r15,[rsp]
  JNE   _Case120
_Case119:
; History_DebuggerEvent(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure24
  ADD    rsp,40
; 
; Case #COMMAND_Procedures
  JMP   _EndSelect17
_Case120:
  MOV    r15,24
  CMP    r15,[rsp]
  JNE   _Case121
; *Debugger\NbProcedures = *Debugger\Command\Value1
  MOV    rbp,qword [rsp+56]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
  MOV    rbp,qword [rsp+64]
  POP    rax
  MOV    dword [rbp+100],eax
; *Debugger\Procedures = *Debugger\CommandData
  MOV    rbp,qword [rsp+56]
  PUSH   qword [rbp+72]
  MOV    rbp,qword [rsp+64]
  POP    rax
  MOV    qword [rbp+104],rax
; *Debugger\CommandData = 0
  MOV    rbp,qword [rsp+56]
  MOV    qword [rbp+72],0
; 
; 
; History_DebuggerEvent(*Debugger) 
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure24
  ADD    rsp,40
; 
; 
; WatchList_DebuggerEvent(*Debugger)  
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure26
  ADD    rsp,40
; DataBreakpoint_DebuggerEvent(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure32
  ADD    rsp,40
; 
; Case #COMMAND_ProcedureStats       
  JMP   _EndSelect17
_Case121:
  MOV    r15,25
  CMP    r15,[rsp]
  JNE   _Case122
; History_DebuggerEvent(*Debugger) 
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure24
  ADD    rsp,40
; 
; Case #COMMAND_Watchlist, #COMMAND_WatchlistEvent, #COMMAND_WatchlistError, #COMMAND_ControlWatchlist 
  JMP   _EndSelect17
_Case122:
  MOV    r15,27
  CMP    r15,[rsp]
  JE    _Case123
  MOV    r15,28
  CMP    r15,[rsp]
  JE    _Case123
  MOV    r15,26
  CMP    r15,[rsp]
  JE    _Case123
  MOV    r15,45
  CMP    r15,[rsp]
  JNE   _Case124
_Case123:
; WatchList_DebuggerEvent(*Debugger)       
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure26
  ADD    rsp,40
; 
; Case #COMMAND_DataBreakPoint
  JMP   _EndSelect17
_Case124:
  MOV    r15,39
  CMP    r15,[rsp]
  JNE   _Case125
; DataBreakpoint_DebuggerEvent(*Debugger)             
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure32
  ADD    rsp,40
; 
; Case #COMMAND_Libraries, #COMMAND_LibraryInfo, #COMMAND_ObjectID, #COMMAND_ObjectText, #COMMAND_ObjectData, #COMMAND_ControlLibraryViewer
  JMP   _EndSelect17
_Case125:
  MOV    r15,29
  CMP    r15,[rsp]
  JE    _Case126
  MOV    r15,30
  CMP    r15,[rsp]
  JE    _Case126
  MOV    r15,31
  CMP    r15,[rsp]
  JE    _Case126
  MOV    r15,32
  CMP    r15,[rsp]
  JE    _Case126
  MOV    r15,33
  CMP    r15,[rsp]
  JE    _Case126
  MOV    r15,44
  CMP    r15,[rsp]
  JNE   _Case127
_Case126:
; LibraryViewer_DebuggerEvent(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure28
  ADD    rsp,40
; 
; Case #COMMAND_ProfilerOffsets, #COMMAND_ProfilerData, #COMMAND_ControlProfiler
  JMP   _EndSelect17
_Case127:
  MOV    r15,34
  CMP    r15,[rsp]
  JE    _Case128
  MOV    r15,35
  CMP    r15,[rsp]
  JE    _Case128
  MOV    r15,42
  CMP    r15,[rsp]
  JNE   _Case129
_Case128:
; Profiler_DebuggerEvent(*Debugger)        
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure30
  ADD    rsp,40
; 
; Case #COMMAND_ControlPurifier
  JMP   _EndSelect17
_Case129:
  MOV    r15,49
  CMP    r15,[rsp]
  JNE   _Case130
; Purifier_DebuggerEvent(*Debugger)    
  SUB    rsp,8
  PUSH   qword [rsp+64]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure34
  ADD    rsp,40
; 
; Case #COMMAND_Modules
  JMP   _EndSelect17
_Case130:
  MOV    r15,50
  CMP    r15,[rsp]
  JNE   _Case131
; *Debugger\NbModules = *Debugger\Command\Value1
  MOV    rbp,qword [rsp+56]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
  MOV    rbp,qword [rsp+64]
  POP    rax
  MOV    dword [rbp+796],eax
; If *Debugger\CommandData And *Debugger\NbModules > 0
  MOV    rbp,qword [rsp+56]
  CMP    qword [rbp+72],0
  JE     No202
  MOV    rbp,qword [rsp+56]
  MOVSXD r15,dword [rbp+796]
  AND    r15,r15
  JLE    No202
Ok202:
  MOV    rax,1
  JMP    End202
No202:
  XOR    rax,rax
End202:
  AND    rax,rax
  JE    _EndIf1534
; ReDim *Debugger\ModuleNames(*Debugger\NbModules-1)
  MOV    rbp,qword [rsp+56]
  PUSH   rbp
  MOV    rbp,qword [rsp+64]
  MOVSXD r15,dword [rbp+796]
  DEC    r15
  MOV    rax,r15
  INC    rax
  POP    rbp
  LEA    rdx,[rbp+800]
  MOV    rcx,rax
  SUB    rsp,40
  CALL   SYS_ReAllocateArray
  ADD    rsp,40
; 
; *Pointer = *Debugger\CommandData
  MOV    rbp,qword [rsp+56]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+112],rax
; For i = 0 To *Debugger\NbModules - 1
  MOV    qword [rsp+120],0
  JMP   _ForSkipDebug1535
_For1535:
_ForSkipDebug1535:
  MOV    rbp,qword [rsp+56]
  MOVSXD r15,dword [rbp+796]
  DEC    r15
  CMP    r15,qword [rsp+120]
  JL    _Next1536
; *Debugger\ModuleNames(i) = PeekS(*Pointer, -1, #PB_Ascii)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+144]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    r15,qword [rsp+136]
  POP    rbp
  MOV    rbp,qword [rbp+800]
  SAL    r15,3
  LEA    rcx,[rbp+r15]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; *Pointer + MemoryStringLength(*Pointer, #PB_Ascii) + 1
  MOV    r15,qword [rsp+112]
  SUB    rsp,8
  PUSH   qword 24
  PUSH   qword [rsp+128]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_MemoryStringLength2
  ADD    rsp,40
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+112],r15
; Next i
_NextContinue1536:
  INC    qword [rsp+120]
  JNO   _For1535
_Next1536:
; EndIf 
_EndIf1534:
; 
; EndSelect      
_Case131:
_EndSelect17:
  POP    rax
; 
; DebuggerCallback(*Debugger) 
  PUSH   qword [rsp+48]
  POP    rcx
  CALL  _Procedure0
; 
; 
; If IsDebuggerValid(*Debugger)= 0 
  PUSH   qword [rsp+48]
  POP    rcx
  CALL  _Procedure424
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1538
; Break 2
  JMP   _Next1488
; EndIf
_EndIf1538:
; 
; 
; 
; If *Debugger\Command\Command = #COMMAND_End
  MOV    rbp,qword [rsp+48]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,1
  JNE   _EndIf1540
; Debugger_End(*Debugger) 
  PUSH   qword [rsp+48]
  POP    rcx
  CALL  _Procedure428
; Break 2
  JMP   _Next1488
; EndIf      
_EndIf1540:
; 
; 
; 
; If *Debugger\CommandData
  MOV    rbp,qword [rsp+48]
  CMP    qword [rbp+72],0
  JE    _EndIf1542
; FreeMemory(*Debugger\CommandData)
  MOV    rbp,qword [rsp+48]
  PUSH   qword [rbp+72]
  POP    rcx
  CALL   PB_FreeMemory
; *Debugger\CommandData = 0
  MOV    rbp,qword [rsp+48]
  MOV    qword [rbp+72],0
; EndIf                    
_EndIf1542:
; 
; Until result > 100 
  MOV    r15,qword [rsp+40]
  CMP    r15,100
  JLE   _Repeat1489
_Until1489:
; 
; If IsDebuggerValid(*Debugger)
  PUSH   qword [rsp+48]
  POP    rcx
  CALL  _Procedure424
  AND    rax,rax
  JE    _EndIf1544
; UpdateDebugOutputWindow(*Debugger) 
  PUSH   qword [rsp+48]
  POP    rcx
  CALL  _Procedure56
; EndIf
_EndIf1544:
; 
; Next RunningDebuggers()
  JMP   _ForEach1488
_Next1488:
; 
; ProcedureReturn result
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure431
; EndProcedure
_EndProcedureZero431:
  XOR    rax,rax
_EndProcedure431:
  PUSH   rax
  MOV    rcx,qword [rsp+72]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,128
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure LibraryViewer_DisplayLibrary(*Debugger.DebuggerData, index)
_Procedure556:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS556=128
  MOV    rax,7
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; If *Debugger\LibraryList And index < *Debugger\NbLibraries
  MOV    rbp,qword [rsp+PS556+0]
  CMP    qword [rbp+636],0
  JE     No288
  MOV    r15,qword [rsp+PS556+8]
  MOV    rbp,qword [rsp+PS556+0]
  MOVSXD rax,dword [rbp+632]
  CMP    r15,rax
  JGE    No288
Ok288:
  MOV    rax,1
  JMP    End288
No288:
  XOR    rax,rax
End288:
  AND    rax,rax
  JE    _EndIf2680
; 
; *libinfo.Debugger_LibraryData = *Debugger\LibraryList + index * SizeOf(Debugger_LibraryData)
  MOV    rbp,qword [rsp+PS556+0]
  MOV    r15,qword [rbp+636]
  MOV    r14,qword [rsp+PS556+8]
  IMUL   r14,28
  ADD    r15,r14
  MOV    qword [rsp+40],r15
; 
; Count = 0
  MOV    qword [rsp+48],0
; Title$ = StringField(*libinfo\TitleString$, 1, Chr(9))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S26
  PUSH   rax
  PUSH   qword 1
  MOV    rbp,qword [rsp+80]
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; While Title$ <> ""              
_While2681:
  PUSH   qword [rsp+56]
  MOV    rcx,_S3
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _Wend2681
; Size = Val(StringField(*libinfo\TitleString$, Count*2+2, Chr(9)))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S26
  PUSH   rax
  MOV    r15,qword [rsp+96]
  ADD    r15,r15
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+96]
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+64],rax
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Library_ObjectList], Count, Title$, Size)              
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+64]
  MOV    rbp,qword [rsp+PS556+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2832]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_AddGadgetColumn
; Count + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; Title$ = StringField(*libinfo\TitleString$, Count*2+1, Chr(9))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S26
  PUSH   rax
  MOV    r15,qword [rsp+80]
  ADD    r15,r15
  INC    r15
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+80]
  PUSH   qword [rbp+16]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; Wend
  JMP   _While2681
_Wend2681:
; *Debugger\NbLibColumns = Count
  PUSH   qword [rsp+48]
  MOV    rbp,qword [rsp+PS556+8]
  POP    rax
  MOV    dword [rbp+644],eax
; 
; 
; 
; 
; Command.CommandInfo\Command = #COMMAND_GetLibraryInfo
  LEA    rbp,[rsp+72]
  MOV    dword [rbp],25
; Command\Value1 = index
  PUSH   qword [rsp+PS556+8]
  POP    rax
  MOV    dword [rbp+8],eax
; SendDebuggerCommand(*Debugger, @Command)   
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS556+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; 
; *Debugger\CurrentLibrary = index
  PUSH   qword [rsp+PS556+8]
  MOV    rbp,qword [rsp+PS556+8]
  POP    rax
  MOV    dword [rbp+660],eax
; *Debugger\CurrentObject = -1
  MOV    rbp,qword [rsp+PS556+0]
  MOV    dword [rbp+664],-1
; *Debugger\CurrentObjectID = -1
  MOV    rbp,qword [rsp+PS556+0]
  MOV    qword [rbp+668],-1
; 
; EndIf
_EndIf2680:
; 
; EndProcedure
_EndProcedureZero557:
  XOR    rax,rax
_EndProcedure557:
  PUSH   rax
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,96
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure OpenMemoryViewerWindow(*Debugger.DebuggerData)
_Procedure40:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS40=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Memory]
  MOV    rbp,qword [rsp+PS40+0]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+848],0
  JE    _EndIf1932
; SetWindowForeground(*Debugger\Windows[#DEBUGGER_WINDOW_Memory])
  MOV    rbp,qword [rsp+PS40+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+848]
  POP    rcx
  CALL  _Procedure106
; 
; Else
  JMP   _EndIf1931
_EndIf1932:
; Window = OpenWindow(#PB_Any, MemoryViewerX, MemoryViewerY, MemoryViewerWidth, MemoryViewerHeight, Language("Debugger","MemoryWindowTitle") + " - " + DebuggerTitle(*Debugger\FileName$), #PB_Window_SystemMenu|#PB_Window_SizeGadget|#PB_Window_MinimizeGadget|#PB_Window_Invisible|#PB_Window_MaximizeGadget)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 282001408
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S224
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS40+48]
  PUSH   qword [rbp+80]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure260
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [v_MemoryViewerHeight]
  PUSH   qword [v_MemoryViewerWidth]
  PUSH   qword [v_MemoryViewerY]
  PUSH   qword [v_MemoryViewerX]
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_OpenWindow2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+40],rax
; If Window 
  CMP    qword [rsp+40],0
  JE    _EndIf1935
; *Debugger\Windows[#DEBUGGER_WINDOW_Memory] = Window
  PUSH   qword [rsp+40]
  MOV    rbp,qword [rsp+PS40+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+848],rax
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Text]     = TextGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Range")+":", #PB_Text_Right)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S225
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS40+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2224],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_To]       = TextGadget(#PB_Any, 0, 0, 0, 0, "-", #PB_Text_Center)
  SUB    rsp,8
  PUSH   qword 1
  MOV    rax,_S38
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS40+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2232],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Start]    = StringGadget(#PB_Any, 0, 0, 0, 0, "")
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS40+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2240],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_End]      = StringGadget(#PB_Any, 0, 0, 0, 0, "")
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS40+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2248],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Display]  = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Display"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S204
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS40+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2256],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Editor]   = EditorGadget(#PB_Any, 0, 0, 0, 0)      
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_EditorGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS40+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2264],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Container]= ContainerGadget(#PB_Any, 0, 0, 0, 0, #PB_Container_BorderLess)
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ContainerGadget2
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS40+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2272],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_List]     = ListIconGadget(#PB_Any, 0, 0, 0, 0, "", 80, #PB_ListIcon_GridLines|#PB_ListIcon_FullRowSelect|#PB_ListIcon_MultiSelect)
  PUSH   qword 1073807364
  PUSH   qword 80
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ListIconGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS40+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2280],rax
; CloseGadgetList()      
  CALL   PB_CloseGadgetList
; *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType] = ComboBoxGadget(#PB_Any, 0, 0, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ComboBoxGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS40+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2288],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_CopyText] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","CopyText"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S226
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS40+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2296],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_SaveText] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","SaveText"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S227
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS40+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2304],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Memory_SaveRaw]  = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","SaveRaw"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S228
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS40+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2312],rax
; 
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewHex"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S229
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS40+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewByte"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S230
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS40+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewChar"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S231
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS40+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewWord"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S232
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS40+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewLong"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S233
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS40+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewQuad"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S234
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS40+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewFloat"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S235
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS40+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewDouble"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S236
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS40+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewString") + " (Ascii)")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S237
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S238
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS40+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewString") + " (Unicode)")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S237
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S239
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS40+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], -1, Language("Debugger","ViewString") + " (Utf-8)")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S237
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S240
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS40+32]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_ViewType], MemoryDisplayType)
  PUSH   qword [v_MemoryDisplayType]
  MOV    rbp,qword [rsp+PS40+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2288]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; 
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Container], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS40+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2272]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; 
; If EditorFontID
  CMP    qword [v_EditorFontID],0
  JE    _EndIf1937
; SetGadgetFont(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Editor], EditorFontID)        
  PUSH   qword [v_EditorFontID]
  MOV    rbp,qword [rsp+PS40+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2264]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetFont
; EndIf
_EndIf1937:
; CompilerIf #CompileWindows
; SetCodePage(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Editor])
  MOV    rbp,qword [rsp+PS40+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2264]
  POP    rcx
  CALL  _Procedure136
; CompilerEndIf
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Memory_Editor], #PB_Editor_ReadOnly, 1)    
  PUSH   qword 1
  PUSH   qword 2048
  MOV    rbp,qword [rsp+PS40+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2264]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; 
; CompilerIf #DEFAULT_CanWindowStayOnTop
; SetWindowStayOnTop(Window, DebuggerOnTop)
  PUSH   qword [v_DebuggerOnTop]
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL  _Procedure112
; CompilerEndIf 
; 
; Debugger_AddShortcuts(Window) 
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure6
; 
; Restore MemoryViewer_SpecialChars
  MOV    rax,ll_openmemoryviewerwindow_memoryviewer_specialchars
  MOV    qword [PB_DataPointer],rax
; For i = 0 To 31
  MOV    qword [rsp+48],0
  JMP   _ForSkipDebug1938
_For1938:
_ForSkipDebug1938:
  MOV    rax,31
  CMP    rax,qword [rsp+48]
  JL    _Next1939
; Read.s MemoryViewer_Chars(i)
  MOV    r15,qword [rsp+48]
  MOV    rbp,qword [a_MemoryViewer_Chars]
  SAL    r15,3
  LEA    rcx,[rbp+r15]
  MOV    rdx,qword [PB_DataPointer]
  CALL   SYS_FastAllocateStringFree4
  ADD    qword [PB_DataPointer],rax
; Next i
_NextContinue1939:
  INC    qword [rsp+48]
  JNO   _For1938
_Next1939:
; 
; EnsureWindowOnDesktop(Window)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure162
; If MemoryViewerMaximize
  CMP    qword [v_MemoryViewerMaximize],0
  JE    _EndIf1941
; ShowWindowMaximized(Window)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure100
; Else
  JMP   _EndIf1940
_EndIf1941:
; HideWindow(Window, 0)
  PUSH   qword 0
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_HideWindow
; EndIf
_EndIf1940:
; 
; MemoryViewerWindowEvents(*Debugger, #PB_Event_SizeWindow)
  PUSH   qword 13118
  PUSH   qword [rsp+PS40+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure484
; UpdateMemoryViewerWindowState(*Debugger)  
  PUSH   qword [rsp+PS40+0]
  POP    rcx
  CALL  _Procedure486
; 
; Debugger_ProcessEvents(Window, #PB_Event_ActivateWindow) 
  PUSH   qword 13104
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL  _Procedure14
; EndIf  
_EndIf1935:
; EndIf
_EndIf1931:
; 
; EndProcedure
_EndProcedureZero41:
  XOR    rax,rax
_EndProcedure41:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure Network_SendCrypt(*This.Network_Communication, *Command.CommandInfo, *CommandData)
_Procedure408:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS408=128
  MOV    rax,8
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; Protected CommandCrypt.CommandInfo
; Size = *Command\DataSize
  MOV    rbp,qword [rsp+PS408+8]
  MOVSXD rax,dword [rbp+4]
  PUSH   rax
  POP    rax
  MOV    qword [rsp+64],rax
; 
; 
; rijndael_cbc_encrypt(@*This\CryptContext, *Command, @CommandCrypt, SizeOf(CommandInfo), @*This\InitializerEncrypt)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS408+8]
  LEA    rax,[rbp+724]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 20
  LEA    rax,[rsp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS408+40]
  MOV    rbp,qword [rsp+PS408+40]
  LEA    rax,[rbp+148]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   rijndael_cbc_encrypt
  MOVSXD rax,eax
  ADD    rsp,48
; 
; 
; 
; Network_SendData(*This\Socket, @CommandCrypt, SizeOf(CommandInfo))
  PUSH   qword 20
  LEA    rax,[rsp+48]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS408+16]
  PUSH   qword [rbp+60]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   Network_SendData
; 
; If Size > 0 And *CommandData  
  MOV    r15,qword [rsp+64]
  AND    r15,r15
  JLE    No196
  CMP    qword [rsp+PS408+16],0
  JE     No196
Ok196:
  MOV    rax,1
  JMP    End196
No196:
  XOR    rax,rax
End196:
  AND    rax,rax
  JE    _EndIf1351
; 
; If Size < 16
  MOV    r15,qword [rsp+64]
  CMP    r15,16
  JGE   _EndIf1353
; 
; 
; *Buffer = AllocateMemory(16)
  PUSH   qword 16
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+72],rax
; If *Buffer = 0
  MOV    r15,qword [rsp+72]
  AND    r15,r15
  JNE   _EndIf1355
; ProcedureReturn
  JMP   _EndProcedure409
; EndIf
_EndIf1355:
; 
; CopyMemory(*CommandData, *Buffer, Size)
  PUSH   qword [rsp+64]
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+PS408+32]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CopyMemory
; SizeReal = 16      
  MOV    qword [rsp+80],16
; Else
  JMP   _EndIf1352
_EndIf1353:
; *Buffer = *CommandData
  PUSH   qword [rsp+PS408+16]
  POP    rax
  MOV    qword [rsp+72],rax
; SizeReal = Size
  PUSH   qword [rsp+64]
  POP    rax
  MOV    qword [rsp+80],rax
; EndIf
_EndIf1352:
; 
; *CommandDataCrypt = AllocateMemory(Size)      
  PUSH   qword [rsp+64]
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+88],rax
; If *CommandDataCrypt
  CMP    qword [rsp+88],0
  JE    _EndIf1358
; rijndael_cbc_encrypt(@*This\CryptContext, *Buffer, *CommandDataCrypt, SizeReal, @*This\InitializerEncrypt)
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS408+8]
  LEA    rax,[rbp+724]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+96]
  PUSH   qword [rsp+112]
  PUSH   qword [rsp+104]
  MOV    rbp,qword [rsp+PS408+40]
  LEA    rax,[rbp+148]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   rijndael_cbc_encrypt
  MOVSXD rax,eax
  ADD    rsp,48
; 
; 
; 
; Network_SendData(*This\Socket, *CommandDataCrypt, SizeReal)     
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+96]
  MOV    rbp,qword [rsp+PS408+16]
  PUSH   qword [rbp+60]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   Network_SendData
; FreeMemory(*CommandDataCrypt)
  PUSH   qword [rsp+88]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf   
_EndIf1358:
; 
; If Size < 16
  MOV    r15,qword [rsp+64]
  CMP    r15,16
  JGE   _EndIf1360
; FreeMemory(*Buffer)
  PUSH   qword [rsp+72]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf 
_EndIf1360:
; EndIf
_EndIf1351:
; 
; EndProcedure
_EndProcedureZero409:
  XOR    rax,rax
_EndProcedure409:
  ADD    rsp,104
  POP    r15
  POP    rbp
  RET
; Procedure ApplyDefaultPurifierOptions(*Debugger.DebuggerData, OptionString$)
_Procedure70:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   rbp
  PUSH   r15
  PS70=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS70+8]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; If OptionString$
  MOV    rcx,qword [rsp+40]
  XOR    rdx,rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf3244
; OptionString$ = RemoveString(RemoveString(OptionString$, " "), Chr(9))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S26
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S25
  PUSH   rax
  PUSH   qword [rsp+104]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_RemoveString
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_RemoveString
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; If CountString(OptionString$, ",") >= 3 
  MOV    rax,_S30
  PUSH   rax
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_CountString
  MOV    r15,rax
  CMP    r15,3
  JL    _EndIf3246
; 
; 
; *Debugger\PurifierGlobal  = GranularityFromState(StateFromGranularity(Val(StringField(OptionString$, 1, ","))))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S30
  PUSH   rax
  PUSH   qword 1
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure608
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure606
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS70+8]
  POP    rax
  MOV    dword [rbp+756],eax
; *Debugger\PurifierLocal   = GranularityFromState(StateFromGranularity(Val(StringField(OptionString$, 2, ","))))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S30
  PUSH   rax
  PUSH   qword 2
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure608
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure606
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS70+8]
  POP    rax
  MOV    dword [rbp+760],eax
; *Debugger\PurifierString  = GranularityFromState(StateFromGranularity(Val(StringField(OptionString$, 3, ","))))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S30
  PUSH   rax
  PUSH   qword 3
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure608
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure606
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS70+8]
  POP    rax
  MOV    dword [rbp+764],eax
; *Debugger\PurifierDynamic = GranularityFromState(StateFromGranularity(Val(StringField(OptionString$, 4, ","))))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S30
  PUSH   rax
  PUSH   qword 4
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringField
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure608
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure606
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS70+8]
  POP    rax
  MOV    dword [rbp+768],eax
; EndIf
_EndIf3246:
; 
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Purifier]
  MOV    rbp,qword [rsp+PS70+0]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+904],0
  JE    _EndIf3248
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarGlobal],  StateFromGranularity(*Debugger\PurifierGlobal))
  MOV    rbp,qword [rsp+PS70+0]
  MOVSXD rax,dword [rbp+756]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure608
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS70+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3040]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarLocal],   StateFromGranularity(*Debugger\PurifierLocal))
  MOV    rbp,qword [rsp+PS70+0]
  MOVSXD rax,dword [rbp+760]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure608
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS70+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3064]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarString],  StateFromGranularity(*Debugger\PurifierString))
  MOV    rbp,qword [rsp+PS70+0]
  MOVSXD rax,dword [rbp+764]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure608
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS70+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3088]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarDynamic], StateFromGranularity(*Debugger\PurifierDynamic))
  MOV    rbp,qword [rsp+PS70+0]
  MOVSXD rax,dword [rbp+768]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure608
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS70+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3112]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; UpdatePurifierLines(*Debugger)
  PUSH   qword [rsp+PS70+0]
  POP    rcx
  CALL  _Procedure610
; EndIf
_EndIf3248:
; 
; 
; If *Debugger\IsPurifier
  MOV    rbp,qword [rsp+PS70+0]
  CMP    dword [rbp+36],0
  JE    _EndIf3250
; Protected Dim State.l(3)
  SUB    rsp,24
  MOV    rdx,4
  LEA    rax,[rsp+72]
  PUSH   rax
  XOR    r9,r9
  MOV    r8,5
  MOV    rcx,4
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [rsp+48],rax
; State(0) = *Debugger\PurifierGlobal
  MOV    rbp,qword [rsp+PS70+0]
  MOVSXD rax,dword [rbp+756]
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  POP    rax
  MOV    dword [rbp+0],eax
; State(1) = *Debugger\PurifierLocal
  MOV    rbp,qword [rsp+PS70+0]
  MOVSXD rax,dword [rbp+760]
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  POP    rax
  MOV    dword [rbp+4],eax
; State(2) = *Debugger\PurifierString
  MOV    rbp,qword [rsp+PS70+0]
  MOVSXD rax,dword [rbp+764]
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  POP    rax
  MOV    dword [rbp+8],eax
; State(3) = *Debugger\PurifierDynamic
  MOV    rbp,qword [rsp+PS70+0]
  MOVSXD rax,dword [rbp+768]
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  POP    rax
  MOV    dword [rbp+12],eax
; 
; Command.CommandInfo\Command = #COMMAND_SetPurifier
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],39
; Command\DataSize = 4 * SizeOf(LONG)
  MOV    dword [rbp+4],16
; SendDebuggerCommandWithData(*Debugger, @Command, @State(0))    
  MOV    rbp,qword [rsp+48]
  LEA    rax,[rbp+0]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS70+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL  _Procedure8
; EndIf
_EndIf3250:
; EndIf
_EndIf3244:
; EndProcedure
_EndProcedureZero71:
  XOR    rax,rax
_EndProcedure71:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeArray
  ADD    rsp,40
  POP    rax
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure GetUniqueID()
_Procedure164:
  PUSH   r15
  PS164=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; Static UniqueID
; 
; UniqueID + 1
  MOV    r15,qword [so_GetUniqueID.v_UniqueID]
  INC    r15
  MOV    qword [so_GetUniqueID.v_UniqueID],r15
; 
; 
; If UniqueID = 0
  MOV    r15,qword [so_GetUniqueID.v_UniqueID]
  AND    r15,r15
  JNE   _EndIf189
; UniqueID + 1
  MOV    r15,qword [so_GetUniqueID.v_UniqueID]
  INC    r15
  MOV    qword [so_GetUniqueID.v_UniqueID],r15
; EndIf
_EndIf189:
; 
; ProcedureReturn UniqueID
  MOV    rax,qword [so_GetUniqueID.v_UniqueID]
  JMP   _EndProcedure165
; EndProcedure
_EndProcedureZero165:
  XOR    rax,rax
_EndProcedure165:
  ADD    rsp,48
  POP    r15
  RET
; Procedure Purifier_DebuggerEvent(*Debugger.DebuggerData)
_Procedure34:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS34=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; Select *Debugger\Command\Command
  MOV    rbp,qword [rsp+PS34+0]
  MOVSXD rax,dword [rbp+52]
  PUSH   rax
; 
; Case #COMMAND_ControlPurifier
  MOV    r15,49
  CMP    r15,[rsp]
  JNE   _Case287
; If *Debugger\Command\Value1 = 1 And *Debugger\CommandData And *Debugger\Command\Datasize >= 4*SizeOf(Long)
  MOV    rbp,qword [rsp+PS34+8]
  MOVSXD r15,dword [rbp+60]
  CMP    r15,1
  JNE    No338
  MOV    rbp,qword [rsp+PS34+8]
  CMP    qword [rbp+72],0
  JE     No338
  MOV    rbp,qword [rsp+PS34+8]
  MOVSXD r15,dword [rbp+56]
  CMP    r15,16
  JL     No338
Ok338:
  MOV    rax,1
  JMP    End338
No338:
  XOR    rax,rax
End338:
  AND    rax,rax
  JE    _EndIf3277
; 
; 
; *Debugger\PurifierGlobal  = GranularityFromState(StateFromGranularity(PeekL(*Debugger\CommandData)))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS34+16]
  PUSH   qword [rbp+72]
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure608
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure606
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS34+16]
  POP    rax
  MOV    dword [rbp+756],eax
; *Debugger\PurifierLocal   = GranularityFromState(StateFromGranularity(PeekL(*Debugger\CommandData + SizeOf(Long))))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS34+16]
  MOV    r15,qword [rbp+72]
  ADD    r15,4
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure608
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure606
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS34+16]
  POP    rax
  MOV    dword [rbp+760],eax
; *Debugger\PurifierString  = GranularityFromState(StateFromGranularity(PeekL(*Debugger\CommandData + SizeOf(Long)*2)))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS34+16]
  MOV    r15,qword [rbp+72]
  ADD    r15,8
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure608
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure606
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS34+16]
  POP    rax
  MOV    dword [rbp+764],eax
; *Debugger\PurifierDynamic = GranularityFromState(StateFromGranularity(PeekL(*Debugger\CommandData + SizeOf(Long)*3)))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS34+16]
  MOV    r15,qword [rbp+72]
  ADD    r15,12
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure608
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure606
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS34+16]
  POP    rax
  MOV    dword [rbp+768],eax
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Purifier]
  MOV    rbp,qword [rsp+PS34+8]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+904],0
  JE    _EndIf3279
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarGlobal],  StateFromGranularity(*Debugger\PurifierGlobal))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS34+16]
  MOVSXD rax,dword [rbp+756]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure608
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS34+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3040]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarLocal],   StateFromGranularity(*Debugger\PurifierLocal))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS34+16]
  MOVSXD rax,dword [rbp+760]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure608
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS34+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3064]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarString],  StateFromGranularity(*Debugger\PurifierString))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS34+16]
  MOVSXD rax,dword [rbp+764]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure608
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS34+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3088]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarDynamic], StateFromGranularity(*Debugger\PurifierDynamic))
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS34+16]
  MOVSXD rax,dword [rbp+768]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure608
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS34+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3112]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetState
  ADD    rsp,40
; UpdatePurifierLines(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS34+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure610
  ADD    rsp,40
; EndIf
_EndIf3279:
; 
; 
; 
; 
; 
; Protected Dim State.l(3)
  SUB    rsp,16
  MOV    rdx,4
  LEA    rax,[rsp+64]
  PUSH   rax
  XOR    r9,r9
  MOV    r8,5
  MOV    rcx,4
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,56
  MOV    qword [rsp+48],rax
; State(0) = *Debugger\PurifierGlobal
  MOV    rbp,qword [rsp+PS34+8]
  MOVSXD rax,dword [rbp+756]
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  POP    rax
  MOV    dword [rbp+0],eax
; State(1) = *Debugger\PurifierLocal
  MOV    rbp,qword [rsp+PS34+8]
  MOVSXD rax,dword [rbp+760]
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  POP    rax
  MOV    dword [rbp+4],eax
; State(2) = *Debugger\PurifierString
  MOV    rbp,qword [rsp+PS34+8]
  MOVSXD rax,dword [rbp+764]
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  POP    rax
  MOV    dword [rbp+8],eax
; State(3) = *Debugger\PurifierDynamic
  MOV    rbp,qword [rsp+PS34+8]
  MOVSXD rax,dword [rbp+768]
  PUSH   rax
  MOV    rbp,qword [rsp+56]
  POP    rax
  MOV    dword [rbp+12],eax
; 
; Command.CommandInfo\Command = #COMMAND_SetPurifier
  LEA    rbp,[rsp+64]
  MOV    dword [rbp],39
; Command\DataSize = 4 * SizeOf(LONG)
  MOV    dword [rbp+4],16
; SendDebuggerCommandWithData(*Debugger, @Command, @State(0))        
  SUB    rsp,8
  MOV    rbp,qword [rsp+56]
  LEA    rax,[rbp+0]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+80]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS34+32]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL  _Procedure8
  ADD    rsp,40
; EndIf
_EndIf3277:
; 
; EndSelect
_Case287:
_EndSelect46:
  POP    rax
; 
; EndProcedure
_EndProcedureZero35:
  XOR    rax,rax
_EndProcedure35:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeArray
  ADD    rsp,40
  POP    rax
  ADD    rsp,80
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure CreateDataBreakpointWindow(*Debugger.DebuggerData)
_Procedure62:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS62=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; Flags = #PB_Window_SystemMenu|#PB_Window_MinimizeGadget|#PB_Window_SizeGadget|#PB_Window_Invisible|#PB_Window_MaximizeGadget
  MOV    qword [rsp+40],282001408
; If DataBreakpointWindowMaximize
  CMP    qword [v_DataBreakpointWindowMaximize],0
  JE    _EndIf2547
; Flags | #PB_Window_Maximize
  MOV    r15,qword [rsp+40]
  OR     r15,16777216
  MOV    qword [rsp+40],r15
; EndIf  
_EndIf2547:
; 
; Window = OpenWindow(#PB_Any, 0, 0, 0, 0, Language("Debugger","DataBreakpoints") + " - " + GetFilePart(*Debugger\FileName$), Flags)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S272
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS62+40]
  PUSH   qword [rbp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetFilePart
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_OpenWindow2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+48],rax
; If Window
  CMP    qword [rsp+48],0
  JE    _EndIf2549
; 
; *Debugger\Windows[#DEBUGGER_WINDOW_DataBreakpoints] = Window
  PUSH   qword [rsp+48]
  MOV    rbp,qword [rsp+PS62+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+896],rax
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_List] = ListIconGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger", "Procedure"), 100, #PB_ListIcon_GridLines|#PB_ListIcon_FullRowSelect)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 1073807360
  PUSH   qword 100
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S273
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ListIconGadget2
  ADD    rsp,72
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS62+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2744],rax
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_List], 1, Language("Debugger", "Condition"), 350)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 350
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S274
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS62+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_List], 2, Language("Debugger", "ConditionStatus"), 250)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 250
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S275
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS62+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2744]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_Frame] = FrameGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","AddBreakPoint")+":")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S276
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_FrameGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS62+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2792],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_Text1] = TextGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Procedure")+":", #PB_Text_Right)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S273
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS62+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2800],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_Text2] = TextGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Condition")+":", #PB_Text_Right)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 2
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S274
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_TextGadget2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS62+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2808],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_Procedure] = ComboBoxGadget(#PB_Any, 0, 0, 0, 0)
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ComboBoxGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS62+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2776],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_Condition] = StringGadget(#PB_Any, 0, 0, 0, 0, "")
  MOV    rax,_S3
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_StringGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS62+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2784],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_Add] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Add"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S277
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS62+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2752],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_Remove] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Remove"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S278
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS62+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2760],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Breakpoint_Clear] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Clear"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S208
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS62+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2768],rax
; 
; *Debugger\DataBreakpointsVisible = 0
  MOV    rbp,qword [rsp+PS62+0]
  MOV    dword [rbp+136],0
; 
; CompilerIf #DEFAULT_CanWindowStayOnTop
; SetWindowStayOnTop(Window, DebuggerOnTop)
  PUSH   qword [v_DebuggerOnTop]
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL  _Procedure112
; CompilerEndIf  
; 
; AddKeyboardShortcut(Window, #PB_Shortcut_Return, #DEBUGGER_MENU_Return)
  PUSH   qword 0
  PUSH   qword 13
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_AddKeyboardShortcut
; Debugger_AddShortcuts(Window)        
  PUSH   qword [rsp+48]
  POP    rcx
  CALL  _Procedure6
; EndIf
_EndIf2549:
; 
; EndProcedure
_EndProcedureZero63:
  XOR    rax,rax
_EndProcedure63:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure SetWindowStayOnTop(Window, StayOnTop)
_Procedure112:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   r15
  PS112=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; If StayOnTop
  CMP    qword [rsp+PS112+8],0
  JE    _EndIf36
; SetWindowPos_(WindowID(Window), #HWND_TOPMOST , 0, 0, 0, 0, #SWP_NOSIZE |#SWP_NOMOVE)
  SUB    rsp,8
  PUSH   qword 3
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  SUB    rsp,8
  PUSH   qword [rsp+PS112+64]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   SetWindowPos
  ADD    rsp,64
; Else
  JMP   _EndIf35
_EndIf36:
; SetWindowPos_(WindowID(Window), #HWND_NOTOPMOST , 0, 0, 0, 0, #SWP_NOSIZE |#SWP_NOMOVE)
  SUB    rsp,8
  PUSH   qword 3
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -2
  SUB    rsp,8
  PUSH   qword [rsp+PS112+64]
  POP    rcx
  SUB    rsp,32
  CALL   PB_WindowID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   SetWindowPos
  ADD    rsp,64
; EndIf
_EndIf35:
; 
; EndProcedure
_EndProcedureZero113:
  XOR    rax,rax
_EndProcedure113:
  ADD    rsp,48
  POP    r15
  RET
; Procedure UpdatePurifierWindowState(*Debugger.DebuggerData)
_Procedure618:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS618=64
  SUB    rsp,40
; 
; If *Debugger\ProgramState = -1
  MOV    rbp,qword [rsp+PS618+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JNE   _EndIf3269
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarGlobal], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS618+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3040]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarLocal], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS618+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3064]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarString], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS618+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3088]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarDynamic], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS618+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3112]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Ok], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS618+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3128]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Apply], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS618+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3144]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; 
; Else
  JMP   _EndIf3268
_EndIf3269:
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarGlobal], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS618+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3040]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarLocal], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS618+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3064]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarString], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS618+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3088]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_TrackbarDynamic], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS618+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3112]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Purifier_Ok], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS618+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3128]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; UpdatePurifierLines(*Debugger) 
  PUSH   qword [rsp+PS618+0]
  POP    rcx
  CALL  _Procedure610
; 
; EndIf
_EndIf3268:
; 
; 
; EndProcedure
_EndProcedureZero619:
  XOR    rax,rax
_EndProcedure619:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure OpenProfilerWindow(*Debugger.DebuggerData)
_Procedure50:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS50=128
  MOV    rax,8
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; 
; If Profiler_Arrow = 0
  MOV    r15,qword [v_Profiler_Arrow]
  AND    r15,r15
  JNE   _EndIf3163
; Profiler_Arrow   = CatchImage(#PB_Any, ?Profiler_Arrow)
  MOV    rbp,ll_openprofilerwindow_profiler_arrow
  MOV    rax,rbp
  PUSH   rax
  PUSH   qword -1
  POP    rcx
  POP    rdx
  CALL   PB_CatchImage
  MOV    qword [v_Profiler_Arrow],rax
; Profiler_Select  = CatchImage(#PB_Any, ?Profiler_Select)
  MOV    rbp,ll_openprofilerwindow_profiler_select
  MOV    rax,rbp
  PUSH   rax
  PUSH   qword -1
  POP    rcx
  POP    rdx
  CALL   PB_CatchImage
  MOV    qword [v_Profiler_Select],rax
; Profiler_Cross   = CatchImage(#PB_Any, ?Profiler_Cross)
  MOV    rbp,ll_openprofilerwindow_profiler_cross
  MOV    rax,rbp
  PUSH   rax
  PUSH   qword -1
  POP    rcx
  POP    rdx
  CALL   PB_CatchImage
  MOV    qword [v_Profiler_Cross],rax
; Profiler_Zoomin  = CatchImage(#PB_Any, ?Profiler_Zoomin)
  MOV    rbp,ll_openprofilerwindow_profiler_zoomin
  MOV    rax,rbp
  PUSH   rax
  PUSH   qword -1
  POP    rcx
  POP    rdx
  CALL   PB_CatchImage
  MOV    qword [v_Profiler_Zoomin],rax
; Profiler_Zoomout = CatchImage(#PB_Any, ?Profiler_Zoomout)
  MOV    rbp,ll_openprofilerwindow_profiler_zoomout
  MOV    rax,rbp
  PUSH   rax
  PUSH   qword -1
  POP    rcx
  POP    rdx
  CALL   PB_CatchImage
  MOV    qword [v_Profiler_Zoomout],rax
; Profiler_Zoomall = CatchImage(#PB_Any, ?Profiler_Zoomall)
  MOV    rbp,ll_openprofilerwindow_profiler_zoomall
  MOV    rax,rbp
  PUSH   rax
  PUSH   qword -1
  POP    rcx
  POP    rdx
  CALL   PB_CatchImage
  MOV    qword [v_Profiler_Zoomall],rax
; EndIf
_EndIf3163:
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Profiler]
  MOV    rbp,qword [rsp+PS50+0]
  PUSH   rbp
  POP    rbp
  CMP    qword [rbp+888],0
  JE    _EndIf3165
; SetWindowForeground(*Debugger\Windows[#DEBUGGER_WINDOW_Profiler])
  MOV    rbp,qword [rsp+PS50+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+888]
  POP    rcx
  CALL  _Procedure106
; 
; Else
  JMP   _EndIf3164
_EndIf3165:
; Window = OpenWindow(#PB_Any, ProfilerX, ProfilerY, ProfilerWidth, ProfilerHeight, Language("Debugger","ProfilerTitle") + " - " + DebuggerTitle(*Debugger\FileName$), #PB_Window_SystemMenu|#PB_Window_SizeGadget|#PB_Window_MinimizeGadget|#PB_Window_MaximizeGadget|#PB_Window_Invisible)
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 282001408
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S323
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS50+48]
  PUSH   qword [rbp+80]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure260
  ADD    rsp,48
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [v_ProfilerHeight]
  PUSH   qword [v_ProfilerWidth]
  PUSH   qword [v_ProfilerY]
  PUSH   qword [v_ProfilerX]
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_OpenWindow2
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    qword [rsp+40],rax
; If Window
  CMP    qword [rsp+40],0
  JE    _EndIf3168
; *Debugger\Windows[#DEBUGGER_WINDOW_Profiler] = Window 
  PUSH   qword [rsp+40]
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+888],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Start]  = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Misc","Start"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S324
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2896],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Stop]   = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Misc","Stop"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S325
  PUSH   rax
  MOV    rax,_S111
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2904],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Reset]  = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Reset"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S267
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2912],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Update] = ButtonGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","Update"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S220
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonGadget
  ADD    rsp,56
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2920],rax
; 
; If *Debugger\ProfilerRunning
  MOV    rbp,qword [rsp+PS50+0]
  CMP    dword [rbp+692],0
  JE    _EndIf3170
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Start], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2896]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; Else
  JMP   _EndIf3169
_EndIf3170:
; DisableGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Stop], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2904]
  POP    rcx
  POP    rdx
  CALL   PB_DisableGadget
; EndIf
_EndIf3169:
; 
; 
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Zoomin]    = ButtonImageGadget(#PB_Any, 0, 0, 0, 0, ImageID(Profiler_Zoomin))
  PUSH   qword [v_Profiler_Zoomin]
  POP    rcx
  CALL   PB_ImageID
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonImageGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2976],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Zoomout]   = ButtonImageGadget(#PB_Any, 0, 0, 0, 0, ImageID(Profiler_Zoomout))
  PUSH   qword [v_Profiler_Zoomout]
  POP    rcx
  CALL   PB_ImageID
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonImageGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2984],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Zoomall]   = ButtonImageGadget(#PB_Any, 0, 0, 0, 0, ImageID(Profiler_Zoomall))
  PUSH   qword [v_Profiler_Zoomall]
  POP    rcx
  CALL   PB_ImageID
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonImageGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2992],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Select]    = ButtonImageGadget(#PB_Any, 0, 0, 0, 0, ImageID(Profiler_Select), #PB_Button_Toggle)
  SUB    rsp,8
  PUSH   qword 4099
  PUSH   qword [v_Profiler_Select]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonImageGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3008],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Drag]      = ButtonImageGadget(#PB_Any, 0, 0, 0, 0, ImageID(Profiler_Arrow), #PB_Button_Toggle)
  SUB    rsp,8
  PUSH   qword 4099
  PUSH   qword [v_Profiler_Arrow]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonImageGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3000],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Cross]     = ButtonImageGadget(#PB_Any, 0, 0, 0, 0, ImageID(Profiler_Cross), #PB_Button_Toggle)
  SUB    rsp,8
  PUSH   qword 4099
  PUSH   qword [v_Profiler_Cross]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ButtonImageGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+3016],rax
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Select], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+3008]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Container] = ContainerGadget(#PB_Any, 0, 0, 0, 0, #PB_Container_Double)
  PUSH   qword 8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ContainerGadget2
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2928],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Image]     = ImageGadget(#PB_Any, 0, 0, 0, 0, 0)
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ImageGadget
  ADD    rsp,48
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2952],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollX]   = ScrollBarGadget(#PB_Any, 0, 0, 100, 15, 0, 1, 10000) 
  PUSH   qword 10000
  PUSH   qword 1
  PUSH   qword 0
  PUSH   qword 15
  PUSH   qword 100
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScrollBarGadget
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2960],rax
; *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_ScrollY]   = ScrollBarGadget(#PB_Any, 0, 0, 15, 100, 0, 1, 1000, #PB_ScrollBar_Vertical)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 1000
  PUSH   qword 1
  PUSH   qword 0
  PUSH   qword 100
  PUSH   qword 15
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScrollBarGadget2
  ADD    rsp,80
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2968],rax
; CloseGadgetList()      
  CALL   PB_CloseGadgetList
; 
; If *Debugger\NbIncludedFiles > 0 
  MOV    rbp,qword [rsp+PS50+0]
  MOVSXD r15,dword [rbp+88]
  AND    r15,r15
  JLE   _EndIf3173
; *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files] = ListIconGadget(#PB_Any, 0, 0, 0, 0, Language("Debugger","File"), 260, #PB_ListIcon_MultiSelect|#PB_ListIcon_CheckBoxes|#PB_ListIcon_AlwaysShowSelection)  
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 13
  PUSH   qword 260
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S270
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+40],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ListIconGadget2
  ADD    rsp,72
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2944],rax
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], 1, Language("Debugger","CalledLines"), 120)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 120
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S326
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS50+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; AddGadgetColumn(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], 2, Language("Debugger","CallsPerLine"), 120)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 120
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S327
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS50+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetColumn
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Splitter] = SplitterGadget(#PB_Any, 0, 0, 0, 0, *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Container], *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], #PB_Splitter_SecondFixed)
  PUSH   qword 8
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  MOV    rbp,qword [rsp+PS50+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2928]
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SplitterGadget2
  ADD    rsp,64
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  POP    rax
  MOV    qword [rbp+2936],rax
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Splitter], #PB_Splitter_FirstMinimumSize, 100)
  PUSH   qword 100
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS50+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2936]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; SetGadgetAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Splitter], #PB_Splitter_SecondMinimumSize, 100)
  PUSH   qword 100
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS50+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2936]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetAttribute
; 
; EnableGadgetDrop(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], #PB_Drop_Private, #PB_Drag_Move, #DRAG_Profiler)
  PUSH   qword 0
  PUSH   qword 2
  PUSH   qword 512
  MOV    rbp,qword [rsp+PS50+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_EnableGadgetDrop2
; 
; If *Debugger\ProfilerFiles
  MOV    rbp,qword [rsp+PS50+0]
  CMP    qword [rbp+696],0
  JE    _EndIf3175
; *files.Debugger_ProfilerList = *Debugger\ProfilerFiles
  MOV    rbp,qword [rsp+PS50+0]
  PUSH   qword [rbp+696]
  POP    rax
  MOV    qword [rsp+48],rax
; 
; For file = 0 To *Debugger\NbIncludedFiles
  MOV    qword [rsp+56],0
  JMP   _ForSkipDebug3176
_For3176:
_ForSkipDebug3176:
  MOV    rbp,qword [rsp+PS50+0]
  MOVSXD rax,dword [rbp+88]
  CMP    rax,qword [rsp+56]
  JL    _Next3177
; 
; AddGadgetItem(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], file, GetDebuggerRelativeFile(*Debugger, file << 24), ImageID(*files\file[file]\ColorImage))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rbp,qword [rsp+64]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  IMUL   rax,20
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+12]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+104]
  SAL    r15,24
  MOV    rax,r15
  PUSH   rax
  PUSH   qword [rsp+PS50+56]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure250
  ADD    rsp,48
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword [rsp+88]
  MOV    rbp,qword [rsp+PS50+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_AddGadgetItem2
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetItemData(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], file, file)
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+64]
  MOV    rbp,qword [rsp+PS50+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_SetGadgetItemData
; Next file            
_NextContinue3177:
  INC    qword [rsp+56]
  JNO   _For3176
_Next3177:
; EndIf
_EndIf3175:
; Else
  JMP   _EndIf3172
_EndIf3173:
; *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files]    = 0
  MOV    rbp,qword [rsp+PS50+0]
  PUSH   rbp
  POP    rbp
  MOV    qword [rbp+2944],0
; *Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Splitter] = 0
  MOV    rbp,qword [rsp+PS50+0]
  PUSH   rbp
  POP    rbp
  MOV    qword [rbp+2936],0
; EndIf
_EndIf3172:
; 
; CompilerIf #CompileWindows
; 
; 
; SetWindowLongPtr_(GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Container]), #GWL_USERDATA, *Debugger)
  PUSH   qword [rsp+PS50+0]
  PUSH   qword -21
  MOV    rbp,qword [rsp+PS50+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2928]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   SetWindowLongPtrW
; *Debugger\ProfilerScrollCallback = SetWindowLongPtr_(GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Container]), #GWL_WNDPROC, @Profiler_ScrollbarCallback())
  LEA    rax,[_Procedure584]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword -4
  MOV    rbp,qword [rsp+PS50+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2928]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   SetWindowLongPtrW
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS50+8]
  POP    rax
  MOV    qword [rbp+740],rax
; 
; SetWindowLongPtr_(GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Image]), #GWL_USERDATA, *Debugger)
  PUSH   qword [rsp+PS50+0]
  PUSH   qword -21
  MOV    rbp,qword [rsp+PS50+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2952]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   SetWindowLongPtrW
; *Debugger\ProfilerImageCallback = SetWindowLongPtr_(GadgetID(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Image]), #GWL_WNDPROC, @Profiler_WindowsMouseHandler())        
  LEA    rax,[_Procedure594]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword -4
  MOV    rbp,qword [rsp+PS50+16]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2952]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   SetWindowLongPtrW
  MOV    rax,rax
  PUSH   rax
  MOV    rbp,qword [rsp+PS50+8]
  POP    rax
  MOV    qword [rbp+748],rax
; CompilerEndIf  
; 
; CompilerIf #CompileLinux
; 
; CompilerIf #CompileMacCarbon
; 
; CompilerIf #DEFAULT_CanWindowStayOnTop
; SetWindowStayOnTop(Window, DebuggerOnTop)
  PUSH   qword [v_DebuggerOnTop]
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL  _Procedure112
; CompilerEndIf         
; 
; Debugger_AddShortcuts(Window) 
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure6
; 
; ProfilerWindowEvents(*Debugger, #PB_Event_SizeWindow)
  PUSH   qword 13118
  PUSH   qword [rsp+PS50+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure602
; 
; If *Debugger\NbIncludedFiles > 0
  MOV    rbp,qword [rsp+PS50+0]
  MOVSXD r15,dword [rbp+88]
  AND    r15,r15
  JLE   _EndIf3180
; SetGadgetState(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Splitter], ProfilerSplitter)
  PUSH   qword [v_ProfilerSplitter]
  MOV    rbp,qword [rsp+PS50+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2936]
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetState
; 
; w = GadgetWidth(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files]) - 20 
  MOV    rbp,qword [rsp+PS50+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  CALL   PB_GadgetWidth
  MOV    r15,rax
  ADD    r15,-20
  MOV    qword [rsp+64],r15
; If w < 360
  MOV    r15,qword [rsp+64]
  CMP    r15,360
  JGE   _EndIf3182
; SetGadgetItemAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], 0, #PB_ListIcon_ColumnWidth, w/3, 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    r15,qword [rsp+80]
  MOV    rax,r15
  MOV    rcx,3
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 1
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS50+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemAttribute2
  ADD    rsp,48
; SetGadgetItemAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], 0, #PB_ListIcon_ColumnWidth, w/3, 1)
  SUB    rsp,8
  PUSH   qword 1
  MOV    r15,qword [rsp+80]
  MOV    rax,r15
  MOV    rcx,3
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 1
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS50+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemAttribute2
  ADD    rsp,48
; SetGadgetItemAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], 0, #PB_ListIcon_ColumnWidth, w/3, 2)
  SUB    rsp,8
  PUSH   qword 2
  MOV    r15,qword [rsp+80]
  MOV    rax,r15
  MOV    rcx,3
  CQO
  IDIV   rcx
  MOV    r15,rax
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 1
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS50+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemAttribute2
  ADD    rsp,48
; Else
  JMP   _EndIf3181
_EndIf3182:
; SetGadgetItemAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], 0, #PB_ListIcon_ColumnWidth, w-240, 0)
  SUB    rsp,8
  PUSH   qword 0
  MOV    r15,qword [rsp+80]
  ADD    r15,-240
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 1
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS50+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemAttribute2
  ADD    rsp,48
; SetGadgetItemAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], 0, #PB_ListIcon_ColumnWidth, 120, 1)
  SUB    rsp,8
  PUSH   qword 1
  PUSH   qword 120
  PUSH   qword 1
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS50+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemAttribute2
  ADD    rsp,48
; SetGadgetItemAttribute(*Debugger\Gadgets[#DEBUGGER_GADGET_Profiler_Files], 0, #PB_ListIcon_ColumnWidth, 120, 2)
  SUB    rsp,8
  PUSH   qword 2
  PUSH   qword 120
  PUSH   qword 1
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS50+40]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2944]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SetGadgetItemAttribute2
  ADD    rsp,48
; EndIf
_EndIf3181:
; EndIf
_EndIf3180:
; 
; EnsureWindowOnDesktop(Window)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure162
; If ProfilerMaximize
  CMP    qword [v_ProfilerMaximize],0
  JE    _EndIf3185
; ShowWindowMaximized(Window)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL  _Procedure100
; Else
  JMP   _EndIf3184
_EndIf3185:
; HideWindow(Window, 0)
  PUSH   qword 0
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_HideWindow
; EndIf
_EndIf3184:
; 
; UpdateProfilerWindowState(*Debugger)  
  PUSH   qword [rsp+PS50+0]
  POP    rcx
  CALL  _Procedure600
; 
; Debugger_ProcessEvents(Window, #PB_Event_ActivateWindow) 
  PUSH   qword 13104
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL  _Procedure14
; 
; 
; 
; If *Debugger\ProfilerFiles = 0 And ProfilerRunAtStart = 0 
  MOV    rbp,qword [rsp+PS50+0]
  MOV    r15,qword [rbp+696]
  AND    r15,r15
  JNE    No329
  MOV    r15,qword [v_ProfilerRunAtStart]
  AND    r15,r15
  JNE    No329
Ok329:
  MOV    rax,1
  JMP    End329
No329:
  XOR    rax,rax
End329:
  AND    rax,rax
  JE    _EndIf3188
; Command.CommandInfo\Command = #COMMAND_GetProfilerOffsets
  LEA    rbp,[rsp+72]
  MOV    dword [rbp],31
; SendDebuggerCommand(*Debugger, @Command)
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS50+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; EndIf
_EndIf3188:
; 
; If *Debugger\ProgramState = -1
  MOV    rbp,qword [rsp+PS50+0]
  MOVSXD r15,dword [rbp+112]
  CMP    r15,-1
  JNE   _EndIf3190
; 
; 
; Profiler_UpdateBounds(*Debugger)
  PUSH   qword [rsp+PS50+0]
  POP    rcx
  CALL  _Procedure596
; Profiler_DrawAll(*Debugger)
  PUSH   qword [rsp+PS50+0]
  POP    rcx
  CALL  _Procedure576
; Profiler_UpdateStats(*Debugger)
  PUSH   qword [rsp+PS50+0]
  POP    rcx
  CALL  _Procedure598
; UpdateProfilerWindowState(*Debugger)
  PUSH   qword [rsp+PS50+0]
  POP    rcx
  CALL  _Procedure600
; 
; Else
  JMP   _EndIf3189
_EndIf3190:
; 
; 
; Command.CommandInfo\Command = #COMMAND_GetProfilerData
  LEA    rbp,[rsp+72]
  MOV    dword [rbp],32
; SendDebuggerCommand(*Debugger, @Command)
  LEA    rax,[rsp+72]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS50+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; EndIf   
_EndIf3189:
; EndIf
_EndIf3168:
; EndIf
_EndIf3164:
; 
; EndProcedure
_EndProcedureZero51:
  XOR    rax,rax
_EndProcedure51:
  ADD    rsp,104
  POP    r15
  POP    rbp
  RET
; Procedure LibraryViewer_GetCurrentPlugin(*Debugger.DebuggerData)
_Procedure550:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS550=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; *Plugin = 0
  MOV    qword [rsp+40],0
; 
; If *Debugger\CurrentLibrary <> -1
  MOV    rbp,qword [rsp+PS550+0]
  MOVSXD r15,dword [rbp+660]
  CMP    r15,-1
  JE    _EndIf2665
; *libinfo.Debugger_LibraryData = *Debugger\LibraryList + *Debugger\CurrentLibrary * SizeOf(Debugger_LibraryData)
  MOV    rbp,qword [rsp+PS550+0]
  MOV    r15,qword [rbp+636]
  MOV    rbp,qword [rsp+PS550+0]
  MOVSXD r14,dword [rbp+660]
  IMUL   r14,28
  ADD    r15,r14
  MOV    qword [rsp+48],r15
; 
; If *libinfo\FunctionMask & #LIBRARYINFO_Data 
  MOV    rbp,qword [rsp+48]
  MOVSXD r15,dword [rbp+24]
  AND    r15,4
  AND    r15,r15
  JE    _EndIf2667
; 
; ForEach LibraryPlugins()
  MOV    rcx,qword [t_LibraryPlugins]
  CALL   PB_ResetList
_ForEach2668:
  MOV    rcx,qword [t_LibraryPlugins]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next2668
; If LibraryPlugins()\LibraryID$ = *libinfo\LibraryID$
  MOV    rbp,qword [t_LibraryPlugins+8]
  PUSH   qword [rbp+16]
  MOV    rbp,qword [rsp+56]
  MOV    rcx,qword [rbp]
  POP    rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf2670
; *Plugin = @LibraryPlugins()
  MOV    rbp,qword [t_LibraryPlugins+8]
  LEA    rax,[rbp+16]
  MOV    qword [rsp+40],rax
; Break
  JMP   _Next2668
; EndIf
_EndIf2670:
; Next LibraryPlugins()
  JMP   _ForEach2668
_Next2668:
; 
; EndIf
_EndIf2667:
; 
; EndIf
_EndIf2665:
; 
; ProcedureReturn *Plugin
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure551
; EndProcedure
_EndProcedureZero551:
  XOR    rax,rax
_EndProcedure551:
  ADD    rsp,64
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure Debugger_ForceDestroy(*Debugger.DebuggerData)
_Procedure420:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS420=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; 
; 
; If IsDebuggerValid(*Debugger) = 0
  PUSH   qword [rsp+PS420+0]
  POP    rcx
  CALL  _Procedure424
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1457
; ProcedureReturn
  JMP   _EndProcedure421
; EndIf
_EndIf1457:
; 
; 
; 
; *Debugger\CanDestroy = 1
  MOV    rbp,qword [rsp+PS420+0]
  MOV    dword [rbp+124],1
; 
; 
; 
; If *Debugger\Communication  
  MOV    rbp,qword [rsp+PS420+0]
  CMP    qword [rbp+44],0
  JE    _EndIf1459
; If *Debugger\IsNetwork
  MOV    rbp,qword [rsp+PS420+0]
  CMP    dword [rbp+40],0
  JE    _EndIf1461
; 
; 
; Command.CommandInfo\Command = #COMMAND_Kill
  LEA    rbp,[rsp+40]
  MOV    dword [rbp],37
; SendDebuggerCommand(*Debugger, @Command)
  LEA    rax,[rsp+40]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS420+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure10
; EndIf
_EndIf1461:
; 
; *Debugger\Communication\Disconnect()
  MOV    rbp,qword [rsp+PS420+0]
  MOV    rbp,qword [rbp+44]
  PUSH   rbp
  SUB    rsp,8
  SUB    rsp,32
  MOV    rax,[rsp+40]
  MOV    rcx,rax
  MOV    rax,[rax]
  CALL   qword [rax+16]
  ADD    rsp,40
  ADD    rsp,8
; EndIf
_EndIf1459:
; 
; 
; 
; If *Debugger\ProcessObject
  MOV    rbp,qword [rsp+PS420+0]
  CMP    qword [rbp+8],0
  JE    _EndIf1463
; If WaitProgram(*Debugger\ProcessObject, 0) = #False 
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS420+8]
  PUSH   qword [rbp+8]
  POP    rcx
  POP    rdx
  CALL   PB_WaitProgram2
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1465
; 
; 
; 
; CompilerIf #CompileWindows
; If *Debugger\TerminationMutex
  MOV    rbp,qword [rsp+PS420+0]
  CMP    qword [rbp+16],0
  JE    _EndIf1467
; 
; ReleaseMutex_(*Debugger\TerminationMutex)      
  MOV    rbp,qword [rsp+PS420+0]
  PUSH   qword [rbp+16]
  POP    rcx
  CALL   ReleaseMutex
; EndIf
_EndIf1467:
; 
; CompilerElse
; 
; 
; 
; If WaitProgram(*Debugger\ProcessObject, 1500) = #False
  PUSH   qword 1500
  MOV    rbp,qword [rsp+PS420+8]
  PUSH   qword [rbp+8]
  POP    rcx
  POP    rdx
  CALL   PB_WaitProgram2
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1469
; KillProgram(*Debugger\ProcessObject)
  MOV    rbp,qword [rsp+PS420+0]
  PUSH   qword [rbp+8]
  POP    rcx
  CALL   PB_KillProgram
; EndIf
_EndIf1469:
; EndIf
_EndIf1465:
; 
; CloseProgram(*Debugger\ProcessObject)
  MOV    rbp,qword [rsp+PS420+0]
  PUSH   qword [rbp+8]
  POP    rcx
  CALL   PB_CloseProgram
; *Debugger\ProcessObject = 0
  MOV    rbp,qword [rsp+PS420+0]
  MOV    qword [rbp+8],0
; EndIf
_EndIf1463:
; 
; 
; 
; If *Debugger\Communication
  MOV    rbp,qword [rsp+PS420+0]
  CMP    qword [rbp+44],0
  JE    _EndIf1471
; *Debugger\Communication\Close()
  MOV    rbp,qword [rsp+PS420+0]
  MOV    rbp,qword [rbp+44]
  PUSH   rbp
  SUB    rsp,8
  SUB    rsp,32
  MOV    rax,[rsp+40]
  MOV    rcx,rax
  MOV    rax,[rax]
  CALL   qword [rax+48]
  ADD    rsp,40
  ADD    rsp,8
; *Debugger\Communication = 0
  MOV    rbp,qword [rsp+PS420+0]
  MOV    qword [rbp+44],0
; EndIf 
_EndIf1471:
; 
; CompilerIf #CompileWindows
; If *Debugger\TerminationMutex
  MOV    rbp,qword [rsp+PS420+0]
  CMP    qword [rbp+16],0
  JE    _EndIf1473
; CloseHandle_(*Debugger\TerminationMutex)
  MOV    rbp,qword [rsp+PS420+0]
  PUSH   qword [rbp+16]
  POP    rcx
  CALL   CloseHandle
; *Debugger\TerminationMutex = 0
  MOV    rbp,qword [rsp+PS420+0]
  MOV    qword [rbp+16],0
; EndIf
_EndIf1473:
; CompilerEndIf
; 
; 
; 
; 
; 
; For i = 0 To #DEBUGGER_WINDOW_LAST-1
  MOV    qword [rsp+64],0
  JMP   _ForSkipDebug1474
_For1474:
_ForSkipDebug1474:
  MOV    rax,10
  CMP    rax,qword [rsp+64]
  JL    _Next1475
; If *Debugger\Windows[i]
  MOV    rbp,qword [rsp+PS420+0]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  CMP    qword [rbp+824],0
  JE    _EndIf1477
; 
; 
; Debugger_ProcessEvents(*Debugger\Windows[i], #PB_Event_CloseWindow)
  PUSH   qword 13116
  MOV    rbp,qword [rsp+PS420+8]
  PUSH   rbp
  MOV    rax,qword [rsp+80]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+824]
  POP    rcx
  POP    rdx
  CALL  _Procedure14
; 
; 
; 
; 
; If IsDebuggerValid(*Debugger) = 0
  PUSH   qword [rsp+PS420+0]
  POP    rcx
  CALL  _Procedure424
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf1479
; ProcedureReturn
  JMP   _EndProcedure421
; EndIf          
_EndIf1479:
; 
; 
; 
; If IsWindow(*Debugger\Windows[i]) 
  MOV    rbp,qword [rsp+PS420+0]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+824]
  POP    rcx
  CALL   PB_IsWindow
  AND    rax,rax
  JE    _EndIf1481
; CloseWindow(*Debugger\Windows[i])
  MOV    rbp,qword [rsp+PS420+0]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+824]
  POP    rcx
  CALL   PB_CloseWindow
; *Debugger\Windows[i] = 0
  MOV    rbp,qword [rsp+PS420+0]
  PUSH   rbp
  MOV    rax,qword [rsp+72]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  MOV    qword [rbp+824],0
; EndIf               
_EndIf1481:
; EndIf
_EndIf1477:
; Next i  
_NextContinue1475:
  INC    qword [rsp+64]
  JNO   _For1474
_Next1475:
; 
; 
; 
; 
; 
; If IsDebuggerValid(*Debugger)
  PUSH   qword [rsp+PS420+0]
  POP    rcx
  CALL  _Procedure424
  AND    rax,rax
  JE    _EndIf1483
; 
; Debugger_CheckDestroy(*Debugger)
  PUSH   qword [rsp+PS420+0]
  POP    rcx
  CALL  _Procedure426
; 
; If IsDebuggerValid(*Debugger) 
  PUSH   qword [rsp+PS420+0]
  POP    rcx
  CALL  _Procedure424
  AND    rax,rax
  JE    _EndIf1485
; ChangeCurrentElement(RunningDebuggers(), *Debugger)
  PUSH   qword [rsp+PS420+0]
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  POP    rdx
  CALL   PB_ChangeCurrentElement
; DeleteElement(RunningDebuggers())
  PUSH   qword [t_RunningDebuggers]
  POP    rcx
  CALL   PB_DeleteElement
; EndIf
_EndIf1485:
; EndIf  
_EndIf1483:
; 
; EndProcedure
_EndProcedureZero421:
  XOR    rax,rax
_EndProcedure421:
  ADD    rsp,72
  POP    r15
  POP    rbp
  RET
; Procedure MarkWarning(Line.l)
_Procedure672:
  MOV    qword [rsp+8],rcx
  PS672=48
  SUB    rsp,40
; SourceLineAction(Line, #ACTION_MarkWarning)
  PUSH   qword 2
  MOVSXD rax,dword [rsp+PS672+8]
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL  _Procedure666
; EndProcedure
_EndProcedureZero673:
  XOR    rax,rax
_EndProcedure673:
  ADD    rsp,40
  RET
; Procedure CopyMemoryCheck(*Source.HighlightPTR, *Target.HighlightPTR, Length)
_Procedure214:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS214=64
  SUB    rsp,40
; 
; 
; While Length >= SizeOf(Integer) 
_While357:
  MOV    r15,qword [rsp+PS214+16]
  CMP    r15,8
  JL    _Wend357
; If *Source\i <> *Target\i
  MOV    rbp,qword [rsp+PS214+0]
  MOV    r15,qword [rbp]
  MOV    rbp,qword [rsp+PS214+8]
  CMP    r15,qword [rbp]
  JE    _EndIf359
; CopyMemory(*Source, *Target, Length)
  PUSH   qword [rsp+PS214+16]
  PUSH   qword [rsp+PS214+16]
  PUSH   qword [rsp+PS214+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CopyMemory
; ProcedureReturn #True
  MOV    rax,1
  JMP   _EndProcedure215
; Else
  JMP   _EndIf358
_EndIf359:
; *Source + SizeOf(Integer)    
  MOV    r15,qword [rsp+PS214+0]
  ADD    r15,8
  MOV    qword [rsp+PS214+0],r15
; *Target + SizeOf(Integer)
  MOV    r15,qword [rsp+PS214+8]
  ADD    r15,8
  MOV    qword [rsp+PS214+8],r15
; Length - SizeOf(Integer)
  MOV    r15,qword [rsp+PS214+16]
  ADD    r15,-8
  MOV    qword [rsp+PS214+16],r15
; EndIf
_EndIf358:
; Wend
  JMP   _While357
_Wend357:
; 
; 
; While Length > 0
_While361:
  MOV    r15,qword [rsp+PS214+16]
  AND    r15,r15
  JLE   _Wend361
; If *Source\b <> *Target\b
  MOV    rbp,qword [rsp+PS214+0]
  MOVSX  r15,byte [rbp]
  MOV    rbp,qword [rsp+PS214+8]
  CMP    r15b,byte [rbp]
  JE    _EndIf363
; CopyMemory(*Source, *Target, Length)
  PUSH   qword [rsp+PS214+16]
  PUSH   qword [rsp+PS214+16]
  PUSH   qword [rsp+PS214+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CopyMemory
; ProcedureReturn #True
  MOV    rax,1
  JMP   _EndProcedure215
; Else
  JMP   _EndIf362
_EndIf363:
; *Source + 1   
  MOV    r15,qword [rsp+PS214+0]
  INC    r15
  MOV    qword [rsp+PS214+0],r15
; *Target + 1
  MOV    r15,qword [rsp+PS214+8]
  INC    r15
  MOV    qword [rsp+PS214+8],r15
; Length - 1
  MOV    r15,qword [rsp+PS214+16]
  DEC    r15
  MOV    qword [rsp+PS214+16],r15
; EndIf
_EndIf362:
; Wend
  JMP   _While361
_Wend361:
; 
; 
; ProcedureReturn #False
  XOR    rax,rax
  JMP   _EndProcedure215
; EndProcedure
_EndProcedureZero215:
  XOR    rax,rax
_EndProcedure215:
  ADD    rsp,40
  POP    r15
  POP    rbp
  RET
; Procedure AsmDebug_DebuggerEvent(*Debugger.DebuggerData)
_Procedure18:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS18=96
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; If *Debugger\Command\Command = #COMMAND_ControlAssemblyViewer
  MOV    rbp,qword [rsp+PS18+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,48
  JNE   _EndIf1753
; OpenAsmWindow(*Debugger)
  PUSH   qword [rsp+PS18+0]
  POP    rcx
  CALL  _Procedure38
; ProcedureReturn     
  JMP   _EndProcedure19
; EndIf
_EndIf1753:
; 
; 
; 
; If *Debugger\Windows[#DEBUGGER_WINDOW_Asm] = 0
  MOV    rbp,qword [rsp+PS18+0]
  PUSH   rbp
  POP    rbp
  MOV    r15,qword [rbp+840]
  AND    r15,r15
  JNE   _EndIf1755
; ProcedureReturn 
  JMP   _EndProcedure19
; EndIf
_EndIf1755:
; 
; If *Debugger\Command\Command = #COMMAND_RegisterLayout
  MOV    rbp,qword [rsp+PS18+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,9
  JNE   _EndIf1757
; *Debugger\RegisterCount = *Debugger\Command\Value1
  MOV    rbp,qword [rsp+PS18+0]
  MOVSXD rax,dword [rbp+60]
  PUSH   rax
  MOV    rbp,qword [rsp+PS18+8]
  POP    rax
  MOV    dword [rbp+160],eax
; *Pointer = *Debugger\CommandData
  MOV    rbp,qword [rsp+PS18+0]
  PUSH   qword [rbp+72]
  POP    rax
  MOV    qword [rsp+40],rax
; 
; For i = 0 To *Debugger\RegisterCount-1
  MOV    qword [rsp+48],0
  JMP   _ForSkipDebug1758
_For1758:
_ForSkipDebug1758:
  MOV    rbp,qword [rsp+PS18+0]
  MOVSXD r15,dword [rbp+160]
  DEC    r15
  CMP    r15,qword [rsp+48]
  JL    _Next1759
; *Debugger\RegisterIndex[i] = PeekW(*Pointer) & $FFFF 
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_PeekW
  MOV    r15,rax
  AND    r15,65535
  MOV    rax,r15
  PUSH   rax
  MOV    rbp,qword [rsp+PS18+8]
  PUSH   rbp
  MOV    rax,qword [rsp+64]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  POP    rax
  MOV    dword [rbp+164],eax
; *Pointer + 2
  MOV    r15,qword [rsp+40]
  ADD    r15,2
  MOV    qword [rsp+40],r15
; Next i
_NextContinue1759:
  INC    qword [rsp+48]
  JNO   _For1758
_Next1759:
; 
; For i = 0 To *Debugger\RegisterCount-1
  MOV    qword [rsp+48],0
  JMP   _ForSkipDebug1760
_For1760:
_ForSkipDebug1760:
  MOV    rbp,qword [rsp+PS18+0]
  MOVSXD r15,dword [rbp+160]
  DEC    r15
  CMP    r15,qword [rsp+48]
  JL    _Next1761
; *Debugger\RegisterName$[i] = PeekAscii(*Pointer)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  MOV    rbp,qword [rsp+PS18+8]
  PUSH   rbp
  MOV    rax,qword [rsp+64]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  LEA    rcx,[rbp+308]
  POP    rdx
  CALL   SYS_AllocateString4
; *Pointer + MemoryStringLength(*Pointer, #PB_Ascii) + 1
  MOV    r15,qword [rsp+40]
  PUSH   qword 24
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_MemoryStringLength2
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+40],r15
; Next i    
_NextContinue1761:
  INC    qword [rsp+48]
  JNO   _For1760
_Next1761:
; 
; CreateRegisterGadgets(*Debugger)
  PUSH   qword [rsp+PS18+0]
  POP    rcx
  CALL  _Procedure448
; 
; ElseIf *Debugger\Command\Command = #COMMAND_Register
  JMP   _EndIf1756
_EndIf1757:
  MOV    rbp,qword [rsp+PS18+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,10
  JNE   _EndIf1762
; If *Debugger\Command\DataSize = 0 Or *Debugger\CommandData = 0  
  MOV    rbp,qword [rsp+PS18+0]
  MOVSXD r15,dword [rbp+56]
  AND    r15,r15
  JE     Ok217
  MOV    rbp,qword [rsp+PS18+0]
  MOV    r15,qword [rbp+72]
  AND    r15,r15
  JE     Ok217
  JMP    No217
Ok217:
  MOV    rax,1
  JMP    End217
No217:
  XOR    rax,rax
End217:
  AND    rax,rax
  JE    _EndIf1764
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Message], 0)
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS18+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1032]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_ScrollArea], 1)    
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS18+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1024]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; Else
  JMP   _EndIf1763
_EndIf1764:
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Message], 1)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS18+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1032]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; HideGadget(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_ScrollArea], 0) 
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS18+8]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1024]
  POP    rcx
  POP    rdx
  CALL   PB_HideGadget
; 
; If *Debugger\Is64bit
  MOV    rbp,qword [rsp+PS18+0]
  CMP    dword [rbp+32],0
  JE    _EndIf1767
; *Pointer = *Debugger\CommandData + *Debugger\RegisterCount * 8
  MOV    rbp,qword [rsp+PS18+0]
  MOV    r15,qword [rbp+72]
  MOV    rbp,qword [rsp+PS18+0]
  MOVSXD r14,dword [rbp+160]
  SAL    r14,3
  ADD    r15,r14
  MOV    qword [rsp+40],r15
; Else
  JMP   _EndIf1766
_EndIf1767:
; *Pointer = *Debugger\CommandData + *Debugger\RegisterCount * 4
  MOV    rbp,qword [rsp+PS18+0]
  MOV    r15,qword [rbp+72]
  MOV    rbp,qword [rsp+PS18+0]
  MOVSXD r14,dword [rbp+160]
  SAL    r14,2
  ADD    r15,r14
  MOV    qword [rsp+40],r15
; EndIf
_EndIf1766:
; 
; For i = 0 To *Debugger\RegisterCount-1 
  MOV    qword [rsp+48],0
  JMP   _ForSkipDebug1769
_For1769:
_ForSkipDebug1769:
  MOV    rbp,qword [rsp+PS18+0]
  MOVSXD r15,dword [rbp+160]
  DEC    r15
  CMP    r15,qword [rsp+48]
  JL    _Next1770
; index = *Debugger\RegisterIndex[i] & ~#RegisterHasString
  MOV    rbp,qword [rsp+PS18+0]
  PUSH   rbp
  MOV    rax,qword [rsp+56]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  MOVSXD r15,dword [rbp+164]
  AND    r15,-32769
  MOV    qword [rsp+56],r15
; Debug "index: " + Str(index)
; 
; 
; If RegisterIsHex And *Debugger\Is64bit
  CMP    qword [v_RegisterIsHex],0
  JE     No218
  MOV    rbp,qword [rsp+PS18+0]
  CMP    dword [rbp+32],0
  JE     No218
Ok218:
  MOV    rax,1
  JMP    End218
No218:
  XOR    rax,rax
End218:
  AND    rax,rax
  JE    _EndIf1772
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Value0+i], "$"+RSet(Hex(PeekQ(*Debugger\CommandData+index*8), #PB_Quad), 16, "0")) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S20
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S84
  PUSH   rax
  PUSH   qword 16
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 13
  MOV    rbp,qword [rsp+PS18+80]
  MOV    r15,qword [rbp+72]
  MOV    r14,qword [rsp+136]
  SAL    r14,3
  ADD    r15,r14
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_RSet2
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS18+24]
  PUSH   rbp
  MOV    r15,qword [rsp+80]
  ADD    r15,53
  MOV    rax,r15
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+912]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; ElseIf *Debugger\Is64bit
  JMP   _EndIf1771
_EndIf1772:
  MOV    rbp,qword [rsp+PS18+0]
  CMP    dword [rbp+32],0
  JE    _EndIf1773
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Value0+i], Str(PeekQ(*Debugger\CommandData+index*8))) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS18+48]
  MOV    r15,qword [rbp+72]
  MOV    r14,qword [rsp+104]
  SAL    r14,3
  ADD    r15,r14
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekQ
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS18+24]
  PUSH   rbp
  MOV    r15,qword [rsp+80]
  ADD    r15,53
  MOV    rax,r15
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+912]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; ElseIf RegisterIsHex
  JMP   _EndIf1771
_EndIf1773:
  CMP    qword [v_RegisterIsHex],0
  JE    _EndIf1774
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Value0+i], "$"+RSet(Hex(PeekL(*Debugger\CommandData+index*4), #PB_Long), 8, "0"))  
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S20
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S84
  PUSH   rax
  PUSH   qword 8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 5
  MOV    rbp,qword [rsp+PS18+80]
  MOV    r15,qword [rbp+72]
  MOV    r14,qword [rsp+136]
  SAL    r14,2
  ADD    r15,r14
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Hex2
  ADD    rsp,32
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_RSet2
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS18+24]
  PUSH   rbp
  MOV    r15,qword [rsp+80]
  ADD    r15,53
  MOV    rax,r15
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+912]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Else
  JMP   _EndIf1771
_EndIf1774:
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Value0+i], Str(PeekL(*Debugger\CommandData+index*4)))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS18+48]
  MOV    r15,qword [rbp+72]
  MOV    r14,qword [rsp+104]
  SAL    r14,2
  ADD    r15,r14
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_PeekL
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS18+24]
  PUSH   rbp
  MOV    r15,qword [rsp+80]
  ADD    r15,53
  MOV    rax,r15
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+912]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf
_EndIf1771:
; 
; If *Debugger\RegisterIndex[i] & #RegisterHasString
  MOV    rbp,qword [rsp+PS18+0]
  PUSH   rbp
  MOV    rax,qword [rsp+56]
  SAL    rax,2
  POP    rbp
  ADD    rbp,rax
  MOVSXD r15,dword [rbp+164]
  AND    r15,32768
  AND    r15,r15
  JE    _EndIf1777
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_TextValue0+i], "("+PeekAscii(*Pointer)+")")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S93
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S29
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS18+24]
  PUSH   rbp
  MOV    r15,qword [rsp+80]
  ADD    r15,127
  MOV    rax,r15
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  PUSH   qword [rbp+912]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; *Pointer + MemoryStringLength(*Pointer, #PB_Ascii) + 1
  MOV    r15,qword [rsp+40]
  PUSH   qword 24
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_MemoryStringLength2
  ADD    r15,rax
  INC    r15
  MOV    qword [rsp+40],r15
; EndIf
_EndIf1777:
; Next i 
_NextContinue1770:
  INC    qword [rsp+48]
  JNO   _For1769
_Next1770:
; EndIf    
_EndIf1763:
; 
; ElseIf *Debugger\Command\Command = #COMMAND_Stack
  JMP   _EndIf1756
_EndIf1762:
  MOV    rbp,qword [rsp+PS18+0]
  MOVSXD r15,dword [rbp+52]
  CMP    r15,11
  JNE   _EndIf1778
; If *Debugger\Command\DataSize = 0  
  MOV    rbp,qword [rsp+PS18+0]
  MOVSXD r15,dword [rbp+56]
  AND    r15,r15
  JNE   _EndIf1780
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Stack], Language("Debugger","NoData"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S218
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS18+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1008]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Else
  JMP   _EndIf1779
_EndIf1780:
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_Asm_Stack], PeekAscii(*Debugger\CommandData))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS18+56]
  PUSH   qword [rbp+72]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS18+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+1008]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; EndIf  
_EndIf1779:
; 
; EndIf
_EndIf1756:
_EndIf1778:
; 
; EndProcedure
_EndProcedureZero19:
  XOR    rax,rax
_EndProcedure19:
  ADD    rsp,64
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure UpdateWatchListWindow(*Debugger.DebuggerData)
_Procedure528:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PS528=64
  XOR    rax,rax
  PUSH   rax
  SUB    rsp,40
; 
; SetWindowTitle(*Debugger\Windows[#DEBUGGER_WINDOW_WatchList], Language("Debugger","WatchListTitle") + " - " + GetFilePart(*Debugger\FileName$))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S284
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S203
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rbp,qword [rsp+PS528+40]
  PUSH   qword [rbp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetFilePart
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS528+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+872]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetWindowTitle
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Frame], Language("Debugger", "AddVariable")+":")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S285
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS528+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2720]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Text1], Language("Debugger", "Procedure")+":")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S273
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS528+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2728]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Text2], Language("Debugger", "Variable")+":")
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S286
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  MOV    rcx,_S13
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS528+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2736]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Add], Language("Debugger", "Add"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S277
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS528+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2680]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Remove], Language("Debugger", "Remove"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S278
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS528+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2688]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; SetGadgetText(*Debugger\Gadgets[#DEBUGGER_GADGET_WatchList_Clear], Language("Debugger", "Clear"))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S208
  PUSH   rax
  MOV    rax,_S90
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL  _Procedure206
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS528+24]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+2696]
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; WatchListWindowEvents(*Debugger, #PB_Event_SizeWindow) 
  PUSH   qword 13118
  PUSH   qword [rsp+PS528+8]
  POP    rcx
  POP    rdx
  CALL  _Procedure524
; 
; EndProcedure
_EndProcedureZero529:
  XOR    rax,rax
_EndProcedure529:
  ADD    rsp,48
  POP    rbp
  RET
; Procedure.s Network_ReadString(Socket)
_Procedure374:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PUSH   r14
  PS374=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS374+32]
  MOV    qword [PB_StringBasePosition],rax
; Result$ = ""
  MOV    rdx,_S3
  LEA    rcx,[rsp+40]
  CALL   SYS_FastAllocateStringFree4
; 
; *Buffer = AllocateMemory(1024)
  PUSH   qword 1024
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+48],rax
; Size    = 1024
  MOV    qword [rsp+56],1024
; If *Buffer
  CMP    qword [rsp+48],0
  JE    _EndIf1169
; *Pointer.BYTE = *Buffer
  PUSH   qword [rsp+48]
  POP    rax
  MOV    qword [rsp+64],rax
; 
; Repeat
_Repeat1170:
; If (*Pointer - *Buffer) > Size-10
  MOV    r15,qword [rsp+64]
  SUB    r15,qword [rsp+48]
  MOV    r14,qword [rsp+56]
  ADD    r14,-10
  CMP    r15,r14
  JLE   _EndIf1172
; 
; Size + 1024
  MOV    r15,qword [rsp+56]
  ADD    r15,1024
  MOV    qword [rsp+56],r15
; *Pointer - *Buffer 
  MOV    r15,qword [rsp+64]
  SUB    r15,qword [rsp+48]
  MOV    qword [rsp+64],r15
; 
; *NewBuffer = ReAllocateMemory(*Buffer, Size)
  PUSH   qword [rsp+56]
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  CALL   PB_ReAllocateMemory
  MOV    qword [rsp+72],rax
; If *NewBuffer
  CMP    qword [rsp+72],0
  JE    _EndIf1174
; *Buffer = *NewBuffer
  PUSH   qword [rsp+72]
  POP    rax
  MOV    qword [rsp+48],rax
; *Pointer + *Buffer 
  MOV    r15,qword [rsp+64]
  ADD    r15,qword [rsp+48]
  MOV    qword [rsp+64],r15
; Else
  JMP   _EndIf1173
_EndIf1174:
; Result$ = PeekS(*Buffer, *Pointer, #PB_Ascii) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword [rsp+96]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; Break
  JMP   _Until1170
; EndIf               
_EndIf1173:
; EndIf
_EndIf1172:
; 
; If Network_ReceiveData(Socket, *Pointer, 1)
  PUSH   qword 1
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+PS374+16]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   Network_ReceiveData
  AND    rax,rax
  JE    _EndIf1177
; If *Pointer\b = 10 
  MOV    rbp,qword [rsp+64]
  MOVSX  r15,byte [rbp]
  CMP    r15,10
  JNE   _EndIf1179
; *Pointer\b = 0
  MOV    rbp,qword [rsp+64]
  MOV    byte [rbp],0
; 
; 
; If *Pointer > *Buffer And PeekB(*Pointer-1) = 13
  MOV    r15,qword [rsp+64]
  CMP    r15,qword [rsp+48]
  JLE    No177
  MOV    r15,qword [rsp+64]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_PeekB
  MOV    r15,rax
  CMP    r15,13
  JNE    No177
Ok177:
  MOV    rax,1
  JMP    End177
No177:
  XOR    rax,rax
End177:
  AND    rax,rax
  JE    _EndIf1181
; PokeB(*Pointer-1, 0)
  PUSH   qword 0
  MOV    r15,qword [rsp+72]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_PokeB
; EndIf
_EndIf1181:
; 
; Result$ = PeekS(*Buffer, -1, #PB_Ascii)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; Break          
  JMP   _Until1170
; Else
  JMP   _EndIf1178
_EndIf1179:
; *Pointer + 1
  MOV    r15,qword [rsp+64]
  INC    r15
  MOV    qword [rsp+64],r15
; EndIf      
_EndIf1178:
; Else
  JMP   _EndIf1176
_EndIf1177:
; Result$ = "-error-"
  MOV    rdx,_S107
  LEA    rcx,[rsp+40]
  CALL   SYS_FastAllocateStringFree4
; Break
  JMP   _Until1170
; EndIf
_EndIf1176:
; ForEver
  JMP   _Repeat1170
_Until1170:
; 
; FreeMemory(*Buffer)
  PUSH   qword [rsp+48]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf1169:
; 
; Debug "Network_ReadString(): " + Result$
; ProcedureReturn Result$
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure375
; EndProcedure
_EndProcedureZero375:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure375:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,80
  POP    r14
  POP    r15
  POP    rbp
  RET
; Procedure GetPanelWidth(Gadget)
_Procedure114:
  MOV    qword [rsp+8],rcx
  PS114=48
  SUB    rsp,40
; 
; 
; 
; 
; 
; ProcedureReturn GetGadgetAttribute(Gadget, #PB_Panel_ItemWidth)
  PUSH   qword 1
  PUSH   qword [rsp+PS114+8]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  JMP   _EndProcedure115
; EndProcedure
_EndProcedureZero115:
  XOR    rax,rax
_EndProcedure115:
  ADD    rsp,40
  RET
; Procedure LoadSourceBuffer(*Buffer, Length, Format)
_Procedure658:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS658=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Result = 0
  MOV    qword [rsp+40],0
; UseGadgetList(WindowID(#WINDOW_Main))
  PUSH   qword 1
  POP    rcx
  CALL   PB_WindowID
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_UseGadgetList
; 
; Result = ScintillaGadget(#PB_Any, 0, 0, 0, 0, @ScintillaCallBack()) 
  LEA    rax,[_Procedure656]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaGadget
  ADD    rsp,48
  MOV    qword [rsp+40],rax
; If Result
  CMP    qword [rsp+40],0
  JE    _EndIf3518
; 
; If Format = #PB_UTF8
  MOV    r15,qword [rsp+PS658+16]
  CMP    r15,2
  JNE   _EndIf3520
; ScintillaSendMessage(Result, #SCI_SETCODEPAGE, #SC_CP_UTF8, 0)
  PUSH   qword 0
  PUSH   qword 65001
  PUSH   qword 2037
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; Else
  JMP   _EndIf3519
_EndIf3520:
; ScintillaSendMessage(Result, #SCI_SETCODEPAGE, 0, 0)
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 2037
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; EndIf
_EndIf3519:
; 
; ScintillaSendMessage(Result, #SCI_SETTABWIDTH, TabLength, 0)                 
  PUSH   qword 0
  PUSH   qword [v_TabLength]
  PUSH   qword 2036
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; 
; 
; 
; ScintillaSendMessage(Result, #SCI_APPENDTEXT, Length, *Buffer)
  PUSH   qword [rsp+PS658+0]
  PUSH   qword [rsp+PS658+16]
  PUSH   qword 2282
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; 
; Font$ = EditorFontName$
  MOV    rcx,qword [v_EditorFontName$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; BoldFont$ = EditorBoldFontName$
  MOV    rcx,qword [v_EditorBoldFontName$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; 
; 
; CompilerIf #CompileLinux
; 
; ScintillaSendMessage(Result, #SCI_STYLESETFONT, #STYLE_DEFAULT, ToAscii(Font$))   
  PUSH   qword [rsp+48]
  POP    rcx
  CALL  _Procedure96
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 32
  PUSH   qword 2056
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETSIZE, #STYLE_DEFAULT, EditorFontSize)
  PUSH   qword [v_EditorFontSize]
  PUSH   qword 32
  PUSH   qword 2055
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; 
; If EditorFontStyle & #PB_Font_Bold
  MOV    r15,qword [v_EditorFontStyle]
  AND    r15,256
  AND    r15,r15
  JE    _EndIf3523
; ScintillaSendMessage(Result, #SCI_STYLESETBOLD, #STYLE_DEFAULT, 1)    
  PUSH   qword 1
  PUSH   qword 32
  PUSH   qword 2053
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; EndIf
_EndIf3523:
; If EditorFontStyle & #PB_Font_Italic
  MOV    r15,qword [v_EditorFontStyle]
  AND    r15,512
  AND    r15,r15
  JE    _EndIf3525
; ScintillaSendMessage(Result, #SCI_STYLESETITALIC, #STYLE_DEFAULT, 1)    
  PUSH   qword 1
  PUSH   qword 32
  PUSH   qword 2054
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; EndIf           
_EndIf3525:
; 
; ScintillaSendMessage(Result, #SCI_STYLESETBACK, #STYLE_DEFAULT, BackgroundColor)        
  PUSH   qword [v_BackgroundColor]
  PUSH   qword 32
  PUSH   qword 2052
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; 
; 
; ScintillaSendMessage(Result, #SCI_STYLECLEARALL, 0, 0)
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 2050
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; 
; If EnableKeywordBolding
  CMP    qword [v_EnableKeywordBolding],0
  JE    _EndIf3527
; ScintillaSendMessage(Result, #SCI_STYLESETFONT, 2, ToAscii(BoldFont$))
  PUSH   qword [rsp+56]
  POP    rcx
  CALL  _Procedure96
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 2
  PUSH   qword 2056
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETSIZE, 2, EditorFontSize)
  PUSH   qword [v_EditorFontSize]
  PUSH   qword 2
  PUSH   qword 2055
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETBOLD,  2, 1)             
  PUSH   qword 1
  PUSH   qword 2
  PUSH   qword 2053
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETFONT, 14, ToAscii(BoldFont$))
  PUSH   qword [rsp+56]
  POP    rcx
  CALL  _Procedure96
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 14
  PUSH   qword 2056
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETSIZE, 14, EditorFontSize)
  PUSH   qword [v_EditorFontSize]
  PUSH   qword 14
  PUSH   qword 2055
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETBOLD,  14, 1)            
  PUSH   qword 1
  PUSH   qword 14
  PUSH   qword 2053
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; If EditorFontStyle & #PB_Font_Italic
  MOV    r15,qword [v_EditorFontStyle]
  AND    r15,512
  AND    r15,r15
  JE    _EndIf3529
; ScintillaSendMessage(Result, #SCI_STYLESETITALIC, 2, 1)    
  PUSH   qword 1
  PUSH   qword 2
  PUSH   qword 2054
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETITALIC, 14, 1)    
  PUSH   qword 1
  PUSH   qword 14
  PUSH   qword 2054
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; EndIf          
_EndIf3529:
; EndIf        
_EndIf3527:
; 
; ScintillaSendMessage(Result, #SCI_SETREADONLY, 1, 0)
  PUSH   qword 0
  PUSH   qword 1
  PUSH   qword 2171
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_SETLEXER, #SCLEX_CONTAINER, 0)
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 4001
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_SETCARETLINEVISIBLE, 1, 0) 
  PUSH   qword 0
  PUSH   qword 1
  PUSH   qword 2096
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; 
; ScintillaSendMessage(Result, #SCI_SETMARGINTYPEN, 0, #SC_MARGIN_NUMBER)
  PUSH   qword 1
  PUSH   qword 0
  PUSH   qword 2240
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_SETMARGINTYPEN, 1, #SC_MARGIN_SYMBOL)
  PUSH   qword 0
  PUSH   qword 1
  PUSH   qword 2240
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; 
; ScintillaSendMessage(Result, #SCI_SETMARGINMASKN, 1, -1) 
  PUSH   qword -1
  PUSH   qword 1
  PUSH   qword 2244
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; 
; Lines$ = "_" + RSet("", Len(Str(ScintillaSendMessage(Result, #SCI_GETLINECOUNT, 0, 0))), "9")
  PUSH   qword [PB_StringBasePosition]
  MOV    rcx,_S536
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    rax,_S537
  PUSH   rax
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword 2154
  PUSH   qword [rsp+144]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ScintillaSendMessage3
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Len
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    rax,rax
  PUSH   rax
  MOV    rax,_S3
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_RSet2
  ADD    rsp,32
  POP    rax
  LEA    rcx,[rsp+72]
  POP    rdx
  CALL   SYS_AllocateString4
; ScintillaSendMessage(Result, #SCI_SETMARGINWIDTHN, 0, ScintillaSendMessage(Result, #SCI_TEXTWIDTH, #STYLE_LINENUMBER, ToAscii(Lines$)))  
  PUSH   qword [rsp+64]
  POP    rcx
  CALL  _Procedure96
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 33
  PUSH   qword 2276
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 2242
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_SETMARGINWIDTHN, 1, 15)
  PUSH   qword 15
  PUSH   qword 1
  PUSH   qword 2242
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; 
; 
; ScintillaSendMessage(Result, #SCI_STYLESETFORE,  1, NormalTextColor)
  PUSH   qword [v_NormalTextColor]
  PUSH   qword 1
  PUSH   qword 2051
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETFORE,  2, BasicKeywordColor)
  PUSH   qword [v_BasicKeywordColor]
  PUSH   qword 2
  PUSH   qword 2051
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETFORE,  3, CommentColor)
  PUSH   qword [v_CommentColor]
  PUSH   qword 3
  PUSH   qword 2051
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETFORE,  4, ConstantColor)
  PUSH   qword [v_ConstantColor]
  PUSH   qword 4
  PUSH   qword 2051
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETFORE,  5, StringColor)
  PUSH   qword [v_StringColor]
  PUSH   qword 5
  PUSH   qword 2051
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETFORE,  6, PureKeywordColor)
  PUSH   qword [v_PureKeywordColor]
  PUSH   qword 6
  PUSH   qword 2051
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETFORE,  7, ASMKeywordColor)
  PUSH   qword [v_ASMKeywordColor]
  PUSH   qword 7
  PUSH   qword 2051
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETFORE,  8, OperatorColor)
  PUSH   qword [v_OperatorColor]
  PUSH   qword 8
  PUSH   qword 2051
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETFORE,  9, StructureColor)
  PUSH   qword [v_StructureColor]
  PUSH   qword 9
  PUSH   qword 2051
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETFORE, 10, NumberColor)
  PUSH   qword [v_NumberColor]
  PUSH   qword 10
  PUSH   qword 2051
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETFORE, 11, PointerColor)
  PUSH   qword [v_PointerColor]
  PUSH   qword 11
  PUSH   qword 2051
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETFORE, 12, SeparatorColor)
  PUSH   qword [v_SeparatorColor]
  PUSH   qword 12
  PUSH   qword 2051
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETFORE, 13, LabelColor)   
  PUSH   qword [v_LabelColor]
  PUSH   qword 13
  PUSH   qword 2051
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETFORE, 14, CustomKeywordColor)   
  PUSH   qword [v_CustomKeywordColor]
  PUSH   qword 14
  PUSH   qword 2051
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETFORE, 15, ModuleColor)   
  PUSH   qword [v_ModuleColor]
  PUSH   qword 15
  PUSH   qword 2051
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETFORE, 16, BadBraceColor)   
  PUSH   qword [v_BadBraceColor]
  PUSH   qword 16
  PUSH   qword 2051
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; 
; ScintillaSendMessage(Result, #SCI_MARKERDEFINE, 1, #SC_MARK_BACKGROUND)  
  PUSH   qword 22
  PUSH   qword 1
  PUSH   qword 2040
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_MARKERDEFINE, 2, #SC_MARK_ARROW)       
  PUSH   qword 2
  PUSH   qword 2
  PUSH   qword 2040
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_MARKERDEFINE, 3, #SC_MARK_BACKGROUND)  
  PUSH   qword 22
  PUSH   qword 3
  PUSH   qword 2040
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_MARKERDEFINE, 4, #SC_MARK_CHARACTER+'!') 
  PUSH   qword 10033
  PUSH   qword 4
  PUSH   qword 2040
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_MARKERDEFINE, 5, #SC_MARK_BACKGROUND)  
  PUSH   qword 22
  PUSH   qword 5
  PUSH   qword 2040
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_MARKERDEFINE, 6, #SC_MARK_CIRCLE)      
  PUSH   qword 0
  PUSH   qword 6
  PUSH   qword 2040
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_MARKERDEFINE, 7, #SC_MARK_BACKGROUND)  
  PUSH   qword 22
  PUSH   qword 7
  PUSH   qword 2040
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_MARKERDEFINE, 8, #SC_MARK_SMALLRECT)      
  PUSH   qword 3
  PUSH   qword 8
  PUSH   qword 2040
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; 
; ScintillaSendMessage(Result, #SCI_MARKERSETFORE, 2, $000000)
  PUSH   qword 0
  PUSH   qword 2
  PUSH   qword 2041
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_MARKERSETFORE, 4, $000000)
  PUSH   qword 0
  PUSH   qword 4
  PUSH   qword 2041
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_MARKERSETFORE, 6, $000000)
  PUSH   qword 0
  PUSH   qword 6
  PUSH   qword 2041
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_MARKERSETFORE, 8, $000000)
  PUSH   qword 0
  PUSH   qword 8
  PUSH   qword 2041
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; 
; ScintillaSendMessage(Result, #SCI_MARKERSETBACK, 1, DebuggerLineColor)  
  PUSH   qword [v_DebuggerLineColor]
  PUSH   qword 1
  PUSH   qword 2042
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_MARKERSETBACK, 2, DebuggerLineSymbolColor)  
  PUSH   qword [v_DebuggerLineSymbolColor]
  PUSH   qword 2
  PUSH   qword 2042
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_MARKERSETBACK, 3, DebuggerWarningColor)  
  PUSH   qword [v_DebuggerWarningColor]
  PUSH   qword 3
  PUSH   qword 2042
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_MARKERSETBACK, 4, DebuggerWarningSymbolColor)         
  PUSH   qword [v_DebuggerWarningSymbolColor]
  PUSH   qword 4
  PUSH   qword 2042
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_MARKERSETBACK, 5, DebuggerErrorColor)  
  PUSH   qword [v_DebuggerErrorColor]
  PUSH   qword 5
  PUSH   qword 2042
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_MARKERSETBACK, 6, DebuggerErrorSymbolColor)  
  PUSH   qword [v_DebuggerErrorSymbolColor]
  PUSH   qword 6
  PUSH   qword 2042
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_MARKERSETBACK, 7, DebuggerBreakPointColor)  
  PUSH   qword [v_DebuggerBreakPointColor]
  PUSH   qword 7
  PUSH   qword 2042
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_MARKERSETBACK, 8, DebuggerBreakpointSymbolColor)         
  PUSH   qword [v_DebuggerBreakpointSymbolColor]
  PUSH   qword 8
  PUSH   qword 2042
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; 
; ScintillaSendMessage(Result, #SCI_SETCARETFORE,     CursorColor, 0)              
  PUSH   qword 0
  PUSH   qword [v_CursorColor]
  PUSH   qword 2069
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_SETCARETLINEBACK, CurrentLineColor, 0)
  PUSH   qword 0
  PUSH   qword [v_CurrentLineColor]
  PUSH   qword 2098
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETBACK, #STYLE_LINENUMBER, LineNumberBackColor) 
  PUSH   qword [v_LineNumberBackColor]
  PUSH   qword 33
  PUSH   qword 2052
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_STYLESETFORE, #STYLE_LINENUMBER, LineNumberColor)   
  PUSH   qword [v_LineNumberColor]
  PUSH   qword 33
  PUSH   qword 2051
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_SETFOLDMARGINCOLOUR, 1, LineNumberBackColor)
  PUSH   qword [v_LineNumberBackColor]
  PUSH   qword 1
  PUSH   qword 2290
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_SETFOLDMARGINHICOLOUR, 1, LineNumberBackColor)    
  PUSH   qword [v_LineNumberBackColor]
  PUSH   qword 1
  PUSH   qword 2291
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; 
; ScintillaSendMessage(Result, #SCI_SETMOUSEDWELLTIME, 1000) 
  PUSH   qword 1000
  PUSH   qword 2264
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_ScintillaSendMessage2
; 
; ScintillaSendMessage(Result, #SCI_STYLESETFORE, #STYLE_INDENTGUIDE, IndentColor)
  PUSH   qword [rsp+72]
  PUSH   qword 37
  PUSH   qword 2051
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_SETWHITESPACEFORE, #True, IndentColor)
  PUSH   qword [rsp+72]
  PUSH   qword 1
  PUSH   qword 2084
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; 
; If ShowWhiteSpace
  CMP    qword [v_ShowWhitespace],0
  JE    _EndIf3531
; ScintillaSendMessage(Result, #SCI_SETVIEWWS, #SCWS_VISIBLEALWAYS)
  PUSH   qword 1
  PUSH   qword 2021
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_ScintillaSendMessage2
; Else
  JMP   _EndIf3530
_EndIf3531:
; ScintillaSendMessage(Result, #SCI_SETVIEWWS, #SCWS_INVISIBLE)
  PUSH   qword 0
  PUSH   qword 2021
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_ScintillaSendMessage2
; EndIf
_EndIf3530:
; 
; If ShowIndentGuides
  CMP    qword [v_ShowIndentGuides],0
  JE    _EndIf3534
; ScintillaSendMessage(Result, #SCI_SETINDENTATIONGUIDES, #SC_IV_LOOKBOTH)
  PUSH   qword 3
  PUSH   qword 2132
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_ScintillaSendMessage2
; Else
  JMP   _EndIf3533
_EndIf3534:
; ScintillaSendMessage(Result, #SCI_SETINDENTATIONGUIDES, #SC_IV_NONE)
  PUSH   qword 0
  PUSH   qword 2132
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_ScintillaSendMessage2
; EndIf      
_EndIf3533:
; 
; CompilerIf #CompileWindows
; If SelectionColor = -1 
  MOV    r15,qword [v_SelectionColor]
  CMP    r15,-1
  JNE   _EndIf3537
; ScintillaSendMessage(Result, #SCI_SETSELBACK,    1, GetSysColor_(#COLOR_HIGHLIGHT)) 
  PUSH   qword 13
  POP    rcx
  CALL   GetSysColor
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 1
  PUSH   qword 2068
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; Else
  JMP   _EndIf3536
_EndIf3537:
; ScintillaSendMessage(Result, #SCI_SETSELBACK,    1, SelectionColor)
  PUSH   qword [v_SelectionColor]
  PUSH   qword 1
  PUSH   qword 2068
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; EndIf
_EndIf3536:
; 
; If SelectionFrontColor = -1        
  MOV    r15,qword [v_SelectionFrontColor]
  CMP    r15,-1
  JNE   _EndIf3540
; ScintillaSendMessage(Result, #SCI_SETSELFORE,    1, GetSysColor_(#COLOR_HIGHLIGHTTEXT)) 
  PUSH   qword 14
  POP    rcx
  CALL   GetSysColor
  MOV    rax,rax
  PUSH   rax
  PUSH   qword 1
  PUSH   qword 2067
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; Else
  JMP   _EndIf3539
_EndIf3540:
; ScintillaSendMessage(Result, #SCI_SETSELFORE,    1, SelectionFrontColor)
  PUSH   qword [v_SelectionFrontColor]
  PUSH   qword 1
  PUSH   qword 2067
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; EndIf
_EndIf3539:
; CompilerElse
; 
; 
; 
; ForEach BreakPoints()
  MOV    rcx,qword [t_Breakpoints]
  CALL   PB_ResetList
_ForEach3542:
  MOV    rcx,qword [t_Breakpoints]
  CALL   PB_NextElement
  OR     rax,rax
  JZ    _Next3542
; If (BreakPoints()>>24) & $FF = CurrentSource
  MOV    rbp,qword [t_Breakpoints+8]
  MOVSXD r15,dword [rbp+16]
  SAR    r15,24
  AND    r15,255
  CMP    r15,qword [v_CurrentSource]
  JNE   _EndIf3544
; ScintillaSendMessage(Result, #SCI_MARKERADD, BreakPoints()&$FFFFFF, 7)
  PUSH   qword 7
  MOV    rbp,qword [t_Breakpoints+8]
  MOVSXD r15,dword [rbp+16]
  AND    r15,16777215
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 2043
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; ScintillaSendMessage(Result, #SCI_MARKERADD, BreakPoints()&$FFFFFF, 8)            
  PUSH   qword 8
  MOVSXD r15,dword [rbp+16]
  AND    r15,16777215
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 2043
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_ScintillaSendMessage3
; EndIf
_EndIf3544:
; Next BreakPoints()
  JMP   _ForEach3542
_Next3542:
; 
; EndIf            
_EndIf3518:
; 
; 
; ProcedureReturn Result
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure659
; EndProcedure
_EndProcedureZero659:
  XOR    rax,rax
_EndProcedure659:
  PUSH   rax
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+72]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure.s DebugOutput_Selection(*Debugger.DebuggerData)
_Procedure436:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS436=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS436+32]
  MOV    qword [PB_StringBasePosition],rax
; Gadget  = *Debugger\Gadgets[#DEBUGGER_GADGET_Debug_List]  
  MOV    rbp,qword [rsp+PS436+0]
  PUSH   rbp
  POP    rbp
  PUSH   qword [rbp+944]
  POP    rax
  MOV    qword [rsp+40],rax
; Buffer$ = ""
  MOV    rdx,_S3
  LEA    rcx,[rsp+48]
  CALL   SYS_FastAllocateStringFree4
; 
; max     = CountGadgetItems(Gadget)-1 
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_CountGadgetItems
  MOV    r15,rax
  DEC    r15
  MOV    qword [rsp+56],r15
; State   = GetGadgetState(Gadget) 
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    qword [rsp+64],rax
; multiselect = 0
  MOV    qword [rsp+72],0
; 
; If State <> -1
  MOV    r15,qword [rsp+64]
  CMP    r15,-1
  JE    _EndIf1564
; For i = State+1 To max     
  MOV    r15,qword [rsp+64]
  INC    r15
  MOV    qword [rsp+80],r15
  JMP   _ForSkipDebug1565
_For1565:
_ForSkipDebug1565:
  MOV    rax,qword [rsp+56]
  CMP    rax,qword [rsp+80]
  JL    _Next1566
; If GetGadgetItemState(Gadget, i)
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemState
  AND    rax,rax
  JE    _EndIf1568
; multiselect = 1
  MOV    qword [rsp+72],1
; Break
  JMP   _Next1566
; EndIf
_EndIf1568:
; Next i
_NextContinue1566:
  INC    qword [rsp+80]
  JNO   _For1565
_Next1566:
; EndIf
_EndIf1564:
; 
; If multiselect
  CMP    qword [rsp+72],0
  JE    _EndIf1570
; For i = State To max
  PUSH   qword [rsp+64]
  POP    rax
  MOV    qword [rsp+80],rax
  JMP   _ForSkipDebug1571
_For1571:
_ForSkipDebug1571:
  MOV    rax,qword [rsp+56]
  CMP    rax,qword [rsp+80]
  JL    _Next1572
; If GetGadgetItemState(Gadget, i)
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemState
  AND    rax,rax
  JE    _EndIf1574
; Buffer$ + GetGadgetItemText(Gadget, i) + #NewLine
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_GetGadgetItemText
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S63
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf1574:
; Next i
_NextContinue1572:
  INC    qword [rsp+80]
  JNO   _For1571
_Next1572:
; 
; Else
  JMP   _EndIf1569
_EndIf1570:
; For i = 0 To max
  MOV    qword [rsp+80],0
  JMP   _ForSkipDebug1576
_For1576:
_ForSkipDebug1576:
  MOV    rax,qword [rsp+56]
  CMP    rax,qword [rsp+80]
  JL    _Next1577
; Buffer$ + GetGadgetItemText(Gadget, i) + #NewLine
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+104]
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_GetGadgetItemText
  ADD    rsp,32
  POP    rax
  MOV    rcx,_S63
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  LEA    rcx,[rsp+56]
  POP    rdx
  CALL   SYS_AllocateString4
; Next i
_NextContinue1577:
  INC    qword [rsp+80]
  JNO   _For1576
_Next1577:
; 
; EndIf
_EndIf1569:
; 
; ProcedureReturn Buffer$
  MOV    rcx,qword [rsp+48]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure437
; EndProcedure
_EndProcedureZero437:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure437:
  PUSH   rax
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure CodePageLength(CodePage, String$)
_Procedure196:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   r15
  PS196=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rdx,[rsp+PS196+8]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; If CodePage = #SC_CP_UTF8
  MOV    r15,qword [rsp+PS196+0]
  CMP    r15,65001
  JNE   _EndIf257
; Format = #PB_UTF8
  MOV    qword [rsp+48],2
; Else
  JMP   _EndIf256
_EndIf257:
; Format = #PB_Ascii
  MOV    qword [rsp+48],24
; EndIf
_EndIf256:
; 
; ProcedureReturn StringByteLength(String$, Format)
  PUSH   qword [rsp+48]
  PUSH   qword [rsp+48]
  POP    rcx
  POP    rdx
  CALL   PB_StringByteLength2
  JMP   _EndProcedure197
; EndProcedure
_EndProcedureZero197:
  XOR    rax,rax
_EndProcedure197:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,64
  POP    r15
  RET
; Procedure.s ReadLanguageEntry(Key$, DefaultValue$)
_Procedure202:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PUSH   r15
  PS202=112
  MOV    rax,7
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
  MOV    rax,[rsp+PS202+32]
  MOV    qword [PB_StringBasePosition],rax
  MOV    rdx,[rsp+PS202+0]
  LEA    rcx,[rsp+40]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
  MOV    rdx,[rsp+PS202+8]
  LEA    rcx,[rsp+48]
  SUB    rsp,16
  CALL   SYS_FastAllocateString4
  ADD    rsp,16
; Result$ = ReadPreferenceString(Key$, DefaultValue$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ReadPreferenceString
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; CompilerIf #CompileWindows
; CompilerIf #PB_Compiler_Unicode 
; 
; 
; 
; *AsciiBuffer = AllocateMemory(StringByteLength(Result$, #PB_Ascii) + 1)
  PUSH   qword 24
  PUSH   qword [rsp+64]
  POP    rcx
  POP    rdx
  CALL   PB_StringByteLength2
  MOV    r15,rax
  INC    r15
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+64],rax
; If *AsciiBuffer
  CMP    qword [rsp+64],0
  JE    _EndIf285
; PokeS(*AsciiBuffer, Result$, -1, #PB_Ascii)
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_PokeS3
; 
; 
; 
; Length = MultiByteToWideChar_(#CP_OEMCP, 0, *AsciiBuffer, -1, 0, 0)
  PUSH   qword 0
  PUSH   qword 0
  PUSH   qword -1
  PUSH   qword [rsp+88]
  PUSH   qword 0
  PUSH   qword 1
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   MultiByteToWideChar
  ADD    rsp,48
  MOV    qword [rsp+72],rax
; Result$ = Space(Length)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+96]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Space
  ADD    rsp,40
  LEA    rcx,[rsp+64]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; MultiByteToWideChar_(CodePage, 0, *AsciiBuffer, -1, @Result$, Length)
  PUSH   qword [rsp+72]
  MOV    rax,qword [rsp+64]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword -1
  PUSH   qword [rsp+88]
  PUSH   qword 0
  PUSH   qword [rsp+120]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   MultiByteToWideChar
  ADD    rsp,48
; FreeMemory(*AsciiBuffer)
  PUSH   qword [rsp+64]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf        
_EndIf285:
; 
; CompilerEndIf
; CompilerEndIf  
; 
; ProcedureReturn Trim(Result$)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Trim
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure203
; EndProcedure
_EndProcedureZero203:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure203:
  PUSH   rax
  MOV    rcx,qword [rsp+56]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,96
  POP    r15
  RET
; Procedure.s StrF_Debug(Value.f)
_Procedure254:
  MOVSS  dword [rsp+8],xmm0
  PUSH   r15
  PS254=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
  MOV    rax,[rsp+PS254+32]
  MOV    qword [PB_StringBasePosition],rax
; String$ = StrF(Value, 14) 
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 14
  MOV    eax,dword [rsp+PS254+32]
  PUSH   rax
  MOVSS  xmm0,dword [rsp]
  ADD    rsp,8
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_StrF2
  ADD    rsp,40
  LEA    rcx,[rsp+48]
  POP    rdx
  CALL   SYS_AllocateString4
; If FindString(String$, ".", 1) = 0
  PUSH   qword 1
  MOV    rax,_S52
  PUSH   rax
  PUSH   qword [rsp+56]
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_FindString2
  MOV    r15,rax
  AND    r15,r15
  JNE   _EndIf736
; ProcedureReturn String$
  MOV    rcx,qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure255
; Else
  JMP   _EndIf735
_EndIf736:
; length = Len(String$)
  PUSH   qword [rsp+40]
  POP    rcx
  CALL   PB_Len
  MOV    qword [rsp+48],rax
; While Mid(String$, length, 1) = "0"
_While738:
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S84
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _Wend738
; length - 1
  MOV    r15,qword [rsp+48]
  DEC    r15
  MOV    qword [rsp+48],r15
; Wend
  JMP   _While738
_Wend738:
; If Mid(String$, length, 1) = "."
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 1
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+80]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Mid2
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rcx,_S52
  POP    rdx
  MOV    qword [PB_StringBasePosition],rdx
  ADD    rdx,[PB_StringBase]
  CALL   SYS_StringEqual
  OR     rax,rax
  JE    _EndIf740
; length + 1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; EndIf
_EndIf740:
; ProcedureReturn Left(String$, length)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+72]
  PUSH   qword [rsp+72]
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_Left
  ADD    rsp,40
  POP    rax
  ADD    rax,[PB_StringBase]
  JMP   _EndProcedure255
; EndIf
_EndIf735:
; EndProcedure
_EndProcedureZero255:
  MOV    rax,[PB_StringBasePosition]
  ADD    rax,[PB_StringBase]
  MOV    word [rax],0
_EndProcedure255:
  PUSH   rax
  MOV    rcx,qword [rsp+48]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,64
  POP    r15
  RET
; Procedure GetRequiredWidth(Gadget, Flags = 0)
_Procedure90:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  PS90=64
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; Protected Width.l, Height.l
; GetRequiredSize(Gadget, @Width, @Height, Flags)
  PUSH   qword [rsp+PS90+8]
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  LEA    rax,[rsp+56]
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+PS90+24]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL  _Procedure88
; ProcedureReturn Width
  MOVSXD rax,dword [rsp+40]
  JMP   _EndProcedure91
; EndProcedure 
_EndProcedureZero91:
  XOR    rax,rax
_EndProcedure91:
  ADD    rsp,56
  RET
; Procedure Plugin_Xml_ProcessEvents(*Object.Plugin_Xml, EventGadget.l, EventType.l)
_Procedure644:
  MOV    qword [rsp+8],rcx
  MOV    qword [rsp+16],rdx
  MOV    qword [rsp+24],r8
  PUSH   rbp
  PUSH   r15
  PS644=112
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; If EventGadget = *Object\Tree And EventType = #PB_EventType_Change
  MOVSXD r15,dword [rsp+PS644+8]
  MOV    rbp,qword [rsp+PS644+0]
  CMP    r15d,dword [rbp+4]
  JNE    No346
  MOVSXD r15,dword [rsp+PS644+16]
  CMP    r15,768
  JNE    No346
Ok346:
  MOV    rax,1
  JMP    End346
No346:
  XOR    rax,rax
End346:
  AND    rax,rax
  JE    _EndIf3360
; ClearGadgetItems(*Object\Attributes)
  MOV    rbp,qword [rsp+PS644+0]
  MOVSXD rax,dword [rbp+20]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_ClearGadgetItems
; 
; index = GetGadgetState(*Object\Tree)    
  MOV    rbp,qword [rsp+PS644+0]
  MOVSXD rax,dword [rbp+4]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_GetGadgetState
  MOV    qword [rsp+40],rax
; If index = -1
  MOV    r15,qword [rsp+40]
  CMP    r15,-1
  JNE   _EndIf3362
; SetGadgetText(*Object\Text, "") 
  MOV    rax,_S3
  PUSH   rax
  MOV    rbp,qword [rsp+PS644+8]
  MOVSXD rax,dword [rbp+24]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetText
; SetGadgetText(*Object\Info, "")      
  MOV    rax,_S3
  PUSH   rax
  MOV    rbp,qword [rsp+PS644+8]
  MOVSXD rax,dword [rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetText
; 
; Else
  JMP   _EndIf3361
_EndIf3362:
; Node = GetGadgetItemData(*Object\Tree, index) 
  PUSH   qword [rsp+40]
  MOV    rbp,qword [rsp+PS644+8]
  MOVSXD rax,dword [rbp+4]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetItemData
  MOV    qword [rsp+48],rax
; SetGadgetText(*Object\Text, GetXMLNodeText(Node))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetXMLNodeText
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  MOV    rbp,qword [rsp+PS644+24]
  MOVSXD rax,dword [rbp+24]
  MOV    rax,rax
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_SetGadgetText
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; 
; 
; If XMLNodeType(Node) = #PB_XML_Normal
  PUSH   qword [rsp+48]
  POP    rcx
  CALL   PB_XMLNodeType
  MOV    r15,rax
  CMP    r15,1
  JNE   _EndIf3365
; If ExamineXMLAttributes(Node)
  PUSH   qword [rsp+48]
  POP    rcx
  CALL   PB_ExamineXMLAttributes
  AND    rax,rax
  JE    _EndIf3367
; While NextXMLAttribute(Node)
_While3368:
  PUSH   qword [rsp+48]
  POP    rcx
  CALL   PB_NextXMLAttribute
  AND    rax,rax
  JE    _Wend3368
; AddGadgetItem(*Object\Attributes, -1, XMLAttributeName(Node)+Chr(10)+XMLAttributeValue(Node))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_XMLAttributeName
  ADD    rsp,40
  MOV    rcx,_S88
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_XMLAttributeValue
  ADD    rsp,32
  POP    rax
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword -1
  MOV    rbp,qword [rsp+PS644+32]
  MOVSXD rax,dword [rbp+20]
  MOV    rax,rax
  PUSH   rax
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+16],rdx
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_AddGadgetItem
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
; Wend
  JMP   _While3368
_Wend3368:
; EndIf               
_EndIf3367:
; EndIf
_EndIf3365:
; 
; 
; Select XMLNodeType(Node)
  PUSH   qword [rsp+48]
  POP    rcx
  CALL   PB_XMLNodeType
  MOV    rax,rax
  PUSH   rax
; Case #PB_XML_Comment
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case313
; Info$ = "Node type: Comment"                    
  MOV    rdx,_S353
  LEA    rcx,[rsp+64]
  SUB    rsp,40
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,40
; 
; Case #PB_XML_CData
  JMP   _EndSelect50
_Case313:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case314
; Info$ = "Node type: CData section"
  MOV    rdx,_S354
  LEA    rcx,[rsp+64]
  SUB    rsp,40
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,40
; 
; Case #PB_XML_DTD
  JMP   _EndSelect50
_Case314:
  MOV    r15,4
  CMP    r15,[rsp]
  JNE   _Case315
; Info$ = "Node type: DTD tag"          
  MOV    rdx,_S355
  LEA    rcx,[rsp+64]
  SUB    rsp,40
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,40
; 
; Case #PB_XML_Instruction
  JMP   _EndSelect50
_Case315:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case316
; Info$ = "Node type: Processing instruction" + #NewLine  
  MOV    rdx,_S356
  LEA    rcx,[rsp+64]
  SUB    rsp,40
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,40
; Info$ + "Node name: " + GetXMLNodeName(Node)      
  MOV    rcx,qword [rsp+64]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S357
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetXMLNodeName
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; Case #PB_XML_Normal
  JMP   _EndSelect50
_Case316:
  MOV    r15,1
  CMP    r15,[rsp]
  JNE   _Case317
; Info$ = "Node type: Normal node" + #NewLine + #NewLine
  MOV    rdx,_S358
  LEA    rcx,[rsp+64]
  SUB    rsp,40
  CALL   SYS_FastAllocateStringFree4
  ADD    rsp,40
; Info$ + "Node name: " + GetXMLNodeName(Node)+ #NewLine
  MOV    rcx,qword [rsp+64]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S357
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [rsp+88]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_GetXMLNodeName
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S63
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Info$ + "Offset in parent: " + Str(GetXMLNodeOffset(Node)) + #NewLine
  MOV    rcx,qword [rsp+64]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S359
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+96]
  POP    rcx
  SUB    rsp,32
  CALL   PB_GetXMLNodeOffset
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S63
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Info$ + "Attributes: " + Str(CountGadgetItems(*Object\Attributes)) + #NewLine
  MOV    rcx,qword [rsp+64]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S360
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS644+48]
  MOVSXD rax,dword [rbp+20]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_CountGadgetItems
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S63
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Info$ + "Direct children: " + Str(XMLChildCount(Node)) + #NewLine
  MOV    rcx,qword [rsp+64]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S361
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+96]
  POP    rcx
  SUB    rsp,32
  CALL   PB_XMLChildCount
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  MOV    rcx,_S63
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; Info$ + "All children: " + Str(Xml_RecursiveCount(Node))          
  MOV    rcx,qword [rsp+64]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  MOV    rcx,_S362
  SUB    rsp,32
  CALL   SYS_CopyString
  ADD    rsp,32
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [rsp+96]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure634
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_Str
  ADD    rsp,40
  POP    rax
  LEA    rcx,[rsp+72]
  POP    rdx
  SUB    rsp,40
  CALL   SYS_AllocateString4
  ADD    rsp,40
; 
; EndSelect
_Case317:
_EndSelect50:
  POP    rax
; 
; SetGadgetText(*Object\Info, Info$)
  PUSH   qword [rsp+56]
  MOV    rbp,qword [rsp+PS644+8]
  MOVSXD rax,dword [rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_SetGadgetText
; 
; EndIf     
_EndIf3361:
; 
; ElseIf EventGadget = *Object\Splitter
  JMP   _EndIf3359
_EndIf3360:
  MOVSXD r15,dword [rsp+PS644+8]
  MOV    rbp,qword [rsp+PS644+0]
  CMP    r15d,dword [rbp+12]
  JNE   _EndIf3369
; Width  = GetGadgetAttribute(*Object\Panel, #PB_Panel_ItemWidth)
  PUSH   qword 1
  MOV    rbp,qword [rsp+PS644+8]
  MOVSXD rax,dword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  MOV    qword [rsp+64],rax
; Height = GetGadgetAttribute(*Object\Panel, #PB_Panel_ItemHeight)  
  PUSH   qword 2
  MOV    rbp,qword [rsp+PS644+8]
  MOVSXD rax,dword [rbp+8]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  CALL   PB_GetGadgetAttribute
  MOV    qword [rsp+72],rax
; 
; ResizeGadget(*Object\Info, 0, 0, Width, Height)
  SUB    rsp,8
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+80]
  PUSH   qword 0
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS644+40]
  MOVSXD rax,dword [rbp+16]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Object\Attributes, 0, 0, Width, Height)
  SUB    rsp,8
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+80]
  PUSH   qword 0
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS644+40]
  MOVSXD rax,dword [rbp+20]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; ResizeGadget(*Object\Text, 0, 0, Width, Height)
  SUB    rsp,8
  PUSH   qword [rsp+80]
  PUSH   qword [rsp+80]
  PUSH   qword 0
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS644+40]
  MOVSXD rax,dword [rbp+24]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_ResizeGadget
  ADD    rsp,48
; 
; CompilerIf #CompileWindows
; SendMessage_(GadgetID(*Object\Attributes), #LVM_SETCOLUMNWIDTH, 1, #LVSCW_AUTOSIZE_USEHEADER)
  PUSH   qword -2
  PUSH   qword 1
  PUSH   qword 4126
  SUB    rsp,8
  MOV    rbp,qword [rsp+PS644+32]
  MOVSXD rax,dword [rbp+20]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  SUB    rsp,32
  CALL   PB_GadgetID
  ADD    rsp,40
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   SendMessageW
; CompilerEndIf    
; EndIf
_EndIf3359:
_EndIf3369:
; EndProcedure
_EndProcedureZero645:
  XOR    rax,rax
_EndProcedure645:
  PUSH   rax
  MOV    rcx,qword [rsp+64]
  SUB    rsp,40
  CALL   SYS_FreeString
  ADD    rsp,40
  POP    rax
  ADD    rsp,88
  POP    r15
  POP    rbp
  RET
; Procedure InitSyntaxHighlighting()  
_Procedure220:
  PUSH   rbp
  PUSH   r15
  PS220=144
  MOV    rax,10
.ClearLoop:
  SUB    rsp,8
  MOV    qword [rsp],0
  DEC    rax
  JNZ   .ClearLoop
  SUB    rsp,40
; Static APIFunctionsRead
; 
; NbBasicFunctions = 0
  MOV    qword [v_NbBasicFunctions],0
; Global Dim BasicFunctions.FunctionEntry(0)
  SUB    rsp,24
  MOV    rdx,1
  MOV    rax,a_BasicFunctions
  PUSH   rax
  MOV    r9,s_functionentry
  MOV    r8,7
  MOV    rcx,280
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_BasicFunctions],rax
; 
; 
; 
; CompilerIf Defined(PUREBASIC_IDE, #PB_Constant) 
; 
; 
; 
; 
; For k=1 To NbBasicFunctions
  MOV    qword [rsp+40],1
  JMP   _ForSkipDebug386
_For386:
_ForSkipDebug386:
  MOV    rax,qword [v_NbBasicFunctions]
  CMP    rax,qword [rsp+40]
  JL    _Next387
; BasicFunctionMap(UCase(BasicFunctions(k-1)\Name$)) = k
  PUSH   qword [rsp+40]
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword [PB_StringBasePosition]
  MOV    r15,qword [rsp+64]
  DEC    r15
  MOV    rbp,qword [a_BasicFunctions]
  IMUL   r15,280
  ADD    rbp,r15
  PUSH   qword [rbp]
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_UCase
  ADD    rsp,32
  MOV    rcx,[rsp]
  MOV    qword [PB_StringBasePosition],rcx
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rdx
  MOV    rcx,qword [m_BasicFunctionMap]
  SUB    rsp,40
  CALL   PB_CreateMapElement
  MOV    rbp,rax
  ADD    rsp,40
  POP    rax
  MOV    dword [rbp],eax
; Next
_NextContinue387:
  INC    qword [rsp+40]
  JNO   _For386
_Next387:
; 
; 
; 
; 
; If APIFunctionsRead = 0  
  MOV    r15,qword [so_InitSyntaxHighlighting.v_APIFunctionsRead]
  AND    r15,r15
  JNE   _EndIf389
; APIFunctionsRead = 1
  MOV    qword [so_InitSyntaxHighlighting.v_APIFunctionsRead],1
; 
; NbAPIFunctions = 0
  MOV    qword [v_NbApiFunctions],0
; Global Dim APIFunctions.FunctionEntry(0)
  SUB    rsp,24
  MOV    rdx,1
  MOV    rax,a_APIFunctions
  PUSH   rax
  MOV    r9,s_functionentry
  MOV    r8,7
  MOV    rcx,280
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_APIFunctions],rax
; 
; 
; 
; CompilerIf Defined(PUREBASIC_DEBUGGER, #PB_Constant)         
; 
; If ReadFile(#FILE_LoadAPI, PureBasicPath$ + #DEFAULT_ApiFile)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  MOV    rcx,qword [v_PureBasicPath$]
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  MOV    rcx,_S64
  SUB    rsp,40
  CALL   SYS_CopyString
  ADD    rsp,40
  ADD    qword [PB_StringBasePosition],2
  PUSH   qword 1
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+8],rdx
  POP    rcx
  POP    rdx
  SUB    rsp,32
  CALL   PB_ReadFile
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  AND    rax,rax
  JE    _EndIf391
; 
; NbAPIFunctions = Val(ReadString(#FILE_LoadAPI, #PB_Ascii))
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword 1
  POP    rcx
  POP    rdx
  POP    r8
  SUB    rsp,32
  CALL   PB_ReadString2
  ADD    rsp,40
  MOV    rdx,[PB_StringBase]
  ADD    [rsp+0],rdx
  POP    rcx
  SUB    rsp,32
  CALL   PB_Val
  ADD    rsp,40
  POP    qword [PB_StringBasePosition]
  MOV    qword [v_NbApiFunctions],rax
; 
; *Cursor.Byte = AllocateMemory(Lof(#FILE_LoadAPI)+2) 
  PUSH   qword 1
  POP    rcx
  CALL   PB_Lof
  MOV    r15,rax
  ADD    r15,2
  MOV    rax,r15
  PUSH   rax
  POP    rcx
  CALL   PB_AllocateMemory
  MOV    qword [rsp+48],rax
; *APIFunctionsBuffer = *Cursor
  PUSH   qword [rsp+48]
  POP    rax
  MOV    qword [rsp+56],rax
; If *Cursor
  CMP    qword [rsp+48],0
  JE    _EndIf393
; ReadData(#FILE_LoadAPI, *Cursor, Lof(#FILE_LoadAPI))
  PUSH   qword 1
  POP    rcx
  CALL   PB_Lof
  MOV    rax,rax
  PUSH   rax
  PUSH   qword [rsp+56]
  PUSH   qword 1
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_ReadData
; 
; Dim APIFunctions.FunctionEntry(NbAPIFunctions)
  MOV    rax,qword [v_NbApiFunctions]
  INC    rax
  SUB    rsp,24
  MOV    rdx,rax
  MOV    rax,a_APIFunctions
  PUSH   rax
  MOV    r9,s_functionentry
  MOV    r8,7
  MOV    rcx,280
  SUB    rsp,32
  CALL   SYS_AllocateArray
  ADD    rsp,64
  MOV    qword [a_APIFunctions],rax
; CurrentFunction = 0
  MOV    qword [rsp+64],0
; 
; Repeat
_Repeat394:
; 
; *NameStart = *Cursor     
  PUSH   qword [rsp+48]
  POP    rax
  MOV    qword [rsp+72],rax
; 
; While *Cursor\b <> ' ' And *Cursor\b <> 13 And *Cursor\b <> 10
_While395:
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  CMP    r15,32
  JE     No18
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  CMP    r15,13
  JE     No18
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  CMP    r15,10
  JE     No18
Ok18:
  MOV    rax,1
  JMP    End18
No18:
  XOR    rax,rax
End18:
  AND    rax,rax
  JE    _Wend395
; *Cursor+1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; Wend
  JMP   _While395
_Wend395:
; 
; If *Cursor\b = 13 Or *Cursor\b = 10  
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  CMP    r15,13
  JE     Ok19
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  CMP    r15,10
  JE     Ok19
  JMP    No19
Ok19:
  MOV    rax,1
  JMP    End19
No19:
  XOR    rax,rax
End19:
  AND    rax,rax
  JE    _EndIf397
; *Cursor\b = 0
  MOV    rbp,qword [rsp+48]
  MOV    byte [rbp],0
; *Cursor+1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; 
; APIFunctions(CurrentFunction)\Name$ = PeekS(*NameStart, -1, #PB_Ascii)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  MOV    r15,qword [rsp+72]
  MOV    rbp,qword [a_APIFunctions]
  IMUL   r15,280
  ADD    rbp,r15
  LEA    rcx,[rbp]
  POP    rdx
  CALL   SYS_AllocateString4
; APIFunctions(CurrentFunction)\Proto$ = ""
  MOV    r15,qword [rsp+64]
  MOV    rbp,qword [a_APIFunctions]
  IMUL   r15,280
  ADD    rbp,r15
  MOV    rdx,_S3
  LEA    rcx,[rbp+8]
  CALL   SYS_FastAllocateStringFree4
; Else
  JMP   _EndIf396
_EndIf397:
; *Cursor\b = 0
  MOV    rbp,qword [rsp+48]
  MOV    byte [rbp],0
; *Cursor+1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; 
; APIFunctions(CurrentFunction)\Name$ = PeekS(*NameStart, -1, #PB_Ascii)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  MOV    r15,qword [rsp+72]
  MOV    rbp,qword [a_APIFunctions]
  IMUL   r15,280
  ADD    rbp,r15
  LEA    rcx,[rbp]
  POP    rdx
  CALL   SYS_AllocateString4
; 
; *NameStart = *Cursor 
  PUSH   qword [rsp+48]
  POP    rax
  MOV    qword [rsp+72],rax
; 
; While *Cursor\b <> 13  And *Cursor\b <> 10 And *Cursor\b 
_While399:
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  CMP    r15,13
  JE     No20
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  CMP    r15,10
  JE     No20
  MOV    rbp,qword [rsp+48]
  CMP    byte [rbp],0
  JE     No20
Ok20:
  MOV    rax,1
  JMP    End20
No20:
  XOR    rax,rax
End20:
  AND    rax,rax
  JE    _Wend399
; *Cursor+1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; Wend
  JMP   _While399
_Wend399:
; 
; *Cursor\b = 0
  MOV    rbp,qword [rsp+48]
  MOV    byte [rbp],0
; *Cursor+1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; 
; APIFunctions(CurrentFunction)\Proto$ = PeekS(*NameStart, -1, #PB_Ascii)
  PUSH   qword [PB_StringBasePosition]
  SUB    rsp,8
  PUSH   qword [PB_StringBasePosition]
  PUSH   qword 24
  PUSH   qword -1
  PUSH   qword [rsp+112]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_PeekS3
  ADD    rsp,40
  MOV    r15,qword [rsp+72]
  MOV    rbp,qword [a_APIFunctions]
  IMUL   r15,280
  ADD    rbp,r15
  LEA    rcx,[rbp+8]
  POP    rdx
  CALL   SYS_AllocateString4
; EndIf
_EndIf396:
; 
; If (*Cursor\b = 10)
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  CMP    r15,10
  JNE   _EndIf401
; *Cursor+1
  MOV    r15,qword [rsp+48]
  INC    r15
  MOV    qword [rsp+48],r15
; EndIf
_EndIf401:
; 
; CurrentFunction+1
  MOV    r15,qword [rsp+64]
  INC    r15
  MOV    qword [rsp+64],r15
; Until *Cursor\b = 0 Or CurrentFunction > NbAPIFunctions
  MOV    rbp,qword [rsp+48]
  MOVSX  r15,byte [rbp]
  AND    r15,r15
  JE     Ok21
  MOV    r15,qword [rsp+64]
  CMP    r15,qword [v_NbApiFunctions]
  JG     Ok21
  JMP    No21
Ok21:
  MOV    rax,1
  JMP    End21
No21:
  XOR    rax,rax
End21:
  AND    rax,rax
  JE    _Repeat394
_Until394:
; 
; 
; SortStructuredArray(APIFunctions(), #PB_Sort_Ascending|#PB_Sort_NoCase, OffsetOf(FunctionEntry\Name$), #PB_String, 0, NbAPIFunctions-1)
  MOV    r15,qword [v_NbApiFunctions]
  DEC    r15
  MOV    rax,r15
  PUSH   rax
  PUSH   qword 0
  PUSH   qword 8
  PUSH   qword 0
  PUSH   qword 2
  PUSH   qword [a_APIFunctions]
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_SortStructuredArray2
  ADD    rsp,48
; 
; 
; For i = 0 To NbAPIFunctions-1
  MOV    qword [rsp+80],0
  JMP   _ForSkipDebug402
_For402:
_ForSkipDebug402:
  MOV    r15,qword [v_NbApiFunctions]
  DEC    r15
  CMP    r15,qword [rsp+80]
  JL    _Next403
; PokeS(@APIFunctions(i)\AsciiBuffer[0], APIFunctions(i)\Name$, 255, #PB_Ascii)
  PUSH   qword 24
  PUSH   qword 255
  MOV    r15,qword [rsp+96]
  MOV    rbp,qword [a_APIFunctions]
  IMUL   r15,280
  ADD    rbp,r15
  PUSH   qword [rbp]
  MOV    r15,qword [rsp+104]
  MOV    rbp,qword [a_APIFunctions]
  IMUL   r15,280
  ADD    rbp,r15
  PUSH   rbp
  POP    rbp
  LEA    rax,[rbp+24]
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  CALL   PB_PokeS3
; APIFunctions(i)\Ascii = @APIFunctions(i)\AsciiBuffer[0]       
  MOV    r15,qword [rsp+80]
  MOV    rbp,qword [a_APIFunctions]
  IMUL   r15,280
  ADD    rbp,r15
  PUSH   rbp
  POP    rbp
  LEA    rax,[rbp+24]
  MOV    rax,rax
  PUSH   rax
  MOV    r15,qword [rsp+88]
  MOV    rbp,qword [a_APIFunctions]
  IMUL   r15,280
  ADD    rbp,r15
  POP    rax
  MOV    qword [rbp+16],rax
; Next i
_NextContinue403:
  INC    qword [rsp+80]
  JNO   _For402
_Next403:
; 
; FreeMemory(*APIFunctionsBuffer)
  PUSH   qword [rsp+56]
  POP    rcx
  CALL   PB_FreeMemory
; EndIf
_EndIf393:
; 
; CloseFile(#FILE_LoadAPI)
  PUSH   qword 1
  POP    rcx
  CALL   PB_CloseFile
; EndIf
_EndIf391:
; 
; CompilerEndIf
; 
; 
; 
; CurrentChar = 0
  MOV    qword [rsp+88],0
; For k=1 To NbAPIFunctions
  MOV    qword [rsp+40],1
  JMP   _ForSkipDebug404
_For404:
_ForSkipDebug404:
  MOV    rax,qword [v_NbApiFunctions]
  CMP    rax,qword [rsp+40]
  JL    _Next405
; If APIFunctions(k-1)\Name$
  MOV    r15,qword [rsp+40]
  DEC    r15
  MOV    rbp,qword [a_APIFunctions]
  IMUL   r15,280
  ADD    rbp,r15
  MOV    rcx,qword [rbp]
  XOR    rdx,rdx
  CALL   SYS_StringEqual
  OR     rax,rax
  JNE   _EndIf407
; Char = ByteUcase(PeekB(APIFunctions(k-1)\Ascii))
  MOV    r15,qword [rsp+40]
  DEC    r15
  MOV    rbp,qword [a_APIFunctions]
  IMUL   r15,280
  ADD    rbp,r15
  PUSH   qword [rbp+16]
  POP    rcx
  CALL   PB_PeekB
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL  _Procedure216
  MOV    qword [rsp+96],rax
; If Char <> CurrentChar
  MOV    r15,qword [rsp+96]
  CMP    r15,qword [rsp+88]
  JE    _EndIf409
; APIFunctionsHT(Char) = k
  PUSH   qword [rsp+40]
  MOV    r15,qword [rsp+104]
  MOV    rbp,qword [a_APIFunctionsHT]
  SAL    r15,2
  POP    rax
  MOV    dword [rbp+r15],eax
; CurrentChar = Char
  PUSH   qword [rsp+96]
  POP    rax
  MOV    qword [rsp+88],rax
; EndIf
_EndIf409:
; EndIf
_EndIf407:
; Next
_NextContinue405:
  INC    qword [rsp+40]
  JNO   _For404
_Next405:
; 
; EndIf
_EndIf389:
; 
; 
; 
; IsHighlightingReady = 1
  MOV    qword [rsp+104],1
; 
; EndProcedure
_EndProcedureZero221:
  XOR    rax,rax
_EndProcedure221:
  ADD    rsp,120
  POP    r15
  POP    rbp
  RET
; Procedure Debugger_UpdateWindowStates(*Debugger.DebuggerData)
_Procedure12:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS12=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; For i = 0 To #DEBUGGER_WINDOW_LAST-1
  MOV    qword [rsp+40],0
  JMP   _ForSkipDebug3280
_For3280:
_ForSkipDebug3280:
  MOV    rax,10
  CMP    rax,qword [rsp+40]
  JL    _Next3281
; If *Debugger\Windows[i]
  MOV    rbp,qword [rsp+PS12+0]
  PUSH   rbp
  MOV    rax,qword [rsp+48]
  SAL    rax,3
  POP    rbp
  ADD    rbp,rax
  CMP    qword [rbp+824],0
  JE    _EndIf3283
; 
; Select i
  PUSH   qword [rsp+40]
; 
; 
; 
; Case #DEBUGGER_WINDOW_Asm
  MOV    r15,2
  CMP    r15,[rsp]
  JNE   _Case288
; UpdateAsmWindowState(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS12+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure452
  ADD    rsp,40
; 
; Case #DEBUGGER_WINDOW_Memory
  JMP   _EndSelect47
_Case288:
  MOV    r15,3
  CMP    r15,[rsp]
  JNE   _Case289
; UpdateMemoryViewerWindowState(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS12+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure486
  ADD    rsp,40
; 
; Case #DEBUGGER_WINDOW_Variable
  JMP   _EndSelect47
_Case289:
  MOV    r15,4
  CMP    r15,[rsp]
  JNE   _Case290
; UpdateVariableWindowState(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS12+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure500
  ADD    rsp,40
; 
; Case #DEBUGGER_WINDOW_History
  JMP   _EndSelect47
_Case290:
  MOV    r15,5
  CMP    r15,[rsp]
  JNE   _Case291
; UpdateHistoryWindowState(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS12+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure506
  ADD    rsp,40
; 
; Case #DEBUGGER_WINDOW_WatchList
  JMP   _EndSelect47
_Case291:
  MOV    r15,6
  CMP    r15,[rsp]
  JNE   _Case292
; UpdateWatchListWindowState(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS12+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure526
  ADD    rsp,40
; 
; Case #DEBUGGER_WINDOW_Library
  JMP   _EndSelect47
_Case292:
  MOV    r15,7
  CMP    r15,[rsp]
  JNE   _Case293
; UpdateLibraryViewerState(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS12+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure562
  ADD    rsp,40
; 
; Case #DEBUGGER_WINDOW_Profiler
  JMP   _EndSelect47
_Case293:
  MOV    r15,8
  CMP    r15,[rsp]
  JNE   _Case294
; UpdateProfilerWindowState(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS12+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure600
  ADD    rsp,40
; 
; Case #DEBUGGER_WINDOW_DataBreakpoints
  JMP   _EndSelect47
_Case294:
  MOV    r15,9
  CMP    r15,[rsp]
  JNE   _Case295
; UpdateDataBreakpointWindowState(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS12+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure518
  ADD    rsp,40
; 
; Case #DEBUGGER_WINDOW_Purifier
  JMP   _EndSelect47
_Case295:
  MOV    r15,10
  CMP    r15,[rsp]
  JNE   _Case296
; UpdatePurifierWindowState(*Debugger)
  SUB    rsp,8
  PUSH   qword [rsp+PS12+16]
  POP    rcx
  SUB    rsp,32
  CALL  _Procedure618
  ADD    rsp,40
; 
; EndSelect
_Case296:
_EndSelect47:
  POP    rax
; 
; EndIf
_EndIf3283:
; Next i
_NextContinue3281:
  INC    qword [rsp+40]
  JNO   _For3280
_Next3281:
; 
; EndProcedure
_EndProcedureZero13:
  XOR    rax,rax
_EndProcedure13:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure Network_FlushWindowEvents(*This.Network_Communication)  
_Procedure388:
  MOV    qword [rsp+8],rcx
  PUSH   rbp
  PUSH   r15
  PS388=80
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; EventCount = 0
  MOV    qword [rsp+40],0
; 
; If *This\InvisibleTimeout <> -1 And *This\InvisibleTimeout < ElapsedMilliseconds()
  MOV    rbp,qword [rsp+PS388+0]
  MOV    r15,qword [rbp+124]
  CMP    r15,-1
  JE     No179
  MOV    rbp,qword [rsp+PS388+0]
  MOV    r15,qword [rbp+124]
  CALL   PB_ElapsedMilliseconds
  CMP    r15,rax
  JGE    No179
Ok179:
  MOV    rax,1
  JMP    End179
No179:
  XOR    rax,rax
End179:
  AND    rax,rax
  JE    _EndIf1210
; 
; HideWindow(*This\Window, 0) 
  PUSH   qword 0
  MOV    rbp,qword [rsp+PS388+8]
  PUSH   qword [rbp+76]
  POP    rcx
  POP    rdx
  CALL   PB_HideWindow
; SetActiveWindow(*This\Window)  
  MOV    rbp,qword [rsp+PS388+0]
  PUSH   qword [rbp+76]
  POP    rcx
  CALL   PB_SetActiveWindow
; *This\InvisibleTimeout = -1 
  MOV    rbp,qword [rsp+PS388+0]
  MOV    qword [rbp+124],-1
; EndIf
_EndIf1210:
; 
; Repeat
_Repeat1211:
; EventID = WindowEvent()
  CALL   PB_WindowEvent
  MOV    qword [rsp+48],rax
; 
; If EventID = 0
  MOV    r15,qword [rsp+48]
  AND    r15,r15
  JNE   _EndIf1213
; ProcedureReturn EventCount
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure389
; 
; Else
  JMP   _EndIf1212
_EndIf1213:
; EventCount + 1
  MOV    r15,qword [rsp+40]
  INC    r15
  MOV    qword [rsp+40],r15
; 
; If EventWindow() = *This\Window
  CALL   PB_EventWindow
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS388+0]
  CMP    r15,qword [rbp+76]
  JNE   _EndIf1216
; If EventID = #PB_Event_Gadget And EventGadget() = *This\AbortGadget
  MOV    r15,qword [rsp+48]
  CMP    r15,13100
  JNE    No180
  CALL   PB_EventGadget
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS388+0]
  CMP    r15,qword [rbp+100]
  JNE    No180
Ok180:
  MOV    rax,1
  JMP    End180
No180:
  XOR    rax,rax
End180:
  AND    rax,rax
  JE    _EndIf1218
; *This\AbortPressed = #True
  MOV    rbp,qword [rsp+PS388+0]
  MOV    dword [rbp+120],1
; ProcedureReturn EventCount
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure389
; 
; ElseIf EventID = #PB_Event_Gadget And EventGadget() = *This\OkGadget
  JMP   _EndIf1217
_EndIf1218:
  MOV    r15,qword [rsp+48]
  CMP    r15,13100
  JNE    No181
  CALL   PB_EventGadget
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS388+0]
  CMP    r15,qword [rbp+108]
  JNE    No181
Ok181:
  MOV    rax,1
  JMP    End181
No181:
  XOR    rax,rax
End181:
  AND    rax,rax
  JE    _EndIf1219
; *This\PasswordSet = #True
  MOV    rbp,qword [rsp+PS388+0]
  MOV    dword [rbp+116],1
; ProcedureReturn EventCount
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure389
; 
; ElseIf EventID = #PB_Event_Menu And EventMenu() = 1
  JMP   _EndIf1217
_EndIf1219:
  MOV    r15,qword [rsp+48]
  CMP    r15,13101
  JNE    No182
  CALL   PB_EventMenu
  MOV    r15,rax
  CMP    r15,1
  JNE    No182
Ok182:
  MOV    rax,1
  JMP    End182
No182:
  XOR    rax,rax
End182:
  AND    rax,rax
  JE    _EndIf1220
; If GetActiveGadget() = *This\PasswordGadget
  CALL   PB_GetActiveGadget
  MOV    r15,rax
  MOV    rbp,qword [rsp+PS388+0]
  CMP    r15,qword [rbp+92]
  JNE   _EndIf1222
; *This\PasswordSet = #True
  MOV    rbp,qword [rsp+PS388+0]
  MOV    dword [rbp+116],1
; ProcedureReturn EventCount
  MOV    rax,qword [rsp+40]
  JMP   _EndProcedure389
; EndIf
_EndIf1222:
; 
; EndIf
_EndIf1217:
_EndIf1220:
; 
; Else
  JMP   _EndIf1215
_EndIf1216:
; 
; 
; CompilerIf Defined(PUREBASIC_IDE, #PB_Constant)
; 
; EndIf
_EndIf1215:
; EndIf
_EndIf1212:
; ForEver 
  JMP   _Repeat1211
_Until1211:
; EndProcedure
_EndProcedureZero389:
  XOR    rax,rax
_EndProcedure389:
  ADD    rsp,56
  POP    r15
  POP    rbp
  RET
; Procedure VariableGadget_CatchIcon(*Address)
_Procedure262:
  MOV    qword [rsp+8],rcx
  PS262=64
  XOR    rax,rax
  PUSH   rax
  PUSH   rax
  SUB    rsp,40
; 
; CompilerIf #CompileMac
; realImage = CatchImage(#PB_Any, *Address)
  PUSH   qword [rsp+PS262+0]
  PUSH   qword -1
  POP    rcx
  POP    rdx
  CALL   PB_CatchImage
  MOV    qword [rsp+40],rax
; result = CreateImage(#PB_Any, #DEFAULT_ListIconImageSize, #DEFAULT_ListIconImageSize)
  PUSH   qword 16
  PUSH   qword 16
  PUSH   qword -1
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_CreateImage
  MOV    qword [rsp+48],rax
; 
; If result And realImage And StartDrawing(ImageOutput(result))
  CMP    qword [rsp+48],0
  JE     No149
  CMP    qword [rsp+40],0
  JE     No149
  PUSH   qword [rsp+48]
  POP    rcx
  CALL   PB_ImageOutput
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  CALL   PB_StartDrawing
  AND    rax,rax
  JE     No149
Ok149:
  MOV    rax,1
  JMP    End149
No149:
  XOR    rax,rax
End149:
  AND    rax,rax
  JE    _EndIf758
; Box(0, 0, #DEFAULT_ListIconImageSize, #DEFAULT_ListIconImageSize, $FFFFFF)
  SUB    rsp,8
  PUSH   qword 16777215
  PUSH   qword 16
  PUSH   qword 16
  PUSH   qword 0
  PUSH   qword 0
  POP    rcx
  POP    rdx
  POP    r8
  POP    r9
  SUB    rsp,32
  CALL   PB_Box2
  ADD    rsp,48
; DrawImage(ImageID(realImage), #DEFAULT_ListIconImageOffset, #DEFAULT_ListIconImageOffset)    
  PUSH   qword 2
  PUSH   qword 2
  PUSH   qword [rsp+56]
  POP    rcx
  SUB    rsp,32
  CALL   PB_ImageID
  ADD    rsp,32
  MOV    rax,rax
  PUSH   rax
  POP    rcx
  POP    rdx
  POP    r8
  CALL   PB_DrawImage
; StopDrawing()
  CALL   PB_StopDrawing
; EndIf
_EndIf758:
; CompilerEndIf
; 
; ProcedureReturn result
  MOV    rax,qword [rsp+48]
  JMP   _EndProcedure263
; EndProcedure
_EndProcedureZero263:
  XOR    rax,rax
_EndProcedure263:
  ADD    rsp,56
  RET
; 
section '.data' data readable writeable
; 
_PB_DataSection:
PB_OpenGLSubsystem: db 0
pb_public PB_DEBUGGER_LineNumber
  dd     -1
pb_public PB_DEBUGGER_IncludedFiles
  dd     0
pb_public PB_DEBUGGER_FileName
  db     0
pb_public PB_Compiler_Unicode
  dd     1
pb_public PB_Compiler_Thread
  dd     0
pb_public PB_Compiler_Purifier
  dd     0
pb_public PB_Compiler_Debugger
  dd     0
pb_public PB_Compiler_DPIAware
  dd     0
PB_ExecutableType: dd 0
pb_align 8
public _SYS_StaticStringStart
_SYS_StaticStringStart:
_S222: dw 32,32,0
_S3: dw 0
_S418: dw 68,101,98,117,103,103,101,114,95,69,114,114,111,114,83,121,109,98,111,108,67,111,108,111,114,0
_S55: dw 1,0
_S571: dw 32,34,0
_S325: dw 83,116,111,112,0
_S302: dw 80,114,111,99,101,115,115,69,118,101,110,116,115,0
_S158: dw 32,40,0
_S142: dw 32,68,69,66,85,71,71,69,82,10,0
_S26: dw 9,0
_S88: dw 10,0
_S114: dw 78,101,116,119,111,114,107,68,101,98,117,103,103,101,114,0
_S268: dw 82,101,115,101,116,65,108,108,0
_S426: dw 73,110,100,101,110,116,67,111,108,111,114,0
_S171: dw 32,32,69,110,99,114,121,112,116,105,111,110,72,97,115,104,58,32,0
_S141: dw 65,67,67,69,80,84,32,0
_S532: dw 67,117,115,116,111,109,75,101,121,119,111,114,100,115,0
_S506: dw 68,101,98,117,103,103,101,114,77,97,105,110,87,105,110,100,111,119,87,105,100,116,104,0
_S356: dw 78,111,100,101,32,116,121,112,101,58,32,80,114,111,99,101,115,115,105,110,103,32,105,110,115,116,114,117,99,116,105,111,110,13,10,0
_S386: dw 67,111,110,115,116,97,110,116,67,111,108,111,114,0
_S316: dw 83,101,108,101,99,116,76,105,98,114,97,114,121,0
_S370: dw 83,104,111,119,73,110,100,101,110,116,71,117,105,100,101,115,0
_S97: dw 32,32,32,0
_S25: dw 32,0
_S133: dw 68,69,66,85,71,71,69,82,0
_S95: dw 83,105,122,101,0
_S90: dw 68,101,98,117,103,103,101,114,0
_S140: dw 70,97,116,97,108,32,101,114,114,111,114,46,0
_S99: dw 34,0
_S451: dw 68,101,98,117,103,84,105,109,101,83,116,97,109,112,0
_S628: dw 10,46,46,46,0
_S20: dw 36,0
_S22: dw 37,0
_S548: dw 38,0
_S32: dw 76,97,110,103,117,97,103,101,73,110,102,111,0
_S380: dw 66,97,115,105,99,75,101,121,119,111,114,100,67,111,108,111,114,0
_S348: dw 32,32,40,0
_S93: dw 40,0
_S29: dw 41,0
_S100: dw 42,0
_S223: dw 43,0
_S248: dw 86,97,114,105,97,98,108,101,87,105,110,100,111,119,84,105,116,108,101,0
_S30: dw 44,0
_S555: dw 87,97,105,116,105,110,103,0
_S208: dw 67,108,101,97,114,0
_S38: dw 45,0
_S52: dw 46,0
_S10: dw 47,0
_S84: dw 48,0
_S540: dw 49,0
_S396: dw 80,117,114,101,75,101,121,119,111,114,100,67,111,108,111,114,0
_S318: dw 80,114,111,102,105,108,101,114,78,111,68,97,116,97,0
_S250: dw 83,99,111,112,101,0
_S202: dw 68,101,98,117,103,87,105,110,100,111,119,84,105,116,108,101,0
_S49: dw 42,46,99,97,116,97,108,111,103,0
_S229: dw 86,105,101,119,72,101,120,0
_S574: dw 83,79,85,82,67,69,70,73,76,69,0
_S537: dw 57,0
_S416: dw 68,101,98,117,103,103,101,114,95,76,105,110,101,83,121,109,98,111,108,67,111,108,111,114,0
_S321: dw 86,105,101,119,76,105,110,101,0
_S13: dw 58,0
_S102: dw 59,0
_S194: dw 61,0
_S149: dw 69,114,114,111,114,95,78,111,83,101,114,118,105,99,101,0
_S597: dw 62,0
_S23: dw 49,48,0
_S466: dw 65,117,116,111,83,116,97,99,107,85,112,100,97,116,101,0
_S226: dw 67,111,112,121,84,101,120,116,0
_S215: dw 83,101,116,0
_S5: dw 92,80,117,114,101,66,97,115,105,99,92,0
_S193: dw 83,69,84,9,0
_S465: dw 83,116,97,99,107,73,115,72,101,120,0
_S183: dw 37,116,105,109,101,111,117,116,37,0
_S626: dw 68,101,98,117,103,103,101,114,58,32,71,97,114,98,97,103,101,32,97,116,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,105,110,112,117,116,46,0
_S598: dw 69,120,101,83,116,97,114,116,101,100,0
_S436: dw 73,84,65,76,73,67,0
_S178: dw 85,110,97,118,97,105,108,97,98,108,101,0
_S283: dw 35,84,114,117,101,0
_S205: dw 68,101,98,117,103,0
_S209: dw 91,0
_S138: dw 69,114,114,111,114,95,70,97,116,97,108,69,114,114,111,114,0
_S4: dw 92,0
_S444: dw 83,116,97,121,79,110,84,111,112,0
_S192: dw 83,69,84,32,0
_S536: dw 95,0
_S479: dw 77,101,109,111,114,121,86,105,101,119,101,114,77,97,120,105,109,105,122,101,0
_S7: dw 69,120,112,108,111,114,101,114,0
_S279: dw 65,108,108,80,114,111,99,101,100,117,114,101,115,0
_S324: dw 83,116,97,114,116,0
_S538: dw 91,37,104,104,58,37,105,105,58,37,115,115,93,32,0
_S617: dw 85,115,101,114,82,101,113,117,101,115,116,0
_S450: dw 83,116,97,114,116,117,112,84,105,109,101,111,117,116,0
_S560: dw 80,65,84,72,0
_S290: dw 68,97,116,101,58,32,37,109,109,47,37,100,100,47,37,121,121,121,121,32,45,32,37,104,104,58,37,105,105,58,37,115,115,0
_S86: dw 69,0
_S44: dw 80,117,114,101,66,97,115,105,99,32,84,101,97,109,0
_S399: dw 83,116,114,105,110,103,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S77: dw 84,104,114,101,97,100,101,100,0
_S622: dw 32,91,46,46,46,93,0
_S344: dw 35,99,100,97,116,97,0
_S481: dw 86,97,114,105,97,98,108,101,87,105,110,100,111,119,88,0
_S482: dw 86,97,114,105,97,98,108,101,87,105,110,100,111,119,89,0
_S185: dw 86,101,114,115,105,111,110,69,114,114,111,114,0
_S69: dw 80,0
_S534: dw 87,0
_S319: dw 90,111,111,109,105,110,0
_S502: dw 76,105,98,114,97,114,121,86,105,101,119,101,114,77,97,120,105,109,105,122,101,0
_S293: dw 68,101,98,117,103,103,101,114,92,0
_S57: dw 39,32,99,97,110,110,111,116,32,98,101,32,102,111,117,110,100,33,13,10,84,104,101,32,100,101,102,97,117,108,116,32,108,97,110,103,117,97,103,101,32,119,105,108,108,32,98,101,32,117,115,101,100,46,0
_S297: dw 68,105,115,112,108,97,121,79,98,106,101,99,116,0
_S600: dw 87,105,110,100,111,119,115,0
_S606: dw 32,32,40,54,52,98,105,116,0
_S568: dw 47,76,73,83,84,69,78,61,0
_S511: dw 65,117,116,111,79,112,101,110,86,97,114,105,97,98,108,101,86,105,101,119,101,114,0
_S413: dw 68,101,98,117,103,103,101,114,95,66,114,101,97,107,80,111,105,110,116,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S227: dw 83,97,118,101,84,101,120,116,0
_S129: dw 69,88,69,67,85,84,65,66,76,69,0
_S9: dw 111,112,101,110,0
_S322: dw 32,46,46,46,0
_S541: dw 81,117,105,116,0
_S522: dw 80,114,111,102,105,108,101,114,72,101,105,103,104,116,0
_S41: dw 69,110,103,108,105,115,104,0
_S36: dw 69,78,71,76,73,83,72,0
_S448: dw 76,111,103,84,105,109,101,83,116,97,109,112,0
_S563: dw 45,45,67,79,78,78,69,67,84,61,0
_S62: dw 37,110,101,119,108,105,110,101,37,0
_S428: dw 77,111,100,117,108,101,67,111,108,111,114,0
_S106: dw 45,105,110,118,97,108,105,100,45,0
_S475: dw 77,101,109,111,114,121,86,105,101,119,101,114,88,0
_S476: dw 77,101,109,111,114,121,86,105,101,119,101,114,89,0
_S219: dw 83,116,97,99,107,0
_S438: dw 82,117,110,0
_S132: dw 84,104,101,32,115,101,114,118,101,114,32,105,115,32,110,111,116,32,97,32,100,101,98,117,103,45,97,98,108,101,32,101,120,101,99,117,116,97,98,108,101,46,0
_S191: dw 46,46,46,0
_S262: dw 72,105,115,116,111,114,121,0
_S583: dw 87,65,82,78,73,78,71,83,0
_S67: dw 69,120,116,101,110,100,115,0
_S620: dw 91,68,101,98,117,103,93,32,0
_S320: dw 90,111,111,109,111,117,116,0
_S384: dw 67,111,109,109,101,110,116,67,111,108,111,114,0
_S81: dw 83,104,97,114,101,100,0
_S377: dw 65,83,77,75,101,121,119,111,114,100,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S89: dw 86,97,114,105,97,98,108,101,95,67,97,108,108,98,97,99,107,0
_S200: dw 83,97,118,101,69,114,114,111,114,0
_S572: dw 69,88,69,70,73,76,69,0
_S80: dw 83,116,97,116,105,99,0
_S45: dw 115,117,112,112,111,114,116,64,0
_S8: dw 101,120,112,108,111,114,101,0
_S480: dw 86,97,114,105,97,98,108,101,73,115,72,101,120,0
_S201: dw 37,102,105,108,101,110,97,109,101,37,0
_S469: dw 65,115,109,87,105,110,100,111,119,87,105,100,116,104,0
_S351: dw 65,116,116,114,105,98,117,116,101,0
_S15: dw 46,46,92,0
_S619: dw 67,111,110,116,105,110,117,101,100,0
_S277: dw 65,100,100,0
_S604: dw 32,45,32,120,54,52,0
_S329: dw 67,104,101,99,107,78,101,118,101,114,0
_S123: dw 69,120,101,86,101,114,115,105,111,110,0
_S310: dw 70,117,110,99,116,105,111,110,58,32,73,110,105,116,76,105,98,114,97,114,121,80,108,117,103,105,110,40,42,73,100,66,117,102,102,101,114,41,0
_S424: dw 68,101,98,117,103,103,101,114,95,87,97,114,110,105,110,103,83,121,109,98,111,108,67,111,108,111,114,0
_S296: dw 69,110,100,86,105,101,119,101,114,0
_S87: dw 45,45,45,0
_S47: dw 46,99,111,109,0
_S556: dw 80,117,114,101,66,97,115,105,99,95,82,117,110,110,105,110,103,0
_S104: dw 92,92,46,92,112,105,112,101,92,80,117,114,101,66,97,115,105,99,95,68,101,98,117,103,103,101,114,80,105,112,101,65,95,0
_S103: dw 80,105,112,101,115,59,0
_S272: dw 68,97,116,97,66,114,101,97,107,112,111,105,110,116,115,0
_S117: dw 37,104,111,115,116,37,0
_S485: dw 86,97,114,105,97,98,108,101,86,105,101,119,101,114,77,97,120,105,109,105,122,101,0
_S163: dw 81,117,101,114,121,83,116,97,116,117,115,0
_S112: dw 67,97,110,99,101,108,0
_S385: dw 67,111,110,115,116,97,110,116,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S74: dw 46,112,45,117,116,102,56,0
_S500: dw 76,105,98,114,97,114,121,86,105,101,119,101,114,83,112,108,105,116,116,101,114,49,0
_S501: dw 76,105,98,114,97,114,121,86,105,101,119,101,114,83,112,108,105,116,116,101,114,50,0
_S295: dw 73,110,105,116,76,105,98,114,97,114,121,80,108,117,103,105,110,0
_S581: dw 80,79,82,84,0
_S159: dw 80,111,114,116,0
_S614: dw 32,40,67,97,108,108,68,101,98,117,103,103,101,114,41,0
_S585: dw 68,73,83,80,76,65,89,0
_S204: dw 68,105,115,112,108,97,121,0
_S599: dw 69,120,101,99,117,116,97,98,108,101,84,121,112,101,0
_S144: dw 32,32,67,97,108,108,79,110,69,110,100,58,32,0
_S435: dw 66,79,76,68,0
_S224: dw 77,101,109,111,114,121,87,105,110,100,111,119,84,105,116,108,101,0
_S85: dw 69,45,0
_S126: dw 87,114,111,110,103,86,101,114,115,105,111,110,0
_S586: dw 87,65,84,67,72,0
_S514: dw 65,117,116,111,79,112,101,110,76,105,98,114,97,114,121,86,105,101,119,101,114,0
_S408: dw 67,117,114,114,101,110,116,76,105,110,101,67,111,108,111,114,0
_S341: dw 80,66,95,76,73,66,82,65,82,89,95,83,112,114,105,116,101,0
_S358: dw 78,111,100,101,32,116,121,112,101,58,32,78,111,114,109,97,108,32,110,111,100,101,13,10,13,10,0
_S281: dw 66,114,101,97,107,80,111,105,110,116,69,114,114,111,114,0
_S552: dw 76,105,98,114,97,114,121,0
_S367: dw 84,97,98,76,101,110,103,116,104,0
_S286: dw 86,97,114,105,97,98,108,101,0
_S609: dw 44,32,84,104,114,101,97,100,0
_S145: dw 32,32,85,110,105,99,111,100,101,58,32,0
_S278: dw 82,101,109,111,118,101,0
_S422: dw 68,101,98,117,103,103,101,114,95,87,97,114,110,105,110,103,67,111,108,111,114,0
_S284: dw 87,97,116,99,104,76,105,115,116,84,105,116,108,101,0
_S91: dw 78,97,109,101,0
_S275: dw 67,111,110,100,105,116,105,111,110,83,116,97,116,117,115,0
_S379: dw 66,97,115,105,99,75,101,121,119,111,114,100,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S273: dw 80,114,111,99,101,100,117,114,101,0
_S430: dw 66,97,100,66,114,97,99,101,67,111,108,111,114,0
_S105: dw 92,92,46,92,112,105,112,101,92,80,117,114,101,66,97,115,105,99,95,68,101,98,117,103,103,101,114,80,105,112,101,66,95,0
_S566: dw 47,76,73,83,84,69,78,0
_S164: dw 67,79,78,78,69,67,84,32,0
_S253: dw 77,97,112,115,0
_S235: dw 86,105,101,119,70,108,111,97,116,0
_S589: dw 80,117,114,101,66,97,115,105,99,46,112,114,101,102,115,0
_S184: dw 78,101,116,119,111,114,107,69,114,114,111,114,0
_S162: dw 67,111,110,110,101,99,116,105,111,110,70,97,105,108,101,100,0
_S24: dw 49,50,51,52,53,54,55,56,57,48,0
_S233: dw 86,105,101,119,76,111,110,103,0
_S21: dw 49,50,51,52,53,54,55,56,57,48,65,66,67,68,69,70,97,98,99,100,101,102,0
_S151: dw 84,104,101,32,115,101,114,118,101,114,32,99,97,110,110,111,116,32,112,114,111,118,105,100,101,32,116,104,101,32,114,101,113,117,101,115,116,101,100,32,115,101,114,118,105,99,101,46,0
_S608: dw 44,32,85,110,105,99,111,100,101,0
_S137: dw 32,32,76,101,110,103,116,104,58,32,0
_S437: dw 83,104,111,114,116,99,117,116,115,0
_S543: dw 66,114,101,97,107,67,108,101,97,114,0
_S56: dw 84,104,101,32,108,97,110,103,117,97,103,101,32,39,0
_S196: dw 83,97,118,101,70,105,108,101,80,97,116,116,101,114,110,0
_S582: dw 80,65,83,83,87,79,82,68,0
_S78: dw 66,121,82,101,102,0
_S53: dw 95,71,82,79,85,80,95,0
_S353: dw 78,111,100,101,32,116,121,112,101,58,32,67,111,109,109,101,110,116,0
_S68: dw 65,66,67,85,87,76,83,70,68,81,73,0
_S411: dw 68,101,98,117,103,103,101,114,95,69,114,114,111,114,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S603: dw 32,45,32,120,56,54,0
_S429: dw 66,97,100,66,114,97,99,101,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S161: dw 67,111,110,110,101,99,116,0
_S128: dw 67,79,78,78,69,67,84,0
_S464: dw 82,101,103,105,115,116,101,114,73,115,72,101,120,0
_S101: dw 78,97,109,101,100,80,105,112,101,115,59,0
_S345: dw 35,100,116,100,0
_S601: dw 76,105,110,117,120,0
_S459: dw 68,101,98,117,103,87,105,110,100,111,119,88,0
_S118: dw 83,101,114,118,101,114,84,105,116,108,101,0
_S460: dw 68,101,98,117,103,87,105,110,100,111,119,89,0
_S421: dw 68,101,98,117,103,103,101,114,95,87,97,114,110,105,110,103,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S236: dw 86,105,101,119,68,111,117,98,108,101,0
_S529: dw 68,97,116,97,66,114,101,97,107,112,111,105,110,116,87,105,110,100,111,119,77,97,120,105,109,105,122,101,0
_S153: dw 73,110,118,97,108,105,100,82,101,113,117,101,115,116,0
_S343: dw 35,99,111,109,109,101,110,116,0
_S596: dw 78,111,70,105,108,101,0
_S360: dw 65,116,116,114,105,98,117,116,101,115,58,32,0
_S255: dw 65,108,108,73,116,101,109,115,0
_S116: dw 37,112,111,114,116,37,0
_S282: dw 35,70,97,108,115,101,0
_S11: dw 92,46,46,92,0
_S624: dw 68,101,98,117,103,103,101,114,58,32,86,97,114,105,97,98,108,101,32,110,111,116,32,102,111,117,110,100,58,0
_S488: dw 72,105,115,116,111,114,121,87,105,110,100,111,119,87,105,100,116,104,0
_S462: dw 68,101,98,117,103,87,105,110,100,111,119,72,101,105,103,104,116,0
_S308: dw 70,117,110,99,116,105,111,110,58,32,71,101,116,79,98,106,101,99,116,72,101,105,103,104,116,40,42,79,98,106,101,99,116,41,0
_S131: dw 78,111,69,120,101,99,117,116,97,98,108,101,0
_S439: dw 83,116,101,112,0
_S287: dw 86,97,114,105,97,98,108,101,69,114,114,111,114,0
_S525: dw 68,97,116,97,66,114,101,97,107,112,111,105,110,116,87,105,110,100,111,119,88,0
_S526: dw 68,97,116,97,66,114,101,97,107,112,111,105,110,116,87,105,110,100,111,119,89,0
_S372: dw 66,97,99,107,103,114,111,117,110,100,67,111,108,111,114,0
_S575: dw 80,82,69,70,69,82,69,78,67,69,83,0
_S338: dw 80,114,101,102,101,114,101,110,99,101,115,0
_S198: dw 70,105,108,101,69,120,105,115,116,115,0
_S417: dw 68,101,98,117,103,103,101,114,95,69,114,114,111,114,83,121,109,98,111,108,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S271: dw 83,104,111,119,86,97,114,105,97,98,108,101,115,0
_S615: dw 66,101,102,111,114,101,69,110,100,0
_S447: dw 67,97,108,108,79,110,69,110,100,0
_S627: dw 32,61,32,34,0
_S587: dw 66,82,69,65,75,0
_S174: dw 69,114,114,111,114,95,73,110,118,97,108,105,100,82,101,115,112,111,110,115,101,0
_S146: dw 32,32,66,105,103,69,110,100,105,97,110,58,32,0
_S441: dw 83,116,101,112,79,117,116,0
_S298: dw 82,101,109,111,118,101,79,98,106,101,99,116,0
_S442: dw 77,101,109,111,114,105,122,101,87,105,110,100,111,119,115,0
_S60: dw 45,45,32,84,104,101,32,68,101,102,97,117,108,116,32,108,97,110,103,117,97,103,101,32,119,105,108,108,32,98,101,32,117,115,101,100,46,0
_S220: dw 85,112,100,97,116,101,0
_S456: dw 68,101,98,117,103,79,117,116,70,111,110,116,0
_S187: dw 80,66,95,68,69,66,85,71,71,69,82,95,79,112,116,105,111,110,115,0
_S533: dw 67,111,117,110,116,0
_S357: dw 78,111,100,101,32,110,97,109,101,58,32,0
_S299: dw 71,101,116,79,98,106,101,99,116,87,105,100,116,104,0
_S210: dw 84,105,109,101,83,116,97,109,112,0
_S180: dw 80,105,112,101,69,114,114,111,114,0
_S508: dw 65,117,116,111,79,112,101,110,68,101,98,117,103,79,117,116,112,117,116,0
_S252: dw 76,105,110,107,101,100,76,105,115,116,115,0
_S34: dw 80,66,95,73,68,69,0
_S186: dw 80,66,95,68,69,66,85,71,71,69,82,95,67,111,109,109,117,110,105,99,97,116,105,111,110,0
_S458: dw 68,101,98,117,103,79,117,116,70,111,110,116,83,116,121,108,101,0
_S595: dw 80,117,114,101,66,97,115,105,99,32,68,101,98,117,103,103,101,114,32,45,32,0
_S337: dw 68,121,110,97,109,105,99,73,110,116,101,114,118,97,108,108,0
_S156: dw 80,117,114,101,66,97,115,105,99,32,68,101,98,117,103,103,101,114,0
_S346: dw 35,105,110,115,116,114,117,99,116,105,111,110,58,32,0
_S546: dw 77,101,110,117,73,116,101,109,0
_S470: dw 65,115,109,87,105,110,100,111,119,72,101,105,103,104,116,0
_S545: dw 68,101,98,117,103,79,117,116,112,117,116,0
_S365: dw 76,97,110,103,117,97,103,101,70,105,108,101,0
_S378: dw 65,83,77,75,101,121,119,111,114,100,67,111,108,111,114,0
_S330: dw 67,104,101,99,107,76,105,110,101,115,0
_S328: dw 67,104,101,99,107,65,108,119,97,121,115,0
_S306: dw 70,117,110,99,116,105,111,110,58,32,71,101,116,79,98,106,101,99,116,87,105,100,116,104,40,42,79,98,106,101,99,116,41,0
_S274: dw 67,111,110,100,105,116,105,111,110,0
_S19: dw 32,71,98,0
_S135: dw 69,78,67,82,89,80,84,73,79,78,32,0
_S515: dw 65,117,116,111,79,112,101,110,68,97,116,97,66,114,101,97,107,112,111,105,110,116,115,0
_S294: dw 42,46,100,108,108,0
_S165: dw 32,69,88,69,67,85,84,65,66,76,69,10,0
_S108: dw 76,101,110,103,116,104,0
_S6: dw 80,117,114,101,66,97,115,105,99,92,0
_S218: dw 78,111,68,97,116,97,0
_S111: dw 77,105,115,99,0
_S216: dw 65,115,109,87,105,110,100,111,119,84,105,116,108,101,0
_S388: dw 76,97,98,101,108,67,111,108,111,114,0
_S237: dw 86,105,101,119,83,116,114,105,110,103,0
_S66: dw 73,110,116,101,114,102,97,99,101,0
_S225: dw 82,97,110,103,101,0
_S449: dw 87,97,114,110,105,110,103,77,111,100,101,0
_S240: dw 32,40,85,116,102,45,56,41,0
_S551: dw 77,101,109,111,114,121,0
_S244: dw 40,41,0
_S120: dw 67,111,110,110,101,99,116,105,111,110,76,111,115,116,0
_S607: dw 32,32,40,51,50,98,105,116,0
_S623: dw 68,101,98,117,103,103,101,114,58,32,0
_S166: dw 65,67,67,69,80,84,0
_S12: dw 92,46,92,0
_S382: dw 67,117,115,116,111,109,75,101,121,119,111,114,100,67,111,108,111,114,0
_S349: dw 73,110,102,111,114,109,97,116,105,111,110,0
_S212: dw 69,114,114,111,114,58,32,0
_S267: dw 82,101,115,101,116,0
_S381: dw 67,117,115,116,111,109,75,101,121,119,111,114,100,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S259: dw 40,58,0
_S354: dw 78,111,100,101,32,116,121,112,101,58,32,67,68,97,116,97,32,115,101,99,116,105,111,110,0
_S406: dw 76,105,110,101,78,117,109,98,101,114,66,97,99,107,67,111,108,111,114,0
_S238: dw 32,40,65,115,99,105,105,41,0
_S265: dw 83,116,97,116,105,115,116,105,99,115,0
_S516: dw 65,117,116,111,79,112,101,110,80,117,114,105,102,105,101,114,0
_S404: dw 76,105,110,101,78,117,109,98,101,114,67,111,108,111,114,0
_S16: dw 32,66,121,116,101,0
_S307: dw 32,32,79,112,116,105,111,110,97,108,108,121,44,32,83,101,116,79,98,106,101,99,116,83,105,122,101,40,41,32,99,111,117,108,100,32,98,101,32,105,109,112,108,101,109,101,110,116,101,100,32,105,110,115,116,101,97,100,46,0
_S291: dw 61,61,61,61,61,61,32,70,73,76,69,32,58,32,0
_S58: dw 45,45,32,84,104,101,32,108,97,110,103,117,97,103,101,32,39,0
_S373: dw 78,111,114,109,97,108,84,101,120,116,67,111,108,111,114,0
_S473: dw 77,101,109,111,114,121,73,115,72,101,120,0
_S134: dw 69,110,99,114,121,112,116,105,111,110,72,97,115,104,0
_S276: dw 65,100,100,66,114,101,97,107,80,111,105,110,116,0
_S239: dw 32,40,85,110,105,99,111,100,101,41,0
_S393: dw 80,111,105,110,116,101,114,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S336: dw 83,116,114,105,110,103,73,110,116,101,114,118,97,108,108,0
_S412: dw 68,101,98,117,103,103,101,114,95,69,114,114,111,114,67,111,108,111,114,0
_S618: dw 68,97,116,97,66,114,101,97,107,112,111,105,110,116,0
_S472: dw 77,101,109,111,114,121,68,105,115,112,108,97,121,84,121,112,101,0
_S347: dw 105,100,0
_S27: dw 82,71,66,40,0
_S530: dw 80,117,114,105,102,105,101,114,87,105,110,100,111,119,88,0
_S327: dw 67,97,108,108,115,80,101,114,76,105,110,101,0
_S531: dw 80,117,114,105,102,105,101,114,87,105,110,100,111,119,89,0
_S392: dw 79,112,101,114,97,116,111,114,67,111,108,111,114,0
_S610: dw 44,32,80,117,114,105,102,105,101,114,0
_S593: dw 66,82,69,65,75,32,0
_S213: dw 86,97,114,105,97,98,108,101,32,115,101,116,32,116,111,58,32,0
_S312: dw 32,32,82,101,116,117,114,110,118,97,108,117,101,32,119,97,115,32,48,33,32,80,108,117,103,105,110,32,110,111,116,32,99,111,114,114,101,99,116,108,121,32,105,110,105,116,105,97,108,105,122,101,100,46,0
_S37: dw 76,97,115,116,85,112,100,97,116,101,100,0
_S558: dw 67,79,77,80,73,76,69,82,83,92,0
_S170: dw 87,114,111,110,103,80,97,115,115,119,111,114,100,0
_S94: dw 40,41,10,0
_S230: dw 86,105,101,119,66,121,116,101,0
_S33: dw 65,112,112,108,105,99,97,116,105,111,110,0
_S477: dw 77,101,109,111,114,121,86,105,101,119,101,114,87,105,100,116,104,0
_S419: dw 68,101,98,117,103,103,101,114,95,66,114,101,97,107,112,111,105,110,83,121,109,98,111,108,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S249: dw 86,97,114,105,97,98,108,101,115,0
_S549: dw 86,97,114,105,97,98,108,101,76,105,115,116,0
_S478: dw 77,101,109,111,114,121,86,105,101,119,101,114,72,101,105,103,104,116,0
_S292: dw 32,61,61,61,61,61,61,61,0
_S452: dw 68,101,98,117,103,73,115,72,101,120,0
_S195: dw 83,97,118,101,70,105,108,101,84,105,116,108,101,0
_S565: dw 45,45,80,65,83,83,87,79,82,68,61,0
_S148: dw 67,111,110,110,101,99,116,105,111,110,83,117,99,99,101,115,115,0
_S376: dw 83,101,108,101,99,116,105,111,110,70,114,111,110,116,67,111,108,111,114,0
_S96: dw 58,32,0
_S288: dw 68,101,98,117,103,103,101,114,92,76,105,98,114,97,114,121,86,105,101,119,101,114,46,108,111,103,0
_S228: dw 83,97,118,101,82,97,119,0
_S79: dw 76,111,99,97,108,0
_S510: dw 65,117,116,111,79,112,101,110,77,101,109,111,114,121,86,105,101,119,101,114,0
_S352: dw 84,101,120,116,0
_S42: dw 45,45,45,45,45,45,45,0
_S339: dw 65,112,112,108,121,0
_S260: dw 58,41,0
_S232: dw 86,105,101,119,87,111,114,100,0
_S410: dw 68,101,98,117,103,103,101,114,95,76,105,110,101,67,111,108,111,114,0
_S266: dw 67,97,108,108,67,111,117,110,116,0
_S92: dw 86,97,108,117,101,0
_S246: dw 86,105,101,119,65,114,114,97,121,76,105,115,116,0
_S176: dw 58,13,10,0
_S434: dw 78,111,110,101,0
_S109: dw 69,82,82,79,82,32,0
_S369: dw 83,104,111,119,87,104,105,116,101,83,112,97,99,101,0
_S251: dw 65,114,114,97,121,115,0
_S335: dw 76,111,99,97,108,73,110,116,101,114,118,97,108,108,0
_S300: dw 71,101,116,79,98,106,101,99,116,72,101,105,103,104,116,0
_S432: dw 69,100,105,116,111,114,70,111,110,116,83,105,122,101,0
_S490: dw 72,105,115,116,111,114,121,77,97,120,105,109,105,122,101,0
_S155: dw 83,101,114,118,101,114,70,97,105,108,101,100,0
_S31: dw 58,58,0
_S579: dw 83,69,82,86,69,82,0
_S611: dw 76,111,103,69,114,114,111,114,0
_S494: dw 87,97,116,99,104,76,105,115,116,87,105,110,100,111,119,72,101,105,103,104,116,0
_S427: dw 77,111,100,117,108,101,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S420: dw 68,101,98,117,103,103,101,114,95,66,114,101,97,107,112,111,105,110,83,121,109,98,111,108,67,111,108,111,114,0
_S214: dw 32,58,32,0
_S542: dw 66,114,101,97,107,83,101,116,82,101,109,111,118,101,0
_S474: dw 77,101,109,111,114,121,79,110,101,67,111,108,117,109,110,79,110,108,121,0
_S181: dw 69,120,101,81,117,105,116,69,114,114,111,114,0
_S553: dw 68,101,98,117,103,65,115,109,0
_S110: dw 32,32,77,101,115,115,97,103,101,58,32,0
_S169: dw 78,101,101,100,80,97,115,115,119,111,114,100,0
_S65: dw 83,116,114,117,99,116,117,114,101,0
_S261: dw 72,105,115,116,111,114,121,87,105,110,100,111,119,84,105,116,108,101,0
_S350: dw 65,116,116,114,105,98,117,116,101,115,0
_S98: dw 67,117,114,114,101,110,116,0
_S521: dw 80,114,111,102,105,108,101,114,87,105,100,116,104,0
_S517: dw 65,117,116,111,79,112,101,110,80,114,111,102,105,108,101,114,0
_S254: dw 65,114,114,97,121,76,105,115,116,78,97,109,101,0
_S590: dw 70,65,84,65,76,32,69,82,82,79,82,33,32,67,97,110,110,111,116,32,99,114,101,97,116,101,32,71,85,73,46,0
_S539: dw 83,116,97,110,100,97,108,111,110,101,68,101,98,117,103,103,101,114,0
_S394: dw 80,111,105,110,116,101,114,67,111,108,111,114,0
_S264: dw 85,112,100,97,116,105,110,103,0
_S50: dw 42,46,42,0
_S182: dw 84,105,109,101,111,117,116,69,114,114,111,114,0
_S317: dw 78,111,76,105,98,114,97,114,121,73,110,102,111,0
_S340: dw 80,66,95,76,73,66,82,65,82,89,95,73,109,97,103,101,0
_S188: dw 80,117,114,101,66,97,115,105,99,95,68,101,98,117,103,103,101,114,77,117,116,101,120,95,0
_S453: dw 68,101,98,117,103,83,121,115,116,101,109,77,101,115,115,97,103,101,115,0
_S189: dw 80,66,95,68,69,66,85,71,71,69,82,95,75,105,108,108,77,117,116,101,120,0
_S513: dw 65,117,116,111,79,112,101,110,87,97,116,99,104,108,105,115,116,0
_S544: dw 68,97,116,97,66,114,101,97,107,0
_S403: dw 76,105,110,101,78,117,109,98,101,114,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S241: dw 43,32,0
_S375: dw 83,101,108,101,99,116,105,111,110,67,111,108,111,114,0
_S173: dw 69,114,114,111,114,95,0
_S498: dw 76,105,98,114,97,114,121,86,105,101,119,101,114,87,105,100,116,104,0
_S136: dw 32,65,69,83,10,0
_S389: dw 78,117,109,98,101,114,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S326: dw 67,97,108,108,101,100,76,105,110,101,115,0
_S197: dw 46,116,120,116,0
_S122: dw 69,114,114,111,114,95,87,114,111,110,103,86,101,114,115,105,111,110,0
_S362: dw 65,108,108,32,99,104,105,108,100,114,101,110,58,32,0
_S115: dw 83,101,114,118,101,114,84,105,116,108,101,78,97,109,101,100,0
_S602: dw 77,97,99,79,83,88,0
_S247: dw 69,110,116,101,114,82,97,110,103,101,0
_S567: dw 45,45,76,73,83,84,69,78,0
_S199: dw 79,118,101,114,87,114,105,116,101,0
_S234: dw 86,105,101,119,81,117,97,100,0
_S371: dw 69,100,105,116,111,114,0
_S592: dw 87,65,84,67,72,32,0
_S507: dw 68,101,98,117,103,103,101,114,77,97,105,110,87,105,110,100,111,119,72,101,105,103,104,116,0
_S486: dw 72,105,115,116,111,114,121,87,105,110,100,111,119,88,0
_S487: dw 72,105,115,116,111,114,121,87,105,110,100,111,119,89,0
_S206: dw 67,111,112,121,0
_S124: dw 68,101,98,117,103,103,101,114,86,101,114,115,105,111,110,0
_S17: dw 32,75,98,0
_S35: dw 76,97,110,103,117,97,103,101,0
_S73: dw 46,112,45,118,97,114,105,97,110,116,0
_S231: dw 86,105,101,119,67,104,97,114,0
_S391: dw 79,112,101,114,97,116,111,114,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S40: dw 69,109,97,105,108,0
_S2: dw 67,111,110,115,111,108,97,115,0
_S301: dw 83,101,116,79,98,106,101,99,116,83,105,122,101,0
_S313: dw 32,32,73,110,105,116,32,102,117,110,99,116,105,111,110,32,109,105,115,115,105,110,103,33,32,78,111,116,32,97,32,118,97,108,105,100,32,76,105,98,114,97,114,121,86,105,101,119,101,114,32,80,108,117,103,105,110,32,68,76,76,46,0
_S179: dw 77,101,109,111,114,121,69,114,114,111,114,0
_S175: dw 67,111,110,110,101,99,116,70,97,105,108,101,100,0
_S489: dw 72,105,115,116,111,114,121,87,105,110,100,111,119,72,101,105,103,104,116,0
_S519: dw 80,114,111,102,105,108,101,114,88,0
_S520: dw 80,114,111,102,105,108,101,114,89,0
_S355: dw 78,111,100,101,32,116,121,112,101,58,32,68,84,68,32,116,97,103,0
_S28: dw 44,32,0
_S445: dw 65,117,116,111,66,114,105,110,103,84,111,84,111,112,0
_S366: dw 69,110,97,98,108,101,75,101,121,119,111,114,100,66,111,108,100,105,110,103,0
_S242: dw 73,110,118,97,108,105,100,77,101,109,111,114,121,0
_S59: dw 39,32,99,97,110,110,111,116,32,98,101,32,102,111,117,110,100,33,0
_S72: dw 46,112,45,98,115,116,114,0
_S83: dw 78,101,119,83,111,117,114,99,101,0
_S405: dw 76,105,110,101,78,117,109,98,101,114,66,97,99,107,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S270: dw 70,105,108,101,0
_S14: dw 92,92,0
_S263: dw 67,117,114,114,101,110,116,80,111,115,105,116,105,111,110,0
_S211: dw 93,32,0
_S168: dw 69,78,67,82,89,80,84,73,79,78,0
_S167: dw 69,110,99,114,121,112,116,105,111,110,0
_S425: dw 73,110,100,101,110,116,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S342: dw 80,66,95,76,73,66,82,65,82,89,95,83,112,114,105,116,101,51,68,0
_S496: dw 76,105,98,114,97,114,121,86,105,101,119,101,114,88,0
_S331: dw 37,108,105,110,101,115,37,0
_S143: dw 32,32,67,97,108,108,79,110,83,116,97,114,116,58,32,0
_S497: dw 76,105,98,114,97,114,121,86,105,101,119,101,114,89,0
_S483: dw 86,97,114,105,97,98,108,101,87,105,110,100,111,119,87,105,100,116,104,0
_S390: dw 78,117,109,98,101,114,67,111,108,111,114,0
_S207: dw 83,97,118,101,0
_S440: dw 83,116,101,112,79,118,101,114,0
_S503: dw 73,115,77,105,110,105,68,101,98,117,103,103,101,114,0
_S461: dw 68,101,98,117,103,87,105,110,100,111,119,87,105,100,116,104,0
_S54: dw 95,69,78,68,95,0
_S139: dw 70,97,116,97,108,69,114,114,111,114,0
_S446: dw 67,97,108,108,79,110,83,116,97,114,116,0
_S70: dw 46,112,45,97,115,99,105,105,0
_S409: dw 68,101,98,117,103,103,101,114,95,76,105,110,101,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S387: dw 76,97,98,101,108,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S613: dw 83,116,111,112,112,101,100,0
_S467: dw 65,115,109,87,105,110,100,111,119,88,0
_S468: dw 65,115,109,87,105,110,100,111,119,89,0
_S107: dw 45,101,114,114,111,114,45,0
_S564: dw 47,80,65,83,83,87,79,82,68,61,0
_S150: dw 78,111,83,101,114,118,105,99,101,0
_S621: dw 91,79,117,116,112,117,116,68,101,98,117,103,83,116,114,105,110,103,93,0
_S289: dw 80,117,114,101,66,97,115,105,99,68,101,98,117,103,103,101,114,32,45,32,76,105,98,114,97,114,121,86,105,101,119,101,114,80,108,117,103,105,110,32,45,32,76,111,103,0
_S569: dw 45,45,76,73,83,84,69,78,61,0
_S527: dw 68,97,116,97,66,114,101,97,107,112,111,105,110,116,87,105,110,100,111,119,87,105,100,116,104,0
_S63: dw 13,10,0
_S588: dw 67,111,109,109,97,110,100,108,105,110,101,0
_S573: dw 67,79,77,77,65,78,68,76,73,78,69,0
_S130: dw 69,114,114,111,114,95,78,111,69,120,101,99,117,116,97,98,108,101,0
_S245: dw 32,61,32,0
_S76: dw 71,108,111,98,97,108,0
_S580: dw 72,79,83,84,0
_S454: dw 68,101,98,117,103,79,117,116,112,117,116,84,111,69,114,114,111,114,76,111,103,0
_S576: dw 80,85,82,73,70,73,69,82,0
_S554: dw 80,117,114,105,102,105,101,114,0
_S547: dw 87,97,116,99,104,76,105,115,116,0
_S374: dw 67,117,114,115,111,114,67,111,108,111,114,0
_S157: dw 67,111,110,110,101,99,116,84,105,116,108,101,0
_S605: dw 32,45,32,112,112,99,0
_S523: dw 80,114,111,102,105,108,101,114,83,112,108,105,116,116,101,114,0
_S43: dw 37,109,109,47,37,100,100,47,37,121,121,121,121,0
_S591: dw 69,120,101,99,117,116,101,69,114,114,111,114,0
_S484: dw 86,97,114,105,97,98,108,101,87,105,110,100,111,119,72,101,105,103,104,116,0
_S203: dw 32,45,32,0
_S258: dw 87,97,116,99,104,108,105,115,116,65,100,100,0
_S18: dw 32,77,98,0
_S243: dw 13,10,13,10,65,114,103,117,109,101,110,116,32,101,114,114,111,114,58,13,10,32,32,0
_S455: dw 68,101,98,117,103,79,117,116,85,115,101,70,111,110,116,0
_S127: dw 84,104,101,32,80,117,114,101,66,97,115,105,99,32,86,101,114,115,105,111,110,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,46,0
_S397: dw 83,101,112,97,114,97,116,111,114,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S61: dw 35,35,35,35,35,32,83,116,114,105,110,103,32,110,111,116,32,102,111,117,110,100,33,32,35,35,35,35,35,0
_S415: dw 68,101,98,117,103,103,101,114,95,76,105,110,101,83,121,109,98,111,108,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S221: dw 58,32,32,32,0
_S305: dw 70,117,110,99,116,105,111,110,58,32,82,101,109,111,118,101,79,98,106,101,99,116,40,42,79,98,106,101,99,116,41,0
_S504: dw 68,101,98,117,103,103,101,114,77,97,105,110,87,105,110,100,111,119,88,0
_S505: dw 68,101,98,117,103,103,101,114,77,97,105,110,87,105,110,100,111,119,89,0
_S364: dw 67,117,114,114,101,110,116,76,97,110,103,117,97,103,101,0
_S528: dw 68,97,116,97,66,114,101,97,107,112,111,105,110,116,87,105,110,100,111,119,72,101,105,103,104,116,0
_S509: dw 65,117,116,111,79,112,101,110,65,115,109,87,105,110,100,111,119,0
_S400: dw 83,116,114,105,110,103,67,111,108,111,114,0
_S499: dw 76,105,98,114,97,114,121,86,105,101,119,101,114,72,101,105,103,104,116,0
_S368: dw 68,105,115,112,108,97,121,70,117,108,108,80,97,116,104,0
_S82: dw 70,105,108,101,83,116,117,102,102,0
_S629: dw 83,116,114,117,99,116,117,114,101,58,32,0
_S75: dw 77,97,105,110,0
_S398: dw 83,101,112,97,114,97,116,111,114,67,111,108,111,114,0
_S51: dw 46,46,0
_S570: dw 45,79,0
_S562: dw 47,67,79,78,78,69,67,84,61,0
_S363: dw 80,66,95,76,73,66,82,65,82,89,95,88,109,108,0
_S431: dw 69,100,105,116,111,114,70,111,110,116,78,97,109,101,0
_S119: dw 76,105,115,116,101,110,0
_S495: dw 87,97,116,99,104,76,105,115,116,87,105,110,100,111,119,77,97,120,105,109,105,122,101,0
_S578: dw 67,76,73,69,78,84,0
_S463: dw 68,101,98,117,103,87,105,110,100,111,119,77,97,120,105,109,105,122,101,0
_S402: dw 83,116,114,117,99,116,117,114,101,67,111,108,111,114,0
_S71: dw 46,112,45,117,110,105,99,111,100,101,0
_S524: dw 80,114,111,102,105,108,101,114,77,97,120,105,109,105,122,101,0
_S433: dw 69,100,105,116,111,114,70,111,110,116,83,116,121,108,101,0
_S383: dw 67,111,109,109,101,110,116,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S612: dw 76,111,103,87,97,114,110,105,110,103,0
_S512: dw 65,117,116,111,79,112,101,110,72,105,115,116,111,114,121,0
_S64: dw 67,111,109,112,105,108,101,114,115,92,65,80,73,70,117,110,99,116,105,111,110,76,105,115,116,105,110,103,46,116,120,116,0
_S304: dw 32,32,82,101,113,117,105,114,101,100,32,70,117,110,99,116,105,111,110,32,109,105,115,115,105,110,103,33,32,67,97,110,110,111,116,32,117,115,101,32,116,104,105,115,32,112,108,117,103,105,110,0
_S334: dw 71,108,111,98,97,108,73,110,116,101,114,118,97,108,108,0
_S172: dw 69,82,82,79,82,0
_S154: dw 73,110,118,97,108,105,100,32,114,101,113,117,101,115,116,46,0
_S121: dw 69,114,114,111,114,0
_S493: dw 87,97,116,99,104,76,105,115,116,87,105,110,100,111,119,87,105,100,116,104,0
_S395: dw 80,117,114,101,75,101,121,119,111,114,100,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S257: dw 73,116,101,109,82,97,110,103,101,0
_S518: dw 80,114,111,102,105,108,101,114,82,117,110,65,116,83,116,97,114,116,0
_S423: dw 68,101,98,117,103,103,101,114,95,87,97,114,110,105,110,103,83,121,109,98,111,108,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S323: dw 80,114,111,102,105,108,101,114,84,105,116,108,101,0
_S152: dw 69,114,114,111,114,95,73,110,118,97,108,105,100,82,101,113,117,101,115,116,0
_S584: dw 73,71,78,79,82,69,0
_S311: dw 32,32,42,73,100,66,117,102,102,101,114,32,105,115,32,101,109,112,116,121,46,32,65,32,76,105,98,114,97,114,121,32,73,68,32,83,116,114,105,110,103,32,109,117,115,116,32,98,101,32,112,117,116,32,116,104,101,114,101,46,0
_S160: dw 41,32,46,46,46,0
_S113: dw 79,107,0
_S407: dw 67,117,114,114,101,110,116,76,105,110,101,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S190: dw 69,120,101,69,110,100,101,100,0
_S550: dw 80,114,111,102,105,108,101,114,0
_S457: dw 68,101,98,117,103,79,117,116,70,111,110,116,83,105,122,101,0
_S401: dw 83,116,114,117,99,116,117,114,101,67,111,108,111,114,95,68,105,115,97,98,108,101,100,0
_S315: dw 76,105,98,114,97,114,121,86,105,101,119,101,114,84,105,116,108,101,0
_S256: dw 78,111,110,90,101,114,111,73,116,101,109,115,0
_S535: dw 80,114,101,102,101,114,101,110,99,101,69,114,114,111,114,0
_S625: dw 68,101,98,117,103,103,101,114,58,32,65,114,114,97,121,40,41,32,47,32,76,105,110,107,101,100,76,105,115,116,40,41,32,110,111,116,32,102,111,117,110,100,58,0
_S616: dw 66,114,101,97,107,80,111,105,110,116,0
_S594: dw 80,85,82,73,70,73,69,82,32,0
_S414: dw 68,101,98,117,103,103,101,114,95,66,114,101,97,107,80,111,105,110,116,67,111,108,111,114,0
_S471: dw 65,115,109,87,105,110,100,111,119,77,97,120,105,109,105,122,101,0
_S333: dw 80,117,114,105,102,105,101,114,73,110,116,101,114,118,97,108,108,0
_S361: dw 68,105,114,101,99,116,32,99,104,105,108,100,114,101,110,58,32,0
_S309: dw 32,32,83,101,116,79,98,106,101,99,116,83,105,122,101,40,41,32,105,115,32,97,108,108,114,101,97,100,121,32,105,109,112,108,101,109,101,110,116,101,100,46,32,84,104,105,115,32,102,117,110,99,116,105,111,110,32,105,115,32,105,103,110,111,114,101,100,46,0
_S359: dw 79,102,102,115,101,116,32,105,110,32,112,97,114,101,110,116,58,32,0
_S48: dw 67,97,116,97,108,111,103,115,92,0
_S303: dw 70,117,110,99,116,105,111,110,58,32,68,105,115,112,108,97,121,79,98,106,101,99,116,40,87,105,110,100,111,119,73,68,44,32,42,100,97,116,97,44,32,115,105,122,101,41,0
_S559: dw 67,111,109,112,105,108,101,114,115,92,83,99,105,110,116,105,108,108,97,46,100,108,108,0
_S314: dw 67,97,110,110,111,116,32,108,111,97,100,32,116,104,101,32,68,76,76,33,0
_S147: dw 32,32,69,110,99,114,121,112,116,105,111,110,58,32,0
_S332: dw 80,117,114,105,102,105,101,114,84,105,116,108,101,0
_S39: dw 67,114,101,97,116,111,114,0
_S443: dw 73,115,68,101,98,117,103,103,101,114,77,97,120,105,109,105,122,101,100,0
_S1: dw 67,111,117,114,105,101,114,0
_S577: dw 78,69,84,87,79,82,75,0
_S217: dw 82,101,103,105,115,116,101,114,115,0
_S280: dw 78,111,80,114,111,99,101,100,117,114,101,0
_S561: dw 67,111,109,112,105,108,101,114,115,92,59,0
_S269: dw 76,105,110,101,0
_S46: dw 80,117,114,101,66,97,115,105,99,0
_S125: dw 67,111,110,110,101,99,116,105,111,110,68,101,110,105,101,100,0
_S177: dw 13,10,13,10,0
_S491: dw 87,97,116,99,104,76,105,115,116,87,105,110,100,111,119,88,0
_S492: dw 87,97,116,99,104,76,105,115,116,87,105,110,100,111,119,89,0
_S285: dw 65,100,100,86,97,114,105,97,98,108,101,0
pb_public PB_NullString
  dw     0
public _SYS_StaticStringEnd
_SYS_StaticStringEnd:
pb_align 8
F1: dd 1149239296
F2: dd 1233125376
F3: dd 1317011456
F4: dd 1120403456
F5: dd 1085695590
F6: dd 1148846080
F7: dd 1065353216
F8: dd 1073741824
F9: dd 1084227584
F10: dd 1092616192
F11: dd 1101004800
F12: dd 1103626240
F13: dd 1112014848
F14: dd 1088421888
D1: dd 0,0
D2: dd 0,1072693248
D3: dd 0,1076101120
D4: dd 0,1074266112
D5: dd 0,-1074790400
D6: dd 0,1073741824
D7: dd 0,1077805056
D8: dd 1030792151,1072682762
D9: dd 1717986918,1072850534
D10: dd 858993460,1072378675
D11: dd -1998362383,1055193269
D12: dd 1202590843,1065646817
pb_align 8
pb_align 8
s_s:
  dq     0
  dq     -1
s_languageinfo:
  dq     0
  dq     8
  dq     16
  dq     24
  dq     32
  dq     -1
s_string:
  dq     0
  dq     -1
s_variablegadget_itemlist:
  dq     -2,0,0,34,s_variablegadget_entry
  dq     -1
s_debugger_librarylist:
  dq     -2,0,0,28,s_debugger_librarydata
  dq     -1
s_databreakpoint:
  dq     16
  dq     24
  dq     -1
s_variablegadget_entry:
  dq     10
  dq     18
  dq     26
  dq     -1
s_debuggerdata:
  dq     80
  dq     -2,36,308,8,s_s
  dq     788
  dq     -4,800,8,1,8,s_s
  dq     -1
s_network_communication:
  dq     8
  dq     16
  dq     132
  dq     -1
s_functionentry:
  dq     0
  dq     8
  dq     -1
s_winpipe_communication:
  dq     8
  dq     16
  dq     -1
s_debugger_librarydata:
  dq     0
  dq     8
  dq     16
  dq     -1
s_libraryviewerplugin:
  dq     0
  dq     -1
s_languagegroup:
  dq     0
  dq     -1
s_displayedsource:
  dq     0
  dq     -1
pb_align 8
; 
section '.bss' readable writeable
_PB_BSSSection:
pb_bssalign 8
; 
I_BSSStart:
_PB_MemoryBase:
PB_MemoryBase: rq 1
_PB_Instance:
PB_Instance: rq 1
PB_ExitCode: rq 1
; 
pb_bssalign 8
v_Standalone_Quit rq 1
v_DebugSystemMessages rq 1
v_Image_Minimize rq 1
v_AutoOpenProfiler rq 1
v_ConstantListSize rq 1
v_NbLanguageStrings rq 1
v_Shortcut_Stop rq 1
v_WatchListWindowWidth rq 1
p_PureKeywordColor rq 1
v_Profiler_Select rq 1
p_BadEscapeColor rq 1
v_MemoryViewerFile$ rq 1
v_NetworkPass$ rq 1
v_DebuggerWarningColor rq 1
v_AutoOpenDataBreakpoints rq 1
v_DebuggerTimeout rq 1
v_IsMouseDwelling rq 1
v_HistoryWindowHeight rq 1
v_ExeNameU$ rq 1
v_AutoOpenAsmWindow rq 1
p_ActiveSource rq 1
v_WatchListWindowHeight rq 1
p_LabelColor rq 1
v_WinPipe_Mutex rq 1
v_ShowWhitespace rq 1
v_KnownConstant$ rq 1
v_EditorFontSize rq 1
p_NumberColor rq 1
v_EventID rq 1
v_AutoOpenVariableViewer rq 1
v_VariableWindowWidth rq 1
v_DebuggerMainWindow rq 1
v_Image_Maximize rq 1
v_MemoryViewerX rq 1
v_MemoryViewerY rq 1
p_KeywordExtends rq 1
v_Network_Thread rq 1
v_NetworkMode rq 1
v_DebugWindowWidth rq 1
v_ProfilerRunAtStart rq 1
v_AutoStackUpdate rq 1
v_Shortcut_Run rq 1
p_CursorColor rq 1
v_SelectionColor rq 1
v_PreferenceFile$ rq 1
v_RemoveDataBreakpoints rq 1
v_VariableIsHex rq 1
v_AsmWindowMaximize rq 1
v_CustomKeywordFile$ rq 1
v_ProfilerSplitter rq 1
v_HistoryWindowX rq 1
v_HistoryWindowY rq 1
v_MouseDwellPosition rq 1
p_StringColor rq 1
v_VariableWindowX rq 1
v_VariableWindowY rq 1
v_DebuggerMainWindowX rq 1
v_DebuggerMainWindowY rq 1
v_MemoryViewerMaximize rq 1
v_LibraryViewerHeight rq 1
v_DebugOutFontID rq 1
v_DebugOutFont$ rq 1
v_LabelColor rq 1
v_VariableViewerMaximize rq 1
v_LibraryViewerSplitter1 rq 1
v_DebugWindowMaximize rq 1
PB_DataPointer rq 1
v_LibraryViewerSplitter2 rq 1
v_ASMKeyword$ rq 1
p_ConstantColor rq 1
v_LibraryViewerX rq 1
v_LibraryViewerY rq 1
v_ProfilerMaximize rq 1
v_BasicKeywordColor rq 1
v_EditorFontID rq 1
p_CurrentLineColor rq 1
v_IsMiniDebugger rq 1
v_BadBraceColor rq 1
v_PointerColor rq 1
v_DebuggerBreakpointSymbolColor rq 1
v_DebugOutputToErrorLog rq 1
v_NbBasicFunctions rq 1
v_CurrentSource rq 1
v_PurifierSettings$ rq 1
v_DebugOutFontSize rq 1
v_i rq 1
v_IsDebuggerMaximized rq 1
v_RegisterIsHex rq 1
v_DebugIsHex rq 1
v_NbLanguageGroups rq 1
v_NextDataBreakPointID rq 1
v_WarningMode rq 1
v_Network_Initialized rq 1
v_NbSourceFiles rq 1
v_WatchListWindowX rq 1
v_WatchListWindowY rq 1
v_SeparatorColor rq 1
p_LineNumberBackColor rq 1
v_StructureColor rq 1
p_DebuggerData rq 1
v_Profiler_CaptureMode rq 1
v_MemoryIsHex rq 1
v_ShowIndentGuides rq 1
v_Shortcut_StepOut rq 1
p_PointerColor rq 1
v_VariableGadget_NodeOpen rq 1
v_PureKeywordColor rq 1
v_Shortcut_Step rq 1
v_CustomKeyword$ rq 1
v_ProfilerX rq 1
v_ProfilerY rq 1
v_DebuggerBreakPointColor rq 1
v_Profiler_Zoomout rq 1
v_EnableMenuIcons rq 1
v_HighlightGadget rq 1
v_Value$ rq 1
v_OptionSep rq 1
v_WatchListWindowMaximize rq 1
p_BackgroundColor rq 1
v_IsVariableExpression rq 1
p_ModuleColor rq 1
v_BackgroundColor rq 1
v_DebuggerWarningSymbolColor rq 1
v_WhitespaceColor rq 1
v_DefaultEditorFontName$ rq 1
v_Pass$ rq 1
v_DebugTimeStamp rq 1
v_DataBreakpointWindowWidth rq 1
v_OperatorColor rq 1
v_AsmWindowX rq 1
v_AsmWindowY rq 1
v_EnableCaseCorrection rq 1
v_CallDebuggerOnStart rq 1
p_SelectionColor rq 1
p_ASMKeywordColor rq 1
v_AsmWindowHeight rq 1
v_EnableColoring rq 1
v_ASMKeywordColor rq 1
v_DebuggerLineSymbolColor rq 1
v_DebuggerMainWindowHeight rq 1
v_Profiler_Arrow rq 1
v_NetworkPort rq 1
v_Profiler_DownX rq 1
v_Profiler_DownY rq 1
v_LibraryViewerMaximize rq 1
v_PortSep rq 1
v_MainFileName$ rq 1
v_DataBreakpointWindowHeight rq 1
v_CurrentLanguage$ rq 1
v_DebugWindowHeight rq 1
v_DebuggerLineColor rq 1
v_HistoryWindowWidth rq 1
v_NumberColor rq 1
v_PureBasicPath$ rq 1
v_DebuggerMainWindowWidth rq 1
v_ProfilerWidth rq 1
p_LineNumberColor rq 1
v_ProfilerHeight rq 1
p_CustomKeywordColor rq 1
v_LineNumberColor rq 1
v_CurrentLineColor rq 1
v_StatusbarHeight rq 1
p_NormalTextColor rq 1
v_Profiler_Zoomall rq 1
p_VariableGadget_Used rq 1
v_NormalTextColor rq 1
v_VariableGadget_NodeClose rq 1
v_PurifierWindowX rq 1
v_PurifierWindowY rq 1
v_DebugOutFontStyle rq 1
v_Parameter$ rq 1
v_CursorColor rq 1
v_Profiler_Zoomin rq 1
v_SourceStringFormat rq 1
v_DebuggerOnTop rq 1
v_Profiler_Cross rq 1
v_EditorFontName$ rq 1
v_NbApiFunctions rq 1
p_KeywordInterface rq 1
v_BasicKeyword$ rq 1
v_AsmWindowWidth rq 1
v_CustomWarningMode rq 1
v_Option$ rq 1
v_WinPipe_Thread rq 1
v_StringColor rq 1
v_AutoOpenMemoryViewer rq 1
v_NetworkHost$ rq 1
v_HistoryMaximize rq 1
v_AutoOpenLibraryViewer rq 1
p_SeparatorColor rq 1
v_EditorBoldFontName$ rq 1
v_CustomKeywordColor rq 1
v_NbCustomKeywords rq 1
v_LogTimeStamp rq 1
v_Profiler_OldX rq 1
v_Profiler_OldY rq 1
p_StructureColor rq 1
v_Line$ rq 1
v_NonNumber rq 1
v_DebuggerErrorSymbolColor rq 1
v_CommandLine$ rq 1
p_OperatorColor rq 1
v_AutoOpenDebugOutput rq 1
v_MemoryDisplayType rq 1
v_LanguageFile$ rq 1
v_DebuggerUseFIFO rq 1
v_MemoryViewerWidth rq 1
v_CommentColor rq 1
v_Shortcut_StepOver rq 1
v_StackIsHex rq 1
v_MemoryViewerHeight rq 1
v_DebuggerErrorColor rq 1
v_OptionsFile$ rq 1
p_KeywordStructure rq 1
v_DebuggerOutputFile$ rq 1
v_EnableKeywordBolding rq 1
v_DataBreakpointWindowX rq 1
v_DataBreakpointWindowY rq 1
v_LineNumberBackColor rq 1
v_AutoOpenWatchlist rq 1
v_AutoOpenPurifier rq 1
v_CallDebuggerOnEnd rq 1
v_DebuggerMemorizeWindows rq 1
v_Profiler_CurrentLine rq 1
v_LibraryViewerWidth rq 1
v_Network_Mutex rq 1
v_DebugOutUseFont rq 1
v_DebuggerBringToTop rq 1
p_CommentColor rq 1
p_MarkerColor rq 1
v_VariableWindowHeight rq 1
v_SelectionFrontColor rq 1
v_PreviousPath$ rq 1
v_DisplayFullPath rq 1
v_ExeName$ rq 1
v_ParseString_NbTokens rq 1
v_MemoryOneColumnOnly rq 1
v_DebugWindowX rq 1
v_DebugWindowY rq 1
v_DataBreakpointWindowMaximize rq 1
v_CurrentDirectory$ rq 1
v_EditorFontStyle rq 1
v_ModuleColor rq 1
v_TabLength rq 1
v_AutoOpenHistory rq 1
v_ConstantColor rq 1
p_BasicKeywordColor rq 1
v_NbASMKeywords rd 1
pb_bssalign 8
pb_bssalign 8
so_PureBasicConfigPath.v_ConfigPath$ rq 1
so_ToAscii.p_Buffer rq 1
so_SetSortArrow_NoTheme.v_UpImage rq 1
so_SetSortArrow_NoTheme.v_DownImage rq 1
so_GetUniqueID.v_UniqueID rq 1
so_InitSyntaxHighlighting.v_APIFunctionsRead rq 1
so_VariableGadget_Create.v_IsInitialized rq 1
so_VariableWindowEvents.v_PopupVariableGadget rq 1
so_LibraryViewer_Init_Log.v_LastFileName$ rq 1
so_LibraryViewer_Init.v_IsInitialized rq 1
so_ProfilerWindowEvents.v_DragItem rq 1
so_Language.v_Group rd 1
pb_bssalign 8
pb_bssalign 8
a_SourceFiles:
  rq     1
  rq     1
ap_ParseString_Tokens:
  rq     1
  rq     1
a_LanguageGroups:
  rq     1
  rq     1
a_LanguageStrings:
  rq     1
  rq     1
a_LanguageNames:
  rq     1
  rq     1
a_ValidCharacters:
  rq     1
  rq     1
a_BasicKeywordsHT:
  rq     1
  rq     1
a_BasicKeywords:
  rq     1
  rq     1
a_BasicKeywordsReal:
  rq     1
  rq     1
a_BasicKeywordsEndKeywords:
  rq     1
  rq     1
a_BasicKeywordsSpaces:
  rq     1
  rq     1
a_CustomKeywords:
  rq     1
  rq     1
a_CustomKeywordsHT:
  rq     1
  rq     1
a_ConstantList:
  rq     1
  rq     1
a_ConstantHT:
  rq     1
  rq     1
  rq     1
a_ASMKeywordsHT:
  rq     1
  rq     1
a_APIFunctionsHT:
  rq     1
  rq     1
a_ASMKeywords:
  rq     1
  rq     1
a_BasicFunctions:
  rq     1
  rq     1
a_APIFunctions:
  rq     1
  rq     1
a_VariableGadget_Icons:
  rq     1
  rq     1
a_MemoryViewer_Chars:
  rq     1
  rq     1
t_RunningDebuggers rq 2
t_DelayedActions rq 2
t_Watchlist rq 2
t_BreakpointStrings rq 2
t_Breakpoints rq 2
t_CustomKeywordList rq 2
t_AvailableLanguages rq 2
t_VariableGadget_List rq 2
t_WinPipe_Data rq 2
t_Network_Data rq 2
t_LibraryPlugins rq 2
m_BasicFunctionMap rq 1
I_BSSEnd:
section '.data' data readable writeable
l_sortarrowimage:
PB_DataSectionStart:
  db     0,0,0,0,0,0,0,0,0,0
  db     0,0,0,0,0,0,0,0,0,0
  db     0,0,0,0,0,0,0,0,0,0
  db     1,1,1,1,1,1,1,1,1,1
  db     0,1,1,1,1,1,1,1,1,0
  db     0,0,1,1,1,1,1,1,0,0
  db     0,0,0,1,1,1,1,0,0,0
  db     0,0,0,0,1,1,0,0,0,0
  db     0,0,0,0,0,0,0,0,0,0
  db     0,0,0,0,0,0,0,0,0,0
l_language:
  dw     95,71,82,79,85,80,95,0,77,101,110,117,84,105,116,108,101,0
  dw     70,105,108,101,0,38,70,105,108,101,0
  dw     69,100,105,116,0,38,69,100,105,116,0
  dw     80,114,111,106,101,99,116,0,38,80,114,111,106,101,99,116,0
  dw     70,111,114,109,0,70,38,111,114,109,0
  dw     67,111,109,112,105,108,101,114,0,38,67,111,109,112,105,108,101,114,0
  dw     68,101,98,117,103,103,101,114,0,38,68,101,98,117,103,103,101,114,0
  dw     84,111,111,108,115,0,38,84,111,111,108,115,0
  dw     72,101,108,112,0,38,72,101,108,112,0
  dw     95,71,82,79,85,80,95,0,77,101,110,117,73,116,101,109,0
  dw     78,101,119,0,38,78,101,119,0
  dw     79,112,101,110,0,38,79,112,101,110,46,46,46,0
  dw     83,97,118,101,0,38,83,97,118,101,0
  dw     83,97,118,101,65,115,0,83,97,118,101,32,38,65,115,46,46,46,0
  dw     83,97,118,101,65,108,108,0,83,97,38,118,101,32,65,108,108,0
  dw     82,101,108,111,97,100,0,82,38,101,108,111,97,100,0
  dw     67,108,111,115,101,0,38,67,108,111,115,101,0
  dw     67,108,111,115,101,65,108,108,0,67,38,108,111,115,101,32,65,108,108,0
  dw     68,105,102,102,67,117,114,114,101,110,116,0,86,105,101,119,32,99,104,97,110,38,103,101,115,0
  dw     70,105,108,101,70,111,114,109,97,116,0,70,38,105,108,101,32,102,111,114,109,97,116,0
  dw     69,110,99,111,100,105,110,103,80,108,97,105,110,0,69,110,99,111,100,105,110,103,58,32,38,80,108,97,105,110,32,84,101,120,116,0
  dw     69,110,99,111,100,105,110,103,85,116,102,56,0,69,110,99,111,100,105,110,103,58,32,38,85,116,102,56,0
  dw     78,101,119,108,105,110,101,87,105,110,100,111,119,115,0,78,101,119,108,105,110,101,58,32,38,87,105,110,100,111,119,115,32,40,67,82,76,70,41,0
  dw     78,101,119,108,105,110,101,76,105,110,117,120,0,78,101,119,108,105,110,101,58,32,38,76,105,110,117,120,32,40,76,70,41,0
  dw     78,101,119,108,105,110,101,77,97,99,79,83,0,78,101,119,108,105,110,101,58,32,38,77,97,99,79,83,32,40,67,82,41,0
  dw     83,111,114,116,83,111,117,114,99,101,115,0,83,111,114,38,116,32,83,111,117,114,99,101,115,46,46,46,0
  dw     80,114,101,102,101,114,101,110,99,101,115,0,38,80,114,101,102,101,114,101,110,99,101,115,46,46,46,0
  dw     82,101,99,101,110,116,70,105,108,101,115,0,38,82,101,99,101,110,116,32,70,105,108,101,115,0
  dw     69,100,105,116,72,105,115,116,111,114,121,0,83,101,115,115,105,111,110,32,38,72,105,115,116,111,114,121,0
  dw     81,117,105,116,0,38,81,117,105,116,0
  dw     85,110,100,111,0,38,85,110,100,111,0
  dw     82,101,100,111,0,38,82,101,100,111,0
  dw     67,117,116,0,67,117,38,116,0
  dw     67,111,112,121,0,38,67,111,112,121,0
  dw     80,97,115,116,101,0,38,80,97,115,116,101,0
  dw     73,110,115,101,114,116,67,111,109,109,101,110,116,0,73,38,110,115,101,114,116,32,99,111,109,109,101,110,116,115,0
  dw     82,101,109,111,118,101,67,111,109,109,101,110,116,0,82,101,38,109,111,118,101,32,99,111,109,109,101,110,116,115,0
  dw     65,117,116,111,73,110,100,101,110,116,0,70,111,114,109,97,116,32,105,110,100,101,110,116,97,116,105,111,110,0
  dw     83,101,108,101,99,116,65,108,108,0,83,101,108,101,99,116,32,38,65,108,108,0
  dw     71,111,116,111,0,38,71,111,116,111,46,46,46,0
  dw     74,117,109,112,84,111,75,101,121,119,111,114,100,0,71,111,116,111,32,109,97,116,99,104,105,110,103,32,38,75,101,121,119,111,114,100,0
  dw     76,97,115,116,86,105,101,119,101,100,76,105,110,101,0,71,111,116,111,32,114,101,99,101,110,116,32,38,76,105,110,101,0
  dw     84,111,103,103,108,101,84,104,105,115,70,111,108,100,0,84,111,103,103,108,101,32,99,117,114,114,101,110,116,32,102,111,108,38,100,0
  dw     84,111,103,103,108,101,70,111,108,100,115,0,84,38,111,103,103,108,101,32,97,108,108,32,102,111,108,100,115,0
  dw     65,100,100,77,97,114,107,101,114,0,65,100,100,47,82,101,109,111,118,101,32,38,77,97,114,107,101,114,0
  dw     74,117,109,112,84,111,77,97,114,107,101,114,0,38,74,117,109,112,32,116,111,32,77,97,114,107,101,114,0
  dw     67,108,101,97,114,77,97,114,107,101,114,115,0,67,108,38,101,97,114,32,77,97,114,107,101,114,115,0
  dw     70,105,110,100,0,38,70,105,110,100,47,82,101,112,108,97,99,101,46,46,46,0
  dw     70,105,110,100,78,101,120,116,0,70,105,110,100,32,38,78,101,120,116,0
  dw     70,105,110,100,80,114,101,118,105,111,117,115,0,70,105,110,100,32,38,80,114,101,118,105,111,117,115,0
  dw     70,105,110,100,73,110,70,105,108,101,115,0,70,105,110,100,32,38,105,110,32,70,105,108,101,115,46,46,46,0
  dw     78,101,119,80,114,111,106,101,99,116,0,38,78,101,119,32,80,114,111,106,101,99,116,46,46,46,0
  dw     79,112,101,110,80,114,111,106,101,99,116,0,38,79,112,101,110,32,80,114,111,106,101,99,116,46,46,46,0
  dw     82,101,99,101,110,116,80,114,111,106,101,99,116,115,0,82,101,99,101,110,116,32,38,80,114,111,106,101,99,116,115,0
  dw     67,108,111,115,101,80,114,111,106,101,99,116,0,38,67,108,111,115,101,32,80,114,111,106,101,99,116,0
  dw     80,114,111,106,101,99,116,79,112,116,105,111,110,115,0,80,114,111,106,101,99,116,32,38,79,112,116,105,111,110,115,46,46,46,0
  dw     65,100,100,80,114,111,106,101,99,116,70,105,108,101,0,38,65,100,100,32,70,105,108,101,32,116,111,32,80,114,111,106,101,99,116,0
  dw     82,101,109,111,118,101,80,114,111,106,101,99,116,70,105,108,101,0,38,82,101,109,111,118,101,32,70,105,108,101,32,102,114,111,109,32,80,114,111,106,101,99,116,0
  dw     66,97,99,107,117,112,77,97,110,97,103,101,114,0,38,77,97,110,97,103,101,32,66,97,99,107,117,112,115,46,46,46,0
  dw     77,97,107,101,66,97,99,107,117,112,0,77,97,107,101,32,38,66,97,99,107,117,112,46,46,46,0
  dw     84,111,100,111,76,105,115,116,0,38,84,97,115,107,115,46,46,46,0
  dw     79,112,101,110,80,114,111,106,101,99,116,70,111,108,100,101,114,0,79,112,101,110,32,80,114,111,106,101,99,116,32,38,70,111,108,100,101,114,0
  dw     78,101,119,70,111,114,109,0,38,78,101,119,32,70,111,114,109,0
  dw     70,111,114,109,83,119,105,116,99,104,0,38,83,119,105,116,99,104,32,67,111,100,101,47,68,101,115,105,103,110,32,86,105,101,119,0
  dw     70,111,114,109,68,117,112,108,105,99,97,116,101,0,38,68,117,112,108,105,99,97,116,101,32,79,98,106,101,99,116,0
  dw     70,111,114,109,73,109,97,103,101,77,97,110,97,103,101,114,0,38,73,109,97,103,101,32,77,97,110,97,103,101,114,46,46,46,0
  dw     67,111,109,112,105,108,101,0,38,67,111,109,112,105,108,101,47,82,117,110,0
  dw     82,117,110,69,120,101,0,38,82,117,110,0
  dw     83,121,110,116,97,120,67,104,101,99,107,0,38,83,121,110,116,97,120,32,99,104,101,99,107,0
  dw     68,101,98,117,103,103,101,114,67,111,109,112,105,108,101,0,67,111,109,112,105,108,101,32,119,105,116,104,32,68,101,98,117,103,103,101,114,0
  dw     78,111,68,101,98,117,103,103,101,114,67,111,109,112,105,108,101,0,67,111,109,112,105,108,101,32,119,105,116,104,111,117,116,32,68,101,98,117,103,103,101,114,0
  dw     82,101,115,116,97,114,116,67,111,109,112,105,108,101,114,0,82,101,38,115,116,97,114,116,32,67,111,109,112,105,108,101,114,0
  dw     67,111,109,112,105,108,101,114,79,112,116,105,111,110,115,0,67,111,109,112,105,108,101,114,32,38,79,112,116,105,111,110,115,46,46,46,0
  dw     67,114,101,97,116,101,69,88,69,0,67,114,101,97,116,101,32,38,69,120,101,99,117,116,97,98,108,101,46,46,46,0
  dw     83,101,116,68,101,102,97,117,108,116,84,97,114,103,101,116,0,83,101,116,32,38,100,101,102,97,117,108,116,32,84,97,114,103,101,116,0
  dw     66,117,105,108,100,84,97,114,103,101,116,0,66,117,105,108,100,32,38,84,97,114,103,101,116,0
  dw     66,117,105,108,100,65,108,108,84,97,114,103,101,116,115,0,38,66,117,105,108,100,32,97,108,108,32,84,97,114,103,101,116,115,0
  dw     68,101,98,117,103,103,101,114,0,85,115,101,32,38,68,101,98,117,103,103,101,114,0
  dw     83,116,111,112,0,38,83,116,111,112,0
  dw     82,117,110,0,38,67,111,110,116,105,110,117,101,0
  dw     75,105,108,108,0,38,75,105,108,108,32,80,114,111,103,114,97,109,0
  dw     83,116,101,112,0,83,38,116,101,112,0
  dw     83,116,101,112,88,0,83,116,101,112,32,60,38,110,62,0
  dw     83,116,101,112,79,118,101,114,0,83,116,101,38,112,32,79,118,101,114,0
  dw     83,116,101,112,79,117,116,0,83,116,101,112,32,79,38,117,116,0
  dw     66,114,101,97,107,80,111,105,110,116,0,38,66,114,101,97,107,112,111,105,110,116,0
  dw     66,114,101,97,107,67,108,101,97,114,0,67,108,101,97,114,32,66,38,114,101,97,107,112,111,105,110,116,115,0
  dw     68,97,116,97,66,114,101,97,107,80,111,105,110,116,115,0,68,97,116,97,32,66,114,101,97,107,112,111,38,105,110,116,115,0
  dw     69,114,114,111,114,76,111,103,0,38,69,114,114,111,114,32,76,111,103,0
  dw     83,104,111,119,76,111,103,0,38,83,104,111,119,32,69,114,114,111,114,32,76,111,103,0
  dw     67,108,101,97,114,76,111,103,0,38,67,108,101,97,114,32,76,111,103,0
  dw     67,111,112,121,76,111,103,0,67,38,111,112,121,32,76,111,103,0
  dw     67,108,101,97,114,69,114,114,111,114,77,97,114,107,115,0,67,108,101,97,114,32,38,69,114,114,111,114,32,77,97,114,107,115,0
  dw     68,101,98,117,103,79,117,116,112,117,116,0,68,101,98,117,103,32,38,79,117,116,112,117,116,0
  dw     87,97,116,99,104,76,105,115,116,0,38,87,97,116,99,104,108,105,115,116,0
  dw     86,97,114,105,97,98,108,101,76,105,115,116,0,38,86,97,114,105,97,98,108,101,32,86,105,101,119,101,114,0
  dw     80,114,111,102,105,108,101,114,0,80,114,111,38,102,105,108,101,114,0
  dw     72,105,115,116,111,114,121,0,67,97,38,108,108,115,116,97,99,107,0
  dw     77,101,109,111,114,121,0,38,77,101,109,111,114,121,32,86,105,101,119,101,114,0
  dw     76,105,98,114,97,114,121,86,105,101,119,101,114,0,38,76,105,98,114,97,114,121,32,86,105,101,119,101,114,0
  dw     80,117,114,105,102,105,101,114,0,80,117,114,105,102,105,101,114,0
  dw     68,101,98,117,103,65,115,109,0,38,65,115,115,101,109,98,108,121,0
  dw     86,105,115,117,97,108,68,101,115,105,103,110,101,114,0,38,70,111,114,109,32,68,101,115,105,103,110,101,114,0
  dw     83,116,114,117,99,116,117,114,101,86,105,101,119,101,114,0,38,83,116,114,117,99,116,117,114,101,32,86,105,101,119,101,114,0
  dw     70,105,108,101,86,105,101,119,101,114,0,38,70,105,108,101,32,86,105,101,119,101,114,0
  dw     86,97,114,105,97,98,108,101,86,105,101,119,101,114,0,38,86,97,114,105,97,98,108,101,32,86,105,101,119,101,114,0
  dw     67,111,108,111,114,80,105,99,107,101,114,0,38,67,111,108,111,114,32,80,105,99,107,101,114,0
  dw     65,115,99,105,105,84,97,98,108,101,0,38,67,104,97,114,97,99,116,101,114,32,84,97,98,108,101,0
  dw     69,120,112,108,111,114,101,114,0,38,69,120,112,108,111,114,101,114,0
  dw     80,114,111,99,101,100,117,114,101,66,114,111,119,115,101,114,0,38,80,114,111,99,101,100,117,114,101,32,66,114,111,119,115,101,114,0
  dw     73,115,115,117,101,115,0,38,73,115,115,117,101,32,66,114,111,119,115,101,114,0
  dw     84,101,109,112,108,97,116,101,115,0,38,84,101,109,112,108,97,116,101,115,0
  dw     80,114,111,106,101,99,116,80,97,110,101,108,0,80,38,114,111,106,101,99,116,32,80,97,110,101,108,0
  dw     68,105,102,102,0,67,38,111,109,112,97,114,101,32,70,105,108,101,115,47,70,111,108,100,101,114,115,0
  dw     65,100,100,84,111,111,108,115,0,67,111,110,102,105,103,117,114,101,32,38,84,111,111,108,115,46,46,46,0
  dw     72,101,108,112,0,38,72,101,108,112,46,46,46,0
  dw     85,112,100,97,116,101,67,104,101,99,107,0,38,67,104,101,99,107,32,102,111,114,32,117,112,100,97,116,101,115,0
  dw     69,120,116,101,114,110,97,108,72,101,108,112,0,38,69,120,116,101,114,110,97,108,32,72,101,108,112,0
  dw     65,98,111,117,116,0,38,65,98,111,117,116,0
  dw     95,71,82,79,85,80,95,0,84,111,111,108,115,80,97,110,101,108,0
  dw     80,114,111,99,101,100,117,114,101,66,114,111,119,115,101,114,83,104,111,114,116,0,80,114,111,99,101,100,117,114,101,115,0
  dw     80,114,111,99,101,100,117,114,101,66,114,111,119,115,101,114,76,111,110,103,0,80,114,111,99,101,100,117,114,101,32,66,114,111,119,115,101,114,0
  dw     69,120,112,108,111,114,101,114,0,69,120,112,108,111,114,101,114,0
  dw     65,115,99,105,105,84,97,98,108,101,0,67,104,97,114,97,99,116,101,114,32,84,97,98,108,101,0
  dw     86,97,114,105,97,98,108,101,86,105,101,119,101,114,83,104,111,114,116,0,86,97,114,105,97,98,108,101,115,0
  dw     86,97,114,105,97,98,108,101,86,105,101,119,101,114,76,111,110,103,0,86,97,114,105,97,98,108,101,32,86,105,101,119,101,114,0
  dw     80,114,111,106,101,99,116,80,97,110,101,108,83,104,111,114,116,0,80,114,111,106,101,99,116,0
  dw     80,114,111,106,101,99,116,80,97,110,101,108,76,111,110,103,0,80,114,111,106,101,99,116,32,80,97,110,101,108,0
  dw     70,111,114,109,83,104,111,114,116,0,70,111,114,109,0
  dw     70,111,114,109,76,111,110,103,0,70,111,114,109,32,80,97,110,101,108,0
  dw     72,101,108,112,84,111,111,108,83,104,111,114,116,0,72,101,108,112,0
  dw     72,101,108,112,84,111,111,108,76,111,110,103,0,72,101,108,112,32,84,111,111,108,0
  dw     67,111,108,111,114,80,105,99,107,101,114,0,67,111,108,111,114,32,80,105,99,107,101,114,0
  dw     77,111,100,101,95,82,71,66,0,82,71,66,0
  dw     77,111,100,101,95,72,83,76,0,72,83,76,0
  dw     77,111,100,101,95,72,83,86,0,72,83,86,0
  dw     77,111,100,101,95,87,104,101,101,108,0,87,104,101,101,108,0
  dw     77,111,100,101,95,80,97,108,101,116,116,101,0,80,97,108,101,116,116,101,0
  dw     77,111,100,101,95,78,97,109,101,0,78,97,109,101,0
  dw     78,111,77,97,116,99,104,0,78,111,32,109,97,116,99,104,101,115,32,102,111,117,110,100,46,0
  dw     85,115,101,65,108,112,104,97,0,73,110,99,108,117,100,101,32,97,108,112,104,97,32,99,104,97,110,110,101,108,0
  dw     67,111,108,111,114,95,73,110,115,101,114,116,0,73,110,115,101,114,116,32,67,111,108,111,114,0
  dw     67,111,108,111,114,95,82,71,66,0,73,110,115,101,114,116,32,82,71,66,0
  dw     67,111,108,111,114,95,83,97,118,101,0,83,97,118,101,32,67,111,108,111,114,0
  dw     67,111,108,111,114,95,70,105,108,116,101,114,0,70,105,108,116,101,114,0
  dw     86,97,114,105,97,98,108,101,115,0,86,97,114,105,97,98,108,101,115,0
  dw     65,114,114,97,121,115,0,65,114,114,97,121,115,0
  dw     76,105,110,107,101,100,76,105,115,116,115,0,76,105,110,107,101,100,76,105,115,116,115,0
  dw     83,116,114,117,99,116,117,114,101,115,0,83,116,114,117,99,116,117,114,101,115,0
  dw     73,110,116,101,114,102,97,99,101,115,0,73,110,116,101,114,102,97,99,101,115,0
  dw     67,111,110,115,116,97,110,116,115,0,67,111,110,115,116,97,110,116,115,0
  dw     65,108,108,83,111,117,114,99,101,115,0,68,105,115,112,108,97,121,32,69,108,101,109,101,110,116,115,32,102,114,111,109,32,97,108,108,32,111,112,101,110,32,115,111,117,114,99,101,115,0
  dw     83,99,97,110,70,111,114,0,83,99,97,110,32,102,111,114,0
  dw     84,101,109,112,108,97,116,101,115,76,111,110,103,0,67,111,100,101,32,84,101,109,112,108,97,116,101,115,0
  dw     84,101,109,112,108,97,116,101,115,83,104,111,114,116,0,84,101,109,112,108,97,116,101,115,0
  dw     70,97,118,111,114,105,116,101,115,0,70,97,118,111,114,105,116,101,115,0
  dw     65,100,100,70,97,118,111,114,105,116,101,0,65,100,100,32,116,111,32,70,97,118,111,114,105,116,101,115,0
  dw     82,101,109,111,118,101,70,97,118,111,114,105,116,101,0,82,101,109,111,118,101,32,102,114,111,109,32,70,97,118,111,114,105,116,101,115,0
  dw     73,115,115,117,101,115,83,104,111,114,116,0,73,115,115,117,101,115,0
  dw     73,115,115,117,101,115,76,111,110,103,0,73,115,115,117,101,32,66,114,111,119,115,101,114,0
  dw     80,114,105,111,114,105,116,121,0,80,114,105,111,114,105,116,121,0
  dw     73,115,115,117,101,78,97,109,101,0,73,115,115,117,101,0
  dw     73,115,115,117,101,84,101,120,116,0,84,101,120,116,0
  dw     80,114,105,111,48,0,66,108,111,99,107,101,114,0
  dw     80,114,105,111,49,0,72,105,103,104,0
  dw     80,114,105,111,50,0,78,111,114,109,97,108,0
  dw     80,114,105,111,51,0,76,111,119,0
  dw     80,114,105,111,52,0,73,110,102,111,0
  dw     65,108,108,73,115,115,117,101,115,0,65,108,108,32,105,115,115,117,101,115,0
  dw     83,105,110,103,108,101,70,105,108,101,0,83,104,111,119,32,105,115,115,117,101,115,32,111,102,32,99,117,114,114,101,110,116,32,115,111,117,114,99,101,32,111,110,108,121,0
  dw     77,117,108,116,105,70,105,108,101,0,83,104,111,119,32,105,115,115,117,101,115,32,111,102,32,97,108,108,32,111,112,101,110,32,102,105,108,101,115,47,112,114,111,106,101,99,116,32,102,105,108,101,115,0
  dw     69,120,112,111,114,116,0,69,120,112,111,114,116,32,105,115,115,117,101,32,108,105,115,116,0
  dw     95,71,82,79,85,80,95,0,70,105,108,101,83,116,117,102,102,0
  dw     78,101,119,83,111,117,114,99,101,0,60,78,101,119,62,0
  dw     78,101,119,70,111,114,109,0,60,78,101,119,32,70,111,114,109,62,0
  dw     79,112,101,110,70,105,108,101,84,105,116,108,101,0,67,104,111,111,115,101,32,97,32,102,105,108,101,32,116,111,32,111,112,101,110,46,46,46,0
  dw     83,97,118,101,70,105,108,101,84,105,116,108,101,0,83,97,118,101,32,115,111,117,114,99,101,32,99,111,100,101,32,97,115,46,46,46,0
  dw     80,97,116,116,101,114,110,0,80,117,114,101,66,97,115,105,99,32,70,105,108,101,115,32,40,42,46,112,98,44,32,42,46,112,98,105,44,32,42,46,112,98,112,44,32,42,46,112,98,102,41,124,42,46,112,98,59,42,46,112,98,105,59,42,46,112,98,112,59,42,46,112,98,102,124,80,117,114,101,66,97,115,105,99,32,83,111,117,114,99,101,99,111,100,101,115,32,40,42,46,112,98,41,124,42,46,112,98,124,80,117,114,101,66,97,115,105,99,32,73,110,99,108,117,100,101,102,105,108,101,115,32,40,42,46,112,98,105,41,124,42,46,112,98,105,124,80,117,114,101,66,97,115,105,99,32,80,114,111,106,101,99,116,115,32,40,42,46,112,98,112,41,124,42,46,112,98,112,124,80,117,114,101,98,97,115,105,99,32,70,111,114,109,115,32,40,42,46,112,98,102,41,124,42,46,112,98,102,124,65,108,108,32,70,105,108,101,115,32,40,42,46,42,41,124,42,46,42,0
  dw     83,116,97,116,117,115,76,111,97,100,105,110,103,0,76,111,97,100,105,110,103,32,115,111,117,114,99,101,32,99,111,100,101,46,46,46,0
  dw     83,116,97,116,117,115,76,111,97,100,101,100,0,83,111,117,114,99,101,32,99,111,100,101,32,108,111,97,100,101,100,46,0
  dw     76,111,97,100,69,114,114,111,114,0,67,97,110,110,111,116,32,108,111,97,100,32,83,111,117,114,99,101,32,99,111,100,101,33,0
  dw     77,105,115,99,76,111,97,100,69,114,114,111,114,0,67,97,110,110,111,116,32,108,111,97,100,32,102,105,108,101,33,0
  dw     83,116,97,116,117,115,83,97,118,105,110,103,0,83,97,118,105,110,103,32,115,111,117,114,99,101,32,99,111,100,101,46,46,46,0
  dw     83,116,97,116,117,115,83,97,118,101,100,0,83,111,117,114,99,101,32,99,111,100,101,32,115,97,118,101,100,46,0
  dw     83,97,118,101,69,114,114,111,114,0,67,97,110,110,111,116,32,115,97,118,101,32,83,111,117,114,99,101,32,99,111,100,101,33,0
  dw     70,105,108,101,69,120,105,115,116,115,0,84,104,101,32,102,105,108,101,32,121,111,117,32,115,112,101,99,105,102,105,101,100,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,33,0
  dw     79,118,101,114,87,114,105,116,101,0,68,111,32,121,111,117,32,119,97,110,116,32,116,111,32,111,118,101,114,119,114,105,116,101,32,105,116,63,0
  dw     67,114,101,97,116,101,69,114,114,111,114,0,84,104,101,32,102,105,108,101,32,99,97,110,110,111,116,32,98,101,32,99,114,101,97,116,101,100,33,0
  dw     83,97,118,101,67,111,110,102,105,103,69,114,114,111,114,0,67,97,110,110,111,116,32,115,97,118,101,32,67,111,109,112,105,108,101,114,32,111,112,116,105,111,110,115,32,116,111,32,102,105,108,101,0
  dw     77,111,100,105,102,105,101,100,0,84,104,101,32,102,105,108,101,32,39,37,102,105,108,101,110,97,109,101,37,39,104,97,115,32,98,101,101,110,32,109,111,100,105,102,105,101,100,46,37,110,101,119,108,105,110,101,37,68,111,32,121,111,117,32,119,97,110,116,32,116,111,32,115,97,118,101,32,116,104,101,32,99,104,97,110,103,101,115,63,0
  dw     77,111,100,105,102,105,101,100,78,101,119,0,84,104,105,115,32,110,101,119,32,102,105,108,101,32,104,97,115,32,110,111,116,32,98,101,101,110,32,115,97,118,101,100,32,121,101,116,46,32,68,111,32,121,111,117,32,119,97,110,116,32,116,111,32,115,97,118,101,32,105,116,32,110,111,119,63,0
  dw     82,101,108,111,97,100,77,111,100,105,102,105,101,100,0,84,104,105,115,32,102,105,108,101,32,104,97,115,32,98,101,101,110,32,109,111,100,105,102,105,101,100,46,37,110,101,119,108,105,110,101,37,83,104,111,117,108,100,32,116,104,101,32,99,104,97,110,103,101,115,32,98,101,32,100,105,115,99,97,114,100,101,100,32,98,121,32,114,101,108,111,97,100,105,110,103,32,105,116,63,0
  dw     68,101,108,101,116,101,100,79,110,68,105,115,107,0,84,104,101,32,102,105,108,101,32,39,37,102,105,108,101,110,97,109,101,37,39,32,104,97,115,32,98,101,101,110,32,100,101,108,101,116,101,100,32,102,114,111,109,32,116,104,101,32,100,105,115,107,46,37,110,101,119,108,105,110,101,37,68,111,32,121,111,117,32,119,97,110,116,32,116,111,32,115,97,118,101,32,105,116,32,110,111,119,63,0
  dw     77,111,100,105,102,105,101,100,79,110,68,105,115,107,49,0,84,104,101,32,102,105,108,101,32,39,37,102,105,108,101,110,97,109,101,37,39,32,104,97,115,32,98,101,101,110,32,109,111,100,105,102,105,101,100,32,111,110,32,100,105,115,107,46,37,110,101,119,108,105,110,101,37,68,111,32,121,111,117,32,119,97,110,116,32,116,111,32,114,101,108,111,97,100,32,105,116,32,116,111,32,114,101,102,108,101,99,116,32,116,104,101,115,101,32,99,104,97,110,103,101,115,63,0
  dw     77,111,100,105,102,105,101,100,79,110,68,105,115,107,50,0,84,104,101,32,102,105,108,101,32,39,37,102,105,108,101,110,97,109,101,37,39,32,104,97,115,32,98,101,101,110,32,109,111,100,105,102,105,101,100,32,111,110,32,100,105,115,107,46,37,110,101,119,108,105,110,101,37,68,111,32,121,111,117,32,119,97,110,116,32,116,111,32,100,105,115,99,97,114,100,32,121,111,117,114,32,99,117,114,114,101,110,116,32,99,104,97,110,103,101,115,32,97,110,100,32,114,101,108,111,97,100,32,105,116,32,102,114,111,109,32,100,105,115,107,63,0
  dw     86,105,101,119,68,105,102,102,0,86,105,101,119,32,68,105,102,102,101,114,101,110,99,101,115,0
  dw     82,101,108,111,97,100,0,82,101,108,111,97,100,0
  dw     65,100,100,78,101,119,70,105,108,101,84,105,116,108,101,0,65,100,100,105,110,103,32,97,32,110,101,119,32,112,114,111,106,101,99,116,32,102,105,108,101,46,46,46,0
  dw     65,100,100,78,101,119,70,105,108,101,81,117,101,115,116,105,111,110,0,84,104,101,32,102,105,108,101,32,39,37,102,105,108,101,110,97,109,101,37,39,32,100,111,101,115,110,39,116,32,101,120,105,115,116,115,32,111,110,32,100,105,115,107,46,37,110,101,119,108,105,110,101,37,68,111,32,121,111,117,32,119,97,110,116,32,116,111,32,99,114,101,97,116,101,32,105,116,32,63,0
  dw     65,100,100,78,101,119,70,105,108,101,69,114,114,111,114,0,84,104,101,32,102,105,108,101,32,39,37,102,105,108,101,110,97,109,101,37,39,32,99,97,110,39,116,32,98,101,32,99,114,101,97,116,101,100,32,111,110,32,100,105,115,107,46,0
  dw     69,120,112,111,114,116,73,115,115,117,101,84,105,116,108,101,0,69,120,112,111,114,116,32,105,115,115,117,101,115,32,116,111,46,46,46,0
  dw     69,120,112,111,114,116,73,115,115,117,101,80,97,116,116,101,114,110,0,67,111,109,109,97,32,115,101,112,97,114,97,116,101,100,32,118,97,108,117,101,115,32,40,42,46,99,115,118,41,124,42,46,99,115,118,124,65,108,108,32,102,105,108,101,115,32,40,42,46,42,41,124,42,46,42,0
  dw     95,71,82,79,85,80,95,0,80,114,111,106,101,99,116,0
  dw     84,105,116,108,101,0,80,114,111,106,101,99,116,32,79,112,116,105,111,110,115,0
  dw     84,105,116,108,101,78,101,119,0,67,114,101,97,116,101,32,110,101,119,32,80,114,111,106,101,99,116,0
  dw     84,105,116,108,101,83,97,118,101,0,83,97,118,101,32,112,114,111,106,101,99,116,32,97,115,46,46,46,0
  dw     84,105,116,108,101,79,112,101,110,0,79,112,101,110,32,112,114,111,106,101,99,116,46,46,46,0
  dw     84,105,116,108,101,83,104,111,114,116,0,80,114,111,106,101,99,116,0
  dw     67,111,109,112,105,108,101,114,79,112,116,105,111,110,115,0,67,111,109,112,105,108,101,114,32,79,112,116,105,111,110,115,0
  dw     80,114,111,106,101,99,116,79,112,116,105,111,110,115,0,80,114,111,106,101,99,116,32,79,112,116,105,111,110,115,0
  dw     67,114,101,97,116,101,80,114,111,106,101,99,116,0,67,114,101,97,116,101,0
  dw     68,101,102,97,117,108,116,78,97,109,101,0,78,101,119,32,80,114,111,106,101,99,116,0
  dw     84,97,98,84,105,116,108,101,0,80,114,111,106,101,99,116,0
  dw     79,112,116,105,111,110,84,97,98,0,80,114,111,106,101,99,116,32,79,112,116,105,111,110,115,0
  dw     80,114,111,106,101,99,116,73,110,102,111,0,80,114,111,106,101,99,116,32,73,110,102,111,0
  dw     80,114,111,106,101,99,116,70,105,108,101,0,80,114,111,106,101,99,116,32,70,105,108,101,0
  dw     80,114,111,106,101,99,116,78,97,109,101,0,80,114,111,106,101,99,116,32,78,97,109,101,0
  dw     80,114,111,106,101,99,116,84,97,114,103,101,116,115,0,80,114,111,106,101,99,116,32,84,97,114,103,101,116,115,0
  dw     67,111,109,109,101,110,116,115,0,67,111,109,109,101,110,116,115,0
  dw     76,111,97,100,79,112,116,105,111,110,115,0,76,111,97,100,105,110,103,32,79,112,116,105,111,110,115,0
  dw     83,101,116,68,101,102,97,117,108,116,0,83,101,116,32,97,115,32,100,101,102,97,117,108,116,32,112,114,111,106,101,99,116,32,40,97,108,119,97,121,115,32,111,112,101,110,32,119,104,101,110,32,116,104,101,32,73,68,69,32,115,116,97,114,116,115,41,0
  dw     67,108,111,115,101,65,108,108,70,105,108,101,115,0,67,108,111,115,101,32,97,108,108,32,115,111,117,114,99,101,115,32,119,104,101,110,32,99,108,111,115,105,110,103,32,116,104,101,32,112,114,111,106,101,99,116,0
  dw     87,104,101,110,79,112,101,110,105,110,103,0,87,104,101,110,32,111,112,101,110,105,110,103,32,116,104,101,32,112,114,111,106,101,99,116,46,46,46,0
  dw     79,112,101,110,76,111,97,100,76,97,115,116,0,108,111,97,100,32,97,108,108,32,115,111,117,114,99,101,115,32,116,104,97,116,32,119,101,114,101,32,111,112,101,110,32,108,97,115,116,32,116,105,109,101,0
  dw     79,112,101,110,76,111,97,100,65,108,108,0,108,111,97,100,32,97,108,108,32,115,111,117,114,99,101,115,32,111,102,32,116,104,101,32,112,114,111,106,101,99,116,0
  dw     79,112,101,110,76,111,97,100,68,101,102,97,117,108,116,0,108,111,97,100,32,111,110,108,121,32,115,111,117,114,99,101,115,32,109,97,114,107,101,100,32,105,110,32,39,80,114,111,106,101,99,116,32,70,105,108,101,115,39,0
  dw     79,112,101,110,76,111,97,100,77,97,105,110,0,108,111,97,100,32,111,110,108,121,32,116,104,101,32,109,97,105,110,32,102,105,108,101,32,111,102,32,116,104,101,32,100,101,102,97,117,108,116,32,116,97,114,103,101,116,0
  dw     79,112,101,110,76,111,97,100,78,111,110,101,0,108,111,97,100,32,110,111,32,102,105,108,101,115,0
  dw     70,105,108,101,115,67,104,97,110,103,101,100,0,84,104,101,32,102,111,108,108,111,119,105,110,103,32,102,105,108,101,115,32,119,101,114,101,32,109,111,100,105,102,105,101,100,32,119,104,105,108,101,32,116,104,101,32,112,114,111,106,101,99,116,32,119,97,115,32,99,108,111,115,101,100,0
  dw     70,105,108,101,77,105,115,115,105,110,103,0,84,104,101,32,102,105,108,101,32,39,37,102,105,108,101,110,97,109,101,37,39,32,99,97,110,110,111,116,32,98,101,32,102,111,117,110,100,46,37,110,101,119,108,105,110,101,37,68,111,32,121,111,117,32,119,97,110,116,32,116,111,32,115,101,97,114,99,104,32,102,111,114,32,105,116,63,0
  dw     82,101,109,111,118,101,77,97,110,121,0,68,111,32,121,111,117,32,114,101,97,108,108,121,32,119,97,110,116,32,116,111,32,114,101,109,111,118,101,32,116,104,101,115,101,32,37,99,111,117,110,116,37,32,102,105,108,101,115,32,102,114,111,109,32,116,104,101,32,112,114,111,106,101,99,116,63,0
  dw     70,105,108,101,84,97,98,0,80,114,111,106,101,99,116,32,70,105,108,101,115,0
  dw     86,105,101,119,0,86,105,101,119,0
  dw     70,105,108,101,83,99,97,110,0,83,99,97,110,32,102,105,108,101,32,102,111,114,32,65,117,116,111,99,111,109,112,108,101,116,101,0
  dw     70,105,108,101,76,111,97,100,0,76,111,97,100,32,102,105,108,101,32,119,104,101,110,32,111,112,101,110,105,110,103,32,116,104,101,32,112,114,111,106,101,99,116,0
  dw     70,105,108,101,80,97,110,101,108,0,83,104,111,119,32,102,105,108,101,32,105,110,32,116,104,101,32,80,114,111,106,101,99,116,32,112,97,110,101,108,0
  dw     70,105,108,101,87,97,114,110,0,68,105,115,112,108,97,121,32,97,32,119,97,114,110,105,110,103,32,105,102,32,102,105,108,101,32,99,104,97,110,103,101,100,0
  dw     70,105,108,101,110,97,109,101,0,70,105,108,101,110,97,109,101,0
  dw     70,105,108,101,83,99,97,110,83,104,111,114,116,0,83,99,97,110,0
  dw     70,105,108,101,76,111,97,100,83,104,111,114,116,0,76,111,97,100,0
  dw     70,105,108,101,80,97,110,101,108,83,104,111,114,116,0,80,97,110,101,108,0
  dw     70,105,108,101,87,97,114,110,83,104,111,114,116,0,87,97,114,110,0
  dw     70,105,108,101,83,105,122,101,0,83,105,122,101,0
  dw     70,105,108,101,77,111,100,105,102,105,101,100,0,76,97,115,116,32,77,111,100,105,102,105,101,100,0
  dw     70,105,108,101,68,97,116,101,70,111,114,109,97,116,0,37,109,109,47,37,100,100,47,37,121,121,121,121,32,45,32,37,104,104,58,37,105,105,0
  dw     76,97,115,116,79,112,101,110,0,76,97,115,116,32,111,112,101,110,0
  dw     76,97,115,116,79,112,101,110,84,101,120,116,0,37,100,97,116,101,37,32,98,121,32,37,117,115,101,114,37,32,111,110,32,37,104,111,115,116,37,0
  dw     76,97,115,116,79,112,101,110,69,100,105,116,111,114,0,69,100,105,116,111,114,0
  dw     84,97,114,103,101,116,83,104,111,114,116,0,84,97,114,103,101,116,0
  dw     68,101,98,117,103,83,104,111,114,116,0,68,101,98,117,103,0
  dw     84,104,114,101,97,100,83,104,111,114,116,0,84,104,114,101,97,100,0
  dw     65,115,109,83,104,111,114,116,0,65,115,109,0
  dw     79,110,69,114,114,111,114,83,104,111,114,116,0,79,110,69,114,114,111,114,0
  dw     67,111,109,112,105,108,101,67,111,117,110,116,83,104,111,114,116,0,67,111,109,112,105,108,101,0
  dw     66,117,105,108,100,67,111,117,110,116,83,104,111,114,116,0,66,117,105,108,100,0
  dw     70,111,114,109,97,116,83,104,111,114,116,0,70,111,114,109,97,116,0
  dw     73,110,112,117,116,70,105,108,101,0,73,110,112,117,116,32,70,105,108,101,0
  dw     65,100,100,68,105,114,101,99,116,111,114,121,0,83,104,111,117,108,100,32,116,104,101,32,99,111,110,116,101,110,116,32,111,102,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,100,105,114,101,99,116,111,114,121,32,98,101,32,97,100,100,101,100,32,116,111,32,116,104,101,32,112,114,111,106,101,99,116,32,63,0
  dw     65,100,100,77,97,110,121,70,105,108,101,115,0,68,111,32,121,111,117,32,114,101,97,108,108,121,32,119,97,110,116,32,116,111,32,97,100,100,32,37,102,105,108,101,99,111,117,110,116,37,32,102,105,108,101,115,32,116,111,32,116,104,101,32,112,114,111,106,101,99,116,63,0
  dw     80,97,116,116,101,114,110,0,80,117,114,101,66,97,115,105,99,32,80,114,111,106,101,99,116,115,32,40,42,46,112,98,112,41,124,42,46,112,98,112,124,65,108,108,32,102,105,108,101,115,32,40,42,46,42,41,124,42,46,42,0
  dw     78,101,101,100,78,97,109,101,0,65,32,110,97,109,101,32,109,117,115,116,32,98,101,32,115,112,101,99,105,102,105,101,100,32,102,111,114,32,116,104,101,32,112,114,111,106,101,99,116,46,0
  dw     78,101,101,100,70,105,108,101,0,65,32,102,105,108,101,110,97,109,101,32,109,117,115,116,32,98,101,32,115,112,101,99,105,102,105,101,100,32,102,111,114,32,116,104,101,32,112,114,111,106,101,99,116,46,0
  dw     83,97,118,101,69,114,114,111,114,0,84,104,101,32,112,114,111,106,101,99,116,32,102,105,108,101,32,99,97,110,110,111,116,32,98,101,32,115,97,118,101,100,32,116,111,32,100,105,115,107,46,0
  dw     76,111,97,100,69,114,114,111,114,0,84,104,101,32,112,114,111,106,101,99,116,32,102,105,108,101,32,99,97,110,110,111,116,32,98,101,32,108,111,97,100,101,100,46,0
  dw     86,101,114,115,105,111,110,76,111,119,0,84,104,101,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,32,111,102,32,116,104,101,32,112,114,111,106,101,99,116,32,102,105,108,101,32,105,115,32,108,111,119,101,114,32,116,104,97,110,32,116,104,101,32,99,117,114,114,101,110,116,32,118,101,114,115,105,111,110,46,37,110,101,119,108,105,110,101,37,73,102,32,108,111,97,100,101,100,44,32,105,116,32,119,105,108,108,32,98,101,32,99,111,110,118,101,114,116,101,100,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,118,101,114,115,105,111,110,46,0
  dw     86,101,114,115,105,111,110,72,105,103,104,0,84,104,101,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,32,111,102,32,116,104,101,32,112,114,111,106,101,99,116,32,102,105,108,101,32,105,115,32,104,105,103,104,101,114,32,116,104,97,110,32,116,104,101,32,99,117,114,114,101,110,116,32,111,110,101,46,32,37,110,101,119,108,105,110,101,37,73,102,32,108,111,97,100,101,100,44,32,115,111,109,101,32,100,97,116,97,32,111,102,32,116,104,101,32,112,114,111,106,101,99,116,32,109,97,121,32,98,101,32,108,111,115,116,46,0
  dw     86,101,114,115,105,111,110,84,111,111,72,105,103,104,0,80,114,111,106,101,99,116,32,102,105,108,101,115,32,119,105,116,104,32,116,104,105,115,32,118,101,114,115,105,111,110,32,99,97,110,110,111,116,32,98,101,32,108,111,97,100,101,100,46,0
  dw     76,111,97,100,65,110,121,119,97,121,0,68,111,32,121,111,117,32,119,97,110,116,32,116,111,32,108,111,97,100,32,105,116,32,97,110,121,119,97,121,63,0
  dw     80,114,111,106,101,99,116,70,105,108,101,0,80,114,111,106,101,99,116,32,102,105,108,101,0
  dw     80,114,111,106,101,99,116,86,101,114,115,105,111,110,0,80,114,111,106,101,99,116,32,118,101,114,115,105,111,110,0
  dw     67,117,114,114,101,110,116,86,101,114,115,105,111,110,0,67,117,114,114,101,110,116,32,118,101,114,115,105,111,110,0
  dw     76,97,115,116,87,114,105,116,116,101,110,66,121,0,76,97,115,116,32,119,114,105,116,116,101,110,32,98,121,0
  dw     73,110,116,101,114,110,97,108,70,105,108,101,115,0,80,114,111,106,101,99,116,32,70,111,108,100,101,114,0
  dw     69,120,116,101,114,110,97,108,70,105,108,101,115,0,69,120,116,101,114,110,97,108,32,70,105,108,101,115,0
  dw     80,97,110,101,108,79,112,101,110,0,79,112,101,110,0
  dw     80,97,110,101,108,79,112,101,110,86,105,101,119,101,114,0,79,112,101,110,32,105,110,32,70,105,108,101,86,105,101,119,101,114,0
  dw     80,97,110,101,108,79,112,101,110,73,110,0,79,112,101,110,32,105,110,32,37,110,97,109,101,37,0
  dw     80,97,110,101,108,65,100,100,0,65,100,100,32,102,105,108,101,32,116,111,32,80,114,111,106,101,99,116,46,46,46,0
  dw     80,97,110,101,108,82,101,109,111,118,101,0,82,101,109,111,118,101,32,102,114,111,109,32,80,114,111,106,101,99,116,0
  dw     80,97,110,101,108,82,101,115,99,97,110,0,82,101,102,114,101,115,104,32,65,117,116,111,67,111,109,112,108,101,116,101,32,100,97,116,97,0
  dw     79,112,101,110,69,120,112,108,111,114,101,114,87,105,110,100,111,119,115,0,79,112,101,110,32,105,110,32,69,120,112,108,111,114,101,114,0
  dw     79,112,101,110,69,120,112,108,111,114,101,114,76,105,110,117,120,0,79,112,101,110,32,105,110,32,70,105,108,101,109,97,110,97,103,101,114,0
  dw     79,112,101,110,69,120,112,108,111,114,101,114,77,97,99,0,79,112,101,110,32,105,110,32,70,105,110,100,101,114,0
  dw     82,101,97,108,108,121,67,108,111,115,101,0,82,101,97,108,108,121,32,99,108,111,115,101,32,116,104,101,32,112,114,111,106,101,99,116,63,0
  dw     95,71,82,79,85,80,95,0,80,114,101,102,101,114,101,110,99,101,115,0
  dw     84,105,116,108,101,0,80,114,101,102,101,114,101,110,99,101,115,0
  dw     65,112,112,108,121,0,65,112,112,108,121,0
  dw     71,101,110,101,114,97,108,0,71,101,110,101,114,97,108,0
  dw     77,101,109,111,114,105,122,101,87,105,110,100,111,119,0,77,101,109,111,114,105,122,101,32,87,105,110,100,111,119,32,112,111,115,105,116,105,111,110,115,0
  dw     82,117,110,79,110,99,101,0,82,117,110,32,111,110,108,121,32,111,110,101,32,73,110,115,116,97,110,99,101,0
  dw     83,104,111,119,77,97,105,110,84,111,111,108,98,97,114,0,83,104,111,119,32,109,97,105,110,32,84,111,111,108,98,97,114,0
  dw     86,105,115,117,97,108,68,101,115,105,103,110,101,114,0,86,105,115,117,97,108,68,101,115,105,103,110,101,114,0
  dw     65,117,116,111,82,101,108,111,97,100,0,65,117,116,111,45,114,101,108,111,97,100,32,108,97,115,116,32,111,112,101,110,32,115,111,117,114,99,101,115,0
  dw     70,105,108,101,72,105,115,116,111,114,121,83,105,122,101,0,82,101,99,101,110,116,70,105,108,101,115,32,108,105,115,116,32,115,105,122,101,0
  dw     70,105,110,100,72,105,115,116,111,114,121,83,105,122,101,0,83,101,97,114,99,104,32,72,105,115,116,111,114,121,32,115,105,122,101,0
  dw     76,97,110,103,117,97,103,101,0,76,97,110,103,117,97,103,101,0
  dw     76,97,110,103,117,97,103,101,73,110,102,111,0,76,97,110,103,117,97,103,101,32,73,110,102,111,114,109,97,116,105,111,110,0
  dw     70,105,108,101,78,97,109,101,0,70,105,108,101,110,97,109,101,0
  dw     76,97,115,116,85,112,100,97,116,101,100,0,76,97,115,116,32,85,112,100,97,116,101,100,0
  dw     67,114,101,97,116,111,114,0,67,114,101,97,116,111,114,0
  dw     69,109,97,105,108,0,69,109,97,105,108,0
  dw     69,110,97,98,108,101,77,101,110,117,73,99,111,110,115,0,68,105,115,112,108,97,121,32,73,99,111,110,115,32,105,110,32,116,104,101,32,77,101,110,117,0
  dw     68,105,115,112,108,97,121,70,117,108,108,80,97,116,104,0,68,105,115,112,108,97,121,32,102,117,108,108,32,83,111,117,114,99,101,32,80,97,116,104,32,105,110,32,84,105,116,108,101,66,97,114,0
  dw     78,111,83,112,108,97,115,104,83,99,114,101,101,110,0,68,105,115,97,98,108,101,32,83,112,108,97,115,104,32,83,99,114,101,101,110,0
  dw     85,112,100,97,116,101,115,0,85,112,100,97,116,101,115,0
  dw     67,104,101,99,107,73,110,116,101,114,118,97,108,0,67,104,101,99,107,32,102,111,114,32,117,112,100,97,116,101,115,0
  dw     67,104,101,99,107,86,101,114,115,105,111,110,115,0,67,104,101,99,107,32,102,111,114,32,114,101,108,101,97,115,101,115,0
  dw     73,110,116,101,114,118,97,108,65,108,119,97,121,115,0,65,116,32,101,118,101,114,121,32,115,116,97,114,116,0
  dw     73,110,116,101,114,118,97,108,87,101,101,107,108,121,0,79,110,99,101,32,97,32,119,101,101,107,0
  dw     73,110,116,101,114,118,97,108,77,111,110,116,104,108,121,0,79,110,99,101,32,97,32,109,111,110,116,104,0
  dw     73,110,116,101,114,118,97,108,78,101,118,101,114,0,78,101,118,101,114,0
  dw     86,101,114,115,105,111,110,115,65,108,108,0,65,108,108,32,114,101,108,101,97,115,101,115,32,40,105,110,99,108,117,100,105,110,103,32,98,101,116,97,32,114,101,108,101,97,115,101,115,41,0
  dw     86,101,114,115,105,111,110,115,70,105,110,97,108,0,70,105,110,97,108,32,114,101,108,101,97,115,101,115,0
  dw     86,101,114,115,105,111,110,115,76,84,83,0,76,111,110,103,32,116,101,114,109,32,115,117,112,112,111,114,116,32,114,101,108,101,97,115,101,115,0
  dw     69,100,105,116,111,114,0,69,100,105,116,111,114,0
  dw     65,117,116,111,83,97,118,101,0,65,117,116,111,45,115,97,118,101,32,98,101,102,111,114,101,32,99,111,109,112,105,108,105,110,103,0
  dw     65,117,116,111,83,97,118,101,65,108,108,0,83,97,118,101,32,97,108,108,32,115,111,117,114,99,101,115,32,119,105,116,104,32,65,117,116,111,45,115,97,118,101,0
  dw     84,97,98,76,101,110,103,116,104,0,84,97,98,32,76,101,110,103,116,104,0
  dw     82,101,97,108,84,97,98,0,85,115,101,32,114,101,97,108,32,84,97,98,32,40,65,83,67,73,73,32,57,41,0
  dw     83,111,117,114,99,101,80,97,116,104,0,83,111,117,114,99,101,32,68,105,114,101,99,116,111,114,121,0
  dw     77,101,109,111,114,105,122,101,67,117,114,115,111,114,0,77,101,109,111,114,105,122,101,32,67,117,114,115,111,114,32,112,111,115,105,116,105,111,110,0
  dw     77,101,109,111,114,105,122,101,77,97,114,107,101,114,115,0,77,101,109,111,114,105,122,101,32,77,97,114,107,101,114,32,112,111,115,105,116,105,111,110,115,0
  dw     68,101,102,97,117,108,116,115,0,68,101,102,97,117,108,116,32,83,101,116,116,105,110,103,115,32,102,111,114,32,110,101,119,32,70,105,108,101,115,0
  dw     68,101,102,97,117,108,116,115,83,104,111,114,116,0,68,101,102,97,117,108,116,115,0
  dw     67,80,85,0,67,80,85,32,79,112,116,105,109,105,115,97,116,105,111,110,0
  dw     83,117,98,83,121,115,116,101,109,0,76,105,98,114,97,114,121,32,83,117,98,115,121,115,116,101,109,0
  dw     83,97,118,101,83,101,116,116,105,110,103,115,0,83,97,118,101,32,83,101,116,116,105,110,103,115,32,116,111,0
  dw     83,97,118,101,83,101,116,116,105,110,103,115,48,0,84,104,101,32,101,110,100,32,111,102,32,116,104,101,32,83,111,117,114,99,101,32,102,105,108,101,0
  dw     83,97,118,101,83,101,116,116,105,110,103,115,49,0,84,104,101,32,102,105,108,101,32,60,102,105,108,101,110,97,109,101,62,46,112,98,46,99,102,103,0
  dw     83,97,118,101,83,101,116,116,105,110,103,115,50,0,65,32,99,111,109,109,111,110,32,102,105,108,101,32,112,114,111,106,101,99,116,46,99,102,103,32,102,111,114,32,101,118,101,114,121,32,100,105,114,101,99,116,111,114,121,0
  dw     83,97,118,101,83,101,116,116,105,110,103,115,51,0,68,111,110,39,116,32,115,97,118,101,32,97,110,121,116,104,105,110,103,0
  dw     65,108,119,97,121,115,72,105,100,101,76,111,103,0,65,108,119,97,121,115,32,104,105,100,101,32,116,104,101,32,101,114,114,111,114,32,108,111,103,32,40,105,103,110,111,114,101,32,116,104,101,32,112,101,114,45,115,111,117,114,99,101,32,115,101,116,116,105,110,103,41,0
  dw     77,111,110,105,116,111,114,70,105,108,101,67,104,97,110,103,101,115,0,77,111,110,105,116,111,114,32,111,112,101,110,32,102,105,108,101,115,32,102,111,114,32,99,104,97,110,103,101,115,32,111,110,32,100,105,115,107,0
  dw     70,105,108,101,115,80,97,110,101,108,0,70,105,108,101,32,115,101,108,101,99,116,105,111,110,0
  dw     70,105,108,101,115,80,97,110,101,108,77,117,108,116,105,108,105,110,101,0,68,105,115,112,108,97,121,32,109,117,108,116,105,112,108,101,32,114,111,119,115,0
  dw     70,105,108,101,115,80,97,110,101,108,67,108,111,115,101,66,117,116,116,111,110,115,0,68,105,115,112,108,97,121,32,99,108,111,115,101,32,98,117,116,116,111,110,115,32,105,110,32,101,97,99,104,32,116,97,98,0
  dw     70,105,108,101,115,80,97,110,101,108,78,101,119,66,117,116,116,111,110,0,65,100,100,32,97,32,116,97,98,32,116,111,32,99,114,101,97,116,101,32,97,32,110,101,119,32,115,111,117,114,99,101,0
  dw     67,111,100,101,70,105,108,101,69,120,116,101,110,115,105,111,110,115,0,67,111,100,101,32,102,105,108,101,32,101,120,116,101,110,115,105,111,110,115,0
  dw     69,100,105,116,105,110,103,0,69,100,105,116,105,110,103,0
  dw     67,111,108,111,114,115,0,67,111,108,111,114,105,110,103,0
  dw     83,101,116,116,105,110,103,115,0,83,101,116,116,105,110,103,115,0
  dw     69,110,97,98,108,101,66,111,108,100,105,110,103,0,69,110,97,98,108,101,32,98,111,108,100,105,110,103,32,111,102,32,75,101,121,119,111,114,100,115,0
  dw     69,110,97,98,108,101,67,97,115,101,0,69,110,97,98,108,101,32,67,97,115,101,32,99,111,114,114,101,99,116,105,111,110,0
  dw     69,110,97,98,108,101,66,114,97,99,101,77,97,116,99,104,0,69,110,97,98,108,101,32,109,97,114,107,105,110,103,32,111,102,32,109,97,116,99,104,105,110,103,32,66,114,97,99,101,115,0
  dw     69,110,97,98,108,101,75,101,121,119,111,114,100,77,97,116,99,104,0,69,110,97,98,108,101,32,109,97,114,107,105,110,103,32,111,102,32,109,97,116,99,104,105,110,103,32,75,101,121,119,111,114,100,115,0
  dw     69,110,97,98,108,101,76,105,110,101,78,117,109,98,101,114,115,0,68,105,115,112,108,97,121,32,76,105,110,101,32,110,117,109,98,101,114,115,0
  dw     69,110,97,98,108,101,77,97,114,107,101,114,115,0,69,110,97,98,108,101,32,76,105,110,101,32,77,97,114,107,101,114,115,0
  dw     83,101,108,101,99,116,70,111,110,116,0,83,101,108,101,99,116,32,70,111,110,116,0
  dw     68,101,102,97,117,108,116,67,111,108,111,114,115,0,68,101,102,97,117,108,116,32,67,111,108,111,114,32,83,99,104,101,109,101,115,0
  dw     83,104,111,119,87,104,105,116,101,83,112,97,99,101,0,83,104,111,119,32,119,104,105,116,101,115,112,97,99,101,32,99,104,97,114,97,99,116,101,114,115,0
  dw     83,104,111,119,73,110,100,101,110,116,71,117,105,100,101,115,0,83,104,111,119,32,105,110,100,101,110,116,97,116,105,111,110,32,103,117,105,100,101,115,0
  dw     67,111,108,111,114,48,0,65,83,77,32,75,101,121,119,111,114,100,115,0
  dw     67,111,108,111,114,49,0,66,97,99,107,103,114,111,117,110,100,0
  dw     67,111,108,111,114,50,0,66,97,115,105,99,32,75,101,121,119,111,114,100,115,0
  dw     67,111,108,111,114,51,0,67,111,109,109,101,110,116,115,0
  dw     67,111,108,111,114,52,0,67,111,110,115,116,97,110,116,115,0
  dw     67,111,108,111,114,53,0,76,97,98,101,108,115,0
  dw     67,111,108,111,114,54,0,78,111,114,109,97,108,32,84,101,120,116,0
  dw     67,111,108,111,114,55,0,78,117,109,98,101,114,115,0
  dw     67,111,108,111,114,56,0,79,112,101,114,97,116,111,114,115,32,40,42,32,47,43,32,45,41,0
  dw     67,111,108,111,114,57,0,80,111,105,110,116,101,114,115,0
  dw     67,111,108,111,114,49,48,0,70,117,110,99,116,105,111,110,115,0
  dw     67,111,108,111,114,49,49,0,83,101,112,97,114,97,116,111,114,115,32,40,59,32,44,32,91,32,93,41,0
  dw     67,111,108,111,114,49,50,0,83,116,114,105,110,103,115,0
  dw     67,111,108,111,114,49,51,0,83,116,114,117,99,116,117,114,101,115,0
  dw     67,111,108,111,114,49,52,0,76,105,110,101,78,117,109,98,101,114,115,0
  dw     67,111,108,111,114,49,53,0,76,105,110,101,78,117,109,98,101,114,115,32,66,97,99,107,103,114,111,117,110,100,0
  dw     67,111,108,111,114,49,54,0,76,105,110,101,32,77,97,114,107,101,114,115,0
  dw     67,111,108,111,114,49,55,0,67,117,114,114,101,110,116,108,105,110,101,32,66,97,99,107,103,114,111,117,110,100,0
  dw     67,111,108,111,114,49,56,0,83,101,108,101,99,116,105,111,110,32,66,97,99,107,103,114,111,117,110,100,0
  dw     67,111,108,111,114,49,57,0,83,101,108,101,99,116,105,111,110,32,84,101,120,116,0
  dw     67,111,108,111,114,50,48,0,67,117,114,115,111,114,0
  dw     67,111,108,111,114,50,49,0,67,117,114,114,101,110,116,32,76,105,110,101,32,66,97,99,107,103,114,111,117,110,100,32,40,68,101,98,117,103,103,101,114,41,0
  dw     67,111,108,111,114,50,50,0,67,117,114,114,101,110,116,32,76,105,110,101,32,83,121,109,98,111,108,32,40,68,101,98,117,103,103,101,114,41,0
  dw     67,111,108,111,114,50,51,0,69,114,114,111,114,32,66,97,99,107,103,114,111,117,110,100,32,40,68,101,98,117,103,103,101,114,41,0
  dw     67,111,108,111,114,50,52,0,69,114,114,111,114,32,83,121,109,98,111,108,32,40,68,101,98,117,103,103,101,114,41,0
  dw     67,111,108,111,114,50,53,0,66,114,101,97,107,112,111,105,110,116,32,66,97,99,107,103,114,111,117,110,100,32,40,68,101,98,117,103,103,101,114,41,0
  dw     67,111,108,111,114,50,54,0,66,114,101,97,107,112,111,105,110,116,32,83,121,109,98,111,108,32,40,68,101,98,117,103,103,101,114,41,0
  dw     67,111,108,111,114,50,55,0,66,97,99,107,103,114,111,117,110,100,32,102,111,114,32,110,111,110,45,101,100,105,116,97,98,108,101,32,102,105,108,101,115,32,40,68,101,98,117,103,103,101,114,41,0
  dw     67,111,108,111,114,50,56,0,77,97,114,107,32,109,97,116,99,104,105,110,103,32,66,114,97,99,101,115,32,97,110,100,32,75,101,121,119,111,114,100,115,0
  dw     67,111,108,111,114,50,57,0,77,97,114,107,32,109,105,115,109,97,116,99,104,101,100,32,66,114,97,99,101,115,32,97,110,100,32,75,101,121,119,111,114,100,115,0
  dw     67,111,108,111,114,51,48,0,66,97,99,107,103,114,111,117,110,100,32,102,111,114,32,80,114,111,99,101,100,117,114,101,115,0
  dw     67,111,108,111,114,51,49,0,67,117,115,116,111,109,32,75,101,121,119,111,114,100,115,0
  dw     67,111,108,111,114,51,50,0,87,97,114,110,105,110,103,32,66,97,99,107,103,114,111,117,110,100,32,40,68,101,98,117,103,103,101,114,41,0
  dw     67,111,108,111,114,51,51,0,87,97,114,110,105,110,103,32,83,121,109,98,111,108,32,40,68,101,98,117,103,103,101,114,41,0
  dw     67,111,108,111,114,51,52,0,87,104,105,116,101,115,112,97,99,101,32,97,110,100,32,105,110,100,101,110,116,97,116,105,111,110,32,103,117,105,100,101,115,0
  dw     67,111,108,111,114,51,53,0,77,111,100,117,108,101,32,78,97,109,101,115,0
  dw     67,111,108,111,114,51,54,0,82,101,112,101,97,116,101,100,32,83,101,108,101,99,116,105,111,110,115,32,66,97,99,107,103,114,111,117,110,100,0
  dw     67,111,108,111,114,51,55,0,66,97,99,107,103,114,111,117,110,100,32,102,111,114,32,112,108,97,105,110,32,116,101,120,116,32,102,105,108,101,115,0
  dw     75,101,121,119,111,114,100,115,0,67,117,115,116,111,109,32,107,101,121,119,111,114,100,115,0
  dw     75,101,121,119,111,114,100,115,70,105,108,101,0,76,111,97,100,32,107,101,121,119,111,114,100,115,32,102,114,111,109,32,102,105,108,101,0
  dw     79,112,101,110,75,101,121,119,111,114,100,70,105,108,101,0,67,104,111,111,115,101,32,107,101,121,119,111,114,100,32,108,105,115,116,32,102,105,108,101,46,46,46,0
  dw     70,111,108,100,105,110,103,0,70,111,108,100,105,110,103,0
  dw     69,110,97,98,108,101,70,111,108,100,105,110,103,0,69,110,97,98,108,101,32,83,111,117,114,99,101,32,76,105,110,101,32,102,111,108,100,105,110,103,0
  dw     70,111,108,100,83,116,97,114,116,87,111,114,100,115,0,70,111,108,100,105,110,103,32,115,116,97,114,116,32,75,101,121,119,111,114,100,115,0
  dw     70,111,108,100,69,110,100,87,111,114,100,115,0,70,111,108,100,105,110,103,32,101,110,100,32,75,101,121,119,111,114,100,115,0
  dw     84,104,101,109,101,115,0,84,104,101,109,101,115,0
  dw     84,111,111,108,98,97,114,0,84,111,111,108,98,97,114,0
  dw     84,111,111,108,98,97,114,76,97,121,111,117,116,0,84,111,111,108,98,97,114,32,76,97,121,111,117,116,0
  dw     73,99,111,110,0,73,99,111,110,0
  dw     65,99,116,105,111,110,0,65,99,116,105,111,110,0
  dw     73,116,101,109,83,101,116,116,105,110,103,115,0,73,116,101,109,32,83,101,116,116,105,110,103,115,0
  dw     73,116,101,109,80,111,115,105,116,105,111,110,0,80,111,115,105,116,105,111,110,0
  dw     83,101,116,0,83,101,116,0
  dw     84,111,111,108,98,97,114,83,101,116,115,0,68,101,102,97,117,108,116,32,83,101,116,115,0
  dw     84,111,111,108,98,97,114,68,101,102,97,117,108,116,0,68,101,102,97,117,108,116,32,84,111,111,108,98,97,114,0
  dw     84,111,111,108,98,97,114,67,108,97,115,115,105,99,0,67,108,97,115,115,105,99,32,84,111,111,108,98,97,114,0
  dw     83,101,112,97,114,97,116,111,114,0,83,101,112,97,114,97,116,111,114,0
  dw     83,112,97,99,101,0,83,112,97,99,101,0
  dw     83,116,97,110,100,97,114,100,66,117,116,116,111,110,0,83,116,97,110,100,97,114,100,32,73,99,111,110,0
  dw     84,104,101,109,101,73,99,111,110,0,84,104,101,109,101,32,73,99,111,110,0
  dw     69,120,116,101,114,110,97,108,73,99,111,110,0,73,99,111,110,32,70,105,108,101,0
  dw     65,99,116,105,111,110,77,101,110,117,0,77,101,110,117,32,73,116,101,109,0
  dw     65,99,116,105,111,110,84,111,111,108,0,82,117,110,32,84,111,111,108,0
  dw     79,112,101,110,73,99,111,110,0,67,104,111,111,115,101,32,73,99,111,110,32,70,105,108,101,0
  dw     73,99,111,110,80,97,116,116,101,114,110,0,73,99,111,110,32,70,105,108,101,115,32,40,42,46,105,99,111,44,32,42,46,112,110,103,41,124,42,46,105,99,111,59,42,46,112,110,103,124,65,108,108,32,70,105,108,101,115,32,40,42,46,42,41,124,42,46,42,0
  dw     77,97,120,73,116,101,109,115,0,77,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,116,111,111,108,98,97,114,32,105,116,101,109,115,32,114,101,97,99,104,101,100,0
  dw     84,111,111,108,115,0,84,111,111,108,115,80,97,110,101,108,0
  dw     79,112,116,105,111,110,115,0,79,112,116,105,111,110,115,0
  dw     84,111,111,108,115,80,97,110,101,108,79,112,116,105,111,110,115,0,84,111,111,108,115,80,97,110,101,108,32,79,112,116,105,111,110,115,0
  dw     84,111,111,108,115,80,97,110,101,108,76,101,102,116,0,80,97,110,101,108,32,111,110,32,116,104,101,32,108,101,102,116,32,115,105,100,101,0
  dw     84,111,111,108,115,80,97,110,101,108,82,105,103,104,116,0,80,97,110,101,108,32,111,110,32,116,104,101,32,114,105,103,104,116,32,115,105,100,101,0
  dw     84,111,111,108,115,70,114,111,110,116,67,111,108,111,114,0,70,114,111,110,116,32,67,111,108,111,114,0
  dw     84,111,111,108,115,66,97,99,107,67,111,108,111,114,0,66,97,99,107,103,114,111,117,110,100,32,67,111,108,111,114,0
  dw     78,111,73,110,100,101,112,101,110,100,97,110,100,67,111,108,111,114,115,0,68,111,32,110,111,116,32,117,115,101,32,99,111,108,111,114,115,47,102,111,110,116,115,32,102,111,114,32,116,111,111,108,115,32,105,110,32,101,120,116,101,114,110,97,108,32,119,105,110,100,111,119,115,46,0
  dw     65,117,116,111,72,105,100,101,80,97,110,101,108,0,65,117,116,111,109,97,116,105,99,97,108,108,121,32,104,105,100,101,32,116,104,101,32,80,97,110,101,108,0
  dw     65,117,116,111,72,105,100,101,68,101,108,97,121,0,77,105,108,108,105,115,101,99,111,110,100,115,32,100,101,108,97,121,32,98,101,102,111,114,101,32,104,105,100,105,110,103,32,116,104,101,32,80,97,110,101,108,0
  dw     84,111,111,108,115,80,97,110,101,108,73,116,101,109,115,0,84,111,111,108,115,32,105,110,32,116,104,101,32,84,111,111,108,115,80,97,110,101,108,0
  dw     65,118,97,105,108,97,98,108,101,84,111,111,108,115,0,65,118,97,105,108,97,98,108,101,32,84,111,111,108,115,0
  dw     85,115,101,100,84,111,111,108,115,0,68,105,115,112,108,97,121,101,100,32,84,111,111,108,115,0
  dw     65,100,100,0,65,100,100,0
  dw     82,101,109,111,118,101,0,82,101,109,111,118,101,0
  dw     85,112,0,85,112,0
  dw     68,111,119,110,0,68,111,119,110,0
  dw     67,111,110,102,105,103,117,114,97,116,105,111,110,0,67,111,110,102,105,103,117,114,97,116,105,111,110,0
  dw     69,120,112,108,111,114,101,114,77,111,100,101,0,68,105,115,112,108,97,121,109,111,100,101,32,111,102,32,116,104,101,32,69,120,112,108,111,114,101,114,0
  dw     69,120,112,108,111,114,101,114,84,114,101,101,0,69,120,112,108,111,114,101,114,32,84,114,101,101,0
  dw     69,120,112,108,111,114,101,114,76,105,115,116,0,69,120,112,108,111,114,101,114,32,76,105,115,116,0
  dw     69,120,112,108,111,114,101,114,83,97,118,101,80,97,116,104,0,82,101,109,101,109,98,101,114,32,108,97,115,116,32,100,105,115,112,108,97,121,101,100,32,68,105,114,101,99,116,111,114,121,0
  dw     80,114,111,99,101,100,117,114,101,83,111,114,116,0,83,111,114,116,32,80,114,111,99,101,100,117,114,101,115,32,98,121,32,110,97,109,101,0
  dw     80,114,111,99,101,100,117,114,101,71,114,111,117,112,0,71,114,111,117,112,32,77,97,114,107,101,114,115,0
  dw     80,114,111,99,101,100,117,114,101,80,114,111,116,111,116,121,112,101,0,68,105,115,112,108,97,121,32,80,114,111,99,101,100,117,114,101,32,65,114,103,117,109,101,110,116,115,0
  dw     73,110,100,101,110,116,0,73,110,100,101,110,116,97,116,105,111,110,0
  dw     73,110,100,101,110,116,84,105,116,108,101,0,67,111,100,101,32,73,110,100,101,110,116,97,116,105,111,110,0
  dw     73,110,100,101,110,116,78,111,0,78,111,32,105,110,100,101,110,116,97,116,105,111,110,0
  dw     73,110,100,101,110,116,66,108,111,99,107,0,66,108,111,99,107,32,109,111,100,101,0
  dw     73,110,100,101,110,116,83,101,110,115,105,116,105,118,101,0,75,101,121,119,111,114,100,32,115,101,110,115,105,116,105,118,101,0
  dw     66,97,99,107,115,112,97,99,101,85,110,105,110,100,101,110,116,0,66,97,99,107,115,112,97,99,101,32,117,110,105,110,100,101,110,116,115,0
  dw     65,100,100,83,101,116,0,65,100,100,47,83,101,116,0
  dw     75,101,121,119,111,114,100,0,75,101,121,119,111,114,100,0
  dw     66,101,102,111,114,101,0,66,101,102,111,114,101,0
  dw     65,102,116,101,114,0,65,102,116,101,114,0
  dw     65,117,116,111,67,111,109,112,108,101,116,101,0,65,117,116,111,67,111,109,112,108,101,116,101,0
  dw     65,117,116,111,67,111,109,112,108,101,116,101,76,105,115,116,0,68,105,115,112,108,97,121,101,100,32,73,116,101,109,115,0
  dw     68,105,115,112,108,97,121,70,117,108,108,76,105,115,116,0,68,105,115,112,108,97,121,32,116,104,101,32,102,117,108,108,32,65,117,116,111,67,111,109,112,108,101,116,101,32,108,105,115,116,0
  dw     70,105,114,115,116,67,104,97,114,77,97,116,99,104,0,68,105,115,112,108,97,121,32,97,108,108,32,119,111,114,100,115,32,116,104,97,116,32,109,97,116,99,104,32,116,104,101,32,102,105,114,115,116,32,99,104,97,114,97,99,116,101,114,0
  dw     65,108,108,87,111,114,100,77,97,116,99,104,0,68,105,115,112,108,97,121,32,111,110,108,121,32,119,111,114,100,115,32,116,104,97,116,32,98,101,103,105,110,32,119,105,116,104,32,116,104,101,32,116,121,112,101,100,32,119,111,114,100,0
  dw     66,111,120,87,105,100,116,104,0,66,111,120,32,119,105,100,116,104,0
  dw     66,111,120,72,101,105,103,104,116,0,66,111,120,32,104,101,105,103,104,116,0
  dw     65,100,100,66,114,97,99,107,101,116,115,0,65,100,100,32,111,112,101,110,105,110,103,32,66,114,97,99,107,101,116,115,32,116,111,32,70,117,110,99,116,105,111,110,115,47,65,114,114,97,121,115,47,76,105,115,116,115,0
  dw     65,100,100,83,112,97,99,101,115,0,65,100,100,32,97,32,83,112,97,99,101,32,97,102,116,101,114,32,80,66,32,75,101,121,119,111,114,100,115,32,102,111,108,108,111,119,101,100,32,98,121,32,97,110,32,101,120,112,114,101,115,115,105,111,110,0
  dw     65,100,100,69,110,100,75,101,121,119,111,114,100,115,0,65,100,100,32,109,97,116,99,104,105,110,103,32,39,69,110,100,39,32,107,101,121,119,111,114,100,32,105,102,32,105,110,115,101,114,116,32,105,115,32,112,114,101,115,115,101,100,32,116,119,105,99,101,0
  dw     76,105,115,116,79,112,116,105,111,110,115,0,73,116,101,109,115,32,116,111,32,100,105,115,112,108,97,121,32,105,110,32,116,104,101,32,65,117,116,111,67,111,109,112,108,101,116,101,32,76,105,115,116,0
  dw     78,111,67,111,109,109,101,110,116,115,0,68,105,115,97,98,108,101,32,97,117,116,111,109,97,116,105,99,32,112,111,112,117,112,32,105,110,115,105,100,101,32,67,111,109,109,101,110,116,115,0
  dw     78,111,83,116,114,105,110,103,115,0,68,105,115,97,98,108,101,32,97,117,116,111,109,97,116,105,99,32,112,111,112,117,112,32,105,110,115,105,100,101,32,83,116,114,105,110,103,115,0
  dw     80,111,112,117,112,76,101,110,103,116,104,0,67,104,97,114,97,99,116,101,114,115,32,110,101,101,100,101,100,32,98,101,102,111,114,101,32,111,112,101,110,105,110,103,32,116,104,101,32,108,105,115,116,0
  dw     65,117,116,111,80,111,112,117,112,78,111,114,109,97,108,0,65,117,116,111,109,97,116,105,99,97,108,108,121,32,112,111,112,117,112,32,65,117,116,111,67,111,109,112,108,101,116,101,32,111,116,104,101,114,119,105,115,101,0
  dw     65,117,116,111,80,111,112,117,112,83,116,114,117,99,116,117,114,101,115,0,65,117,116,111,109,97,116,105,99,97,108,108,121,32,112,111,112,117,112,32,65,117,116,111,67,111,109,112,108,101,116,101,32,102,111,114,32,83,116,114,117,99,116,117,114,101,32,105,116,101,109,115,0
  dw     65,117,116,111,80,111,112,117,112,77,111,100,117,108,101,115,0,65,117,116,111,109,97,116,105,99,97,108,108,121,32,112,111,112,117,112,32,65,117,116,111,67,111,109,112,108,101,116,101,32,97,102,116,101,114,32,97,32,77,111,100,117,108,101,32,112,114,101,102,105,120,0
  dw     80,66,73,116,101,109,115,0,80,114,101,100,101,102,105,110,101,100,32,73,116,101,109,115,0
  dw     83,111,117,114,99,101,73,116,101,109,115,0,83,111,117,114,99,101,99,111,100,101,32,73,116,101,109,115,0
  dw     83,111,117,114,99,101,79,110,108,121,0,116,104,101,32,99,117,114,114,101,110,116,32,115,111,117,114,99,101,32,111,110,108,121,0
  dw     80,114,111,106,101,99,116,79,110,108,121,0,116,104,101,32,99,117,114,114,101,110,116,32,112,114,111,106,101,99,116,32,40,105,102,32,97,110,121,41,0
  dw     80,114,111,106,101,99,116,65,108,108,70,105,108,101,115,0,116,104,101,32,99,117,114,114,101,110,116,32,112,114,111,106,101,99,116,32,111,114,32,97,108,108,32,102,105,108,101,115,32,40,105,102,32,110,111,110,101,41,0
  dw     65,108,108,70,105,108,101,115,0,97,108,108,32,111,112,101,110,32,102,105,108,101,115,0
  dw     65,100,100,70,114,111,109,0,65,100,100,32,73,116,101,109,115,32,102,114,111,109,0
  dw     79,112,116,105,111,110,95,86,97,114,105,97,98,108,101,0,86,97,114,105,97,98,108,101,115,0
  dw     79,112,116,105,111,110,95,65,114,114,97,121,0,65,114,114,97,121,115,0
  dw     79,112,116,105,111,110,95,76,105,115,116,0,76,105,110,107,101,100,76,105,115,116,115,0
  dw     79,112,116,105,111,110,95,77,97,112,0,77,97,112,115,0
  dw     79,112,116,105,111,110,95,80,114,111,99,101,100,117,114,101,0,80,114,111,99,101,100,117,114,101,115,0
  dw     79,112,116,105,111,110,95,77,97,99,114,111,0,77,97,99,114,111,115,0
  dw     79,112,116,105,111,110,95,73,109,112,111,114,116,0,73,109,112,111,114,116,101,100,32,70,117,110,99,116,105,111,110,115,0
  dw     79,112,116,105,111,110,95,80,114,111,116,111,116,121,112,101,0,80,114,111,116,111,116,121,112,101,115,0
  dw     79,112,116,105,111,110,95,67,111,110,115,116,97,110,116,0,67,111,110,115,116,97,110,116,115,0
  dw     79,112,116,105,111,110,95,83,116,114,117,99,116,117,114,101,0,83,116,114,117,99,116,117,114,101,115,0
  dw     79,112,116,105,111,110,95,73,110,116,101,114,102,97,99,101,0,73,110,116,101,114,102,97,99,101,115,0
  dw     79,112,116,105,111,110,95,76,97,98,101,108,0,76,97,98,101,108,115,0
  dw     79,112,116,105,111,110,95,77,111,100,117,108,101,0,77,111,100,117,108,101,115,0
  dw     79,112,116,105,111,110,95,80,66,75,101,121,119,111,114,100,115,0,75,101,121,119,111,114,100,115,0
  dw     79,112,116,105,111,110,95,65,83,77,75,101,121,119,111,114,100,115,0,65,83,77,32,75,101,121,119,111,114,100,115,0
  dw     79,112,116,105,111,110,95,80,66,70,117,110,99,116,105,111,110,115,0,76,105,98,114,97,114,121,32,70,117,110,99,116,105,111,110,115,0
  dw     79,112,116,105,111,110,95,65,80,73,70,117,110,99,116,105,111,110,115,0,65,80,73,32,70,117,110,99,116,105,111,110,115,0
  dw     79,112,116,105,111,110,95,80,66,67,111,110,115,116,97,110,116,115,0,67,111,110,115,116,97,110,116,115,0
  dw     79,112,116,105,111,110,95,80,66,83,116,114,117,99,116,117,114,101,115,0,83,116,114,117,99,116,117,114,101,115,0
  dw     79,112,116,105,111,110,95,80,66,73,110,116,101,114,102,97,99,101,115,0,73,110,116,101,114,102,97,99,101,115,0
  dw     68,101,98,117,103,103,101,114,0,68,101,98,117,103,103,101,114,0
  dw     73,110,100,105,118,105,100,117,97,108,83,101,116,116,105,110,103,115,0,73,110,100,105,118,105,100,117,97,108,32,83,101,116,116,105,110,103,115,0
  dw     68,101,102,97,117,108,116,87,105,110,100,111,119,115,0,68,101,102,97,117,108,116,32,87,105,110,100,111,119,115,0
  dw     67,111,109,112,105,108,101,114,0,67,111,109,112,105,108,101,114,0
  dw     68,101,102,97,117,108,116,67,111,109,112,105,108,101,114,0,68,101,102,97,117,108,116,32,67,111,109,112,105,108,101,114,0
  dw     77,111,114,101,67,111,109,112,105,108,101,114,115,0,65,100,100,105,116,105,111,110,97,108,32,67,111,109,112,105,108,101,114,115,0
  dw     67,111,109,112,105,108,101,114,86,101,114,115,105,111,110,0,86,101,114,115,105,111,110,0
  dw     67,111,109,112,105,108,101,114,80,97,116,104,0,80,97,116,104,0
  dw     83,101,108,101,99,116,67,111,109,112,105,108,101,114,0,83,101,108,101,99,116,32,80,117,114,101,66,97,115,105,99,32,99,111,109,112,105,108,101,114,46,46,46,0
  dw     69,100,105,116,72,105,115,116,111,114,121,0,83,101,115,115,105,111,110,32,72,105,115,116,111,114,121,0
  dw     69,110,97,98,108,101,72,105,115,116,111,114,121,0,69,110,97,98,108,101,32,114,101,99,111,114,100,105,110,103,32,111,102,32,104,105,115,116,111,114,121,32,40,99,104,97,110,103,101,32,114,101,113,117,105,114,101,115,32,97,32,114,101,115,116,97,114,116,41,0
  dw     72,105,115,116,111,114,121,84,105,109,101,114,49,0,82,101,99,111,114,100,32,117,110,115,97,118,101,100,32,99,104,97,110,103,101,115,32,101,118,101,114,121,0
  dw     72,105,115,116,111,114,121,84,105,109,101,114,50,0,109,105,110,117,116,101,115,0
  dw     72,105,115,116,111,114,121,77,97,120,83,105,122,101,49,0,82,101,99,111,114,100,32,111,110,108,121,32,99,104,97,110,103,101,115,32,116,111,32,102,105,108,101,115,32,115,109,97,108,108,101,114,32,116,104,97,110,0
  dw     72,105,115,116,111,114,121,77,97,120,83,105,122,101,50,0,107,105,108,111,98,121,116,101,115,0
  dw     80,117,114,103,101,83,101,115,115,105,111,110,115,0,80,117,114,103,101,32,111,108,100,32,115,101,115,115,105,111,110,115,32,102,114,111,109,32,104,105,115,116,111,114,121,0
  dw     80,117,114,103,101,78,101,118,101,114,0,75,101,101,112,32,97,108,108,32,104,105,115,116,111,114,121,0
  dw     80,117,114,103,101,66,121,68,97,121,115,49,0,75,101,101,112,32,115,101,115,115,105,111,110,115,32,102,111,114,0
  dw     80,117,114,103,101,66,121,68,97,121,115,50,0,100,97,121,115,0
  dw     80,117,114,103,101,66,121,67,111,117,110,116,49,0,75,101,101,112,32,109,97,120,105,109,117,109,0
  dw     80,117,114,103,101,66,121,67,111,117,110,116,50,0,115,101,115,115,105,111,110,115,0
  dw     72,105,115,116,111,114,121,70,105,108,101,0,68,97,116,97,98,97,115,101,32,108,111,99,97,116,105,111,110,0
  dw     72,105,115,116,111,114,121,70,105,108,101,83,105,122,101,0,68,97,116,97,98,97,115,101,32,115,105,122,101,0
  dw     65,117,116,111,67,108,101,97,114,76,111,103,0,67,108,101,97,114,32,69,114,114,111,114,108,111,103,32,111,110,32,101,97,99,104,32,114,117,110,0
  dw     68,105,115,112,108,97,121,69,114,114,111,114,87,105,110,100,111,119,0,68,105,115,112,108,97,121,32,99,111,109,112,105,108,97,116,105,111,110,32,101,114,114,111,114,115,32,105,110,32,97,32,119,105,110,100,111,119,0
  dw     68,101,98,117,103,103,101,114,77,111,100,101,0,67,104,111,111,115,101,32,68,101,98,117,103,103,101,114,32,84,121,112,101,0
  dw     73,68,69,68,101,98,117,103,103,101,114,0,73,110,116,101,103,114,97,116,101,100,32,73,68,69,32,68,101,98,117,103,103,101,114,0
  dw     71,85,73,68,101,98,117,103,103,101,114,0,83,116,97,110,100,97,108,111,110,101,32,71,85,73,32,68,101,98,117,103,103,101,114,0
  dw     67,111,110,115,111,108,101,68,101,98,117,103,103,101,114,0,67,111,110,115,111,108,101,32,111,110,108,121,32,68,101,98,117,103,103,101,114,0
  dw     87,97,114,110,105,110,103,77,111,100,101,0,67,104,111,111,115,101,32,87,97,114,110,105,110,103,32,108,101,118,101,108,0
  dw     87,97,114,110,105,110,103,115,73,103,110,111,114,101,0,73,103,110,111,114,101,32,87,97,114,110,105,110,103,115,0
  dw     87,97,114,110,105,110,103,115,68,105,115,112,108,97,121,0,68,105,115,112,108,97,121,32,87,97,114,110,105,110,103,115,0
  dw     87,97,114,110,105,110,103,115,69,114,114,111,114,0,84,114,101,97,116,32,87,97,114,110,105,110,103,115,32,97,115,32,69,114,114,111,114,115,0
  dw     68,101,98,117,103,103,101,114,71,101,110,101,114,97,108,0,71,101,110,101,114,97,108,32,79,112,116,105,111,110,115,0
  dw     83,116,111,112,65,116,83,116,97,114,116,0,83,116,111,112,32,101,120,101,99,117,116,105,111,110,32,97,116,32,112,114,111,103,114,97,109,32,115,116,97,114,116,0
  dw     83,116,111,112,65,116,69,110,100,0,83,116,111,112,32,101,120,101,99,117,116,105,111,110,32,98,101,102,111,114,101,32,112,114,111,103,114,97,109,32,101,110,100,0
  dw     68,101,98,117,103,103,101,114,77,101,109,111,114,105,122,101,0,77,101,109,111,114,105,122,101,32,100,101,98,117,103,103,101,114,32,119,105,110,100,111,119,32,112,111,115,105,116,105,111,110,115,0
  dw     68,101,98,117,103,103,101,114,79,110,84,111,112,0,75,101,101,112,32,97,108,108,32,100,101,98,117,103,103,101,114,32,119,105,110,100,111,119,115,32,111,110,32,116,111,112,0
  dw     65,117,116,111,83,101,116,79,110,84,111,112,0,66,114,105,110,103,32,100,101,98,117,103,103,101,114,32,119,105,110,100,111,119,115,32,116,111,32,102,114,111,110,116,32,119,104,101,110,32,111,110,101,32,105,115,32,102,111,99,117,115,101,100,0
  dw     76,111,103,84,105,109,101,83,116,97,109,112,0,68,105,115,112,108,97,121,32,84,105,109,101,115,116,97,109,112,32,105,110,32,69,114,114,111,114,32,108,111,103,0
  dw     80,117,114,105,102,105,101,114,0,80,117,114,105,102,105,101,114,0
  dw     68,97,116,97,66,114,101,97,107,112,111,105,110,116,115,0,68,97,116,97,32,66,114,101,97,107,112,111,105,110,116,115,0
  dw     68,101,98,117,103,79,117,116,112,117,116,0,68,101,98,117,103,32,79,117,116,112,117,116,0
  dw     65,115,109,68,101,98,117,103,0,65,115,109,32,68,101,98,117,103,103,101,114,0
  dw     77,101,109,111,114,121,86,105,101,119,101,114,0,77,101,109,111,114,121,32,86,105,101,119,101,114,0
  dw     86,97,114,105,97,98,108,101,86,105,101,119,101,114,0,86,97,114,105,97,98,108,101,32,86,105,101,119,101,114,0
  dw     76,105,98,114,97,114,121,86,105,101,119,101,114,0,76,105,98,114,97,114,121,32,86,105,101,119,101,114,0
  dw     73,115,72,101,120,0,68,105,115,112,108,97,121,32,72,101,120,32,118,97,108,117,101,115,0
  dw     82,101,103,105,115,116,101,114,73,115,72,101,120,0,68,105,115,112,108,97,121,32,82,101,103,105,115,116,101,114,115,32,97,115,32,104,101,120,0
  dw     83,116,97,99,107,73,115,72,101,120,0,68,105,115,112,108,97,121,32,83,116,97,99,107,32,97,115,32,104,101,120,0
  dw     68,101,98,117,103,84,105,109,101,83,116,97,109,112,0,65,100,100,32,84,105,109,101,115,116,97,109,112,0
  dw     65,117,116,111,83,116,97,99,107,85,112,100,97,116,101,0,85,112,100,97,116,101,32,83,116,97,99,107,32,116,114,97,99,101,32,97,117,116,111,109,97,116,105,99,97,108,108,121,0
  dw     77,101,109,111,114,121,79,110,101,67,111,108,117,109,110,0,65,114,114,97,121,32,118,105,101,119,32,105,110,32,111,110,101,32,99,111,108,117,109,110,32,111,110,108,121,0
  dw     65,117,116,111,79,112,101,110,87,105,110,100,111,119,115,0,79,112,101,110,32,87,105,110,100,111,119,115,32,111,110,32,100,101,98,117,103,103,101,114,32,115,116,97,114,116,0
  dw     87,97,116,99,104,108,105,115,116,0,87,97,116,99,104,108,105,115,116,0
  dw     67,97,108,108,83,116,97,99,107,0,80,114,111,99,101,100,117,114,101,32,67,97,108,108,115,116,97,99,107,0
  dw     75,105,108,108,79,110,69,114,114,111,114,0,75,105,108,108,32,80,114,111,103,114,97,109,32,97,102,116,101,114,32,97,110,32,69,114,114,111,114,0
  dw     75,101,101,112,69,114,114,111,114,77,97,114,107,115,0,75,101,101,112,32,69,114,114,111,114,32,109,97,114,107,115,32,97,102,116,101,114,32,112,114,111,103,114,97,109,32,101,110,100,0
  dw     83,121,115,116,101,109,77,101,115,115,97,103,101,115,0,68,105,115,112,108,97,121,32,83,121,115,116,101,109,32,109,101,115,115,97,103,101,115,0
  dw     68,101,98,117,103,84,111,76,111,103,0,68,105,115,112,108,97,121,32,100,101,98,117,103,32,111,117,116,112,117,116,32,105,110,32,116,104,101,32,101,114,114,111,114,32,108,111,103,0
  dw     80,114,111,102,105,108,101,114,0,80,114,111,102,105,108,101,114,0
  dw     80,114,111,102,105,108,101,114,83,116,97,114,116,117,112,0,83,116,97,114,116,32,80,114,111,102,105,108,101,114,32,111,110,32,112,114,111,103,114,97,109,32,115,116,97,114,116,117,112,0
  dw     68,101,98,117,103,103,101,114,84,105,109,101,111,117,116,0,84,105,109,101,111,117,116,32,102,111,114,32,68,101,98,117,103,103,101,114,32,115,116,97,114,116,117,112,32,40,109,115,41,0
  dw     73,109,112,111,114,116,69,120,112,111,114,116,0,73,109,112,111,114,116,47,69,120,112,111,114,116,0
  dw     73,109,112,111,114,116,0,73,109,112,111,114,116,32,83,101,116,116,105,110,103,115,0
  dw     69,120,112,111,114,116,0,69,120,112,111,114,116,32,83,101,116,116,105,110,103,115,0
  dw     73,110,99,108,117,100,101,83,104,111,114,116,99,117,116,0,73,110,99,108,117,100,101,32,83,104,111,114,116,99,117,116,32,115,101,116,116,105,110,103,115,0
  dw     73,110,99,108,117,100,101,84,111,111,108,98,97,114,0,73,110,99,108,117,100,101,32,84,111,111,108,98,97,114,32,108,97,121,111,117,116,0
  dw     73,110,99,108,117,100,101,67,111,108,111,114,115,0,73,110,99,108,117,100,101,32,67,111,108,111,114,32,115,101,116,116,105,110,103,115,0
  dw     73,110,99,108,117,100,101,70,111,108,100,105,110,103,0,73,110,99,108,117,100,101,32,70,111,108,100,105,110,103,32,107,101,121,119,111,114,100,115,0
  dw     83,97,118,101,84,111,0,83,97,118,101,32,116,111,0
  dw     76,111,97,100,70,114,111,109,0,76,111,97,100,32,102,114,111,109,0
  dw     79,112,101,110,0,79,112,101,110,0
  dw     80,114,101,102,69,120,112,111,114,116,80,97,116,116,101,114,110,0,80,114,101,102,101,114,101,110,99,101,32,115,101,116,116,105,110,103,115,32,40,42,46,112,114,101,102,115,41,124,42,46,112,114,101,102,115,124,84,101,120,116,32,70,105,108,101,115,32,40,42,46,116,120,116,41,124,42,46,116,120,116,124,65,108,108,32,70,105,108,101,115,32,40,42,46,42,41,124,42,46,42,0
  dw     73,109,112,111,114,116,67,111,109,112,108,101,116,101,0,73,109,112,111,114,116,105,110,103,32,80,114,101,102,101,114,101,110,99,101,115,32,99,111,109,112,108,101,116,101,46,0
  dw     69,120,112,111,114,116,67,111,109,112,108,101,116,101,0,69,120,112,111,114,116,105,110,103,32,80,114,101,102,101,114,101,110,99,101,115,32,99,111,109,112,108,101,116,101,46,0
  dw     85,110,107,110,111,119,110,80,114,101,102,70,111,114,109,97,116,0,84,104,105,115,32,80,114,101,102,101,114,101,110,99,101,32,102,105,108,101,32,102,111,114,109,97,116,32,105,115,32,117,110,107,110,111,119,110,46,0
  dw     65,99,99,101,115,115,105,98,105,108,105,116,121,0,65,99,99,101,115,115,105,98,105,108,105,116,121,0
  dw     83,104,111,119,72,105,100,100,101,110,70,105,108,101,115,0,83,104,111,119,32,104,105,100,100,101,110,32,102,105,108,101,115,47,100,105,114,101,99,116,111,114,105,101,115,46,0
  dw     67,117,115,116,111,109,70,111,110,116,0,85,115,101,32,97,32,99,117,115,116,111,109,32,102,111,110,116,0
  dw     67,117,115,116,111,109,67,111,108,111,114,115,0,85,115,101,32,99,117,115,116,111,109,32,99,111,108,111,114,115,0
  dw     70,111,114,109,0,70,111,114,109,0
  dw     70,111,114,109,86,97,114,105,97,98,108,101,0,78,101,119,32,103,97,100,103,101,116,115,32,117,115,101,32,35,80,66,95,65,110,121,32,98,121,32,100,101,102,97,117,108,116,0
  dw     70,111,114,109,86,97,114,105,97,98,108,101,67,97,112,116,105,111,110,0,78,101,119,32,103,97,100,103,101,116,115,32,117,115,101,32,97,32,118,97,114,105,97,98,108,101,32,97,115,32,99,97,112,116,105,111,110,0
  dw     70,111,114,109,71,114,105,100,0,71,114,105,100,32,86,105,115,105,98,108,101,0
  dw     70,111,114,109,69,118,101,110,116,80,114,111,99,101,100,117,114,101,0,71,101,110,101,114,97,116,101,32,101,118,101,110,116,32,112,114,111,99,101,100,117,114,101,0
  dw     70,111,114,109,71,114,105,100,83,105,122,101,0,71,114,105,100,32,83,105,122,101,0
  dw     70,111,114,109,83,107,105,110,0,79,83,32,83,107,105,110,0
  dw     73,115,115,117,101,115,0,73,115,115,117,101,115,0
  dw     73,115,115,117,101,78,97,109,101,83,104,111,114,116,0,78,97,109,101,0
  dw     73,115,115,117,101,69,120,112,114,83,104,111,114,116,0,69,120,112,114,101,115,115,105,111,110,0
  dw     73,115,115,117,101,78,97,109,101,0,73,115,115,117,101,32,110,97,109,101,0
  dw     73,115,115,117,101,69,120,112,114,0,82,101,103,117,108,97,114,32,101,120,114,101,115,115,105,111,110,0
  dw     73,115,115,117,101,67,111,100,101,78,111,67,111,108,111,114,0,78,111,32,99,111,100,101,32,99,111,108,111,114,0
  dw     73,115,115,117,101,67,111,100,101,66,97,99,107,0,67,104,97,110,103,101,32,105,115,115,117,101,32,98,97,99,107,103,114,111,117,110,100,0
  dw     73,115,115,117,101,67,111,100,101,76,105,110,101,0,67,104,97,110,103,101,32,108,105,110,101,32,98,97,99,107,103,114,111,117,110,100,0
  dw     73,115,115,117,101,67,111,100,101,76,105,110,101,76,105,109,105,116,0,79,110,108,121,32,117,112,32,116,111,32,37,108,105,109,105,116,37,32,105,115,115,117,101,115,32,116,104,97,116,32,99,104,97,110,103,101,32,116,104,101,32,108,105,110,101,32,98,97,99,107,103,114,111,117,110,100,32,99,97,110,32,98,101,32,100,101,102,105,110,101,100,46,0
  dw     73,115,115,117,101,73,110,84,111,111,108,0,83,104,111,119,32,105,110,32,105,115,115,117,101,32,116,111,111,108,0
  dw     73,115,115,117,101,73,110,66,114,111,119,115,101,114,0,83,104,111,119,32,105,110,32,112,114,111,99,101,100,117,114,101,32,98,114,111,119,115,101,114,0
  dw     73,110,118,97,108,105,100,69,120,112,114,0,73,110,118,97,108,105,100,32,114,101,103,117,108,97,114,32,101,120,112,114,101,115,115,105,111,110,0
  dw     95,71,82,79,85,80,95,0,70,105,110,100,0
  dw     70,105,110,100,84,105,116,108,101,0,70,105,110,100,47,82,101,112,108,97,99,101,0
  dw     83,101,97,114,99,104,70,111,114,0,83,101,97,114,99,104,32,102,111,114,0
  dw     82,101,112,108,97,99,101,87,105,116,104,0,82,101,112,108,97,99,101,32,119,105,116,104,0
  dw     67,97,115,101,83,101,110,115,105,116,105,118,101,0,67,97,115,101,32,83,101,110,115,105,116,105,118,101,0
  dw     87,104,111,108,101,87,111,114,100,0,87,104,111,108,101,32,87,111,114,100,115,32,111,110,108,121,0
  dw     83,101,108,101,99,116,105,111,110,79,110,108,121,0,83,101,97,114,99,104,32,105,110,115,105,100,101,32,83,101,108,101,99,116,105,111,110,32,111,110,108,121,0
  dw     78,111,67,111,109,109,101,110,116,115,0,68,111,110,39,116,32,115,101,97,114,99,104,32,105,110,32,67,111,109,109,101,110,116,115,0
  dw     78,111,83,116,114,105,110,103,115,0,68,111,110,39,116,32,115,101,97,114,99,104,32,105,110,32,83,116,114,105,110,103,115,0
  dw     70,105,110,100,78,101,120,116,0,70,105,110,100,32,78,101,120,116,0
  dw     70,105,110,100,80,114,101,118,105,111,117,115,0,70,105,110,100,32,112,114,101,118,105,111,117,115,0
  dw     82,101,112,108,97,99,101,0,82,101,112,108,97,99,101,0
  dw     82,101,112,108,97,99,101,65,108,108,0,82,101,112,108,97,99,101,32,65,108,108,0
  dw     78,111,77,111,114,101,77,97,116,99,104,101,115,0,78,111,32,109,111,114,101,32,109,97,116,99,104,101,115,32,102,111,117,110,100,0
  dw     67,111,110,116,105,110,117,101,83,101,97,114,99,104,0,68,111,32,121,111,117,32,119,97,110,116,32,116,111,32,115,101,97,114,99,104,32,102,114,111,109,32,116,104,101,32,115,116,97,114,116,32,111,102,32,116,104,101,32,102,105,108,101,63,0
  dw     67,111,110,116,105,110,117,101,83,101,97,114,99,104,82,101,118,101,114,115,101,0,68,111,32,121,111,117,32,119,97,110,116,32,116,111,32,115,101,97,114,99,104,32,102,114,111,109,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,102,105,108,101,63,0
  dw     83,101,97,114,99,104,67,111,109,112,108,101,116,101,0,83,101,97,114,99,104,47,82,101,112,108,97,99,101,32,99,111,109,112,108,101,116,101,0
  dw     77,97,116,99,104,101,115,70,111,117,110,100,0,109,97,116,99,104,101,115,32,102,111,117,110,100,0
  dw     71,114,101,112,84,105,116,108,101,0,70,105,110,100,32,105,110,32,102,105,108,101,115,0
  dw     79,117,116,112,117,116,84,105,116,108,101,0,70,105,110,100,32,105,110,32,102,105,108,101,115,32,45,32,82,101,115,117,108,116,115,0
  dw     82,111,111,116,68,105,114,101,99,116,111,114,121,0,82,111,111,116,32,100,105,114,101,99,116,111,114,121,0
  dw     69,120,116,101,110,115,105,111,110,115,0,69,120,116,101,110,115,105,111,110,32,102,105,108,116,101,114,115,0
  dw     73,110,99,108,117,100,101,83,117,98,100,105,114,115,0,73,110,99,108,117,100,101,32,115,117,98,45,100,105,114,101,99,116,111,114,105,101,115,0
  dw     83,116,97,114,116,0,83,116,97,114,116,0
  dw     83,116,111,112,0,83,116,111,112,0
  dw     83,116,97,114,116,101,100,0,83,101,97,114,99,104,32,115,116,97,114,116,101,100,0
  dw     65,98,111,114,116,101,100,0,83,101,97,114,99,104,32,97,98,111,114,116,101,100,0
  dw     70,105,110,105,115,104,101,100,0,83,101,97,114,99,104,32,102,105,110,105,115,104,101,100,0
  dw     76,105,110,101,115,70,111,117,110,100,0,76,105,110,101,40,115,41,32,102,111,117,110,100,0
  dw     73,110,102,111,0,73,110,102,111,0
  dw     78,101,101,100,83,116,114,105,110,103,0,89,111,117,32,104,97,118,101,32,116,111,32,101,110,116,101,114,32,97,32,115,116,114,105,110,103,32,116,111,32,102,105,110,100,0
  dw     78,101,101,100,80,97,116,104,0,89,111,117,32,104,97,118,101,32,116,111,32,99,104,111,111,115,101,32,97,32,114,111,111,116,32,112,97,116,104,0
  dw     67,108,101,97,114,0,67,108,101,97,114,0
  dw     66,105,110,97,114,121,70,105,108,101,0,66,105,110,97,114,121,32,102,105,108,101,0
  dw     95,71,82,79,85,80,95,0,68,105,102,102,0
  dw     84,105,116,108,101,0,67,111,109,112,97,114,101,32,70,105,108,101,115,0
  dw     66,117,115,121,0,67,111,109,112,97,114,105,110,103,44,32,112,108,101,97,115,101,32,119,97,105,116,46,46,46,0
  dw     82,101,113,117,101,115,116,101,114,84,105,116,108,101,0,67,104,111,111,115,101,32,97,32,102,105,108,101,32,116,111,32,99,111,109,112,97,114,101,46,46,46,0
  dw     67,117,114,114,101,110,116,69,100,105,116,0,99,117,114,114,101,110,116,108,121,32,101,100,105,116,101,100,32,118,101,114,115,105,111,110,0
  dw     70,105,108,101,69,114,114,111,114,0,84,104,101,32,102,105,108,101,32,39,37,102,105,108,101,37,39,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,46,0
  dw     70,105,108,101,66,105,110,97,114,121,0,84,104,101,32,102,105,108,101,32,39,37,102,105,108,101,37,39,32,105,115,32,97,32,98,105,110,97,114,121,32,102,105,108,101,46,37,110,101,119,108,105,110,101,37,79,110,108,121,32,116,101,120,116,32,102,105,108,101,115,32,99,97,110,32,98,101,32,99,111,109,112,97,114,101,100,46,0
  dw     79,112,101,110,49,0,79,112,101,110,32,108,101,102,116,32,102,105,108,101,32,102,111,114,32,101,100,105,116,105,110,103,0
  dw     79,112,101,110,50,0,79,112,101,110,32,114,105,103,104,116,32,102,105,108,101,32,102,111,114,32,101,100,105,116,105,110,103,0
  dw     82,101,102,114,101,115,104,0,82,101,102,114,101,115,104,32,100,105,102,102,101,114,101,110,99,101,115,0
  dw     83,119,97,112,0,83,119,97,112,32,102,105,108,101,32,112,111,115,105,116,105,111,110,115,0
  dw     67,111,108,111,114,115,0,69,110,97,98,108,101,32,83,121,110,116,97,120,32,99,111,108,111,114,105,110,103,0
  dw     86,101,114,116,105,99,97,108,0,83,112,108,105,116,32,86,105,101,119,32,118,101,114,116,105,99,97,108,108,121,0
  dw     83,104,111,119,84,111,111,108,0,79,112,101,110,32,39,67,111,109,112,97,114,101,39,32,116,111,111,108,0
  dw     72,105,100,101,70,105,108,101,115,0,72,105,100,101,32,102,105,108,101,32,100,105,102,102,101,114,101,110,99,101,115,0
  dw     68,111,119,110,0,71,111,32,116,111,32,110,101,120,116,32,100,105,102,102,101,114,101,110,99,101,0
  dw     85,112,0,71,111,32,116,111,32,112,114,101,118,105,111,117,115,32,100,105,102,102,101,114,101,110,99,101,0
  dw     68,105,97,108,111,103,84,105,116,108,101,0,67,111,109,112,97,114,101,0
  dw     70,105,108,101,115,84,97,98,0,70,105,108,101,115,0
  dw     68,105,114,101,99,116,111,114,105,101,115,84,97,98,0,68,105,114,101,99,116,111,114,105,101,115,0
  dw     79,112,116,105,111,110,115,84,97,98,0,79,112,116,105,111,110,115,0
  dw     70,105,108,101,49,0,70,105,108,101,32,49,0
  dw     70,105,108,101,50,0,70,105,108,101,32,50,0
  dw     68,105,114,101,99,116,111,114,121,49,0,68,105,114,101,99,116,111,114,121,32,49,0
  dw     68,105,114,101,99,116,111,114,121,50,0,68,105,114,101,99,116,111,114,121,32,50,0
  dw     73,103,110,111,114,101,67,97,115,101,0,73,103,110,111,114,101,32,99,97,115,101,32,99,104,97,110,103,101,115,0
  dw     73,103,110,111,114,101,83,112,97,99,101,65,108,108,0,73,103,110,111,114,101,32,97,108,108,32,115,112,97,99,101,32,99,104,97,110,103,101,115,0
  dw     73,103,110,111,114,101,83,112,97,99,101,76,101,102,116,0,73,103,110,111,114,101,32,115,112,97,99,101,32,99,104,97,110,103,101,115,32,111,110,32,116,104,101,32,108,101,102,116,32,115,105,100,101,32,111,102,32,97,32,108,105,110,101,0
  dw     73,103,110,111,114,101,83,112,97,99,101,82,105,103,104,116,0,73,103,110,111,114,101,32,115,112,97,99,101,32,99,104,97,110,103,101,115,32,111,110,32,116,104,101,32,114,105,103,104,116,32,115,105,100,101,32,111,102,32,97,32,108,105,110,101,0
  dw     69,109,112,116,121,70,105,101,108,100,0,65,108,108,32,102,105,101,108,100,115,32,109,117,115,116,32,98,101,32,102,105,108,108,101,100,32,111,117,116,46,0
  dw     67,111,109,112,97,114,101,0,67,111,109,112,97,114,101,0
  dw     70,105,108,101,110,97,109,101,0,70,105,108,101,110,97,109,101,0
  dw     83,116,97,116,101,0,83,116,97,116,117,115,0
  dw     68,97,116,101,49,0,68,97,116,101,32,105,110,32,40,49,41,0
  dw     68,97,116,101,50,0,68,97,116,101,32,105,110,32,40,50,41,0
  dw     70,105,108,101,69,113,117,97,108,0,85,110,99,104,97,110,103,101,100,0
  dw     70,105,108,101,65,100,100,0,79,110,108,121,32,105,110,32,40,50,41,0
  dw     70,105,108,101,68,101,108,101,116,101,0,79,110,108,121,32,105,110,32,40,49,41,0
  dw     70,105,108,101,77,111,100,105,102,121,0,77,111,100,105,102,105,101,100,0
  dw     68,97,116,101,70,111,114,109,97,116,0,37,109,109,47,37,100,100,47,37,121,121,121,121,32,37,104,104,58,37,105,105,0
  dw     95,71,82,79,85,80,95,0,72,105,115,116,111,114,121,0
  dw     84,105,116,108,101,0,83,101,115,115,105,111,110,32,72,105,115,116,111,114,121,0
  dw     86,105,101,119,70,105,108,101,0,70,105,108,101,0
  dw     86,105,101,119,83,101,115,115,105,111,110,0,83,101,115,115,105,111,110,0
  dw     84,105,109,101,0,84,105,109,101,0
  dw     70,105,108,101,0,70,105,108,101,0
  dw     83,101,115,115,105,111,110,0,83,101,115,115,105,111,110,0
  dw     84,105,109,101,70,111,114,109,97,116,0,37,104,104,58,37,105,105,58,37,115,115,0
  dw     68,97,116,101,84,105,109,101,70,111,114,109,97,116,0,37,109,109,47,37,100,100,47,37,121,121,121,121,32,37,104,104,58,37,105,105,58,37,115,115,0
  dw     68,117,114,97,116,105,111,110,77,105,110,117,116,101,115,0,109,105,110,117,116,101,115,0
  dw     68,117,114,97,116,105,111,110,72,111,117,114,115,0,104,111,117,114,115,0
  dw     83,101,115,115,105,111,110,82,117,110,110,105,110,103,0,114,117,110,110,105,110,103,0
  dw     83,101,115,115,105,111,110,67,114,97,115,104,101,100,0,101,110,100,101,100,32,117,110,101,120,112,101,99,116,101,100,108,121,0
  dw     67,117,114,114,101,110,116,83,101,115,115,105,111,110,0,67,117,114,114,101,110,116,32,83,101,115,115,105,111,110,0
  dw     85,110,115,97,118,101,100,83,111,117,114,99,101,0,85,110,115,97,118,101,100,32,115,111,117,114,99,101,0
  dw     67,114,97,115,104,101,100,73,110,102,111,0,65,32,112,114,101,118,105,111,117,115,32,73,68,69,32,115,101,115,115,105,111,110,32,115,101,101,109,115,32,116,111,32,104,97,118,101,32,101,110,100,101,100,32,105,109,112,114,111,112,101,114,108,121,46,37,110,101,119,108,105,110,101,37,68,111,32,121,111,117,32,119,97,110,116,32,116,111,32,111,112,101,110,32,116,104,101,32,115,101,115,115,105,111,110,32,104,105,115,116,111,114,121,32,116,111,32,114,101,99,111,118,101,114,32,117,110,115,97,118,101,100,32,99,104,97,110,103,101,115,63,0
  dw     70,105,108,101,69,114,114,111,114,0,67,111,117,108,100,32,110,111,116,32,111,112,101,110,32,104,105,115,116,111,114,121,32,100,97,116,97,98,97,115,101,58,32,37,110,101,119,108,105,110,101,37,37,102,105,108,101,110,97,109,101,37,37,110,101,119,108,105,110,101,37,37,110,101,119,108,105,110,101,37,78,111,32,104,105,115,116,111,114,121,32,119,105,108,108,32,98,101,32,114,101,99,111,114,100,101,100,32,102,111,114,32,116,104,105,115,32,115,101,115,115,105,111,110,46,0
  dw     86,101,114,115,105,111,110,69,114,114,111,114,0,84,104,101,32,104,105,115,116,111,114,121,32,100,97,116,97,98,97,115,101,32,105,115,32,102,114,111,109,32,97,110,32,105,110,99,111,109,112,97,116,105,98,108,101,32,110,101,119,101,114,32,118,101,114,115,105,111,110,32,111,102,32,80,117,114,101,66,97,115,105,99,46,37,110,101,119,108,105,110,101,37,78,111,32,104,105,115,116,111,114,121,32,119,105,108,108,32,98,101,32,114,101,99,111,114,100,101,100,32,105,110,32,116,104,105,115,32,115,101,115,115,105,111,110,32,116,111,32,112,114,101,118,101,110,116,32,99,111,114,114,117,112,116,105,111,110,46,37,110,101,119,108,105,110,101,37,65,32,100,105,102,102,101,114,101,110,116,32,100,97,116,97,98,97,115,101,32,102,105,108,101,32,99,97,110,32,98,101,32,115,112,101,99,105,102,105,101,100,32,118,105,97,32,99,111,109,109,97,110,100,108,105,110,101,32,111,112,116,105,111,110,115,46,37,110,101,119,108,105,110,101,37,37,110,101,119,108,105,110,101,37,68,97,116,97,98,97,115,101,32,102,105,108,101,58,32,37,102,105,108,101,110,97,109,101,37,0
  dw     83,104,117,116,100,111,119,110,84,105,116,108,101,0,80,117,114,101,66,97,115,105,99,58,32,80,108,101,97,115,101,32,119,97,105,116,0
  dw     83,104,117,116,100,111,119,110,77,101,115,115,97,103,101,0,83,97,118,105,110,103,32,115,101,115,115,105,111,110,32,104,105,115,116,111,114,121,32,116,111,32,100,105,115,107,46,46,46,0
  dw     95,71,82,79,85,80,95,0,83,116,114,117,99,116,117,114,101,86,105,101,119,101,114,0
  dw     84,105,116,108,101,0,83,116,114,117,99,116,117,114,101,32,86,105,101,119,101,114,0
  dw     83,116,114,117,99,116,117,114,101,115,0,83,116,114,117,99,116,117,114,101,115,0
  dw     73,110,116,101,114,102,97,99,101,115,0,73,110,116,101,114,102,97,99,101,115,0
  dw     67,111,110,115,116,97,110,116,115,0,67,111,110,115,116,97,110,116,115,0
  dw     80,97,114,101,110,116,0,66,97,99,107,0
  dw     83,116,97,121,79,110,84,111,112,0,83,116,97,121,32,111,110,32,116,111,112,0
  dw     73,110,99,108,117,100,101,84,121,112,101,115,0,73,110,99,108,117,100,101,32,116,121,112,101,115,0
  dw     73,110,115,101,114,116,78,97,109,101,0,73,110,115,101,114,116,32,110,97,109,101,0
  dw     73,110,115,101,114,116,0,73,110,115,101,114,116,0
  dw     73,110,115,101,114,116,67,111,112,121,0,73,110,115,101,114,116,32,99,111,112,121,0
  dw     71,101,116,86,97,114,78,97,109,101,0,71,101,116,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0
  dw     73,110,112,117,116,86,97,114,78,97,109,101,0,80,108,101,97,115,101,32,105,110,112,117,116,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0
  dw     68,101,102,97,117,108,116,86,97,114,0,118,97,114,0
  dw     95,71,82,79,85,80,95,0,67,111,109,112,105,108,101,114,0
  dw     79,112,116,105,111,110,115,84,105,116,108,101,0,67,111,109,112,105,108,101,114,32,79,112,116,105,111,110,115,0
  dw     73,110,112,117,116,70,105,108,101,0,73,110,112,117,116,32,115,111,117,114,99,101,32,102,105,108,101,0
  dw     79,117,116,112,117,116,70,105,108,101,0,79,117,116,112,117,116,32,101,120,101,99,117,116,97,98,108,101,0
  dw     77,97,105,110,70,105,108,101,0,77,97,105,110,32,115,111,117,114,99,101,32,102,105,108,101,0
  dw     85,115,101,73,99,111,110,0,85,115,101,32,73,99,111,110,0
  dw     85,115,101,67,111,109,112,105,108,101,114,0,85,115,101,32,67,111,109,112,105,108,101,114,0
  dw     69,110,97,98,108,101,68,101,98,117,103,103,101,114,0,69,110,97,98,108,101,32,68,101,98,117,103,103,101,114,0
  dw     69,110,97,98,108,101,80,117,114,105,102,105,101,114,0,69,110,97,98,108,101,32,80,117,114,105,102,105,101,114,0
  dw     69,110,97,98,108,101,65,83,77,0,69,110,97,98,108,101,32,105,110,108,105,110,101,32,65,83,77,32,115,121,110,116,97,120,32,99,111,108,111,114,105,110,103,0
  dw     69,110,97,98,108,101,88,80,0,69,110,97,98,108,101,32,109,111,100,101,114,110,32,116,104,101,109,101,32,115,117,112,112,111,114,116,32,40,102,111,114,32,87,105,110,100,111,119,115,32,88,80,32,97,110,100,32,97,98,111,118,101,41,0
  dw     69,110,97,98,108,101,65,100,109,105,110,0,82,101,113,117,101,115,116,32,65,100,109,105,110,105,115,116,114,97,116,111,114,32,109,111,100,101,32,102,111,114,32,87,105,110,100,111,119,115,32,86,105,115,116,97,32,97,110,100,32,97,98,111,118,101,0
  dw     69,110,97,98,108,101,85,115,101,114,0,82,101,113,117,101,115,116,32,85,115,101,114,32,109,111,100,101,32,102,111,114,32,87,105,110,100,111,119,115,32,86,105,115,116,97,32,97,110,100,32,97,98,111,118,101,32,40,110,111,32,118,105,114,116,117,97,108,105,115,97,116,105,111,110,41,0
  dw     68,80,73,65,119,97,114,101,0,69,110,97,98,108,101,32,68,80,73,32,97,119,97,114,101,32,101,120,101,99,117,116,97,98,108,101,32,40,87,105,110,100,111,119,115,41,0
  dw     69,110,97,98,108,101,79,110,69,114,114,111,114,0,69,110,97,98,108,101,32,79,110,69,114,114,111,114,32,108,105,110,101,115,32,115,117,112,112,111,114,116,0
  dw     69,110,97,98,108,101,84,104,114,101,97,100,0,67,114,101,97,116,101,32,116,104,114,101,97,100,115,97,102,101,32,101,120,101,99,117,116,97,98,108,101,0
  dw     69,120,101,70,111,114,109,97,116,0,69,120,101,99,117,116,97,98,108,101,32,102,111,114,109,97,116,0
  dw     83,117,98,83,121,115,116,101,109,0,76,105,98,114,97,114,121,32,83,117,98,115,121,115,116,101,109,0
  dw     67,111,109,109,97,110,100,76,105,110,101,0,69,120,101,99,117,116,97,98,108,101,32,67,111,109,109,97,110,100,108,105,110,101,0
  dw     78,101,119,76,105,110,101,84,121,112,101,0,83,111,117,114,99,101,102,105,108,101,32,78,101,119,108,105,110,101,32,102,111,114,109,97,116,0
  dw     84,101,120,116,69,110,99,111,100,105,110,103,0,83,111,117,114,99,101,102,105,108,101,32,84,101,120,116,32,101,110,99,111,100,105,110,103,0
  dw     85,110,107,110,111,119,110,86,101,114,115,105,111,110,0,67,97,110,110,111,116,32,114,101,97,100,32,118,101,114,115,105,111,110,0
  dw     69,110,99,111,100,105,110,103,80,108,97,105,110,0,80,108,97,105,110,32,84,101,120,116,0
  dw     69,110,99,111,100,105,110,103,85,116,102,56,0,85,84,70,45,56,0
  dw     79,112,101,110,77,97,105,110,70,105,108,101,0,67,104,111,111,115,101,32,97,32,110,101,119,32,77,97,105,110,32,83,111,117,114,99,101,32,102,105,108,101,46,46,46,0
  dw     83,101,116,79,117,116,112,117,116,70,105,108,101,0,83,112,101,99,105,102,121,32,111,117,116,112,117,116,32,69,120,101,99,117,116,97,98,108,101,46,46,46,0
  dw     79,112,101,110,73,99,111,110,0,67,104,111,111,115,101,32,97,110,32,73,99,111,110,32,102,111,114,32,116,104,101,32,69,120,101,99,117,116,97,98,108,101,46,46,46,0
  dw     67,114,101,97,116,101,69,120,101,0,67,114,101,97,116,101,32,69,120,101,99,117,116,97,98,108,101,46,46,46,0
  dw     79,112,101,110,76,105,110,107,101,114,70,105,108,101,0,67,104,111,111,115,101,32,97,32,102,105,108,101,32,119,105,116,104,32,108,105,110,107,101,114,32,111,112,116,105,111,110,115,46,46,46,0
  dw     83,111,117,114,99,101,80,97,116,116,101,114,110,0,80,117,114,101,66,97,115,105,99,32,70,105,108,101,115,32,40,42,46,112,98,44,32,42,46,112,98,105,41,124,42,46,112,98,59,42,46,112,98,105,124,80,117,114,101,66,97,115,105,99,32,83,111,117,114,99,101,99,111,100,101,115,32,40,42,46,112,98,41,124,42,46,112,98,124,80,117,114,101,66,97,115,105,99,32,73,110,99,108,117,100,101,102,105,108,101,115,32,40,42,46,112,98,105,41,124,42,46,112,98,105,124,65,108,108,32,70,105,108,101,115,32,40,42,46,42,41,124,42,46,42,0
  dw     73,99,111,110,80,97,116,116,101,114,110,0,73,99,111,110,32,102,105,108,101,115,32,40,42,46,105,99,111,41,124,42,46,105,99,111,124,65,108,108,32,70,105,108,101,115,32,40,42,46,42,41,124,42,46,42,0
  dw     68,108,108,80,97,116,116,101,114,110,0,83,104,97,114,101,100,32,68,76,76,32,40,42,46,100,108,108,41,124,42,46,68,76,76,124,65,108,108,32,70,105,108,101,115,32,40,42,46,42,41,124,42,46,42,0
  dw     69,120,101,80,97,116,116,101,114,110,0,69,120,101,99,117,116,97,98,108,101,32,40,42,46,101,120,101,41,124,42,46,69,88,69,124,65,108,108,32,70,105,108,101,115,32,40,42,46,42,41,124,42,46,42,0
  dw     65,108,108,70,105,108,101,115,80,97,116,116,101,114,110,0,65,108,108,32,70,105,108,101,115,32,40,42,46,42,41,124,42,46,42,0
  dw     67,111,109,112,105,108,105,110,103,0,67,111,109,112,105,108,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,46,46,46,0
  dw     76,105,110,101,115,0,108,105,110,101,115,0
  dw     73,110,99,108,117,100,105,110,103,0,73,110,99,108,117,100,105,110,103,0
  dw     68,101,116,97,105,108,115,0,68,101,116,97,105,108,115,0
  dw     70,105,110,105,115,104,105,110,103,0,67,114,101,97,116,105,110,103,32,101,120,101,99,117,116,97,98,108,101,32,102,105,108,101,46,46,46,0
  dw     65,98,111,114,116,105,110,103,0,65,98,111,114,116,105,110,103,32,99,111,109,112,105,108,97,116,105,111,110,46,46,46,0
  dw     76,105,110,101,115,67,111,109,112,105,108,101,100,0,37,99,111,117,110,116,37,32,108,105,110,101,115,32,99,111,109,112,105,108,101,100,46,0
  dw     83,97,118,101,84,101,109,112,69,114,114,111,114,0,67,97,110,39,116,32,115,97,118,101,32,83,111,117,114,99,101,99,111,100,101,32,116,111,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,33,0
  dw     82,101,97,100,77,97,105,110,69,114,114,111,114,0,67,97,110,39,116,32,114,101,97,100,32,109,97,105,110,32,83,111,117,114,99,101,99,111,100,101,33,0
  dw     66,117,115,121,0,84,104,101,32,99,111,109,112,105,108,101,114,32,99,97,110,39,116,32,98,101,32,114,101,115,116,97,114,116,101,100,46,32,73,116,32,105,115,32,98,117,115,121,46,0
  dw     78,111,116,82,101,97,100,121,0,84,104,101,32,99,111,109,112,105,108,101,114,32,105,115,110,39,116,32,108,111,97,100,101,100,32,121,101,116,46,46,46,32,112,108,101,97,115,101,32,116,114,121,32,97,103,97,105,110,46,0
  dw     82,101,115,112,111,110,115,101,69,114,114,111,114,0,87,114,111,110,103,32,99,111,109,112,105,108,101,114,32,114,101,115,112,111,110,115,101,46,32,80,114,111,98,97,98,108,121,32,110,111,116,32,116,104,101,32,99,111,114,114,101,99,116,32,99,111,109,112,105,108,101,114,32,118,101,114,115,105,111,110,46,37,110,101,119,108,105,110,101,37,80,108,101,97,115,101,32,114,101,105,110,115,116,97,108,108,32,37,112,114,111,100,117,99,116,37,46,0
  dw     67,111,109,112,105,108,101,114,67,114,97,115,104,0,84,104,101,32,99,111,109,112,105,108,101,114,32,97,112,112,101,97,114,115,32,116,111,32,104,97,118,101,32,99,114,97,115,104,101,100,32,111,114,32,113,117,105,116,32,117,110,101,120,112,101,99,116,101,100,108,121,46,32,37,110,101,119,108,105,110,101,37,73,116,32,119,105,108,108,32,98,101,32,114,101,115,116,97,114,116,101,100,46,37,110,101,119,108,105,110,101,37,37,110,101,119,108,105,110,101,37,80,108,101,97,115,101,32,114,101,112,111,114,116,32,116,104,101,32,99,111,110,100,105,116,105,111,110,115,32,116,104,97,116,32,99,97,117,115,101,100,32,116,104,105,115,32,97,115,32,97,32,98,117,103,46,0
  dw     83,117,98,115,121,115,116,101,109,69,114,114,111,114,0,84,104,101,32,102,111,108,108,111,119,105,110,103,32,115,117,98,115,121,115,116,101,109,32,99,97,110,110,111,116,32,98,101,32,102,111,117,110,100,0
  dw     69,114,114,111,114,76,105,110,101,0,76,105,110,101,0
  dw     69,114,114,111,114,77,97,105,110,70,105,108,101,0,69,114,114,111,114,32,105,110,32,116,104,101,32,77,97,105,110,70,105,108,101,0
  dw     69,114,114,111,114,73,110,99,108,117,100,101,70,105,108,101,0,69,114,114,111,114,32,105,110,32,105,110,99,108,117,100,101,100,32,70,105,108,101,0
  dw     70,105,108,101,69,114,114,111,114,0,67,97,110,110,111,116,32,114,101,97,100,32,67,111,109,112,105,108,101,114,32,111,117,116,112,117,116,33,0
  dw     87,97,114,110,105,110,103,0,87,97,114,110,105,110,103,0
  dw     87,97,114,110,105,110,103,84,111,116,97,108,115,0,67,111,109,112,105,108,97,116,105,111,110,32,115,117,99,99,101,101,100,101,100,32,119,105,116,104,32,37,119,97,114,110,105,110,103,115,37,32,119,97,114,110,105,110,103,40,115,41,46,0
  dw     76,111,103,67,111,109,112,105,108,101,114,0,91,67,79,77,80,73,76,69,82,93,0
  dw     80,114,111,103,114,97,109,69,110,100,101,100,0,84,104,101,32,101,120,101,99,117,116,105,111,110,32,111,102,32,116,104,101,32,80,114,111,103,114,97,109,32,104,97,115,32,102,105,110,105,115,104,101,100,46,0
  dw     68,101,98,117,103,103,101,114,87,97,105,116,0,80,114,101,115,115,32,69,110,116,101,114,32,116,111,32,99,108,111,115,101,32,116,104,101,32,68,101,98,117,103,103,101,114,32,119,105,110,100,111,119,46,0
  dw     68,101,98,117,103,103,101,114,79,110,0,79,110,0
  dw     68,101,98,117,103,103,101,114,79,102,102,0,79,102,102,0
  dw     69,120,101,78,97,109,101,69,114,114,111,114,0,67,97,110,110,111,116,32,101,120,101,99,117,116,101,32,116,104,101,32,99,111,109,112,105,108,101,100,32,70,105,108,101,33,0
  dw     82,101,115,116,97,114,116,69,114,114,111,114,0,67,111,109,112,105,108,101,114,32,114,101,115,116,97,114,116,32,102,97,105,108,101,100,33,0
  dw     83,116,97,114,116,69,114,114,111,114,0,67,97,110,110,111,116,32,115,116,97,114,116,32,99,111,109,112,105,108,101,114,0
  dw     67,111,109,112,105,108,101,114,78,111,116,70,111,117,110,100,0,84,104,101,32,114,101,113,117,105,114,101,100,32,99,111,109,112,105,108,101,114,32,99,97,110,110,111,116,32,98,101,32,102,111,117,110,100,0
  dw     65,108,108,67,80,85,0,65,108,108,32,67,80,85,0
  dw     68,121,110,97,109,105,99,67,80,85,0,68,121,110,97,109,105,99,32,67,80,85,0
  dw     77,77,88,0,67,80,85,32,119,105,116,104,32,77,77,88,0
  dw     51,68,78,79,87,0,67,80,85,32,119,105,116,104,32,51,68,78,79,87,0
  dw     83,83,69,0,67,80,85,32,119,105,116,104,32,83,83,69,0
  dw     83,83,69,50,0,67,80,85,32,119,105,116,104,32,83,83,69,50,0
  dw     76,105,110,107,101,114,79,112,116,105,111,110,115,0,76,105,110,107,101,114,32,111,112,116,105,111,110,115,32,102,105,108,101,0
  dw     83,101,108,101,99,116,68,101,98,117,103,103,101,114,0,85,115,101,32,115,101,108,101,99,116,101,100,32,68,101,98,117,103,103,101,114,0
  dw     83,101,108,101,99,116,87,97,114,110,105,110,103,0,85,115,101,32,87,97,114,110,105,110,103,32,109,111,100,101,0
  dw     69,120,101,99,117,116,101,79,112,116,105,111,110,115,0,82,117,110,32,101,120,101,99,117,116,97,98,108,101,32,119,105,116,104,0
  dw     67,117,114,114,101,110,116,68,105,114,101,99,116,111,114,121,0,67,117,114,114,101,110,116,32,100,105,114,101,99,116,111,114,121,0
  dw     84,101,109,112,111,114,97,114,121,69,120,101,0,67,114,101,97,116,101,32,116,101,109,112,111,114,97,114,121,32,101,120,101,99,117,116,97,98,108,101,32,105,110,32,116,104,101,32,115,111,117,114,99,101,32,100,105,114,101,99,116,111,114,121,0
  dw     69,120,101,99,117,116,101,84,111,111,108,115,0,69,120,101,99,117,116,101,32,116,111,111,108,115,0
  dw     71,108,111,98,97,108,83,101,116,116,105,110,103,0,71,108,111,98,97,108,32,115,101,116,116,105,110,103,0
  dw     69,100,105,116,111,114,67,111,110,115,116,97,110,116,115,0,69,100,105,116,111,114,32,99,111,110,115,116,97,110,116,115,0
  dw     67,117,115,116,111,109,67,111,110,115,116,97,110,116,115,0,67,117,115,116,111,109,32,99,111,110,115,116,97,110,116,115,0
  dw     84,97,114,103,101,116,76,105,115,116,0,67,111,109,112,105,108,101,32,116,97,114,103,101,116,115,0
  dw     65,100,100,84,97,114,103,101,116,0,65,100,100,32,110,101,119,32,116,97,114,103,101,116,0
  dw     67,111,112,121,84,97,114,103,101,116,0,67,111,112,121,32,116,97,114,103,101,116,0
  dw     82,101,110,97,109,101,84,97,114,103,101,116,0,82,101,110,97,109,101,32,116,97,114,103,101,116,0
  dw     69,100,105,116,84,97,114,103,101,116,0,69,100,105,116,32,116,97,114,103,101,116,0
  dw     82,101,109,111,118,101,84,97,114,103,101,116,0,82,101,109,111,118,101,32,116,97,114,103,101,116,0
  dw     84,97,114,103,101,116,85,112,0,77,111,118,101,32,116,97,114,103,101,116,32,117,112,0
  dw     84,97,114,103,101,116,68,111,119,110,0,77,111,118,101,32,116,97,114,103,101,116,32,100,111,119,110,0
  dw     68,101,102,97,117,108,116,84,97,114,103,101,116,0,83,101,116,32,97,115,32,100,101,102,97,117,108,116,32,116,97,114,103,101,116,0
  dw     69,110,97,98,108,101,84,97,114,103,101,116,0,69,110,97,98,108,101,32,105,110,32,39,66,117,105,108,100,32,97,108,108,32,84,97,114,103,101,116,115,39,0
  dw     68,101,102,97,117,108,116,84,97,114,103,101,116,78,97,109,101,0,68,101,102,97,117,108,116,32,84,97,114,103,101,116,0
  dw     78,101,119,84,97,114,103,101,116,78,97,109,101,0,78,101,119,32,84,97,114,103,101,116,0
  dw     69,110,116,101,114,84,97,114,103,101,116,78,97,109,101,0,69,110,116,101,114,32,116,97,114,103,101,116,32,110,97,109,101,0
  dw     84,97,114,103,101,116,67,111,112,121,83,117,102,102,105,120,0,40,67,111,112,121,41,0
  dw     78,97,109,101,69,120,105,115,116,115,0,84,104,105,115,32,110,97,109,101,32,105,115,32,97,108,114,101,97,100,121,32,117,115,101,100,32,98,121,32,97,110,111,116,104,101,114,32,116,97,114,103,101,116,46,0
  dw     67,111,110,102,105,114,109,84,97,114,103,101,116,68,101,108,101,116,101,0,68,111,32,121,111,117,32,114,101,97,108,108,121,32,119,97,110,116,32,116,111,32,100,101,108,101,116,101,32,116,104,105,115,32,116,97,114,103,101,116,63,0
  dw     78,111,73,110,112,117,116,70,105,108,101,0,84,104,101,32,116,97,114,103,101,116,32,39,37,116,97,114,103,101,116,37,39,32,102,111,114,32,116,104,105,115,32,80,114,111,106,101,99,116,32,104,97,115,32,110,111,32,109,97,105,110,32,115,111,117,114,99,101,102,105,108,101,32,40,116,111,32,115,101,116,32,105,110,32,39,67,111,109,112,105,108,101,114,32,111,112,116,105,111,110,115,39,41,46,0
  dw     78,111,79,117,116,112,117,116,70,105,108,101,0,84,104,101,32,116,97,114,103,101,116,32,39,37,116,97,114,103,101,116,37,39,32,102,111,114,32,116,104,105,115,32,80,114,111,106,101,99,116,32,104,97,115,32,110,111,32,111,117,116,112,117,116,32,101,120,101,99,117,116,97,98,108,101,32,102,105,108,101,46,0
  dw     83,97,118,101,65,110,121,119,97,121,0,83,104,111,117,108,100,32,105,116,32,98,101,32,115,97,118,101,100,32,97,110,121,119,97,121,32,63,0
  dw     66,117,105,108,100,87,105,110,100,111,119,84,105,116,108,101,0,66,117,105,108,100,105,110,103,46,46,46,0
  dw     66,117,105,108,100,80,114,111,103,114,101,115,115,0,80,114,111,103,114,101,115,115,0
  dw     66,117,105,108,100,76,111,103,0,76,111,103,0
  dw     67,108,111,115,101,87,104,101,110,68,111,110,101,0,67,108,111,115,101,32,119,105,110,100,111,119,32,105,102,32,99,111,109,112,108,101,116,101,100,32,115,117,99,99,101,115,115,102,117,108,0
  dw     83,116,97,116,117,115,79,107,0,79,107,0
  dw     83,116,97,116,117,115,69,114,114,111,114,0,69,114,114,111,114,0
  dw     83,116,97,116,117,115,87,97,114,110,105,110,103,0,87,97,114,110,105,110,103,115,58,32,37,99,111,117,110,116,37,0
  dw     78,111,66,117,105,108,100,84,97,114,103,101,116,115,0,78,111,32,116,97,114,103,101,116,115,32,104,97,118,101,32,98,101,101,110,32,115,101,116,32,105,110,32,116,104,101,32,99,111,109,112,105,108,101,114,32,111,112,116,105,111,110,115,32,102,111,114,32,39,66,117,105,108,100,32,97,108,108,32,84,97,114,103,101,116,115,39,46,0
  dw     66,117,105,108,100,83,116,97,114,116,0,66,117,105,108,100,105,110,103,32,39,37,116,97,114,103,101,116,37,39,46,46,46,0
  dw     66,117,105,108,100,83,117,99,99,101,115,115,0,67,111,109,112,105,108,97,116,105,111,110,32,115,117,99,99,101,115,115,102,117,108,46,0
  dw     66,117,105,108,100,83,116,97,116,115,78,111,69,114,114,111,114,0,37,99,111,117,110,116,37,32,116,97,114,103,101,116,115,32,99,111,109,112,105,108,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,46,0
  dw     66,117,105,108,100,83,116,97,116,115,69,114,114,111,114,0,37,99,111,117,110,116,37,32,116,97,114,103,101,116,115,32,99,111,109,112,105,108,101,100,32,119,105,116,104,32,101,114,114,111,114,115,46,0
  dw     66,117,105,108,100,83,116,97,116,115,87,97,114,110,105,110,103,0,37,99,111,117,110,116,37,32,119,97,114,110,105,110,103,115,32,116,111,116,97,108,46,0
  dw     66,117,105,108,100,83,116,97,116,115,65,98,111,114,116,101,100,0,84,104,101,32,98,117,105,108,100,32,115,101,113,117,101,110,99,101,32,119,97,115,32,97,98,111,114,116,101,100,46,0
  dw     66,117,105,108,100,82,117,110,84,111,111,108,0,69,120,101,99,117,116,105,110,103,32,101,120,116,101,114,110,97,108,32,116,111,111,108,0
  dw     66,117,105,108,100,85,115,101,67,111,109,112,105,108,101,114,0,85,115,105,110,103,32,99,111,109,112,105,108,101,114,0
  dw     84,97,114,103,101,116,78,111,116,70,111,117,110,100,0,66,117,105,108,100,32,116,97,114,103,101,116,32,110,111,116,32,102,111,117,110,100,0
  dw     78,111,84,97,114,103,101,116,115,0,84,104,101,114,101,32,97,114,101,32,110,111,32,116,97,114,103,101,116,115,32,116,111,32,99,111,109,112,105,108,101,46,0
  dw     84,97,114,103,101,116,66,117,105,108,100,69,114,114,111,114,0,69,114,114,111,114,32,98,117,105,108,100,105,110,103,32,39,37,116,97,114,103,101,116,37,39,0
  dw     95,71,82,79,85,80,95,0,82,101,115,111,117,114,99,101,115,0
  dw     67,111,109,112,105,108,101,114,79,112,116,105,111,110,115,0,67,111,109,112,105,108,101,114,32,79,112,116,105,111,110,115,0
  dw     67,111,109,112,105,108,101,82,117,110,0,67,111,109,112,105,108,101,47,82,117,110,0
  dw     67,111,110,115,116,97,110,116,115,0,67,111,110,115,116,97,110,116,115,0
  dw     86,101,114,115,105,111,110,73,110,102,111,0,86,101,114,115,105,111,110,32,73,110,102,111,0
  dw     82,101,115,111,117,114,99,101,115,0,82,101,115,111,117,114,99,101,115,0
  dw     79,112,101,110,82,101,115,111,117,114,99,101,0,83,101,108,101,99,116,32,114,101,115,111,117,114,99,101,32,115,99,114,105,112,116,32,116,111,32,97,100,100,46,46,46,0
  dw     82,101,115,111,117,114,99,101,80,97,116,116,101,114,110,0,80,79,82,67,32,114,101,115,111,117,114,99,101,32,115,99,114,105,112,116,115,32,40,42,46,114,99,41,124,42,46,114,99,124,65,108,108,32,70,105,108,101,115,32,40,42,46,42,41,124,42,46,42,0
  dw     73,110,99,108,117,100,101,86,101,114,115,105,111,110,0,73,110,99,108,117,100,101,32,86,101,114,115,105,111,110,32,73,110,102,111,114,109,97,116,105,111,110,0
  dw     86,101,114,115,105,111,110,70,105,101,108,100,48,0,70,105,108,101,32,86,101,114,115,105,111,110,32,40,110,44,110,44,110,44,110,41,0
  dw     86,101,114,115,105,111,110,70,105,101,108,100,49,0,80,114,111,100,117,99,116,32,86,101,114,115,105,111,110,32,40,110,44,110,44,110,44,110,41,0
  dw     86,101,114,115,105,111,110,70,105,101,108,100,50,0,67,111,109,112,97,110,121,32,78,97,109,101,0
  dw     86,101,114,115,105,111,110,70,105,101,108,100,51,0,80,114,111,100,117,99,116,32,78,97,109,101,0
  dw     86,101,114,115,105,111,110,70,105,101,108,100,52,0,80,114,111,100,117,99,116,32,86,101,114,115,105,111,110,0
  dw     86,101,114,115,105,111,110,70,105,101,108,100,53,0,70,105,108,101,32,86,101,114,115,105,111,110,0
  dw     86,101,114,115,105,111,110,70,105,101,108,100,54,0,70,105,108,101,32,68,101,115,99,114,105,112,116,105,111,110,0
  dw     86,101,114,115,105,111,110,70,105,101,108,100,55,0,73,110,116,101,114,110,97,108,32,78,97,109,101,0
  dw     86,101,114,115,105,111,110,70,105,101,108,100,56,0,79,114,105,103,105,110,97,108,32,70,105,108,101,78,97,109,101,0
  dw     86,101,114,115,105,111,110,70,105,101,108,100,57,0,76,101,103,97,108,32,67,111,112,121,114,105,103,104,116,0
  dw     86,101,114,115,105,111,110,70,105,101,108,100,49,48,0,76,101,103,97,108,32,84,114,97,100,101,109,97,114,107,115,0
  dw     86,101,114,115,105,111,110,70,105,101,108,100,49,49,0,80,114,105,118,97,116,101,32,66,117,105,108,100,0
  dw     86,101,114,115,105,111,110,70,105,101,108,100,49,50,0,83,112,101,99,105,97,108,32,66,117,105,108,100,0
  dw     86,101,114,115,105,111,110,70,105,101,108,100,49,51,0,69,109,97,105,108,0
  dw     86,101,114,115,105,111,110,70,105,101,108,100,49,52,0,87,101,98,115,105,116,101,0
  dw     86,101,114,115,105,111,110,70,105,101,108,100,49,53,0,70,105,108,101,32,79,83,0
  dw     86,101,114,115,105,111,110,70,105,101,108,100,49,54,0,70,105,108,101,32,84,121,112,101,0
  dw     86,101,114,115,105,111,110,70,105,101,108,100,49,55,0,76,97,110,103,117,97,103,101,0
  dw     82,101,113,117,105,114,101,100,70,105,101,108,100,115,0,70,105,101,108,100,115,32,109,97,114,107,101,100,32,119,105,116,104,32,97,32,42,32,97,114,101,32,114,101,113,117,105,114,101,100,46,0
  dw     84,111,107,101,110,115,0,84,111,107,101,110,115,0
  dw     84,111,107,101,110,48,0,37,79,83,32,58,32,79,83,32,117,115,101,100,32,102,111,114,32,99,111,109,112,105,108,97,116,105,111,110,46,0
  dw     84,111,107,101,110,49,0,37,83,79,85,82,67,69,32,58,32,83,111,117,114,99,101,32,102,105,108,101,110,97,109,101,46,0
  dw     84,111,107,101,110,50,0,37,69,88,69,67,85,84,65,66,76,69,32,58,32,69,120,101,99,117,116,97,98,108,101,32,110,97,109,101,46,0
  dw     84,111,107,101,110,51,0,37,67,79,77,80,73,76,69,67,79,85,78,84,32,58,32,84,104,101,32,35,80,66,95,69,100,105,116,111,114,95,67,111,109,112,105,108,101,67,111,117,110,116,32,118,97,108,117,101,46,0
  dw     84,111,107,101,110,52,0,37,66,85,73,76,68,67,79,85,78,84,32,58,32,84,104,101,32,35,80,66,95,69,100,105,116,111,114,95,66,117,105,108,100,67,111,117,110,116,32,118,97,108,117,101,46,0
  dw     68,97,116,101,84,111,107,101,110,115,0,70,117,114,116,104,101,114,109,111,114,101,44,32,97,108,108,32,84,111,107,101,110,115,32,111,102,32,116,104,101,32,70,111,114,109,97,116,68,97,116,101,40,41,32,99,111,109,109,97,110,100,32,99,97,110,32,98,101,32,117,115,101,100,46,0
  dw     95,71,82,79,85,80,95,0,65,100,100,84,111,111,108,115,0
  dw     84,105,116,108,101,0,67,111,110,102,105,103,117,114,101,32,84,111,111,108,115,0
  dw     78,97,109,101,0,78,97,109,101,0
  dw     67,111,109,109,97,110,100,108,105,110,101,0,67,111,109,109,97,110,100,108,105,110,101,0
  dw     84,114,105,103,103,101,114,0,84,114,105,103,103,101,114,0
  dw     78,101,119,0,78,101,119,0
  dw     69,100,105,116,0,69,100,105,116,0
  dw     68,101,108,101,116,101,0,68,101,108,101,116,101,0
  dw     85,112,0,77,111,118,101,32,117,112,0
  dw     68,111,119,110,0,77,111,118,101,32,68,111,119,110,0
  dw     69,100,105,116,84,105,116,108,101,0,69,100,105,116,32,84,111,111,108,32,83,101,116,116,105,110,103,115,0
  dw     65,114,103,117,109,101,110,116,115,0,65,114,103,117,109,101,110,116,115,0
  dw     73,110,102,111,0,73,110,102,111,0
  dw     87,111,114,107,105,110,103,68,105,114,0,87,111,114,107,105,110,103,32,68,105,114,101,99,116,111,114,121,0
  dw     79,112,116,105,111,110,115,0,79,112,116,105,111,110,115,0
  dw     84,114,105,103,103,101,114,69,118,101,110,116,0,69,118,101,110,116,32,116,111,32,116,114,105,103,103,101,114,32,116,104,101,32,116,111,111,108,0
  dw     83,104,111,114,116,99,117,116,0,83,104,111,114,116,99,117,116,0
  dw     82,117,110,72,105,100,100,101,110,0,82,117,110,32,72,105,100,100,101,110,0
  dw     72,105,100,101,69,100,105,116,111,114,0,72,105,100,101,32,69,100,105,116,111,114,0
  dw     87,97,105,116,70,111,114,81,117,105,116,0,87,97,105,116,32,117,110,116,105,108,32,116,111,111,108,32,113,117,105,116,115,0
  dw     82,101,108,111,97,100,0,82,101,108,111,97,100,32,83,111,117,114,99,101,32,97,102,116,101,114,32,116,111,111,108,32,104,97,115,32,113,117,105,116,0
  dw     82,101,108,111,97,100,78,101,119,0,105,110,116,111,32,110,101,119,32,115,111,117,114,99,101,0
  dw     82,101,108,111,97,100,79,108,100,0,105,110,116,111,32,99,117,114,114,101,110,116,32,115,111,117,114,99,101,0
  dw     67,111,109,112,105,108,101,84,101,109,112,0,85,115,101,32,116,104,101,32,116,101,109,112,32,102,105,108,101,32,102,111,114,32,99,111,109,112,105,108,97,116,105,111,110,0
  dw     72,105,100,101,70,114,111,109,77,101,110,117,0,72,105,100,101,32,84,111,111,108,32,102,114,111,109,32,116,104,101,32,77,97,105,110,32,109,101,110,117,0
  dw     83,111,117,114,99,101,83,112,101,99,105,102,105,99,0,69,110,97,98,108,101,32,84,111,111,108,32,111,110,32,97,32,112,101,114,45,115,111,117,114,99,101,32,98,97,115,105,115,0
  dw     78,111,110,101,0,78,111,110,101,0
  dw     67,104,111,111,115,101,69,120,101,0,67,104,111,111,115,101,32,69,120,101,99,117,116,97,98,108,101,32,116,111,32,114,117,110,0
  dw     67,104,111,111,115,101,68,105,114,0,67,104,111,111,115,101,32,87,111,114,107,105,110,103,32,68,105,114,101,99,116,111,114,121,0
  dw     67,111,110,102,105,103,76,105,110,101,0,83,117,112,112,111,114,116,101,100,32,70,105,108,101,32,101,120,116,101,110,115,105,111,110,115,32,40,101,120,116,49,44,101,120,116,50,44,46,46,46,41,0
  dw     78,111,67,111,109,109,97,110,100,76,105,110,101,0,89,111,117,32,104,97,118,101,32,116,111,32,115,112,101,99,105,102,121,32,97,32,99,111,109,109,97,110,100,32,116,111,32,101,120,101,99,117,116,101,46,0
  dw     78,111,78,97,109,101,0,89,111,117,32,104,97,118,101,32,116,111,32,115,112,101,99,105,102,121,32,97,32,110,97,109,101,32,102,111,114,32,121,111,117,114,32,116,111,111,108,46,0
  dw     78,97,109,101,69,120,105,115,116,115,0,84,104,101,32,110,97,109,101,32,121,111,117,32,115,112,101,99,105,102,105,101,100,32,105,115,32,97,108,114,101,97,100,121,32,117,115,101,100,46,0
  dw     84,114,105,103,103,101,114,48,0,77,101,110,117,32,79,114,32,83,104,111,114,116,99,117,116,0
  dw     84,114,105,103,103,101,114,49,0,69,100,105,116,111,114,32,83,116,97,114,116,117,112,0
  dw     84,114,105,103,103,101,114,50,0,69,100,105,116,111,114,32,67,108,111,115,105,110,103,0
  dw     84,114,105,103,103,101,114,51,0,66,101,102,111,114,101,32,67,111,109,112,105,108,101,47,82,117,110,0
  dw     84,114,105,103,103,101,114,52,0,65,102,116,101,114,32,67,111,109,112,105,108,101,47,82,117,110,0
  dw     84,114,105,103,103,101,114,53,0,82,117,110,32,99,111,109,112,105,108,101,100,32,80,114,111,103,114,97,109,0
  dw     84,114,105,103,103,101,114,54,0,66,101,102,111,114,101,32,67,114,101,97,116,101,32,69,120,101,99,117,116,97,98,108,101,0
  dw     84,114,105,103,103,101,114,55,0,65,102,116,101,114,32,67,114,101,97,116,101,32,69,120,101,99,117,116,97,98,108,101,0
  dw     84,114,105,103,103,101,114,56,0,83,111,117,114,99,101,99,111,100,101,32,108,111,97,100,101,100,0
  dw     84,114,105,103,103,101,114,57,0,83,111,117,114,99,101,99,111,100,101,32,115,97,118,101,100,0
  dw     84,114,105,103,103,101,114,49,48,0,82,101,112,108,97,99,101,32,70,105,108,101,118,105,101,119,101,114,32,45,32,65,108,108,32,102,105,108,101,115,0
  dw     84,114,105,103,103,101,114,49,49,0,82,101,112,108,97,99,101,32,70,105,108,101,86,105,101,119,101,114,32,45,32,85,110,107,110,111,119,110,32,102,105,108,101,115,0
  dw     84,114,105,103,103,101,114,49,50,0,82,101,112,108,97,99,101,32,70,105,108,101,86,105,101,119,101,114,32,45,32,83,112,101,99,105,97,108,32,102,105,108,101,0
  dw     84,114,105,103,103,101,114,49,51,0,83,111,117,114,99,101,99,111,100,101,32,99,108,111,115,101,100,0
  dw     84,114,105,103,103,101,114,49,52,0,78,101,119,32,83,111,117,114,99,101,99,111,100,101,32,99,114,101,97,116,101,100,0
  dw     65,114,103,117,109,101,110,116,49,0,37,80,65,84,72,32,58,32,80,97,116,104,32,111,102,32,116,104,101,32,99,117,114,114,101,110,116,32,115,111,117,114,99,101,46,32,69,109,112,116,121,32,105,102,32,116,104,101,32,115,111,117,114,99,101,32,119,97,115,110,39,116,32,115,97,118,101,100,32,121,101,116,46,0
  dw     65,114,103,117,109,101,110,116,50,0,37,70,73,76,69,32,58,32,70,105,108,101,110,97,109,101,32,97,110,100,32,80,97,116,104,32,111,102,32,116,104,101,32,99,117,114,114,101,110,116,32,115,111,117,114,99,101,46,32,69,109,112,116,121,32,105,102,32,105,116,32,119,97,115,110,39,116,32,115,97,118,101,100,32,121,101,116,46,0
  dw     65,114,103,117,109,101,110,116,51,0,37,84,69,77,80,70,73,76,69,32,58,32,65,32,116,101,109,112,111,114,97,114,121,32,99,111,112,121,32,111,102,32,116,104,101,32,115,111,117,114,99,101,32,102,105,108,101,46,32,89,111,117,32,109,97,121,32,109,111,100,105,102,121,32,111,114,32,100,101,108,101,116,101,32,116,104,105,115,32,97,116,32,119,105,108,108,46,0
  dw     65,114,103,117,109,101,110,116,52,0,37,67,79,77,80,73,76,69,70,73,76,69,32,58,32,84,104,101,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,32,116,104,97,116,32,105,115,32,115,101,110,116,32,116,111,32,116,104,101,32,99,111,109,112,105,108,101,114,46,32,89,111,117,32,99,97,110,32,109,111,100,105,102,121,32,105,116,32,116,111,32,99,104,97,110,103,101,32,116,104,101,32,97,99,116,117,97,108,32,99,111,109,112,105,108,101,100,32,115,111,117,114,99,101,46,0
  dw     65,114,103,117,109,101,110,116,53,0,37,69,88,69,67,85,84,65,66,76,69,32,58,32,66,101,102,111,114,101,32,97,110,100,32,97,102,116,101,114,32,67,111,109,112,105,108,97,116,105,111,110,32,116,104,101,32,110,97,109,101,32,111,102,32,116,104,101,32,99,114,101,97,116,101,100,32,101,120,101,99,117,116,97,98,108,101,0
  dw     65,114,103,117,109,101,110,116,54,0,37,67,85,82,83,79,82,32,58,32,84,104,101,32,99,117,114,114,101,110,116,32,99,117,114,115,111,114,32,112,111,115,105,116,105,111,110,32,103,105,118,101,110,32,97,115,32,39,76,73,78,69,120,67,79,76,85,77,78,39,32,40,105,101,32,39,49,53,120,49,48,39,41,0
  dw     65,114,103,117,109,101,110,116,55,0,37,83,69,76,69,67,84,73,79,78,32,58,32,84,104,101,32,99,117,114,114,101,110,116,32,115,101,108,101,99,116,105,111,110,32,103,105,118,101,110,32,97,115,32,39,76,73,78,69,83,84,65,82,84,120,67,79,76,85,77,78,83,84,65,82,84,120,76,73,78,69,69,78,68,120,67,79,76,85,77,78,69,78,68,39,32,40,105,101,32,39,49,53,120,49,120,49,54,120,53,39,41,0
  dw     65,114,103,117,109,101,110,116,56,0,37,87,79,82,68,32,58,32,84,104,101,32,119,111,114,100,32,116,104,97,116,32,105,115,32,117,110,100,101,114,32,116,104,101,32,99,117,114,114,101,110,116,32,99,117,114,115,111,114,32,112,111,115,105,116,105,111,110,46,0
  dw     65,114,103,117,109,101,110,116,57,0,37,72,79,77,69,32,58,32,84,104,101,32,80,117,114,101,66,97,115,105,99,32,100,105,114,101,99,116,111,114,121,46,0
  dw     65,114,103,117,109,101,110,116,49,48,0,37,80,82,79,74,69,67,84,32,58,32,84,104,101,32,100,105,114,101,99,116,111,114,121,32,119,104,101,114,101,32,116,104,101,32,112,114,111,106,101,99,116,32,102,105,108,101,32,114,101,115,105,100,101,115,32,105,102,32,116,104,101,114,101,32,105,115,32,97,110,32,111,112,101,110,32,112,114,111,106,101,99,116,46,0
  dw     95,71,82,79,85,80,95,0,83,104,111,114,116,99,117,116,115,0
  dw     83,104,111,114,116,99,117,116,115,0,83,104,111,114,116,99,117,116,115,0
  dw     83,104,111,114,116,99,117,116,0,83,104,111,114,116,99,117,116,0
  dw     65,99,116,105,111,110,0,65,99,116,105,111,110,0
  dw     83,101,116,0,83,101,116,0
  dw     65,108,116,0,65,108,116,0
  dw     83,104,105,102,116,0,83,104,105,102,116,0
  dw     67,111,110,116,114,111,108,0,67,116,114,108,0
  dw     67,111,109,109,97,110,100,0,67,109,100,0
  dw     78,117,109,112,97,100,0,78,117,109,112,97,100,0
  dw     78,101,120,116,79,112,101,110,70,105,108,101,0,74,117,109,112,32,116,111,32,110,101,120,116,32,111,112,101,110,32,70,105,108,101,0
  dw     80,114,101,118,105,111,117,115,79,112,101,110,70,105,108,101,0,74,117,109,112,32,116,111,32,112,114,101,118,105,111,117,115,32,111,112,101,110,32,70,105,108,101,0
  dw     83,104,105,102,116,67,111,109,109,101,110,116,82,105,103,104,116,0,83,104,105,102,116,32,99,111,109,109,101,110,116,115,32,116,111,32,116,104,101,32,114,105,103,104,116,0
  dw     83,104,105,102,116,67,111,109,109,101,110,116,76,101,102,116,0,83,104,105,102,116,32,99,111,109,109,101,110,116,115,32,116,111,32,116,104,101,32,108,101,102,116,0
  dw     83,101,108,101,99,116,66,108,111,99,107,0,83,101,108,101,99,116,32,115,117,114,114,111,117,110,100,105,110,103,32,99,111,100,101,32,98,108,111,99,107,0
  dw     68,101,115,101,108,101,99,116,66,108,111,99,107,0,82,101,118,101,114,116,32,116,111,32,112,114,101,118,105,111,117,115,32,99,111,100,101,32,98,108,111,99,107,32,115,101,108,101,99,116,105,111,110,0
  dw     65,117,116,111,67,111,109,112,108,101,116,101,0,68,105,115,112,108,97,121,32,116,104,101,32,65,117,116,111,67,111,109,112,108,101,116,101,32,87,105,110,100,111,119,0
  dw     65,117,116,111,67,111,109,112,108,101,116,101,67,111,110,102,105,114,109,0,73,110,115,101,114,116,32,116,104,101,32,115,101,108,101,99,116,101,100,32,65,117,116,111,67,111,109,112,108,101,116,101,32,119,111,114,100,0
  dw     65,117,116,111,67,111,109,112,108,101,116,101,65,98,111,114,116,0,67,108,111,115,101,32,116,104,101,32,65,117,116,111,67,111,109,112,108,101,116,101,32,87,105,110,100,111,119,0
  dw     80,114,111,99,101,100,117,114,101,115,85,112,100,97,116,101,0,84,114,105,103,103,101,114,32,85,112,100,97,116,101,32,111,102,32,80,114,111,99,101,100,117,114,101,32,38,32,86,97,114,105,97,98,108,101,32,86,105,101,119,101,114,0
  dw     65,108,108,114,101,97,100,121,85,115,101,100,0,84,104,101,32,115,104,111,114,116,99,117,116,32,121,111,117,32,115,112,101,99,105,102,105,101,100,32,105,115,32,97,108,114,101,97,100,121,32,117,115,101,100,32,98,121,0
  dw     69,120,116,101,114,110,97,108,84,111,111,108,0,69,120,116,101,114,110,97,108,32,84,111,111,108,0
  dw     77,101,110,117,0,77,101,110,117,0
  dw     84,97,98,73,110,116,101,110,100,0,73,110,100,101,110,116,47,85,110,105,110,100,101,110,116,32,99,111,100,101,32,83,101,108,101,99,116,105,111,110,0
  dw     83,121,115,116,101,109,83,104,111,114,116,99,117,116,0,82,101,115,101,114,118,101,100,32,83,104,111,114,116,99,117,116,32,102,111,114,32,116,104,101,32,83,121,115,116,101,109,0
  dw     83,101,108,101,99,116,83,104,111,114,116,99,117,116,0,83,101,108,101,99,116,32,115,104,111,114,116,99,117,116,0
  dw     75,101,121,55,49,0,66,97,99,107,115,112,97,99,101,0
  dw     75,101,121,55,50,0,84,97,98,0
  dw     75,101,121,55,51,0,67,108,101,97,114,0
  dw     75,101,121,55,52,0,82,101,116,117,114,110,0
  dw     75,101,121,55,53,0,65,108,116,0
  dw     75,101,121,55,54,0,80,97,117,115,101,0
  dw     75,101,121,55,55,0,80,114,105,110,116,0
  dw     75,101,121,55,56,0,67,97,112,115,32,76,111,99,107,0
  dw     75,101,121,55,57,0,69,115,99,97,112,101,0
  dw     75,101,121,56,48,0,83,112,97,99,101,0
  dw     75,101,121,56,49,0,80,97,103,101,32,85,112,0
  dw     75,101,121,56,50,0,80,97,103,101,32,68,111,119,110,0
  dw     75,101,121,56,51,0,69,110,100,0
  dw     75,101,121,56,52,0,72,111,109,101,0
  dw     75,101,121,56,53,0,76,101,102,116,0
  dw     75,101,121,56,54,0,85,112,0
  dw     75,101,121,56,55,0,82,105,103,104,116,0
  dw     75,101,121,56,56,0,68,111,119,110,0
  dw     75,101,121,56,57,0,83,101,108,101,99,116,0
  dw     75,101,121,57,48,0,69,120,101,99,117,116,101,0
  dw     75,101,121,57,49,0,80,114,105,110,116,32,83,99,114,101,101,110,0
  dw     75,101,121,57,50,0,73,110,115,101,114,116,0
  dw     75,101,121,57,51,0,68,101,108,101,116,101,0
  dw     75,101,121,57,52,0,72,101,108,112,0
  dw     75,101,121,57,53,0,76,101,102,116,32,87,105,110,100,111,119,115,32,75,101,121,0
  dw     75,101,121,57,54,0,82,105,103,104,116,32,87,105,110,100,111,119,115,32,75,101,121,0
  dw     75,101,121,57,55,0,65,112,112,108,105,99,97,116,105,111,110,115,0
  dw     75,101,121,57,56,0,77,117,108,116,105,112,108,121,0
  dw     75,101,121,57,57,0,65,100,100,0
  dw     75,101,121,49,48,48,0,83,101,112,97,114,97,116,111,114,0
  dw     75,101,121,49,48,49,0,83,117,98,115,116,114,97,99,116,0
  dw     75,101,121,49,48,50,0,68,101,99,105,109,97,108,0
  dw     75,101,121,49,48,51,0,68,105,118,105,100,101,0
  dw     75,101,121,49,48,52,0,78,117,109,32,76,111,99,107,0
  dw     75,101,121,49,48,53,0,83,99,114,111,108,108,32,76,111,99,107,0
  dw     95,71,82,79,85,80,95,0,72,101,108,112,0
  dw     84,105,116,108,101,0,72,101,108,112,0
  dw     67,111,110,116,101,110,116,115,0,67,111,110,116,101,110,116,115,0
  dw     73,110,100,101,120,0,73,110,100,101,120,0
  dw     83,101,97,114,99,104,0,83,101,97,114,99,104,0
  dw     83,116,97,114,116,83,101,97,114,99,104,0,83,101,97,114,99,104,0
  dw     66,97,99,107,0,71,111,32,98,97,99,107,0
  dw     70,111,114,119,97,114,100,0,71,111,32,102,111,114,119,97,114,100,0
  dw     72,111,109,101,0,82,101,102,101,114,101,110,99,101,0
  dw     78,101,120,116,0,78,101,120,116,32,84,111,112,105,99,0
  dw     80,114,101,118,105,111,117,115,0,80,114,101,118,105,111,117,115,32,84,111,112,105,99,0
  dw     79,112,101,110,72,101,108,112,0,79,112,101,110,32,72,101,108,112,0
  dw     79,112,101,110,70,49,0,79,112,101,110,32,115,105,100,101,98,97,114,32,104,101,108,112,32,111,110,32,70,49,0
  dw     78,111,82,101,115,117,108,116,115,0,78,111,32,114,101,115,117,108,116,115,32,102,111,117,110,100,46,0
  dw     80,97,114,101,110,116,0,85,112,0
  dw     66,97,99,107,0,66,97,99,107,0
  dw     95,71,82,79,85,80,95,0,70,105,108,101,86,105,101,119,101,114,0
  dw     84,105,116,108,101,0,70,105,108,101,32,86,105,101,119,101,114,0
  dw     80,97,116,116,101,114,110,0,73,109,97,103,101,32,70,105,108,101,115,32,40,42,46,98,109,112,44,32,42,46,112,110,103,44,32,42,46,106,112,103,44,32,42,46,106,112,101,103,44,32,42,46,116,103,97,44,32,42,46,105,99,111,41,124,42,46,98,109,112,59,42,46,112,110,103,59,42,46,106,112,103,59,42,46,106,112,101,103,59,42,46,116,103,97,59,42,46,105,99,111,124,72,84,77,76,32,68,111,99,117,109,101,110,116,115,32,40,42,46,104,116,109,108,44,32,42,46,104,116,109,41,124,42,46,104,116,109,108,59,42,46,104,116,109,124,84,101,120,116,32,68,111,99,117,109,101,110,116,115,32,40,42,46,116,120,116,41,124,42,46,116,120,116,124,65,108,108,32,70,105,108,101,115,32,40,42,46,42,41,124,42,46,42,0
  dw     79,112,101,110,0,79,112,101,110,32,70,105,108,101,0
  dw     67,108,111,115,101,0,67,108,111,115,101,32,70,105,108,101,0
  dw     78,101,120,116,0,83,104,111,119,32,110,101,120,116,32,70,105,108,101,0
  dw     80,114,101,118,105,111,117,115,0,83,104,111,119,32,112,114,101,118,105,111,117,115,32,70,105,108,101,0
  dw     83,105,122,101,87,97,114,110,105,110,103,0,87,97,114,110,105,110,103,33,32,84,104,105,115,32,102,105,108,101,32,105,115,32,118,101,114,121,32,108,97,114,103,101,46,0
  dw     83,105,122,101,69,114,114,111,114,0,84,104,105,115,32,102,105,108,101,32,105,115,32,116,111,111,32,108,97,114,103,101,32,40,62,32,49,48,32,77,66,41,46,0
  dw     83,105,122,101,81,117,101,115,116,105,111,110,0,68,111,32,121,111,117,32,115,116,105,108,108,32,119,97,110,116,32,116,111,32,108,111,97,100,32,105,116,63,0
  dw     95,71,82,79,85,80,95,0,84,101,109,112,108,97,116,101,115,0
  dw     84,105,116,108,101,0,84,101,109,112,108,97,116,101,115,0
  dw     69,110,116,101,114,78,97,109,101,0,69,110,116,101,114,32,84,101,109,112,108,97,116,101,32,78,97,109,101,0
  dw     69,110,116,101,114,68,105,114,78,97,109,101,0,69,110,116,101,114,32,68,105,114,101,99,116,111,114,121,32,78,97,109,101,0
  dw     67,111,100,101,0,67,111,100,101,0
  dw     67,111,109,109,101,110,116,0,67,111,109,109,101,110,116,0
  dw     78,101,119,0,78,101,119,32,84,101,109,112,108,97,116,101,0
  dw     69,100,105,116,0,69,100,105,116,32,84,101,109,112,108,97,116,101,0
  dw     68,101,108,101,116,101,0,68,101,108,101,116,101,32,84,101,109,112,108,97,116,101,0
  dw     78,101,119,68,105,114,0,78,101,119,32,68,105,114,101,99,116,111,114,121,0
  dw     68,101,108,101,116,101,68,105,114,0,68,101,108,101,116,101,32,68,105,114,101,99,116,111,114,121,0
  dw     85,112,0,77,111,118,101,32,85,112,0
  dw     68,111,119,110,0,77,111,118,101,32,68,111,119,110,0
  dw     68,101,108,101,116,101,78,111,110,69,109,112,116,121,0,84,104,101,32,68,105,114,101,99,116,111,114,121,32,105,115,32,110,111,116,32,101,109,112,116,121,46,37,110,101,119,108,105,110,101,37,68,111,32,121,111,117,32,115,116,105,108,108,32,119,97,110,116,32,116,111,32,100,101,108,101,116,101,32,105,116,63,0
  dw     68,101,108,101,116,101,81,117,101,115,116,105,111,110,0,68,111,32,121,111,117,32,114,101,97,108,108,121,32,119,97,110,116,32,116,111,32,100,101,108,101,116,101,32,116,104,105,115,32,84,101,109,112,108,97,116,101,63,0
  dw     68,101,108,101,116,101,80,114,101,102,101,114,101,110,99,101,0,65,115,107,32,98,101,102,111,114,101,32,100,101,108,101,116,105,110,103,32,97,110,121,32,84,101,109,112,108,97,116,101,0
  dw     77,101,110,117,85,115,101,0,73,110,115,101,114,116,32,105,110,116,111,32,67,111,100,101,0
  dw     77,101,110,117,78,101,119,0,78,101,119,0
  dw     77,101,110,117,69,100,105,116,0,69,100,105,116,0
  dw     77,101,110,117,68,101,108,101,116,101,0,68,101,108,101,116,101,0
  dw     77,101,110,117,78,101,119,68,105,114,0,78,101,119,32,68,105,114,101,99,116,111,114,121,0
  dw     77,101,110,117,68,101,108,101,116,101,68,105,114,0,68,101,108,101,116,101,32,68,105,114,101,99,116,111,114,121,0
  dw     77,101,110,117,82,101,110,97,109,101,0,82,101,110,97,109,101,0
  dw     77,101,110,117,85,112,0,85,112,0
  dw     77,101,110,117,68,111,119,110,0,68,111,119,110,0
  dw     77,101,110,117,67,117,116,0,67,117,116,0
  dw     77,101,110,117,67,111,112,121,0,67,111,112,121,0
  dw     77,101,110,117,80,97,115,116,101,0,80,97,115,116,101,0
  dw     77,101,110,117,83,101,108,101,99,116,65,108,108,0,83,101,108,101,99,116,32,65,108,108,0
  dw     95,71,82,79,85,80,95,0,68,101,98,117,103,103,101,114,0
  dw     83,104,111,119,69,114,114,111,114,76,111,103,0,83,104,111,119,32,69,114,114,111,114,32,76,111,103,0
  dw     76,111,103,69,109,112,116,121,0,84,104,101,32,69,114,114,111,114,32,76,111,103,32,105,115,32,101,109,112,116,121,46,0
  dw     73,115,82,117,110,110,105,110,103,0,84,104,105,115,32,83,111,117,114,99,101,32,102,105,108,101,32,111,114,32,80,114,111,106,101,99,116,32,105,115,32,97,108,114,101,97,100,121,32,98,101,105,110,103,32,100,101,98,117,103,103,101,100,32,98,121,32,116,104,101,32,73,68,69,46,0
  dw     73,115,82,117,110,110,105,110,103,50,0,68,111,32,121,111,117,32,119,97,110,116,32,116,111,32,117,115,101,32,116,104,101,32,115,116,97,110,100,97,108,111,110,101,32,100,101,98,117,103,103,101,114,63,0
  dw     69,120,101,99,117,116,101,69,114,114,111,114,0,67,97,110,110,111,116,32,101,120,101,99,117,116,101,32,116,104,101,32,102,105,108,101,32,119,105,116,104,32,116,104,101,32,105,110,116,101,114,110,97,108,32,100,101,98,117,103,103,101,114,46,32,80,108,101,97,115,101,32,116,114,121,32,116,104,101,32,115,116,97,110,100,97,108,111,110,101,32,111,110,101,46,0
  dw     69,120,101,99,117,116,97,98,108,101,84,121,112,101,0,69,120,101,99,117,116,97,98,108,101,32,116,121,112,101,0
  dw     84,105,109,101,83,116,97,109,112,0,37,104,104,58,37,105,105,58,37,115,115,0
  dw     67,104,111,111,115,101,83,116,101,112,0,83,101,108,101,99,116,32,78,117,109,98,101,114,32,111,102,32,83,116,101,112,115,32,116,111,32,101,120,101,99,117,116,101,58,0
  dw     87,97,105,116,105,110,103,0,87,97,105,116,105,110,103,32,102,111,114,32,101,120,101,99,117,116,97,98,108,101,32,116,111,32,115,116,97,114,116,46,46,46,0
  dw     69,120,101,83,116,97,114,116,101,100,0,69,120,101,99,117,116,97,98,108,101,32,115,116,97,114,116,101,100,46,0
  dw     69,120,101,69,110,100,101,100,0,84,104,101,32,80,114,111,103,114,97,109,32,101,120,101,99,117,116,105,111,110,32,104,97,115,32,102,105,110,105,115,104,101,100,46,0
  dw     83,116,111,112,112,101,100,0,69,120,101,99,117,116,105,111,110,32,115,116,111,112,112,101,100,46,0
  dw     67,111,110,116,105,110,117,101,100,0,69,120,101,99,117,116,105,111,110,32,99,111,110,116,105,110,117,101,100,46,0
  dw     79,110,101,83,116,101,112,0,69,120,101,99,117,116,105,110,103,32,111,110,101,32,83,116,101,112,46,0
  dw     83,116,101,112,88,0,69,120,101,99,117,116,105,110,103,32,37,120,37,32,83,116,101,112,115,46,0
  dw     83,116,101,112,79,118,101,114,0,69,120,101,99,117,116,105,110,103,32,112,114,111,99,101,100,117,114,101,46,0
  dw     83,116,101,112,79,117,116,0,69,120,101,99,117,116,105,110,103,32,114,101,115,116,32,111,102,32,116,104,101,32,112,114,111,99,101,100,117,114,101,46,0
  dw     69,120,101,75,105,108,108,101,100,0,84,104,101,32,80,114,111,103,114,97,109,32,119,97,115,32,107,105,108,108,101,100,46,0
  dw     66,114,101,97,107,112,111,105,110,116,0,66,114,101,97,107,112,111,105,110,116,0
  dw     66,101,102,111,114,101,69,110,100,0,80,114,111,103,114,97,109,32,97,98,111,117,116,32,116,111,32,101,110,100,0
  dw     85,115,101,114,82,101,113,117,101,115,116,0,85,115,101,114,32,114,101,113,117,101,115,116,0
  dw     68,97,116,97,66,114,101,97,107,112,111,105,110,116,0,68,97,116,97,32,66,114,101,97,107,112,111,105,110,116,0
  dw     76,111,103,69,114,114,111,114,0,91,69,82,82,79,82,93,0
  dw     76,111,103,87,97,114,110,105,110,103,0,91,87,65,82,78,73,78,71,93,0
  dw     69,100,105,116,69,114,114,111,114,0,67,97,110,110,111,116,32,101,100,105,116,32,115,111,117,114,99,101,99,111,100,101,46,32,73,116,32,105,115,32,98,101,105,110,103,32,100,101,98,117,103,103,101,100,46,0
  dw     77,101,109,111,114,121,69,114,114,111,114,0,67,97,110,110,111,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,102,111,114,32,68,101,98,117,103,103,101,114,32,99,111,109,109,117,110,105,99,97,116,105,111,110,33,37,110,101,119,108,105,110,101,37,68,101,98,117,103,103,101,114,32,113,117,105,116,116,105,110,103,46,46,46,0
  dw     80,105,112,101,69,114,114,111,114,0,67,111,110,110,101,99,116,105,111,110,32,116,111,32,100,101,98,117,103,103,101,100,32,101,120,101,99,117,116,97,98,108,101,32,98,114,111,107,101,110,33,37,110,101,119,108,105,110,101,37,68,101,98,117,103,103,101,114,32,113,117,105,116,116,105,110,103,46,46,46,0
  dw     86,101,114,115,105,111,110,69,114,114,111,114,0,84,104,101,32,86,101,114,115,105,111,110,32,111,102,32,100,101,98,117,103,103,101,114,32,97,110,100,32,101,120,101,99,117,116,97,98,108,101,32,100,111,32,110,111,116,32,109,97,116,99,104,33,37,110,101,119,108,105,110,101,37,84,114,121,32,114,101,99,111,109,112,105,108,105,110,103,32,116,104,101,32,101,120,101,99,117,116,97,98,108,101,46,37,110,101,119,108,105,110,101,37,73,102,32,116,104,101,32,112,114,111,98,108,101,109,32,112,101,114,115,105,115,116,115,44,32,114,101,105,110,115,116,97,108,108,32,80,117,114,101,66,97,115,105,99,46,0
  dw     69,120,101,81,117,105,116,69,114,114,111,114,0,84,104,101,32,100,101,98,117,103,103,101,100,32,101,120,101,99,117,116,97,98,108,101,32,113,117,105,116,32,117,110,101,120,112,101,99,116,101,100,108,121,46,0
  dw     84,105,109,101,111,117,116,69,114,114,111,114,0,84,104,101,32,100,101,98,117,103,103,101,100,32,101,120,101,99,117,116,97,98,108,101,32,100,105,100,32,110,111,116,32,114,101,115,112,111,110,100,32,116,111,32,99,111,109,109,117,110,105,99,97,116,105,111,110,32,102,111,114,32,37,116,105,109,101,111,117,116,37,32,115,101,99,111,110,100,115,46,32,68,105,115,99,111,110,110,101,99,116,105,110,103,46,0
  dw     78,101,116,119,111,114,107,69,114,114,111,114,0,84,104,101,32,110,101,116,119,111,114,107,32,99,111,110,110,101,99,116,105,111,110,32,116,111,32,116,104,101,32,101,120,101,99,117,116,97,98,108,101,32,119,97,115,32,108,111,115,116,46,0
  dw     68,101,98,117,103,87,105,110,100,111,119,84,105,116,108,101,0,68,101,98,117,103,32,79,117,116,112,117,116,0
  dw     68,101,98,117,103,0,68,101,98,117,103,0
  dw     67,108,101,97,114,0,67,108,101,97,114,0
  dw     67,111,112,121,0,67,111,112,121,32,97,108,108,0
  dw     83,97,118,101,0,83,97,118,101,0
  dw     65,115,109,87,105,110,100,111,119,84,105,116,108,101,0,65,115,109,32,68,101,98,117,103,103,101,114,0
  dw     82,101,103,105,115,116,101,114,115,0,80,114,111,99,101,115,115,111,114,32,82,101,103,105,115,116,101,114,115,0
  dw     83,116,97,99,107,0,83,116,97,99,107,32,84,114,97,99,101,0
  dw     83,101,116,0,83,101,116,0
  dw     85,112,100,97,116,101,0,85,112,100,97,116,101,0
  dw     77,101,109,111,114,121,87,105,110,100,111,119,84,105,116,108,101,0,77,101,109,111,114,121,32,86,105,101,119,101,114,0
  dw     82,97,110,103,101,0,82,97,110,103,101,0
  dw     68,105,115,112,108,97,121,0,68,105,115,112,108,97,121,0
  dw     86,105,101,119,72,101,120,0,72,101,120,32,86,105,101,119,0
  dw     86,105,101,119,83,116,114,105,110,103,0,83,116,114,105,110,103,32,86,105,101,119,0
  dw     86,105,101,119,66,121,116,101,0,66,121,116,101,32,84,97,98,108,101,0
  dw     86,105,101,119,87,111,114,100,0,87,111,114,100,32,84,97,98,108,101,0
  dw     86,105,101,119,76,111,110,103,0,76,111,110,103,32,84,97,98,108,101,0
  dw     86,105,101,119,70,108,111,97,116,0,70,108,111,97,116,32,84,97,98,108,101,0
  dw     86,105,101,119,67,104,97,114,0,67,104,97,114,97,99,116,101,114,32,84,97,98,108,101,0
  dw     86,105,101,119,68,111,117,98,108,101,0,68,111,117,98,108,101,32,84,97,98,108,101,0
  dw     86,105,101,119,81,117,97,100,0,81,117,97,100,32,84,97,98,108,101,0
  dw     67,111,112,121,84,101,120,116,0,67,111,112,121,32,40,84,101,120,116,41,0
  dw     83,97,118,101,84,101,120,116,0,83,97,118,101,32,40,84,101,120,116,41,0
  dw     83,97,118,101,82,97,119,0,83,97,118,101,32,40,82,97,119,41,0
  dw     73,110,118,97,108,105,100,77,101,109,111,114,121,0,84,104,101,32,115,112,101,99,105,102,105,101,100,32,109,101,109,111,114,121,32,108,111,99,97,116,105,111,110,32,105,115,32,110,111,116,32,118,97,108,105,100,32,102,111,114,32,114,101,97,100,105,110,103,46,0
  dw     86,97,114,105,97,98,108,101,87,105,110,100,111,119,84,105,116,108,101,0,86,97,114,105,97,98,108,101,32,86,105,101,119,101,114,0
  dw     86,97,114,105,97,98,108,101,115,0,86,97,114,105,97,98,108,101,115,0
  dw     65,114,114,97,121,115,0,65,114,114,97,121,115,0
  dw     76,105,110,107,101,100,76,105,115,116,115,0,76,105,110,107,101,100,76,105,115,116,115,0
  dw     77,97,112,115,0,77,97,112,115,0
  dw     78,97,109,101,0,78,97,109,101,0
  dw     83,99,111,112,101,0,83,99,111,112,101,0
  dw     86,97,108,117,101,0,86,97,108,117,101,0
  dw     83,105,122,101,0,83,105,122,101,0
  dw     67,117,114,114,101,110,116,0,67,117,114,114,101,110,116,0
  dw     73,110,100,101,120,0,73,110,100,101,120,0
  dw     87,97,116,99,104,108,105,115,116,65,100,100,0,65,100,100,32,116,111,32,87,97,116,99,104,108,105,115,116,0
  dw     86,105,101,119,65,114,114,97,121,76,105,115,116,0,86,105,101,119,32,65,114,114,97,121,47,76,105,115,116,47,77,97,112,0
  dw     65,114,114,97,121,76,105,115,116,78,97,109,101,0,65,114,114,97,121,47,76,105,115,116,47,77,97,112,32,78,97,109,101,0
  dw     73,116,101,109,82,97,110,103,101,0,68,105,115,112,108,97,121,32,82,97,110,103,101,0
  dw     78,111,110,90,101,114,111,73,116,101,109,115,0,68,105,115,112,108,97,121,32,78,111,110,45,122,101,114,111,32,105,116,101,109,115,32,111,110,108,121,0
  dw     65,108,108,73,116,101,109,115,0,68,105,115,112,108,97,121,32,97,108,108,32,105,116,101,109,115,0
  dw     69,110,116,101,114,82,97,110,103,101,0,69,110,116,101,114,32,114,97,110,103,101,32,116,111,32,100,105,115,112,108,97,121,0
  dw     72,105,115,116,111,114,121,87,105,110,100,111,119,84,105,116,108,101,0,80,114,111,99,101,100,117,114,101,32,67,97,108,108,115,116,97,99,107,0
  dw     72,105,115,116,111,114,121,0,67,97,108,108,115,116,97,99,107,0
  dw     83,116,97,116,105,115,116,105,99,115,0,83,116,97,116,105,115,116,105,99,115,0
  dw     76,105,110,101,0,76,105,110,101,0
  dw     70,105,108,101,0,70,105,108,101,0
  dw     67,117,114,114,101,110,116,80,111,115,105,116,105,111,110,0,67,117,114,114,101,110,116,32,67,111,100,101,32,112,111,115,105,116,105,111,110,0
  dw     83,104,111,119,86,97,114,105,97,98,108,101,115,0,86,97,114,105,97,98,108,101,115,0
  dw     85,112,100,97,116,105,110,103,0,85,112,100,97,116,105,110,103,32,100,97,116,97,44,32,112,108,101,97,115,101,32,119,97,105,116,46,0
  dw     67,97,108,108,67,111,117,110,116,0,67,97,108,108,32,99,111,117,110,116,0
  dw     82,101,115,101,116,0,82,101,115,101,116,0
  dw     82,101,115,101,116,65,108,108,0,82,101,115,101,116,32,65,108,108,0
  dw     87,97,116,99,104,76,105,115,116,84,105,116,108,101,0,87,97,116,99,104,32,76,105,115,116,0
  dw     65,100,100,0,65,100,100,0
  dw     82,101,109,111,118,101,0,82,101,109,111,118,101,0
  dw     80,114,111,99,101,100,117,114,101,0,80,114,111,99,101,100,117,114,101,0
  dw     86,97,114,105,97,98,108,101,0,86,97,114,105,97,98,108,101,0
  dw     65,100,100,86,97,114,105,97,98,108,101,0,65,100,100,32,86,97,114,105,97,98,108,101,32,116,111,32,76,105,115,116,0
  dw     78,111,80,114,111,99,101,100,117,114,101,0,45,45,45,32,77,97,105,110,32,45,45,45,0
  dw     65,108,108,80,114,111,99,101,100,117,114,101,115,0,45,45,45,32,65,108,108,32,45,45,45,0
  dw     86,97,114,105,97,98,108,101,69,114,114,111,114,0,67,97,110,110,111,116,32,97,100,100,32,118,97,114,105,97,98,108,101,33,0
  dw     68,97,116,97,66,114,101,97,107,112,111,105,110,116,115,0,68,97,116,97,32,66,114,101,97,107,112,111,105,110,116,115,0
  dw     67,111,110,100,105,116,105,111,110,0,67,111,110,100,105,116,105,111,110,0
  dw     67,111,110,100,105,116,105,111,110,83,116,97,116,117,115,0,83,116,97,116,117,115,0
  dw     65,100,100,66,114,101,97,107,80,111,105,110,116,0,65,100,100,32,68,97,116,97,32,66,114,101,97,107,112,111,105,110,116,0
  dw     66,114,101,97,107,80,111,105,110,116,69,114,114,111,114,0,67,97,110,110,111,116,32,97,100,100,32,66,114,101,97,107,112,111,105,110,116,33,0
  dw     76,105,98,114,97,114,121,86,105,101,119,101,114,84,105,116,108,101,0,76,105,98,114,97,114,121,32,86,105,101,119,101,114,0
  dw     83,101,108,101,99,116,76,105,98,114,97,114,121,0,83,101,108,101,99,116,32,76,105,98,114,97,114,121,0
  dw     78,111,76,105,98,114,97,114,121,73,110,102,111,0,78,111,32,73,110,102,111,114,109,97,116,105,111,110,0
  dw     80,117,114,105,102,105,101,114,84,105,116,108,101,0,80,117,114,105,102,105,101,114,32,83,101,116,116,105,110,103,115,0
  dw     80,117,114,105,102,105,101,114,73,110,116,101,114,118,97,108,108,0,73,110,116,101,103,114,105,116,121,32,99,104,101,99,107,32,105,110,116,101,114,118,97,108,0
  dw     71,108,111,98,97,108,73,110,116,101,114,118,97,108,108,0,71,108,111,98,97,108,32,118,97,114,105,97,98,108,101,32,115,112,97,99,101,0
  dw     76,111,99,97,108,73,110,116,101,114,118,97,108,108,0,76,111,99,97,108,32,118,97,114,105,97,98,108,101,32,115,112,97,99,101,0
  dw     83,116,114,105,110,103,73,110,116,101,114,118,97,108,108,0,83,116,114,105,110,103,32,118,97,114,105,97,98,108,101,115,0
  dw     68,121,110,97,109,105,99,73,110,116,101,114,118,97,108,108,0,65,108,108,111,99,97,116,101,100,32,109,101,109,111,114,121,0
  dw     67,104,101,99,107,65,108,119,97,121,115,0,69,118,101,114,121,32,108,105,110,101,0
  dw     67,104,101,99,107,76,105,110,101,115,0,69,118,101,114,121,32,37,108,105,110,101,115,37,32,108,105,110,101,115,0
  dw     67,104,101,99,107,78,101,118,101,114,0,78,101,118,101,114,0
  dw     80,114,111,102,105,108,101,114,84,105,116,108,101,0,80,114,111,102,105,108,101,114,0
  dw     80,114,111,102,105,108,101,114,78,111,68,97,116,97,0,78,111,32,80,114,111,102,105,108,101,114,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,46,0
  dw     67,97,108,108,101,100,76,105,110,101,115,0,67,97,108,108,101,100,32,76,105,110,101,115,0
  dw     67,97,108,108,115,80,101,114,76,105,110,101,0,67,97,108,108,115,32,47,32,76,105,110,101,0
  dw     90,111,111,109,105,110,0,90,111,111,109,32,105,110,0
  dw     90,111,111,109,111,117,116,0,90,111,111,109,32,111,117,116,0
  dw     86,105,101,119,76,105,110,101,0,83,104,111,119,32,99,111,100,101,32,108,105,110,101,0
  dw     78,111,68,97,116,97,0,84,104,105,115,32,68,97,116,97,32,105,115,32,99,117,114,114,101,110,116,108,121,32,110,111,116,32,97,118,97,105,108,97,98,108,101,46,0
  dw     83,97,118,101,70,105,108,101,84,105,116,108,101,0,83,97,118,101,32,70,105,108,101,32,97,115,46,46,46,0
  dw     83,97,118,101,70,105,108,101,80,97,116,116,101,114,110,0,84,101,120,116,32,70,105,108,101,115,32,40,42,46,116,120,116,41,124,42,46,116,120,116,124,65,108,108,32,70,105,108,101,115,32,40,42,46,42,41,124,42,46,42,0
  dw     83,97,118,101,69,114,114,111,114,0,67,97,110,110,111,116,32,99,114,101,97,116,101,32,70,105,108,101,58,32,39,37,102,105,108,101,110,97,109,101,37,39,0
  dw     66,105,103,65,114,114,97,121,0,84,104,101,32,65,114,114,97,121,32,104,97,115,32,109,111,114,101,32,116,104,97,110,32,53,48,48,48,48,32,101,108,101,109,101,110,116,115,46,37,110,101,119,108,105,110,101,37,68,111,32,121,111,117,32,114,101,97,108,108,121,32,119,97,110,116,32,116,111,32,118,105,101,119,32,116,104,101,109,32,97,108,108,63,0
  dw     66,105,103,76,105,115,116,0,84,104,101,32,76,105,110,107,101,100,76,105,115,116,32,104,97,115,32,109,111,114,101,32,116,104,97,110,32,53,48,48,48,48,32,101,108,101,109,101,110,116,115,46,37,110,101,119,108,105,110,101,37,68,111,32,121,111,117,32,114,101,97,108,108,121,32,119,97,110,116,32,116,111,32,118,105,101,119,32,116,104,101,109,32,97,108,108,63,0
  dw     95,71,82,79,85,80,95,0,78,101,116,119,111,114,107,68,101,98,117,103,103,101,114,0
  dw     87,97,105,116,105,110,103,0,87,97,105,116,105,110,103,32,102,111,114,32,116,104,101,32,110,101,116,119,111,114,107,32,99,111,110,110,101,99,116,105,111,110,32,116,111,32,98,101,32,101,115,116,97,98,108,105,115,104,101,100,46,46,46,0
  dw     85,110,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,97,99,99,101,115,115,32,99,111,117,108,100,32,110,111,116,32,98,101,32,101,115,116,97,98,108,105,115,104,101,100,46,0
  dw     80,111,114,116,0,80,111,114,116,0
  dw     69,120,101,86,101,114,115,105,111,110,0,69,120,101,99,117,116,97,98,108,101,32,86,101,114,115,105,111,110,0
  dw     68,101,98,117,103,103,101,114,86,101,114,115,105,111,110,0,68,101,98,117,103,103,101,114,32,86,101,114,115,105,111,110,0
  dw     83,101,114,118,101,114,84,105,116,108,101,0,87,97,105,116,105,110,103,32,102,111,114,32,99,111,110,110,101,99,116,105,111,110,115,32,111,110,32,112,111,114,116,32,37,112,111,114,116,37,32,46,46,46,0
  dw     83,101,114,118,101,114,84,105,116,108,101,78,97,109,101,100,0,87,97,105,116,105,110,103,32,102,111,114,32,99,111,110,110,101,99,116,105,111,110,32,111,110,32,37,104,111,115,116,37,32,40,112,111,114,116,32,37,112,111,114,116,37,41,32,46,46,46,0
  dw     76,105,115,116,101,110,0,87,97,105,116,105,110,103,32,102,111,114,32,105,110,99,111,109,109,105,110,103,32,99,111,110,110,101,99,116,105,111,110,46,46,46,0
  dw     83,101,114,118,101,114,70,97,105,108,101,100,0,67,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,115,101,114,118,101,114,32,111,110,32,112,111,114,116,0
  dw     67,111,110,110,101,99,116,105,111,110,68,101,110,105,101,100,0,67,111,110,110,101,99,116,105,111,110,32,100,101,110,105,101,100,46,0
  dw     67,111,110,110,101,99,116,84,105,116,108,101,0,67,111,110,110,101,99,116,105,110,103,32,116,111,0
  dw     67,111,110,110,101,99,116,0,67,111,110,110,101,99,116,105,110,103,32,116,111,32,115,101,114,118,101,114,46,46,46,0
  dw     81,117,101,114,121,83,116,97,116,117,115,0,81,117,101,114,121,105,110,103,32,115,116,97,116,117,115,46,46,46,0
  dw     67,111,110,110,101,99,116,105,111,110,83,117,99,99,101,115,115,0,67,111,110,110,101,99,116,105,111,110,32,101,115,116,97,98,108,105,115,104,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,46,0
  dw     67,111,110,110,101,99,116,105,111,110,70,97,105,108,101,100,0,67,111,110,110,101,99,116,105,111,110,32,102,97,105,108,101,100,46,0
  dw     67,111,110,110,101,99,116,105,111,110,76,111,115,116,0,67,111,110,110,101,99,116,105,111,110,32,108,111,115,116,46,0
  dw     67,111,110,110,101,99,116,70,97,105,108,101,100,0,67,111,117,108,100,32,110,111,116,32,99,111,110,110,101,99,116,32,116,111,32,115,101,114,118,101,114,0
  dw     78,101,101,100,80,97,115,115,119,111,114,100,0,65,32,112,97,115,115,119,111,114,100,32,105,115,32,114,101,113,117,105,114,101,100,46,0
  dw     87,114,111,110,103,80,97,115,115,119,111,114,100,0,80,97,115,115,119,111,114,100,32,105,110,99,111,114,114,101,99,116,46,0
  dw     69,114,114,111,114,95,73,110,118,97,108,105,100,82,101,113,117,101,115,116,0,73,110,118,97,108,105,100,32,114,101,113,117,101,115,116,46,0
  dw     69,114,114,111,114,95,73,110,118,97,108,105,100,82,101,115,112,111,110,115,101,0,73,110,118,97,108,105,100,32,114,101,115,112,111,110,115,101,46,0
  dw     69,114,114,111,114,95,87,114,111,110,103,86,101,114,115,105,111,110,0,84,104,101,32,80,117,114,101,66,97,115,105,99,32,86,101,114,115,105,111,110,115,32,100,111,32,110,111,116,32,109,97,116,99,104,46,0
  dw     69,114,114,111,114,95,78,111,69,120,101,99,117,116,97,98,108,101,0,84,104,101,32,115,101,114,118,101,114,32,105,115,32,110,111,116,32,97,32,100,101,98,117,103,103,101,114,32,101,110,97,98,108,101,100,32,101,120,101,99,117,116,97,98,108,101,46,0
  dw     69,114,114,111,114,95,78,111,68,101,98,117,103,103,101,114,0,84,104,101,32,115,101,114,118,101,114,32,105,115,32,110,111,116,32,97,32,80,117,114,101,66,97,115,105,99,32,100,101,98,117,103,103,101,114,46,0
  dw     69,114,114,111,114,95,78,111,83,101,114,118,105,99,101,0,84,104,101,32,115,101,114,118,101,114,32,99,97,110,110,111,116,32,112,114,111,118,105,100,101,32,116,104,101,32,114,101,113,117,101,115,116,101,100,32,115,101,114,118,105,99,101,46,0
  dw     69,114,114,111,114,95,70,97,116,97,108,69,114,114,111,114,0,70,97,116,97,108,32,101,114,114,111,114,46,0
  dw     95,71,82,79,85,80,95,0,83,116,97,110,100,97,108,111,110,101,68,101,98,117,103,103,101,114,0
  dw     67,111,109,109,97,110,100,76,105,110,101,0,73,110,118,97,108,105,100,32,99,111,109,109,97,110,100,108,105,110,101,33,37,110,101,119,108,105,110,101,37,89,111,117,32,104,97,118,101,32,116,111,32,115,112,101,99,105,102,121,32,116,104,101,32,101,120,101,99,117,116,97,98,108,101,32,110,97,109,101,32,111,114,32,111,110,101,32,111,102,32,116,104,101,32,110,101,116,119,111,114,107,32,111,112,116,105,111,110,115,32,111,110,32,116,104,101,32,99,111,109,109,97,110,100,108,105,110,101,46,0
  dw     67,111,109,109,97,110,100,70,105,108,101,0,67,97,110,110,111,116,32,114,101,97,100,32,99,111,109,109,97,110,100,32,102,105,108,101,32,39,37,102,105,108,101,110,97,109,101,37,39,46,0
  dw     69,120,101,99,117,116,101,69,114,114,111,114,0,67,97,110,110,111,116,32,101,120,101,99,117,116,101,32,102,105,108,101,32,39,37,102,105,108,101,110,97,109,101,37,39,46,0
  dw     82,117,110,0,82,117,110,0
  dw     83,116,111,112,0,83,116,111,112,0
  dw     83,116,101,112,0,83,116,101,112,0
  dw     83,116,101,112,79,118,101,114,0,83,116,101,112,32,79,118,101,114,0
  dw     83,116,101,112,79,117,116,0,83,116,101,112,32,79,117,116,0
  dw     81,117,105,116,0,81,117,105,116,0
  dw     66,114,101,97,107,83,101,116,82,101,109,111,118,101,0,83,101,116,47,82,101,109,111,118,101,32,66,114,101,97,107,112,111,105,110,116,0
  dw     66,114,101,97,107,67,108,101,97,114,0,67,108,101,97,114,32,66,114,101,97,107,112,111,105,110,116,115,0
  dw     68,97,116,97,66,114,101,97,107,0,68,97,116,97,32,66,114,101,97,107,112,111,105,110,116,115,0
  dw     78,111,70,105,108,101,0,83,111,117,114,99,101,102,105,108,101,32,110,111,116,32,97,118,97,105,108,97,98,108,101,46,0
  dw     86,97,114,105,97,98,108,101,76,105,115,116,0,86,97,114,105,97,98,108,101,115,0
  dw     77,101,109,111,114,121,0,77,101,109,111,114,121,0
  dw     68,101,98,117,103,79,117,116,112,117,116,0,79,117,116,112,117,116,0
  dw     76,105,98,114,97,114,121,0,76,105,98,114,97,114,121,0
  dw     80,114,111,102,105,108,101,114,0,80,114,111,102,105,108,101,114,0
  dw     80,117,114,105,102,105,101,114,0,80,117,114,105,102,105,101,114,0
  dw     95,71,82,79,85,80,95,0,77,105,115,99,0
  dw     76,105,110,101,0,76,105,110,101,0
  dw     67,111,108,117,109,110,0,67,111,108,117,109,110,0
  dw     83,101,108,101,99,116,105,111,110,0,83,101,108,101,99,116,105,111,110,0
  dw     70,105,108,101,0,70,105,108,101,0
  dw     79,107,0,79,107,0
  dw     67,97,110,99,101,108,0,67,97,110,99,101,108,0
  dw     67,108,111,115,101,0,67,108,111,115,101,0
  dw     83,97,118,101,0,83,97,118,101,0
  dw     65,98,111,114,116,0,65,98,111,114,116,0
  dw     79,112,101,110,0,79,112,101,110,0
  dw     78,101,119,0,78,101,119,0
  dw     67,111,112,121,0,67,111,112,121,0
  dw     85,112,100,97,116,101,0,85,112,100,97,116,101,0
  dw     68,101,108,101,116,101,0,68,101,108,101,116,101,0
  dw     67,111,108,111,114,0,67,111,108,111,114,0
  dw     85,112,0,85,112,0
  dw     68,111,119,110,0,68,111,119,110,0
  dw     83,101,116,0,83,101,116,0
  dw     65,100,100,0,65,100,100,0
  dw     82,101,109,111,118,101,0,82,101,109,111,118,101,0
  dw     67,108,101,97,114,0,67,108,101,97,114,0
  dw     69,110,97,98,108,101,100,0,69,110,97,98,108,101,100,0
  dw     68,105,115,97,98,108,101,100,0,68,105,115,97,98,108,101,100,0
  dw     83,116,97,116,117,115,0,83,116,97,116,117,115,0
  dw     69,114,114,111,114,0,69,114,114,111,114,0
  dw     83,116,97,114,116,0,83,116,97,114,116,0
  dw     83,116,111,112,0,83,116,111,112,0
  dw     89,101,115,0,89,101,115,0
  dw     78,111,0,78,111,0
  dw     87,101,101,107,100,97,121,48,0,83,117,110,100,97,121,0
  dw     87,101,101,107,100,97,121,49,0,77,111,110,100,97,121,0
  dw     87,101,101,107,100,97,121,50,0,84,117,101,115,100,97,121,0
  dw     87,101,101,107,100,97,121,51,0,87,101,100,110,101,115,100,97,121,0
  dw     87,101,101,107,100,97,121,52,0,84,104,117,114,115,100,97,121,0
  dw     87,101,101,107,100,97,121,53,0,70,114,105,100,97,121,0
  dw     87,101,101,107,100,97,121,54,0,83,97,116,117,114,100,97,121,0
  dw     83,116,97,121,79,110,84,111,112,0,83,116,97,121,32,111,110,32,84,111,112,0
  dw     78,111,81,117,105,99,107,72,101,108,112,0,78,111,32,81,117,105,99,107,72,101,108,112,32,97,118,97,105,108,97,98,108,101,46,0
  dw     80,114,101,102,101,114,101,110,99,101,69,114,114,111,114,0,89,111,117,114,32,115,101,116,116,105,110,103,115,32,99,97,110,39,116,32,98,101,32,115,97,118,101,100,33,37,110,101,119,108,105,110,101,37,84,104,101,32,102,105,108,101,32,39,37,102,105,108,101,110,97,109,101,37,39,32,99,97,110,110,111,116,32,98,101,32,99,114,101,97,116,101,100,46,0
  dw     82,101,97,100,69,114,114,111,114,0,67,97,110,110,111,116,32,111,112,101,110,32,116,104,101,32,102,105,108,101,0
  dw     79,112,101,110,70,105,108,101,0,67,104,111,111,115,101,32,70,105,108,101,32,116,111,32,111,112,101,110,46,46,46,0
  dw     83,97,118,101,70,105,108,101,0,67,104,111,111,115,101,32,70,105,108,101,32,116,111,32,115,97,118,101,46,46,46,0
  dw     65,98,111,117,116,87,105,110,100,111,119,84,105,116,108,101,0,65,98,111,117,116,46,46,46,0
  dw     71,111,116,111,87,105,110,100,111,119,84,105,116,108,101,0,71,111,116,111,46,46,46,0
  dw     83,111,114,116,83,111,117,114,99,101,115,84,105,116,108,101,0,83,111,114,116,32,83,111,117,114,99,101,115,46,46,46,0
  dw     77,97,99,114,111,69,114,114,111,114,84,105,116,108,101,0,77,97,99,114,111,32,69,114,114,111,114,0
  dw     87,97,114,110,105,110,103,115,84,105,116,108,101,0,67,111,109,112,105,108,101,114,32,87,97,114,110,105,110,103,115,0
  dw     84,111,111,108,98,97,114,69,114,114,111,114,0,67,111,117,108,100,32,110,111,116,32,102,105,110,100,32,84,111,111,108,98,97,114,32,73,99,111,110,0
  dw     65,117,116,111,109,97,116,105,111,110,84,105,109,101,111,117,116,0,65,110,32,65,117,116,111,109,97,116,105,111,110,32,99,108,105,101,110,116,32,102,97,105,108,101,100,32,116,111,32,114,101,115,112,111,110,100,32,116,111,32,99,111,109,109,117,110,105,99,97,116,105,111,110,46,37,110,101,119,108,105,110,101,37,84,104,101,32,99,111,110,110,101,99,116,105,111,110,32,119,105,108,108,32,98,101,32,116,101,114,109,105,110,97,116,101,100,46,0
  dw     87,101,108,99,111,109,101,0,87,101,108,99,111,109,101,32,97,98,111,97,114,100,32,33,0
  dw     95,71,82,79,85,80,95,0,70,111,114,109,0
  dw     70,111,114,109,0,70,111,114,109,0
  dw     70,111,114,109,83,104,111,114,116,0,70,111,114,109,0
  dw     70,111,114,109,76,111,110,103,0,70,111,114,109,32,80,97,110,101,108,0
  dw     73,116,101,109,0,73,116,101,109,0
  dw     76,101,118,101,108,0,76,101,118,101,108,0
  dw     67,111,110,115,116,97,110,116,0,67,111,110,115,116,97,110,116,0
  dw     78,97,109,101,0,78,97,109,101,0
  dw     84,105,116,108,101,0,84,105,116,108,101,0
  dw     83,101,112,97,114,97,116,111,114,0,83,101,112,97,114,97,116,111,114,0
  dw     83,104,111,114,116,99,117,116,0,83,104,111,114,116,99,117,116,0
  dw     79,117,116,79,102,77,101,109,111,114,121,69,114,114,111,114,0,67,97,110,39,116,32,114,101,110,100,101,114,32,103,97,100,103,101,116,32,111,102,32,37,115,105,122,101,37,32,112,105,120,101,108,115,32,40,111,117,116,32,111,102,32,109,101,109,111,114,121,41,46,0
  dw     87,105,100,116,104,0,87,105,100,116,104,0
  dw     84,101,120,116,0,84,101,120,116,0
  dw     73,109,97,103,101,0,73,109,97,103,101,0
  dw     65,108,105,103,110,109,101,110,116,0,65,108,105,103,110,109,101,110,116,0
  dw     70,108,97,103,0,70,108,97,103,0
  dw     80,114,111,103,114,101,115,115,66,97,114,0,80,114,111,103,114,101,115,115,66,97,114,63,0
  dw     76,101,102,116,0,76,101,102,116,0
  dw     67,101,110,116,101,114,0,67,101,110,116,101,114,0
  dw     82,105,103,104,116,0,82,105,103,104,116,0
  dw     78,111,114,109,97,108,0,78,111,114,109,97,108,0
  dw     82,97,105,115,101,100,0,82,97,105,115,101,100,0
  dw     66,111,114,100,101,114,108,101,115,115,0,66,111,114,100,101,114,108,101,115,115,0
  dw     67,111,110,115,116,97,110,116,0,67,111,110,115,116,97,110,116,0
  dw     84,111,111,108,116,105,112,0,84,111,111,108,116,105,112,0
  dw     84,111,103,103,108,101,66,117,116,116,111,110,0,84,111,103,103,108,101,32,66,117,116,116,111,110,0
  dw     83,101,112,97,114,97,116,111,114,0,83,101,112,97,114,97,116,111,114,63,0
  dw     86,97,114,105,97,98,108,101,0,86,97,114,105,97,98,108,101,0
  dw     67,97,112,116,105,111,110,0,67,97,112,116,105,111,110,0
  dw     70,105,114,115,116,71,97,100,103,101,116,0,70,105,114,115,116,32,103,97,100,103,101,116,58,0
  dw     83,101,99,111,110,100,71,97,100,103,101,116,0,83,101,99,111,110,100,32,103,97,100,103,101,116,58,0
  dw     83,116,97,114,116,68,114,97,119,105,110,103,0,83,116,97,114,116,32,100,114,97,119,105,110,103,0
  dw     67,97,110,99,101,108,0,67,97,110,99,101,108,0
  dw     79,75,0,79,75,0
  dw     83,101,108,101,99,116,69,114,114,111,114,0,89,111,117,32,110,101,101,100,32,116,111,32,115,101,108,101,99,116,32,116,119,111,32,100,105,102,102,101,114,101,110,116,32,103,97,100,103,101,116,115,46,0
  dw     71,97,100,103,101,116,76,105,115,116,69,114,114,111,114,0,84,104,101,32,116,119,111,32,103,97,100,103,101,116,115,32,110,101,101,100,32,116,111,32,98,101,108,111,110,103,32,116,111,32,116,104,101,32,115,97,109,101,32,103,97,100,103,101,116,32,108,105,115,116,46,0
  dw     83,101,108,101,99,116,0,83,101,108,101,99,116,46,46,46,0
  dw     83,101,116,82,101,108,97,116,105,118,101,80,97,116,104,0,83,101,116,32,82,101,108,97,116,105,118,101,32,80,97,116,104,0
  dw     73,109,97,103,101,85,82,76,0,73,109,97,103,101,32,85,82,76,0
  dw     83,101,108,101,99,116,73,109,97,103,101,0,83,101,108,101,99,116,32,73,109,97,103,101,0
  dw     82,101,108,97,116,105,118,101,80,97,116,104,0,82,101,108,97,116,105,118,101,32,80,97,116,104,0
  dw     67,104,101,99,107,101,100,0,67,104,101,99,107,101,100,0
  dw     70,111,110,116,0,70,111,110,116,0
  dw     67,111,108,111,114,0,67,111,108,111,114,0
  dw     70,114,111,110,116,67,111,108,111,114,0,70,114,111,110,116,67,111,108,111,114,0
  dw     66,97,99,107,67,111,108,111,114,0,66,97,99,107,67,111,108,111,114,0
  dw     83,101,108,101,99,116,71,97,100,103,101,116,0,83,101,108,101,99,116,32,103,97,100,103,101,116,0
  dw     73,110,105,116,67,111,100,101,0,73,110,105,116,32,99,111,100,101,0
  dw     67,114,101,97,116,101,67,111,100,101,0,67,114,101,97,116,101,32,99,111,100,101,0
  dw     72,101,108,112,0,72,101,108,112,0
  dw     77,105,110,0,77,105,110,0
  dw     77,97,120,0,77,97,120,0
  dw     73,110,110,101,114,87,105,100,116,104,0,73,110,110,101,114,32,119,105,100,116,104,0
  dw     73,110,110,101,114,72,101,105,103,104,116,0,73,110,110,101,114,32,104,101,105,103,104,116,0
  dw     67,117,114,114,101,110,116,73,109,97,103,101,0,67,117,114,114,101,110,116,32,73,109,97,103,101,0
  dw     67,104,97,110,103,101,73,109,97,103,101,0,67,104,97,110,103,101,32,73,109,97,103,101,0
  dw     86,97,114,105,97,98,108,101,0,86,97,114,105,97,98,108,101,0
  dw     67,97,112,116,105,111,110,73,115,86,97,114,105,97,98,108,101,0,67,97,112,116,105,111,110,32,105,115,32,97,32,118,97,114,105,97,98,108,101,63,0
  dw     67,97,112,116,105,111,110,0,67,97,112,116,105,111,110,0
  dw     84,111,111,108,116,105,112,73,115,86,97,114,105,97,98,108,101,0,84,111,111,108,84,105,112,32,105,115,32,97,32,118,97,114,105,97,98,108,101,63,0
  dw     84,111,111,108,116,105,112,0,84,111,111,108,84,105,112,0
  dw     87,114,111,110,103,86,97,114,78,97,109,101,0,73,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,105,110,32,118,97,114,105,97,98,108,101,32,110,97,109,101,46,0
  dw     77,97,115,107,0,77,97,115,107,0
  dw     87,105,100,116,104,0,87,105,100,116,104,0
  dw     72,101,105,103,104,116,0,72,101,105,103,104,116,0
  dw     72,105,100,100,101,110,0,72,105,100,100,101,110,0
  dw     68,105,115,97,98,108,101,100,0,68,105,115,97,98,108,101,100,0
  dw     79,98,106,101,99,116,115,0,79,98,106,101,99,116,115,0
  dw     80,114,111,112,101,114,116,105,101,115,0,80,114,111,112,101,114,116,105,101,115,0
  dw     71,101,110,69,118,101,110,116,80,114,111,99,0,71,101,110,101,114,97,116,101,32,101,118,101,110,116,115,32,112,114,111,99,101,100,117,114,101,63,0
  dw     83,101,108,101,99,116,70,105,108,101,0,69,118,101,110,116,32,102,105,108,101,0
  dw     83,101,108,101,99,116,80,114,111,99,0,69,118,101,110,116,32,112,114,111,99,101,100,117,114,101,0
  dw     83,112,108,105,116,116,101,114,80,111,115,105,116,105,111,110,0,83,112,108,105,116,116,101,114,32,112,111,115,105,116,105,111,110,0
  dw     76,111,99,107,76,101,102,116,0,76,111,99,107,32,76,101,102,116,0
  dw     76,111,99,107,82,105,103,104,116,0,76,111,99,107,32,82,105,103,104,116,0
  dw     76,111,99,107,84,111,112,0,76,111,99,107,32,84,111,112,0
  dw     76,111,99,107,66,111,116,116,111,109,0,76,111,99,107,32,66,111,116,116,111,109,0
  dw     84,111,111,108,98,111,120,0,84,111,111,108,98,111,120,0
  dw     83,101,108,101,99,116,69,118,101,110,116,70,105,108,101,70,105,114,115,116,0,89,111,117,32,110,101,101,100,32,116,111,32,115,101,108,101,99,116,32,97,110,32,101,118,101,110,116,32,102,105,108,101,32,102,105,114,115,116,46,0
  dw     67,114,101,97,116,101,69,118,101,110,116,70,105,108,101,0,84,104,101,32,102,105,108,101,32,100,111,101,115,110,39,116,32,101,120,105,115,116,32,45,32,100,111,32,121,111,117,32,119,97,110,116,32,116,111,32,99,114,101,97,116,101,32,105,116,63,0
  dw     70,105,108,101,65,108,114,101,97,100,121,79,112,101,110,101,100,0,84,104,105,115,32,102,105,108,101,32,105,115,32,97,108,114,101,97,100,121,32,111,112,101,110,101,100,46,0
  dw     68,101,108,101,116,101,73,116,101,109,67,111,110,102,105,114,109,0,68,111,32,121,111,117,32,114,101,97,108,108,121,32,119,97,110,116,32,116,111,32,100,101,108,101,116,101,32,116,104,105,115,32,105,116,101,109,63,0
  dw     77,111,118,101,71,97,100,103,101,116,87,97,114,110,105,110,103,0,84,104,105,115,32,103,97,100,103,101,116,32,99,97,110,110,111,116,32,98,101,32,109,111,118,101,100,32,98,101,102,111,114,101,32,105,116,115,32,112,97,114,101,110,116,32,103,97,100,103,101,116,32,111,114,32,105,116,101,109,46,0
  dw     68,101,108,101,116,101,71,97,100,103,101,116,87,97,114,110,105,110,103,0,89,111,117,32,97,114,101,32,103,111,105,110,103,32,116,111,32,100,101,108,101,116,101,32,97,32,103,97,100,103,101,116,32,40,97,110,100,32,97,108,108,32,105,116,115,32,99,104,105,108,100,32,105,116,101,109,115,41,46,32,68,111,32,121,111,117,32,119,97,110,116,32,116,111,32,99,111,110,116,105,110,117,101,63,0
  dw     83,97,118,101,82,101,113,117,105,114,101,100,87,97,114,110,105,110,103,0,89,111,117,32,110,101,101,100,32,116,111,32,115,97,118,101,32,121,111,117,114,32,112,114,111,106,101,99,116,32,102,105,114,115,116,46,0
  dw     82,101,115,105,122,101,71,97,100,103,101,116,73,109,103,0,68,111,32,121,111,117,32,119,97,110,116,32,116,111,32,114,101,115,105,122,101,32,116,104,101,32,103,97,100,103,101,116,32,116,111,32,116,104,101,32,105,109,97,103,101,32,115,105,122,101,63,0
  dw     83,101,108,101,99,116,73,109,97,103,101,0,83,101,108,101,99,116,32,73,109,97,103,101,46,46,46,0
  dw     77,97,115,107,65,108,108,70,105,108,101,115,0,65,108,108,32,102,105,108,101,115,32,40,42,46,42,41,124,42,46,42,0
  dw     77,97,115,107,80,66,70,0,80,117,114,101,66,97,115,105,99,32,70,111,114,109,32,40,42,46,112,98,102,41,124,42,46,112,98,102,0
  dw     77,97,115,107,80,66,0,80,117,114,101,66,97,115,105,99,32,70,105,108,101,32,40,42,46,112,98,41,124,42,46,112,98,59,42,46,112,98,105,0
  dw     79,112,101,110,80,114,111,106,101,99,116,0,79,112,101,110,32,80,114,111,106,101,99,116,46,46,46,0
  dw     83,97,118,101,80,114,111,106,101,99,116,0,83,97,118,101,32,80,114,111,106,101,99,116,46,46,46,0
  dw     78,111,71,97,100,103,101,116,83,101,108,101,99,116,101,100,0,78,111,32,103,97,100,103,101,116,32,115,101,108,101,99,116,101,100,32,40,111,114,32,103,97,100,103,101,116,32,105,116,101,109,115,32,110,111,116,32,97,112,112,108,105,99,97,98,108,101,41,46,0
  dw     67,104,111,111,115,101,73,116,101,109,78,97,109,101,0,67,104,111,111,115,101,32,116,104,101,32,110,97,109,101,32,111,102,32,116,104,101,32,105,116,101,109,0
  dw     65,100,100,73,116,101,109,87,97,114,110,105,110,103,0,67,97,110,110,111,116,32,97,100,100,32,97,110,32,105,116,101,109,32,116,111,32,116,104,101,32,115,101,108,101,99,116,101,100,32,103,97,100,103,101,116,46,0
  dw     81,117,105,116,77,101,115,115,97,103,101,0,84,104,101,32,102,105,108,101,32,60,37,102,105,108,101,110,97,109,101,37,62,32,104,97,115,32,110,111,116,32,98,101,101,110,32,115,97,118,101,100,32,121,101,116,46,32,68,111,32,121,111,117,32,119,97,110,116,32,116,111,32,115,97,118,101,32,105,116,32,110,111,119,63,0
  dw     67,104,97,110,103,101,115,87,97,114,110,105,110,103,0,67,104,97,110,103,101,115,32,119,105,108,108,32,110,111,116,32,98,101,32,115,97,118,101,100,46,32,68,111,32,121,111,117,32,119,97,110,116,32,116,111,32,99,111,110,116,105,110,117,101,63,0
  dw     78,101,119,84,97,98,78,97,109,101,0,73,110,112,117,116,32,116,104,101,32,110,101,119,32,110,97,109,101,32,111,102,32,116,104,101,32,116,97,98,58,0
  dw     72,101,108,112,0,72,101,108,112,0
  dw     70,105,108,101,0,70,105,108,101,0
  dw     72,111,109,101,0,72,111,109,101,0
  dw     81,117,105,116,0,81,117,105,116,0
  dw     78,101,119,0,78,101,119,0
  dw     79,112,101,110,0,79,112,101,110,0
  dw     83,97,118,101,0,83,97,118,101,0
  dw     83,97,118,101,65,115,0,83,97,118,101,32,65,115,46,46,46,0
  dw     82,101,110,97,109,101,0,82,101,110,97,109,101,0
  dw     68,101,108,101,116,101,0,68,101,108,101,116,101,0
  dw     83,101,108,101,99,116,65,108,108,0,83,101,108,101,99,116,32,65,108,108,0
  dw     82,101,109,111,118,101,67,111,108,111,117,114,0,82,101,109,111,118,101,32,67,111,108,111,117,114,0
  dw     82,101,109,111,118,101,70,111,110,116,0,82,101,109,111,118,101,32,70,111,110,116,0
  dw     69,100,105,116,0,69,100,105,116,0
  dw     85,110,100,111,0,85,110,100,111,0
  dw     82,101,100,111,0,82,101,100,111,0
  dw     67,117,116,0,67,117,116,0
  dw     67,111,112,121,0,67,111,112,121,0
  dw     80,97,115,116,101,0,80,97,115,116,101,0
  dw     68,117,112,108,105,99,97,116,101,0,68,117,112,108,105,99,97,116,101,0
  dw     65,100,100,73,116,101,109,0,65,100,100,32,73,116,101,109,0
  dw     69,100,105,116,73,116,101,109,115,0,69,100,105,116,32,73,116,101,109,115,0
  dw     69,100,105,116,67,111,108,117,109,110,115,0,69,100,105,116,32,67,111,108,117,109,110,115,0
  dw     65,108,108,70,111,114,109,115,0,65,108,108,32,70,111,114,109,115,0
  dw     67,111,109,109,111,110,67,111,110,116,114,111,108,115,0,67,111,109,109,111,110,32,67,111,110,116,114,111,108,115,0
  dw     67,111,110,116,97,105,110,101,114,115,0,67,111,110,116,97,105,110,101,114,115,0
  dw     77,101,110,117,115,84,111,111,108,98,97,114,115,0,77,101,110,117,115,32,38,32,84,111,111,108,98,97,114,115,0
  dw     67,117,114,115,111,114,0,67,117,114,115,111,114,0
  dw     90,79,114,100,101,114,0,79,114,100,101,114,0
  dw     77,101,110,117,0,77,101,110,117,0
  dw     84,111,111,108,98,97,114,0,84,111,111,108,98,97,114,0
  dw     83,116,97,116,117,115,98,97,114,0,83,116,97,116,117,115,32,66,97,114,0
  dw     73,109,97,103,101,115,0,73,109,97,103,101,115,0
  dw     87,105,110,100,111,119,0,87,105,110,100,111,119,0
  dw     71,97,100,103,101,116,115,0,71,97,100,103,101,116,115,0
  dw     86,105,101,119,0,86,105,101,119,0
  dw     67,108,105,112,98,111,97,114,100,0,67,108,105,112,98,111,97,114,100,0
  dw     68,101,115,105,103,110,86,105,101,119,0,68,101,115,105,103,110,32,86,105,101,119,0
  dw     67,111,100,101,86,105,101,119,0,67,111,100,101,32,86,105,101,119,0
  dw     68,97,116,97,0,68,97,116,97,0
  dw     68,97,116,97,73,110,112,117,116,0,68,97,116,97,32,73,110,112,117,116,0
  dw     68,97,116,97,76,105,115,116,0,68,97,116,97,32,76,105,115,116,0
  dw     65,99,116,105,111,110,0,65,99,116,105,111,110,0
  dw     68,101,99,111,114,97,116,105,111,110,67,111,110,116,97,105,110,101,114,115,0,68,101,99,111,114,97,116,105,111,110,47,67,111,110,116,97,105,110,101,114,115,0
  dw     68,101,99,111,114,97,116,105,111,110,0,68,101,99,111,114,97,116,105,111,110,0
  dw     67,111,110,116,97,105,110,101,114,115,0,67,111,110,116,97,105,110,101,114,115,0
  dw     65,108,105,103,110,76,101,102,116,0,65,108,105,103,110,32,115,101,108,101,99,116,101,100,32,103,97,100,103,101,116,115,32,116,111,32,116,104,101,32,108,101,102,116,0
  dw     65,108,105,103,110,84,111,112,0,65,108,105,103,110,32,115,101,108,101,99,116,101,100,32,103,97,100,103,101,116,115,32,116,111,32,116,104,101,32,116,111,112,0
  dw     65,108,105,103,110,87,105,100,116,104,0,65,108,105,103,110,32,115,101,108,101,99,116,101,100,32,103,97,100,103,101,116,115,32,119,105,100,116,104,0
  dw     65,108,105,103,110,72,101,105,103,104,116,0,65,108,105,103,110,32,115,101,108,101,99,116,101,100,32,103,97,100,103,101,116,115,32,104,101,105,103,104,116,0
  dw     82,101,109,111,118,101,0,82,101,109,111,118,101,0
  dw     80,97,114,101,110,116,0,80,97,114,101,110,116,0
  dw     80,97,114,101,110,116,73,116,101,109,0,80,97,114,101,110,116,32,73,116,101,109,0
  dw     95,71,82,79,85,80,95,0,85,112,100,97,116,101,115,0
  dw     84,105,116,108,101,0,80,117,114,101,66,97,115,105,99,32,85,112,100,97,116,101,115,0
  dw     77,101,115,115,97,103,101,83,105,110,103,108,101,0,65,32,110,101,119,32,118,101,114,115,105,111,110,32,111,102,32,80,117,114,101,66,97,115,105,99,32,105,115,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,100,111,119,110,108,111,97,100,32,111,110,37,110,101,119,108,105,110,101,37,121,111,117,114,32,112,101,114,115,111,110,97,108,32,97,99,99,111,117,110,116,0
  dw     77,101,115,115,97,103,101,77,117,108,116,105,0,84,104,101,32,102,111,108,108,111,119,105,110,103,32,110,101,119,32,118,101,114,115,105,111,110,115,32,111,102,32,80,117,114,101,66,97,115,105,99,32,97,114,101,32,97,118,97,105,108,97,98,108,101,37,110,101,119,108,105,110,101,37,102,111,114,32,100,111,119,110,108,111,97,100,32,111,110,32,121,111,117,114,32,112,101,114,115,111,110,97,108,32,97,99,99,111,117,110,116,0
  dw     77,101,115,115,97,103,101,68,101,109,111,0,65,32,110,101,119,32,118,101,114,115,105,111,110,32,111,102,32,80,117,114,101,66,97,115,105,99,32,105,115,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,100,111,119,110,108,111,97,100,0
  dw     86,105,115,105,116,87,101,98,83,105,116,101,0,86,105,115,105,116,32,116,104,101,32,100,111,119,110,108,111,97,100,32,115,105,116,101,0
  dw     67,104,97,110,103,101,83,101,116,116,105,110,103,0,67,104,97,110,103,101,32,115,101,116,116,105,110,103,115,0
  dw     78,111,85,112,100,97,116,101,115,0,78,111,32,110,101,119,32,114,101,108,101,97,115,101,32,118,101,114,115,105,111,110,115,32,97,118,97,105,108,97,98,108,101,46,37,110,101,119,108,105,110,101,37,40,86,101,114,115,105,111,110,115,32,99,104,101,99,107,32,102,105,108,116,101,114,105,110,103,32,99,97,110,32,98,101,32,99,104,97,110,103,101,100,32,105,110,32,112,114,101,102,101,114,101,110,99,101,115,41,46,0
  dw     78,111,85,112,100,97,116,101,115,76,84,83,0,78,111,32,110,101,119,32,76,84,83,32,118,101,114,115,105,111,110,115,32,97,118,97,105,108,97,98,108,101,46,37,110,101,119,108,105,110,101,37,40,86,101,114,115,105,111,110,115,32,99,104,101,99,107,32,102,105,108,116,101,114,105,110,103,32,99,97,110,32,98,101,32,99,104,97,110,103,101,100,32,105,110,32,112,114,101,102,101,114,101,110,99,101,115,41,46,0
  dw     78,111,85,112,100,97,116,101,115,66,101,116,97,0,78,111,32,110,101,119,32,118,101,114,115,105,111,110,115,32,97,118,97,105,108,97,98,108,101,32,40,105,110,99,108,117,100,105,110,103,32,98,101,116,97,41,46,37,110,101,119,108,105,110,101,37,40,86,101,114,115,105,111,110,115,32,99,104,101,99,107,32,102,105,108,116,101,114,105,110,103,32,99,97,110,32,98,101,32,99,104,97,110,103,101,100,32,105,110,32,112,114,101,102,101,114,101,110,99,101,115,41,46,0
  dw     69,114,114,111,114,0,67,111,117,108,100,32,110,111,116,32,114,101,116,114,105,101,118,101,32,105,110,102,111,114,109,97,116,105,111,110,32,97,98,111,117,116,32,110,101,119,32,117,112,100,97,116,101,115,0
  dw     95,69,78,68,95,0,0
l_basickeywords:
  dw     65,108,105,103,110,0,0,32,0
  dw     65,110,100,0,0,32,0
  dw     65,114,114,97,121,0,0,32,0
  dw     65,115,0,0,32,0
  dw     66,114,101,97,107,0,0,0
  dw     67,97,108,108,68,101,98,117,103,103,101,114,0,0,0
  dw     67,97,115,101,0,0,32,0
  dw     67,111,109,112,105,108,101,114,67,97,115,101,0,0,32,0
  dw     67,111,109,112,105,108,101,114,68,101,102,97,117,108,116,0,0,0
  dw     67,111,109,112,105,108,101,114,69,108,115,101,0,0,0
  dw     67,111,109,112,105,108,101,114,69,108,115,101,73,102,0,0,32,0
  dw     67,111,109,112,105,108,101,114,69,110,100,73,102,0,0,0
  dw     67,111,109,112,105,108,101,114,69,110,100,83,101,108,101,99,116,0,0,0
  dw     67,111,109,112,105,108,101,114,69,114,114,111,114,0,0,32,0
  dw     67,111,109,112,105,108,101,114,73,102,0,67,111,109,112,105,108,101,114,69,110,100,73,102,0,32,0
  dw     67,111,109,112,105,108,101,114,83,101,108,101,99,116,0,67,111,109,112,105,108,101,114,69,110,100,83,101,108,101,99,116,0,32,0
  dw     67,111,109,112,105,108,101,114,87,97,114,110,105,110,103,0,0,32,0
  dw     67,111,110,116,105,110,117,101,0,0,0
  dw     68,97,116,97,0,0,32,0
  dw     68,97,116,97,83,101,99,116,105,111,110,0,69,110,100,68,97,116,97,83,101,99,116,105,111,110,0,0
  dw     68,101,98,117,103,0,0,32,0
  dw     68,101,98,117,103,76,101,118,101,108,0,0,32,0
  dw     68,101,99,108,97,114,101,0,0,0
  dw     68,101,99,108,97,114,101,67,0,0,0
  dw     68,101,99,108,97,114,101,67,68,76,76,0,0,0
  dw     68,101,99,108,97,114,101,68,76,76,0,0,0
  dw     68,101,99,108,97,114,101,77,111,100,117,108,101,0,69,110,100,68,101,99,108,97,114,101,77,111,100,117,108,101,0,32,0
  dw     68,101,102,97,117,108,116,0,0,0
  dw     68,101,102,105,110,101,0,0,32,0
  dw     68,105,109,0,0,32,0
  dw     68,105,115,97,98,108,101,65,83,77,0,0,0
  dw     68,105,115,97,98,108,101,68,101,98,117,103,103,101,114,0,0,0
  dw     68,105,115,97,98,108,101,69,120,112,108,105,99,105,116,0,0,0
  dw     69,108,115,101,0,0,0
  dw     69,108,115,101,73,102,0,0,32,0
  dw     69,110,97,98,108,101,65,83,77,0,0,0
  dw     69,110,97,98,108,101,68,101,98,117,103,103,101,114,0,0,0
  dw     69,110,97,98,108,101,69,120,112,108,105,99,105,116,0,0,0
  dw     69,110,100,0,0,0
  dw     69,110,100,68,97,116,97,83,101,99,116,105,111,110,0,0,0
  dw     69,110,100,68,101,99,108,97,114,101,77,111,100,117,108,101,0,0,0
  dw     69,110,100,69,110,117,109,101,114,97,116,105,111,110,0,0,0
  dw     69,110,100,73,102,0,0,0
  dw     69,110,100,73,109,112,111,114,116,0,0,0
  dw     69,110,100,73,110,116,101,114,102,97,99,101,0,0,0
  dw     69,110,100,77,97,99,114,111,0,0,0
  dw     69,110,100,77,111,100,117,108,101,0,0,0
  dw     69,110,100,80,114,111,99,101,100,117,114,101,0,0,0
  dw     69,110,100,83,101,108,101,99,116,0,0,0
  dw     69,110,100,83,116,114,117,99,116,117,114,101,0,0,0
  dw     69,110,100,83,116,114,117,99,116,117,114,101,85,110,105,111,110,0,0,0
  dw     69,110,100,87,105,116,104,0,0,0
  dw     69,110,117,109,101,114,97,116,105,111,110,0,69,110,100,69,110,117,109,101,114,97,116,105,111,110,0,32,0
  dw     69,110,117,109,101,114,97,116,105,111,110,66,105,110,97,114,121,0,69,110,100,69,110,117,109,101,114,97,116,105,111,110,0,32,0
  dw     69,120,116,101,110,100,115,0,0,32,0
  dw     70,97,107,101,82,101,116,117,114,110,0,0,0
  dw     70,111,114,0,78,101,120,116,0,32,0
  dw     70,111,114,69,97,99,104,0,78,101,120,116,0,32,0
  dw     70,111,114,69,118,101,114,0,0,0
  dw     71,108,111,98,97,108,0,0,32,0
  dw     71,111,115,117,98,0,0,32,0
  dw     71,111,116,111,0,0,32,0
  dw     73,102,0,69,110,100,73,102,0,32,0
  dw     73,109,112,111,114,116,0,69,110,100,73,109,112,111,114,116,0,32,0
  dw     73,109,112,111,114,116,67,0,69,110,100,73,109,112,111,114,116,0,32,0
  dw     73,110,99,108,117,100,101,66,105,110,97,114,121,0,0,32,0
  dw     73,110,99,108,117,100,101,70,105,108,101,0,0,32,0
  dw     73,110,99,108,117,100,101,80,97,116,104,0,0,32,0
  dw     73,110,116,101,114,102,97,99,101,0,69,110,100,73,110,116,101,114,102,97,99,101,0,32,0
  dw     76,105,115,116,0,0,32,0
  dw     77,97,99,114,111,0,69,110,100,77,97,99,114,111,0,32,0
  dw     77,97,99,114,111,69,120,112,97,110,100,101,100,67,111,117,110,116,0,0,0
  dw     77,97,112,0,0,32,0
  dw     77,111,100,117,108,101,0,69,110,100,77,111,100,117,108,101,0,32,0
  dw     78,101,119,76,105,115,116,0,0,32,0
  dw     78,101,119,77,97,112,0,0,32,0
  dw     78,101,120,116,0,0,0
  dw     78,111,116,0,0,32,0
  dw     79,114,0,0,32,0
  dw     80,114,111,99,101,100,117,114,101,0,69,110,100,80,114,111,99,101,100,117,114,101,0,32,0
  dw     80,114,111,99,101,100,117,114,101,67,0,69,110,100,80,114,111,99,101,100,117,114,101,0,32,0
  dw     80,114,111,99,101,100,117,114,101,67,68,76,76,0,69,110,100,80,114,111,99,101,100,117,114,101,0,32,0
  dw     80,114,111,99,101,100,117,114,101,68,76,76,0,69,110,100,80,114,111,99,101,100,117,114,101,0,32,0
  dw     80,114,111,99,101,100,117,114,101,82,101,116,117,114,110,0,0,32,0
  dw     80,114,111,116,101,99,116,101,100,0,0,32,0
  dw     80,114,111,116,111,116,121,112,101,0,0,32,0
  dw     80,114,111,116,111,116,121,112,101,67,0,0,32,0
  dw     82,101,97,100,0,0,32,0
  dw     82,101,68,105,109,0,0,32,0
  dw     82,101,112,101,97,116,0,85,110,116,105,108,32,0,0
  dw     82,101,115,116,111,114,101,0,0,32,0
  dw     82,101,116,117,114,110,0,0,0
  dw     82,117,110,116,105,109,101,0,0,0
  dw     83,101,108,101,99,116,0,69,110,100,83,101,108,101,99,116,0,32,0
  dw     83,104,97,114,101,100,0,0,32,0
  dw     83,116,97,116,105,99,0,0,32,0
  dw     83,116,101,112,0,0,32,0
  dw     83,116,114,117,99,116,117,114,101,0,69,110,100,83,116,114,117,99,116,117,114,101,0,32,0
  dw     83,116,114,117,99,116,117,114,101,85,110,105,111,110,0,69,110,100,83,116,114,117,99,116,117,114,101,85,110,105,111,110,0,0
  dw     83,119,97,112,0,0,32,0
  dw     84,104,114,101,97,100,101,100,0,0,32,0
  dw     84,111,0,0,32,0
  dw     85,110,100,101,102,105,110,101,77,97,99,114,111,0,0,32,0
  dw     85,110,116,105,108,0,0,32,0
  dw     85,110,117,115,101,77,111,100,117,108,101,0,0,32,0
  dw     85,115,101,77,111,100,117,108,101,0,0,32,0
  dw     87,101,110,100,0,0,0
  dw     87,104,105,108,101,0,87,101,110,100,0,32,0
  dw     87,105,116,104,0,69,110,100,87,105,116,104,0,32,0
  dw     88,73,110,99,108,117,100,101,70,105,108,101,0,0,32,0
  dw     88,79,114,0,0,32,0
l_asmkeywords:
  dd     393
  dw     65,65,65,0
  dw     65,65,68,0
  dw     65,65,77,0
  dw     65,65,83,0
  dw     65,68,67,0
  dw     65,68,68,0
  dw     65,78,68,0
  dw     65,82,80,76,0
  dw     66,79,85,78,68,0
  dw     66,83,70,0
  dw     66,83,82,0
  dw     66,83,87,65,80,0
  dw     66,84,0
  dw     66,84,67,0
  dw     66,84,82,0
  dw     66,84,83,0
  dw     67,65,76,76,0
  dw     67,66,87,0
  dw     67,68,81,0
  dw     67,76,67,0
  dw     67,76,68,0
  dw     67,76,73,0
  dw     67,76,84,83,0
  dw     67,77,67,0
  dw     67,77,79,86,65,0
  dw     67,77,79,86,65,69,0
  dw     67,77,79,86,66,0
  dw     67,77,79,86,66,69,0
  dw     67,77,79,86,67,0
  dw     67,77,79,86,69,0
  dw     67,77,79,86,71,0
  dw     67,77,79,86,71,69,0
  dw     67,77,79,86,76,0
  dw     67,77,79,86,76,69,0
  dw     67,77,79,86,78,65,0
  dw     67,77,79,86,78,65,69,0
  dw     67,77,79,86,78,66,0
  dw     67,77,79,86,78,66,69,0
  dw     67,77,79,86,78,67,0
  dw     67,77,79,86,78,69,0
  dw     67,77,79,86,78,71,0
  dw     67,77,79,86,78,71,69,0
  dw     67,77,79,86,78,76,0
  dw     67,77,79,86,78,76,69,0
  dw     67,77,79,86,78,79,0
  dw     67,77,79,86,78,80,0
  dw     67,77,79,86,78,83,0
  dw     67,77,79,86,78,90,0
  dw     67,77,79,86,79,0
  dw     67,77,79,86,80,0
  dw     67,77,79,86,80,69,0
  dw     67,77,79,86,80,79,0
  dw     67,77,79,86,83,0
  dw     67,77,79,86,90,0
  dw     67,77,80,0
  dw     67,77,80,83,0
  dw     67,77,80,83,66,0
  dw     67,77,80,83,68,0
  dw     67,77,80,83,87,0
  dw     67,77,80,88,67,72,71,0
  dw     67,77,80,88,67,72,71,56,66,0
  dw     67,87,68,0
  dw     67,87,68,69,0
  dw     68,65,65,0
  dw     68,65,83,0
  dw     68,66,0
  dw     68,68,0
  dw     68,69,67,0
  dw     68,73,86,0
  dw     68,87,0
  dw     69,77,77,83,0
  dw     69,78,84,69,82,0
  dw     69,83,67,0
  dw     70,50,88,77,49,0
  dw     70,65,66,83,0
  dw     70,65,68,68,0
  dw     70,65,68,68,80,0
  dw     70,66,76,68,0
  dw     70,66,83,84,80,0
  dw     70,67,72,83,0
  dw     70,67,76,69,88,0
  dw     70,67,77,79,86,66,0
  dw     70,67,77,79,86,66,69,0
  dw     70,67,77,79,86,69,0
  dw     70,67,77,79,86,78,66,0
  dw     70,67,77,79,86,78,66,69,0
  dw     70,67,77,79,86,78,69,0
  dw     70,67,77,79,86,78,85,0
  dw     70,67,77,79,86,85,0
  dw     70,67,79,77,0
  dw     70,67,79,77,73,0
  dw     70,67,79,77,73,80,0
  dw     70,67,79,77,80,0
  dw     70,67,79,77,80,80,0
  dw     70,67,79,83,0
  dw     70,68,69,67,83,84,80,0
  dw     70,68,73,86,0
  dw     70,68,73,86,80,0
  dw     70,68,73,86,82,0
  dw     70,68,73,86,82,80,0
  dw     70,70,82,69,69,0
  dw     70,73,65,68,68,0
  dw     70,73,67,79,77,0
  dw     70,73,67,79,77,80,0
  dw     70,73,68,73,86,0
  dw     70,73,68,73,86,82,0
  dw     70,73,76,68,0
  dw     70,73,77,85,76,0
  dw     70,73,78,67,83,84,80,0
  dw     70,73,78,73,84,0
  dw     70,73,83,84,0
  dw     70,73,83,84,80,0
  dw     70,73,83,85,66,0
  dw     70,73,83,85,66,82,0
  dw     70,76,68,0
  dw     70,76,68,49,0
  dw     70,76,68,67,87,0
  dw     70,76,68,69,78,86,0
  dw     70,76,68,76,50,69,0
  dw     70,76,68,76,50,84,0
  dw     70,76,68,76,71,50,0
  dw     70,76,68,76,78,50,0
  dw     70,76,68,80,73,0
  dw     70,76,68,90,0
  dw     70,77,85,76,0
  dw     70,77,85,76,80,0
  dw     70,78,67,76,69,88,0
  dw     70,78,73,78,73,84,0
  dw     70,78,79,80,0
  dw     70,78,83,65,86,69,0
  dw     70,78,83,84,67,87,0
  dw     70,78,83,84,69,78,86,0
  dw     70,78,83,84,83,87,0
  dw     70,80,65,84,65,78,0
  dw     70,80,82,69,77,0
  dw     70,80,82,69,77,49,0
  dw     70,80,84,65,78,0
  dw     70,82,78,68,73,78,84,0
  dw     70,82,83,84,79,82,0
  dw     70,83,65,86,69,0
  dw     70,83,67,65,76,69,0
  dw     70,83,69,84,80,77,0
  dw     70,83,73,78,0
  dw     70,83,73,78,67,79,83,0
  dw     70,83,81,82,84,0
  dw     70,83,84,0
  dw     70,83,84,67,87,0
  dw     70,83,84,69,78,86,0
  dw     70,83,84,80,0
  dw     70,83,84,83,87,0
  dw     70,83,85,66,0
  dw     70,83,85,66,80,0
  dw     70,83,85,66,82,0
  dw     70,83,85,66,82,80,0
  dw     70,84,83,84,0
  dw     70,85,67,79,77,0
  dw     70,85,67,79,77,73,0
  dw     70,85,67,79,77,73,80,0
  dw     70,85,67,79,77,80,0
  dw     70,85,67,79,77,80,80,0
  dw     70,87,65,73,84,0
  dw     70,88,65,77,0
  dw     70,88,67,72,0
  dw     70,88,84,82,65,67,84,0
  dw     70,89,76,50,88,0
  dw     70,89,76,50,88,80,49,0
  dw     72,76,84,0
  dw     73,68,73,86,0
  dw     73,77,85,76,0
  dw     73,78,0
  dw     73,78,67,0
  dw     73,78,83,0
  dw     73,78,83,66,0
  dw     73,78,83,68,0
  dw     73,78,83,87,0
  dw     73,78,84,0
  dw     73,78,84,79,0
  dw     73,78,86,68,0
  dw     73,78,86,76,80,71,0
  dw     73,82,69,84,0
  dw     73,82,69,84,68,0
  dw     74,65,0
  dw     74,65,69,0
  dw     74,66,0
  dw     74,66,69,0
  dw     74,67,0
  dw     74,67,88,90,0
  dw     74,69,0
  dw     74,69,67,88,90,0
  dw     74,71,0
  dw     74,71,69,0
  dw     74,76,0
  dw     74,76,69,0
  dw     74,77,80,0
  dw     74,78,65,0
  dw     74,78,65,69,0
  dw     74,78,66,0
  dw     74,78,66,69,0
  dw     74,78,67,0
  dw     74,78,69,0
  dw     74,78,71,0
  dw     74,78,71,69,0
  dw     74,78,76,0
  dw     74,78,76,69,0
  dw     74,78,79,0
  dw     74,78,80,0
  dw     74,78,83,0
  dw     74,78,90,0
  dw     74,79,0
  dw     74,80,0
  dw     74,80,69,0
  dw     74,80,79,0
  dw     74,83,0
  dw     74,90,0
  dw     76,65,72,70,0
  dw     76,65,82,0
  dw     76,68,83,0
  dw     76,69,65,0
  dw     76,69,65,86,69,0
  dw     76,69,83,0
  dw     76,70,83,0
  dw     76,71,68,84,0
  dw     76,71,83,0
  dw     76,73,68,84,0
  dw     76,76,68,84,0
  dw     76,77,83,87,0
  dw     76,79,67,75,0
  dw     76,79,68,83,0
  dw     76,79,68,83,66,0
  dw     76,79,68,83,68,0
  dw     76,79,68,83,87,0
  dw     76,79,79,80,0
  dw     76,79,79,80,69,0
  dw     76,79,79,80,78,69,0
  dw     76,79,79,80,78,90,0
  dw     76,79,79,80,90,0
  dw     76,83,76,0
  dw     76,83,83,0
  dw     76,84,82,0
  dw     77,79,86,0
  dw     77,79,86,68,0
  dw     77,79,86,81,0
  dw     77,79,86,83,0
  dw     77,79,86,83,66,0
  dw     77,79,86,83,68,0
  dw     77,79,86,83,87,0
  dw     77,79,86,83,88,0
  dw     77,79,86,90,88,0
  dw     77,85,76,0
  dw     78,69,71,0
  dw     78,79,80,0
  dw     78,79,84,0
  dw     79,82,0
  dw     79,85,84,0
  dw     79,85,84,83,0
  dw     79,85,84,83,66,0
  dw     79,85,84,83,68,0
  dw     79,85,84,83,87,0
  dw     80,65,67,75,83,83,68,87,0
  dw     80,65,67,75,83,83,87,66,0
  dw     80,65,67,75,85,83,87,66,0
  dw     80,65,68,68,66,0
  dw     80,65,68,68,68,0
  dw     80,65,68,68,83,66,0
  dw     80,65,68,68,83,87,0
  dw     80,65,68,68,85,83,66,0
  dw     80,65,68,68,85,83,87,0
  dw     80,65,68,68,87,0
  dw     80,65,78,68,0
  dw     80,65,78,68,78,0
  dw     80,67,77,80,69,81,66,0
  dw     80,67,77,80,69,81,68,0
  dw     80,67,77,80,69,81,87,0
  dw     80,67,77,80,71,84,66,0
  dw     80,67,77,80,71,84,68,0
  dw     80,67,77,80,71,84,87,0
  dw     80,77,65,68,68,87,68,0
  dw     80,77,85,76,72,87,0
  dw     80,79,80,0
  dw     80,79,80,65,0
  dw     80,79,80,65,68,0
  dw     80,79,80,70,0
  dw     80,79,80,70,68,0
  dw     80,79,82,0
  dw     80,83,76,76,68,0
  dw     80,83,76,76,81,0
  dw     80,83,76,76,87,0
  dw     80,83,82,65,68,0
  dw     80,83,82,65,87,0
  dw     80,83,82,76,68,0
  dw     80,83,82,76,81,0
  dw     80,83,82,76,87,0
  dw     80,83,85,66,66,0
  dw     80,83,85,66,68,0
  dw     80,83,85,66,83,66,0
  dw     80,83,85,66,83,87,0
  dw     80,83,85,66,85,83,66,0
  dw     80,83,85,66,85,83,87,0
  dw     80,83,85,66,87,0
  dw     80,85,78,80,67,75,72,66,87,0
  dw     80,85,78,80,67,75,72,68,81,0
  dw     80,85,78,80,67,75,72,87,68,0
  dw     80,85,78,80,67,75,76,66,87,0
  dw     80,85,78,80,67,75,76,68,81,0
  dw     80,85,78,80,67,75,76,87,68,0
  dw     80,85,83,72,0
  dw     80,85,83,72,65,0
  dw     80,85,83,72,65,68,0
  dw     80,85,83,72,70,0
  dw     80,85,83,72,70,68,0
  dw     80,88,79,82,0
  dw     82,67,76,0
  dw     82,67,82,0
  dw     82,68,77,83,82,0
  dw     82,68,80,77,67,0
  dw     82,68,84,83,67,0
  dw     82,69,80,0
  dw     82,69,80,69,0
  dw     82,69,80,78,69,0
  dw     82,69,80,78,90,0
  dw     82,69,80,90,0
  dw     82,69,84,0
  dw     82,69,84,70,0
  dw     82,79,76,0
  dw     82,79,82,0
  dw     82,83,77,0
  dw     83,65,72,70,0
  dw     83,65,76,0
  dw     83,65,82,0
  dw     83,66,66,0
  dw     83,67,65,83,0
  dw     83,67,65,83,66,0
  dw     83,67,65,83,68,0
  dw     83,67,65,83,87,0
  dw     83,69,84,65,0
  dw     83,69,84,65,69,0
  dw     83,69,84,66,0
  dw     83,69,84,66,69,0
  dw     83,69,84,67,0
  dw     83,69,84,69,0
  dw     83,69,84,71,0
  dw     83,69,84,71,69,0
  dw     83,69,84,76,0
  dw     83,69,84,76,69,0
  dw     83,69,84,78,65,0
  dw     83,69,84,78,65,69,0
  dw     83,69,84,78,66,0
  dw     83,69,84,78,66,69,0
  dw     83,69,84,78,67,0
  dw     83,69,84,78,69,0
  dw     83,69,84,78,71,0
  dw     83,69,84,78,71,69,0
  dw     83,69,84,78,76,0
  dw     83,69,84,78,76,69,0
  dw     83,69,84,78,79,0
  dw     83,69,84,78,80,0
  dw     83,69,84,78,83,0
  dw     83,69,84,78,90,0
  dw     83,69,84,79,0
  dw     83,69,84,80,0
  dw     83,69,84,80,69,0
  dw     83,69,84,80,79,0
  dw     83,69,84,83,0
  dw     83,69,84,90,0
  dw     83,71,68,84,0
  dw     83,72,76,0
  dw     83,72,76,68,0
  dw     83,72,82,0
  dw     83,72,82,68,0
  dw     83,73,68,84,0
  dw     83,76,68,84,0
  dw     83,77,83,87,0
  dw     83,84,67,0
  dw     83,84,68,0
  dw     83,84,73,0
  dw     83,84,79,83,0
  dw     83,84,79,83,66,0
  dw     83,84,79,83,68,0
  dw     83,84,79,83,87,0
  dw     83,84,82,0
  dw     83,85,66,0
  dw     84,69,83,84,0
  dw     85,68,50,0
  dw     86,69,82,82,0
  dw     86,69,82,87,0
  dw     87,65,73,84,0
  dw     87,66,73,78,86,68,0
  dw     87,82,77,83,82,0
  dw     88,65,68,68,0
  dw     88,67,72,71,0
  dw     88,76,65,84,0
  dw     88,76,65,84,66,0
  dw     88,79,82,0
l_variablegadget_byte:
file "C:\PureBasic\Svn\v5.70\Fr34k\PureBasicDebugger\Data\byte.png"
l_variablegadget_word:
file "C:\PureBasic\Svn\v5.70\Fr34k\PureBasicDebugger\Data\word.png"
l_variablegadget_long:
file "C:\PureBasic\Svn\v5.70\Fr34k\PureBasicDebugger\Data\long.png"
l_variablegadget_struct:
file "C:\PureBasic\Svn\v5.70\Fr34k\PureBasicDebugger\Data\struct.png"
l_variablegadget_string:
file "C:\PureBasic\Svn\v5.70\Fr34k\PureBasicDebugger\Data\string.png"
l_variablegadget_float:
file "C:\PureBasic\Svn\v5.70\Fr34k\PureBasicDebugger\Data\float.png"
l_variablegadget_nodeopen:
file "C:\PureBasic\Svn\v5.70\Fr34k\PureBasicDebugger\Data\struct1.png"
l_variablegadget_nodeclose:
file "C:\PureBasic\Svn\v5.70\Fr34k\PureBasicDebugger\Data\struct2.png"
l_variablegadget_char:
file "C:\PureBasic\Svn\v5.70\Fr34k\PureBasicDebugger\Data\char.png"
l_variablegadget_fixed:
file "C:\PureBasic\Svn\v5.70\Fr34k\PureBasicDebugger\Data\fixed.png"
l_variablegadget_double:
file "C:\PureBasic\Svn\v5.70\Fr34k\PureBasicDebugger\Data\double.png"
l_variablegadget_quad:
file "C:\PureBasic\Svn\v5.70\Fr34k\PureBasicDebugger\Data\quad.png"
l_variablegadget_integer:
file "C:\PureBasic\Svn\v5.70\Fr34k\PureBasicDebugger\Data\integer.png"
l_variablegadget_ascii:
file "C:\PureBasic\Svn\v5.70\Fr34k\PureBasicDebugger\Data\ascii.png"
l_variablegadget_unicode:
file "C:\PureBasic\Svn\v5.70\Fr34k\PureBasicDebugger\Data\unicode.png"
l_winpipe_vtbl:
  dq    _Procedure314
  dq    _Procedure316
  dq    _Procedure318
  dq    _Procedure320
  dq    _Procedure322
  dq    _Procedure324
  dq    _Procedure326
l_cipherinitializer:
  db     215,47,231,184,170,159,233,1,165,165,9,88,201,133,169,204
l_networkclient_vtbl:
  dq    _Procedure404
  dq    _Procedure394
  dq    _Procedure406
  dq    _Procedure410
  dq    _Procedure412
  dq    _Procedure414
  dq    _Procedure416
l_networkserver_vtbl:
  dq    _Procedure404
  dq    _Procedure392
  dq    _Procedure406
  dq    _Procedure410
  dq    _Procedure412
  dq    _Procedure414
  dq    _Procedure416
l_memoryviewer_specialchars:
  dw     91,78,85,76,76,93,0,91,83,79,72,93,0,91,83,84,88,93,0,91,69,84,88,93,0,91,69,79,84,93,0,91,69,78,81,93,0,91,65,67,75,93,0,91,66,69,76,93,0
  dw     91,66,83,93,0,91,84,65,66,93,0,91,76,70,93,0,91,86,84,93,0,91,70,70,93,0,91,67,82,93,0,91,83,79,93,0,91,83,73,93,0
  dw     91,68,76,69,93,0,91,68,67,49,93,0,91,68,67,50,93,0,91,68,67,51,93,0,91,68,67,52,93,0,91,78,65,75,93,0,91,83,89,78,93,0,91,69,84,66,93,0
  dw     91,67,65,78,93,0,91,69,77,93,0,91,83,85,66,93,0,91,69,83,67,93,0,91,70,83,93,0,91,71,83,93,0,91,82,83,93,0,91,85,83,93,0
l_profiler_arrow:
file "C:\PureBasic\svn\v5.70\Build\x64\ide\arrow.ico"
l_profiler_select:
file "C:\PureBasic\svn\v5.70\Build\x64\ide\select.ico"
l_profiler_cross:
file "C:\PureBasic\svn\v5.70\Build\x64\ide\cross.ico"
l_profiler_zoomin:
file "C:\PureBasic\svn\v5.70\Build\x64\ide\zoomin.ico"
l_profiler_zoomout:
file "C:\PureBasic\svn\v5.70\Build\x64\ide\zoomout.ico"
l_profiler_zoomall:
file "C:\PureBasic\svn\v5.70\Build\x64\ide\zoomall.ico"
l_profiler_colors:
  dd     16711680
  dd     255
  dd     32768
  dd     33023
  dd     65535
  dd     8388736
  dd     8421376
  dd     8388863
  dd     16744448
  dd     16384
  dd     8421504
  dd     4194432
  dd     8388608
  dd     16711935
  dd     16744576
  dd     65280
  dd     128
  dd     32896
l_profiler_numbers:
  db     56
  db     68
  db     68
  db     68
  db     68
  db     68
  db     68
  db     68
  db     56
  db     8
  db     24
  db     40
  db     8
  db     8
  db     8
  db     8
  db     8
  db     28
  db     56
  db     68
  db     4
  db     4
  db     8
  db     16
  db     32
  db     64
  db     124
  db     56
  db     68
  db     4
  db     4
  db     24
  db     4
  db     4
  db     68
  db     56
  db     4
  db     12
  db     20
  db     36
  db     68
  db     124
  db     4
  db     4
  db     4
  db     124
  db     64
  db     64
  db     64
  db     120
  db     4
  db     4
  db     68
  db     56
  db     56
  db     68
  db     64
  db     64
  db     120
  db     68
  db     68
  db     68
  db     56
  db     124
  db     4
  db     4
  db     8
  db     8
  db     16
  db     16
  db     32
  db     32
  db     56
  db     68
  db     68
  db     68
  db     56
  db     68
  db     68
  db     68
  db     56
  db     56
  db     68
  db     68
  db     68
  db     60
  db     4
  db     4
  db     68
  db     56
l_minimizeimagedata:
file "C:\PureBasic\svn\v5.70\Build\x64\ide\TemplateUp.ico"
l_maximizeimagedata:
file "C:\PureBasic\svn\v5.70\Build\x64\ide\TemplateDown.ico"
SYS_EndDataSection:
