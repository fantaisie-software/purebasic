;
;     Gadget library documentation
;
;      (c) 2013 - Fantaisie Software
;

@Library Gadget

@Overview

  The Gadgets in SpiderBasic (in other languages also called "controls" or "widgets")
  are a generic name for all the interface components:
  button, combobox, listview, panels, ...
@LineBreak
@LineBreak
  Before using gadgets there will be normally opened a @Link "Window/OpenWindow" "window" first,
  furthermore there will be often used @LibraryLink "Menu" "menus" and @LibraryLink "ToolBar" "toolbars"
  when creating graphical user interfaces.
@linebreak
@linebreak
  This library is mainly used to create desktop like application, meant to run in a desktop browser.
  The @LibraryLink "Mobile" "Mobile" library can be used to create nice looking mobile application.

@FormatIf HTML
  <p>
  <center>
  <table WIDTH="96%" BORDER=0>
  <caption> <b>Overview of all gadgets:</b> </caption>
  <tr>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_buttongadget.png"> <a href="../gadget/buttongadget.html"><u>ButtonGadget</u></a></td>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_buttonimagegadget.png"> <a href="../gadget/buttonimagegadget.html"><u>ButtonImageGadget</u></a></td>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_calendargadget.png"> <a href="../gadget/calendargadget.html"><u>CalendarGadget</u></a></td>
  </tr>
  <tr>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_canvasgadget.png"> <a href="../gadget/canvasgadget.html"><u>CanvasGadget</u></a></td>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_checkboxgadget.png"> <a href="../gadget/checkboxgadget.html"><u>CheckBoxGadget</u></a></td>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_comboboxgadget.png"> <a href="../gadget/comboboxgadget.html"><u>ComboBoxGadget</u></a></td>
  </tr>
  <tr>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_containergadget.png"> <a href="../gadget/containergadget.html"><u>ContainerGadget</u></a></td>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_dategadget.png"> <a href="../gadget/dategadget.html"><u>DateGadget</u></a></td>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_editorgadget.png"> <a href="../gadget/editorgadget.html"><u>EditorGadget</u></a></td>
  </tr>
  <tr>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_framegadget.png"> <a href="../gadget/framegadget.html"><u>FrameGadget</u></a></td>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_hyperlinkgadget.png"> <a href="../gadget/hyperlinkgadget.html"><u>HyperLinkGadget</u></a></td>
  </tr>
  <tr>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_imagegadget.png"> <a href="../gadget/imagegadget.html"><u>ImageGadget</u></a></td>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_listicongadget.png"> <a href="../gadget/listicongadget.html"><u>ListIconGadget</u></a></td>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_listviewgadget.png"> <a href="../gadget/listviewgadget.html"><u>ListViewGadget</u></a></td>
  </tr>
  <tr>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_optiongadget.png"> <a href="../gadget/optiongadget.html"><u>OptionGadget</u></a></td>
      </tr>
  <tr>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_panelgadget.png"> <a href="../gadget/panelgadget.html"><u>PanelGadget</u></a></td>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_progressbargadget.png"> <a href="../gadget/progressbargadget.html"><u>ProgressBarGadget</u></a></td>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_scrollareagadget.png"> <a href="../gadget/scrollareagadget.html"><u>ScrollAreaGadget</u></a></td>   
      </tr>
  <tr>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_spingadget.png"> <a href="../gadget/spingadget.html"><u>SpinGadget</u></a></td>
      </tr>
  <tr>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_splittergadget.png"> <a href="../gadget/splittergadget.html"><u>SplitterGadget</u></a></td>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_stringgadget.png"> <a href="../gadget/stringgadget.html"><u>StringGadget</u></a></td>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_textgadget.png"> <a href="../gadget/textgadget.html"><u>TextGadget</u></a></td>
     </tr>
  <tr>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_trackbargadget.png"> <a href="../gadget/trackbargadget.html"><u>TrackBarGadget</u></a></td>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_treegadget.png"> <a href="../gadget/treegadget.html"><u>TreeGadget</u></a></td>
    <td vAlign="center" nowrap><img src="../HelpPictures/vd_webgadget.png"> <a href="../gadget/webgadget.html"><u>WebGadget</u></a></td>
  </tr>
  </table>
  </center>
@FormatEndIf


@CommandList

@ExampleFile All Gadget.sb

@SupportedOS


;--------------------------------------------------------------------------------------------------------

@Function AddGadgetColumn(#Gadget, Position, Title$, Width)

@Description
  Adds a new column to the specified gadget. 

@Parameter "#Gadget"
  The gadget to use.

@Parameter "Position"
  The column index where the new
  item should be inserted. Column indexes start from 0, which is the leftmost column, and increase
  by 1 for each column to the right. When you add a column, all the old columns which are on the right
  of the new column will have a position which is one more than they previously had.

@Parameter "Title$"
  The text for the column header.

@Parameter "Width"
  The initial width of the new column.

@NoReturnValue

@Remarks
  This command can be used with the following types of gadgets:
@LineBreak
@LineBreak
  - @@ListIconGadget

@Example
@Code
  Global Index = 1     ; "Standard column" has already index 0
  
  Procedure AddNewColumnEvent()
    AddGadgetColumn(0, index, "Column " + Index, 80)
    Index + 1
  EndProcedure
  
  If OpenWindow(0, 0, 0, 400, 150, "ListIcon - Add Columns", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    ListIconGadget(0, 10, 10, 380, 100, "Standard Column", 150, #PB_ListIcon_GridLines)
    ButtonGadget(1, 10, 120, 150, 20, "Add new column")
    
    BindGadgetEvent(1, @AddNewColumnEvent())
  EndIf
@EndCode

@SeeAlso
  @@RemoveGadgetColumn, @@ListIconGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function AddGadgetItem(#Gadget, Position, Text$ [, ImageID [, Flags]])

@Description
  Add a new item to the specified gadget. 

@Parameter "#Gadget"
  The gadget to use.

@Parameter "Position"
  The item index where the new item should be inserted. To add
  the item at the start, use an index of 0. To add this item to the end of the current
  item list, use a value of -1. Remember that when you add an item that all current
  items which come after the new one will have their positions increased by 1.
@LineBreak
@LineBreak
  @ReferenceLink "spiderbasic_objects" "#PB_Any" can be used, in which case the return-value will be the new number assigned by PB.

@Parameter "Text$"
  The text for the new item.
@LineBreak
@LineBreak
  When adding an item to a @@ListIconGadget, this parameter can contain the text for multiple columns
  separated by a @Link "String/Chr" "Chr(10)" character.

@OptionalParameter "ImageID"
  An optional image to use for the item in gadgets that support it.
  The used image should be in the standard 16x16 size. Use the @@ImageID command to get the ID
  for this parameter.

@OptionalParameter "Flags"
  This parameter has a meaning only for the following gadget types:
@LineBreak
@LineBreak
  @@TreeGadget
@Indent
  This parameter specifies the new sublevel for the item.
  If the sublevel is greater than that of the previous item, the new one will become this item's child. If it is lower, it will
  be added after the parent of the previous item.
@EndIndent
  
@NoReturnValue

@Remarks
  The following gadgets are supported:
@LineBreak
@LineBreak
  - @@ListIconGadget : supports the ImageID.
@LineBreak
  - @@ListViewGadget
@LineBreak
  - @@PanelGadget : supports the ImageID.
@LineBreak
  - @@TreeGadget : supports the ImageID. 'Flags' is required and specifies the new sublevel.

@SeeAlso
  @@RemoveGadgetItem, @@ClearGadgetItems, @@CountGadgetItems, @@ComboBoxGadget, @@ListIconGadget,
  @@ListViewGadget, @@PanelGadget, @@TreeGadget

@SupportedOS


;--------------------------------------------------------------------------------------------------------

@Function Result = ButtonImageGadget(#Gadget, x, y, Width, Height, ImageID [, Flags])

@Description
  Create a button gadget with an image in the current GadgetList.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@Parameter "ImageID"
  The image for the gadget. Use the @@ImageID function to get this ID from an image.
  This parameter can be zero to create a button without an image. The @@SetGadgetAttribute
  function can be used to change the image later.

@OptionalParameter "Flags"
  This parameter can be @#PB_Button_Toggle to create a toggle-button (one which has an on/off state).
  A push-button is created by default.

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  A 'mini help' can be added to this gadget using @@GadgetToolTip.
@LineBreak
@LineBreak
  The following functions can be used to control the gadget:
@LineBreak
@LineBreak
  - @@GetGadgetState can be used to get the toggle state of the gadget.
@LineBreak
  - @@SetGadgetState can be used to set the toggle state of the gadget.
@LineBreak
  - @@GetGadgetAttribute with the following values:
@FixedFont
  @#PB_Button_Image       : Get the displayed image.
  @#PB_Button_PressedImage: Get the image displayed when the button is pressed.
@EndFixedFont
  - @@SetGadgetAttribute with the following values:
@FixedFont
  @#PB_Button_Image       : Set the displayed image.
  @#PB_Button_PressedImage: Set the image displayed when the button is pressed.
@EndFixedFont

@Example
@Code
  If OpenWindow(0, 0, 0, 120, 100, "ButtonImage", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    
    CreateImage(0, 16, 16, 32, #PB_Image_Transparent)
    If StartDrawing(ImageOutput(0))
      Circle(8, 8, 7, RGB(255, 0, 0))
      StopDrawing()
    EndIf
    
    ButtonImageGadget(0, 10, 10, 100, 83, ImageID(0))
  EndIf
@EndCode
@LineBreak
@Image buttonimagegadget.png

@SeeAlso
  @@GetGadgetState, @@SetGadgetState, @@GetGadgetAttribute, @@SetGadgetAttribute, @@ButtonGadget, @@ImageID, @@EventGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ButtonGadget(#Gadget, x, y, Width, Height, Text$ [, Flags])

@Description
  Create a button gadget in the current GadgetList.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@Parameter "Text$"
  The text (HTML format) to display on the button.

@OptionalParameter "Flags"
  A combination (using the bitwise OR operator '|') of the following constants:
@FixedFont
  @#PB_Button_Right     : Aligns the button text at the right.
  @#PB_Button_Left      : Aligns the button text at the left.
  @#PB_Button_Default   : Makes the button look as if it is the default button in the window
  @#PB_Button_MultiLine : If the text is too long, it will be displayed on several lines.
  @#PB_Button_Toggle    : Creates a toggle button: one click pushes it, another will release it.
@EndFixedFont

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  A 'mini help' can be added to this gadget using @@GadgetToolTip.
@LineBreak
@LineBreak
  The following functions can be used to control the gadget:
@LineBreak
@LineBreak
  - @@SetGadgetText: Changes the text of the ButtonGadget.
@LineBreak
  - @@GetGadgetText: Returns the text of the ButtonGadget.
@LineBreak
  - @@SetGadgetState: Used with @#PB_Button_Toggle buttons to set the actual state (1 = toggled, 0 = normal).
@LineBreak
  - @@GetGadgetState: Used with @#PB_Button_Toggle buttons to get the actual state of the button (1 = toggled, 0 = normal).

@Example
@Code
  ; Shows possible flags of ButtonGadget in action...
  If OpenWindow(0, 0, 0, 222, 200, "ButtonGadgets", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    ButtonGadget(0, 10, 10, 200, 20, "Standard Button")
    ButtonGadget(1, 10, 40, 200, 20, "Left Button", #PB_Button_Left)
    ButtonGadget(2, 10, 70, 200, 20, "<b>Right Button</b>", #PB_Button_Right) ; Using HTML markup
    ButtonGadget(3, 10,100, 200, 60, "Multiline Button  (longer text gets automatically wrapped)", #PB_Button_MultiLine)
    ButtonGadget(4, 10,170, 200, 20, "Toggle Button", #PB_Button_Toggle)
  EndIf
@EndCode
@LineBreak
@Image buttongadget.png

@SeeAlso
  @@SetGadgetText, @@GetGadgetText, @@SetGadgetState, @@GetGadgetState, @@ButtonImageGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = CalendarGadget(#Gadget, x, y, Width, Height [, Date [, Flags]])

@Description
  Create a calendar gadget in the current GadgetList. This gadget displays a month calendar and lets the
  user select a date.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@OptionalParameter "Date"
  The initial date to set. The default is the current date.

@OptionalParameter "Flags"
  This parameter can be set to @#PB_Calendar_Borderless to create a gadget without
  a border.

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  The dates used by this gadget and the functions for it use the same date format as the
  @LibraryLink "Date" "date library".
@LineBreak
@LineBreak
  A 'mini help' can be added to this gadget using @@GadgetToolTip.
@LineBreak
@LineBreak
  The following functions can be used for this gadget:
@LineBreak
@LineBreak
  - @@SetGadgetState: Set the currently displayed date.
@LineBreak
  - @@GetGadgetState: Get the currently displayed date.
@LineBreak
  - @@SetGadgetItemState: Make a specific date appear bold (Windows only).
@LineBreak
  - @@GetGadgetItemState: Get the bold state of a specific date (Windows only).
@LineBreak
  - @@SetGadgetAttribute: With the following attributes:
@FixedFont
  @#PB_Calendar_Minimum: Set the minimum selectable date
  @#PB_Calendar_Maximum: Set the maximum selectable date in this gadget.
@EndFixedFont
  - @@GetGadgetAttribute: With the following attributes:
@FixedFont
  @#PB_Calendar_Minimum: Get the minimum selectable date
  @#PB_Calendar_Maximum: Get the maximum selectable date of this gadget.
@EndFixedFont


@LineBreak
  This gadget supports the @@SetGadgetColor and @@GetGadgetColor functions with
  the following values as 'ColorType':
@FixedFont
  @#PB_Gadget_BackColor      : backgroundcolor
  @#PB_Gadget_FrontColor     : textcolor for displayed days (not supported on Windows Vista+)
  @#PB_Gadget_TitleBackColor : backgroundcolor of the month title (not supported on Windows Vista+)
  @#PB_Gadget_TitleFrontColor: textcolor of the month title (not supported on Windows Vista+)
  @#PB_Gadget_GrayTextColor  : textcolor for days not of the current month (not supported on Windows Vista+)
@EndFixedFont
  
@Example
@Code
  If OpenWindow(0, 0, 0, 230, 260, "CalendarGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    CalendarGadget(0, 10, 10, 210, 240)
  EndIf
@EndCode
@LineBreak
@Image calendargadget.png

@SeeAlso
  @@SetGadgetState, @@GetGadgetState, @@SetGadgetItemState, @@GetGadgetItemState, @@SetGadgetAttribute, @@GetGadgetAttribute, 
  @@SetGadgetColor, @@GetGadgetColor,
  @@DateGadget, @@Date, @@FormatDate

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = CanvasGadget(#Gadget, x, y, Width, Height [, Flags])

@Description
  Create a canvas gadget in the current GadgetList. This gadget provides a drawing surface and events for mouse
  and keyboard interaction to easily create custom views.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget (in pixels). The maximum width and height is 16000 pixels.

@OptionalParameter "Flags"
  Flags to modify the gadget behavior. It can be a combination of the following constants:
@FixedFont
  @#PB_Canvas_Border     : Draws a border around the gadget.
  @#PB_Canvas_Keyboard   : Allows the gadget to receive the keyboard focus and keyboard events.
  @#PB_Canvas_DrawFocus  : Draws a focus rectangle on the gadget if it has keyboard focus.
  @#PB_Canvas_Transparent: The canvas background will be transparent.
  @#PB_Canvas_Container  : Enables container support so gadgets can be added to it. @@CloseGadgetList needs to be called
                          to go back to previous gadget list like any other container gadget.
@EndFixedFont
  The @#PB_Canvas_Keyboard flag is required to receive any keyboard events in the gadget. If you include this flag, you should
  check for the @#PB_EventType_Focus and @#PB_EventType_LostFocus events and draw a visual indication on the gadget
  when it has the focus so it is clear to the user which gadget currently has the focus. Alternatively, the @#PB_Canvas_DrawFocus
  flag can be included to let the gadget draw a standard focus rectangle whenever it has the focus.

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  The created gadget starts out with just a white background. Use the @@CanvasOutput or @@CanvasVectorOutput command to draw to the gadget.
  The drawn content stays persistent until it is erased by a further drawing operation.

@LineBreak
@LineBreak

  The following events are reported by the gadget. The @@EventType function reports the type of the current gadget event:
@FixedFont
  @#PB_EventType_MouseEnter      : The mouse cursor entered the gadget
  @#PB_EventType_MouseLeave      : The mouse cursor left the gadget
  @#PB_EventType_MouseMove       : The mouse cursor moved
  @#PB_EventType_MouseWheel      : The mouse wheel was moved
  @#PB_EventType_LeftButtonDown  : The left mouse button was pressed
  @#PB_EventType_LeftButtonUp    : The left mouse button was released
  @#PB_EventType_LeftClick       : A click with the left mouse button
  @#PB_EventType_LeftDoubleClick : A double-click with the left mouse button
  @#PB_EventType_RightButtonDown : The right mouse button was pressed
  @#PB_EventType_RightButtonUp   : The right mouse button was released
  @#PB_EventType_RightClick      : A click with the right mouse button
  @#PB_EventType_RightDoubleClick: A double-click with the right mouse button
  @#PB_EventType_MiddleButtonDown: The middle mouse button was pressed
  @#PB_EventType_MiddleButtonUp  : The middle mouse button was released
  @#PB_EventType_Focus           : The gadget gained keyboard focus
  @#PB_EventType_LostFocus       : The gadget lost keyboard focus
  @#PB_EventType_KeyDown         : A key was pressed
  @#PB_EventType_KeyUp           : A key was released
  @#PB_EventType_Input           : Text input was generated    
@EndFixedFont
  Note that the events @#PB_EventType_KeyDown, @#PB_EventType_KeyUp and @#PB_EventType_Input
  are only reported when the gadget has the keyboard focus. This means that the @#PB_Canvas_Keyboard flag has to be set on gadget 
  creation to allow keyboard events. On Windows, the @#PB_EventType_MouseWheel event is also only reported if the gadget has 
  keyboard focus. On the other OS, this event is reported to the gadget under the cursor, regardless of keyboard focus.

@LineBreak
@LineBreak

  Further information about the current event can be received with the @@GetGadgetAttribute function. 
  The following attributes can be used:
@LineBreak
@LineBreak
  @#PB_Canvas_MouseX, @#PB_Canvas_MouseY
@Indent
  Returns the given mouse coordinate relative to the drawing area of the gadget. This returns the mouse location at the time that 
  the event was generated,  so the result can differ from the coordinates reported by @@WindowMouseX and @@WindowMouseY which
  return the current mouse location regardless of the state of the processed events. The coordinates returned
  using these attributes should be used for this gadget to ensure that the mouse coordinates are in sync with the current event.
@EndIndent

  @#PB_Canvas_Buttons
@Indent
  Returns the state of the mouse buttons for the event. The result is a combination (using bitwise or) of the following values:
@FixedFont
  @#PB_Canvas_LeftButton  : The left button is currently down.
  @#PB_Canvas_RightButton : The right button is currently down.
  @#PB_Canvas_MiddleButton: The middle button is currently down.
@EndFixedFont
@EndIndent

  @#PB_Canvas_Modifiers
@Indent
  Returns the state of the keyboard modifiers for the event. The result is a combination (using bitwise or) of the following values:
@FixedFont
  @#PB_Canvas_Shift  : The 'shift' key is currently pressed.
  @#PB_Canvas_Alt    : The 'alt' key is currently pressed.
  @#PB_Canvas_Control: The 'control' key is currently pressed.
  @#PB_Canvas_Command: The 'command' (or "apple") key is currently pressed.
@EndFixedFont
@EndIndent

  @#PB_Canvas_WheelDelta
@Indent
  Returns the movement of the mouse wheel in the current event in multiples of 1 or -1. A positive value indicates that the wheel was
  moved up (away from the user) and a negative value indicates that the wheel was moved down (towards the user). This attribute is 0
  if the current event is not a @#PB_EventType_MouseWheel event.
@EndIndent

  @#PB_Canvas_Key
@Indent
  Returns the key that was pressed or released in a @#PB_EventType_KeyDown or @#PB_EventType_KeyUp event.
  The returned value is one of the @#PB_Shortcut_... values. This attribute returns
  raw key presses. To get text input for the gadget, it is better to watch for @#PB_EventType_Input events and use the
  @#PB_Canvas_Input attribute because it contains the text input from multiple key presses such as shift or dead keys combined.
@EndIndent

  @#PB_Canvas_Input
@Indent
  Returns the input character that was generated by one or more key presses. This attribute is only present after a
  @#PB_EventType_Input event. The returned character value can be converted into a string using the @@Chr function.
@EndIndent

  In addition to this event information, @@GetGadgetAttribute can also be used to read the following attributes:
@LineBreak
@LineBreak
  @#PB_Canvas_Image
@Indent
  Returns an @Link "Image/ImageID" "ImageID" value that represents an image with the current content of the CanvasGadget. This value
  can be used to draw the content of the gadget to another drawing output using the @@DrawImage function.
@LineBreak
@LineBreak
  Note: The returned value is only valid until changes are made to the gadget by resizing it or drawing to it, so it should only be used
  directly in a command like @@DrawImage and not stored for future use.
@EndIndent

  @#PB_Canvas_Cursor
@Indent
  Returns the cursor that is currently used in the gadget. See below for a list of possible values.
  If the gadget is using a custom cursor handle, the return-value is -1.
@EndIndent

  @#PB_Canvas_CustomCursor
@Indent
  Returns the custom cursor handle that was set using @@SetGadgetAttribute. If the gadget uses a standard cursor,
  the return-value is 0.
@EndIndent

  The @@SetGadgetAttribute function can be used to modify the following gadget attributes
@LineBreak
@LineBreak
  @#PB_Canvas_Image
@Indent
  Applies the given @Link "Image/ImageID" ImageID to the CanvasGadget. The gadget makes a copy of the input image so it can be freed or reused
  after this call. Setting this attribute is the same as using @@StartDrawing, @@CanvasOutput and @@DrawImage to draw the image onto the CanvasGadget.
@EndIndent

  @#PB_Canvas_Cursor
@Indent
  Changes the cursor that is displayed when the mouse is over the gadget. The following values are possible:
@FixedFont
  @#PB_Cursor_Default        : default arrow cursor
  @#PB_Cursor_Cross          : crosshair cursor
  @#PB_Cursor_IBeam          : I-cursor used for text selection
  @#PB_Cursor_Hand           : hand cursor
  @#PB_Cursor_Busy           : hourglass or watch cursor
  @#PB_Cursor_Denied         : slashed circle or X cursor
  @#PB_Cursor_Arrows         : arrows in all direction
  @#PB_Cursor_LeftRight      : left and right arrows
  @#PB_Cursor_UpDown         : up and down arrows
  @#PB_Cursor_LeftUpRightDown: diagonal arrows
  @#PB_Cursor_LeftDownRightUp: diagonal arrows
  @#PB_Cursor_Invisible      : hides the cursor
@EndFixedFont
@EndIndent

  A 'mini help' can be added to this gadget using @@GadgetToolTip. 

@Example
@Code
  Procedure CanvasEvent()
    
    If EventType() = #PB_EventType_LeftButtonDown Or (EventType() = #PB_EventType_MouseMove And GetGadgetAttribute(0, #PB_Canvas_Buttons) & #PB_Canvas_LeftButton)
      If StartDrawing(CanvasOutput(0))
        x = GetGadgetAttribute(0, #PB_Canvas_MouseX)
        y = GetGadgetAttribute(0, #PB_Canvas_MouseY)
        Circle(x, y, 10, RGB(Random(255), Random(255), Random(255)))
        StopDrawing()
      EndIf
    EndIf
    
  EndProcedure
  
  If OpenWindow(0, 0, 0, 220, 220, "CanvasGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    CanvasGadget(0, 10, 10, 200, 200)
    
    BindGadgetEvent(0, @CanvasEvent())
  EndIf
@EndCode

@Example Canvas container 
@Code
  OpenWindow(0, 0, 0, 220, 220, "Canvas container example", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
  
  CanvasGadget(0, 10, 10, 200, 200, #PB_Canvas_Container)
    ButtonGadget(1, 10, 10, 80, 30, "Clean up")
  CloseGadgetList()
    
  Procedure GadgetEvents()
    
    Select EventGadget() 
      Case 0
        If EventType() = #PB_EventType_LeftButtonDown Or (EventType() = #PB_EventType_MouseMove And GetGadgetAttribute(0, #PB_Canvas_Buttons) & #PB_Canvas_LeftButton)
          If StartDrawing(CanvasOutput(0))
            x = GetGadgetAttribute(0, #PB_Canvas_MouseX)
            y = GetGadgetAttribute(0, #PB_Canvas_MouseY)
            Circle(x, y, 10, RGB(Random(255), Random(255), Random(255)))
            StopDrawing()
          EndIf
        EndIf
      
      Case 1
        If StartDrawing(CanvasOutput(0))
          Box(0, 0, 200, 200, #White)
          StopDrawing()
        EndIf
    EndSelect
    
  EndProcedure

  BindEvent(#PB_Event_Gadget, @GadgetEvents())
@EndCode

@Image canvasgadget.png

@ExampleFile All CanvasGadget.sb


@SeeAlso
  @@CanvasOutput, @@GetGadgetAttribute, @@SetGadgetAttribute, @@EventType, @@StartDrawing

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function OutputID = CanvasOutput(#Gadget)

@Description
  Returns the OutputID of a CanvasGadget to perform 2D rendering operation on it. 

@Parameter "#Gadget"
  The gadget to draw on. This must be a @@CanvasGadget.

@ReturnValue
  Returns the output ID or zero if drawing is not possible. This value should be passed directly to the
  @@StartDrawing function to start the drawing operation. The return-value
  is valid only for one drawing operation and cannot be reused.

@Example
@Code
  ...
  StartDrawing(CanvasOutput(#Gadget))
    ; do some drawing stuff here...
  StopDrawing()
@EndCode

@Remarks
  Drawing on a @@CanvasGadget is double-buffered. This means that the drawing operations only become visible
  at the @@StopDrawing command to avoid visible flicker during the drawing.

@SeeAlso
  @@StartDrawing, @@CanvasGadget, @@CanvasVectorOutput

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function VectorOutputID = CanvasVectorOutput(#Gadget [, Unit])

@Description
  Returns the OutputID of a CanvasGadget to perform vector drawing operations on it.

@Parameter "#Gadget"
  The gadget to draw on. This must be a @@CanvasGadget.

@OptionalParameter "Unit"
  Specifies the unit used for measuring distances on the drawing output. 
  The default unit for canvas gadgets is @#PB_Unit_Pixel.
@FixedFont
  @#PB_Unit_Pixel     : Values are measured in pixels
  @#PB_Unit_Point     : Values are measured in points (1/72 inch)
  @#PB_Unit_Inch      : Values are measured in inches
  @#PB_Unit_Millimeter: Values are measured in millimeters
@EndFixedFont
  
@ReturnValue
  Returns the output ID or zero if drawing is not possible. This value should be passed directly to the
  @@StartVectorDrawing function to start the drawing operation. The return-value
  is valid only for one drawing operation and cannot be reused.

@Example
@Code
  ...
  StartVectorDrawing(CanvasVectorOutput(#Gadget))
    ; do some drawing stuff here...
  StopVectorDrawing()
@EndCode

@Remarks
  Drawing on a @@CanvasGadget is double-buffered. This means that the drawing operations only become visible
  at the @@StopVectorDrawing command to avoid visible flicker during the drawing.

@SeeAlso
  @@StartVectorDrawing, @@CanvasGadget, @@CanvasOutput

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = CheckBoxGadget(#Gadget, x, y, Width, Height, Text$ [, Flags])

@Description
  Create a checkbox gadget in the current GadgetList.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@Parameter "Text$"
  The text (HTML format) to display next to the checkbox.

@OptionalParameter "Flags"
  Flags to modify the gadget behavior. It can be a combination
  of the following constants:
@FixedFont
  @#PB_CheckBox_Right     : Aligns the text to right.
  @#PB_CheckBox_Center    : Centers the text.
@EndFixedFont

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  A 'mini help' can be added to this gadget using @@GadgetToolTip. 
@LineBreak
@LineBreak
  - @@GetGadgetState can be used to get the current gadget state. @LineBreak
  - @@SetGadgetState can be used to change the gadget state. @LineBreak

@Example
@Code
  If OpenWindow(0, 0, 0, 270, 130, "CheckBoxGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    CheckBoxGadget(0, 10,  10, 250, 20, "CheckBox standard")
    CheckBoxGadget(1, 10,  40, 250, 20, "CheckBox checked") : SetGadgetState(1, #PB_Checkbox_Checked)
    CheckBoxGadget(2, 10,  70, 250, 20, "<i>CheckBox right</i>", #PB_CheckBox_Right) ; Using HTML format
    CheckBoxGadget(3, 10, 100, 250, 20, "CheckBox center", #PB_CheckBox_Center)
  EndIf
@EndCode
@LineBreak
@Image checkboxgadget.png

@SeeAlso
  @@GetGadgetState, @@SetGadgetState, @@OptionGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function ClearGadgetItems(#Gadget)

@Description
  Clears all the items from the specified gadget. 

@Parameter "#Gadget"
  The gadget to clear.

@NoReturnValue

@Remarks
  The Gadget must be one of the following types: 
@LineBreak
@LineBreak
  - @@ComboBoxGadget
@LineBreak
  - @@ListIconGadget
@LineBreak
  - @@ListViewGadget
@LineBreak
  - @@PanelGadget
@LineBreak
  - @@TreeGadget

@Example
@Code
  Procedure ClearEvent()
    ClearGadgetItems(0) 
  EndProcedure
  
  If OpenWindow(0, 0, 0, 220, 150, "ClearGadgetItems", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    ListViewGadget(0,10,10,200,100)
    
    ; add 10 items
    For a = 1 To 10 : AddGadgetItem (0, -1, "Item " + a) : Next  
    
    ButtonGadget(1, 10, 120, 150, 20, "Clear Listview contents")
    BindGadgetEvent(1, @ClearEvent())
  EndIf
@EndCode

@SeeAlso
  @@AddGadgetItem, @@RemoveGadgetItem, @@CountGadgetItems

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function CloseGadgetList()

@Description
  Terminate the current gadget list creation and go back to the previous
  GadgetList.

@NoParameters
@NoReturnValue

@Remarks
  This is especially useful for the following gadgets:
@LineBreak
@LineBreak
  - @@ContainerGadget
@LineBreak
  - @@PanelGadget
@LineBreak
  - @@ScrollAreaGadget

@SeeAlso
  @@OpenGadgetList, @@ContainerGadget, @@PanelGadget, @@ScrollAreaGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ComboBoxGadget(#Gadget, x, y, Width, Height [, Flags])

@Description
  Create a ComboBox gadget in the current GadgetList.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget. 

@OptionalParameter "Flags"
  Flags to modify the gadget behavior. It can be composed (using the '|' operator) of one of the following constants:
@FixedFont
  @#PB_ComboBox_Editable  : Makes the ComboBox editable
  @#PB_ComboBox_LowerCase : All text entered in the ComboBox will be converted to lower case.
  @#PB_ComboBox_UpperCase : All text entered in the ComboBox will be converted to upper case.
@EndFixedFont

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  A 'mini help' can be added to this gadget using @@GadgetToolTip.
@LineBreak
@LineBreak
  The following functions can be used to act on the list contents:
@LineBreak
@LineBreak
  - @@AddGadgetItem: Add an item.
@LineBreak
  - @@GetGadgetItemText: Returns the gadget item text.
@LineBreak
  - @@CountGadgetItems: Count the items in the current combobox.
@LineBreak
  - @@ClearGadgetItems: Remove all the items.
@LineBreak
  - @@RemoveGadgetItem: Remove an item.
@LineBreak
  - @@SetGadgetItemText: Changes the gadget item text.
@LineBreak
  - @@SetGadgetItemImage: Changes the gadget item image (need to be created with the @#PB_ComboBox_Image flag).
@LineBreak
  - @@GetGadgetState: Get the index (starting from 0) of the current element.
@LineBreak
  - @@GetGadgetText: Get the (text) content of the current element.
@LineBreak
  - @@SetGadgetState: Change the selected element.
@LineBreak
  - @@SetGadgetText: Set the displayed text. If the ComboBoxGadget is not editable, the text must be in the dropdown list.
@LineBreak
  - @@GetGadgetItemData: Returns the value that was stored with item.
@LineBreak
  - @@SetGadgetItemData: Stores a value with the item.

@LineBreak
@LineBreak
  ComboBoxGadget() supports the following events reported by @@EventType:
@FixedFont
  @#PB_EventType_Change   : The current selection of the text in the edit field changed.
  @#PB_EventType_Focus    : The edit field received the keyboard focus (editable ComboBox only).
  @#PB_EventType_LostFocus: The edit field lost the keyboard focus (editable ComboBox only).
@EndFixedFont


@Example
@Code
  If OpenWindow(0, 0, 0, 270, 85, "ComboBoxGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    ComboBoxGadget(0, 10, 10, 250, 25, #PB_ComboBox_Editable)
    AddGadgetItem(0, -1, "ComboBox editable...")

    ComboBoxGadget(1, 10, 50, 250, 25)
    For Index = 0 To 5
      AddGadgetItem(1, -1, "ComboBox item " + Index)
    Next

    SetGadgetState(0, 0)
    SetGadgetState(1, 2)    ; set (beginning with 0) the third item as active one
  EndIf
@EndCode
@LineBreak
@Image comboboxgadget.png

@SeeAlso
  @@AddGadgetItem, @@RemoveGadgetItem, @@CountGadgetItems, @@ClearGadgetItems, 
  @@GetGadgetState, @@SetGadgetState, @@GetGadgetText, @@SetGadgetText
  @@GetGadgetItemText, @@SetGadgetItemText, @@SetGadgetItemImage
  @@GetGadgetItemData, @@SetGadgetItemData

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ContainerGadget(#Gadget, x, y, Width, Height [, Flags])

@Description
  Creates a container gadget in the current GadgetList. It's a simple panel gadget which
  can contain other gadgets.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@OptionalParameter "Flags"
  Flags to modify the gadget behavior. It can be composed of one of the following constants:
@FixedFont
  @#PB_Container_BorderLess : Without any border (Default).
  @#PB_Container_Flat       : Flat frame.
  @#PB_Container_Raised     : Raised frame.
  @#PB_Container_Single     : Single sunken frame.
  @#PB_Container_Double     : Double sunken frame.
@EndFixedFont

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  Once the gadget is created,
  all future created gadgets will be created inside the container. When all the needed
  gadgets have been created, @@CloseGadgetList must be called to return to the
  previous GadgetList. @@OpenGadgetList can be used later to add others gadgets
  on the fly in the container area.
@LineBreak
@LineBreak
 The following event is supported through @@EventType:
@FixedFont
  @#PB_EventType_Resize: The gadget has been resized.
@EndFixedFont  
@LineBreak
@LineBreak
  A 'mini help' can be added to this gadget using @@GadgetToolTip.
@LineBreak
@LineBreak
  This gadget supports the @@SetGadgetColor and @@GetGadgetColor functions with
  @#PB_Gadget_BackColor as type to change the gadget background.

@Example
@Code
  If OpenWindow(0, 0, 0, 322, 150, "ContainerGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    ContainerGadget(0, 8, 8, 306, 133, #PB_Container_Raised)
      ButtonGadget(1, 10, 15, 80, 24, "Button 1")
      ButtonGadget(2, 95, 15, 80, 24, "Button 2")
    CloseGadgetList()
  EndIf
@EndCode
@LineBreak
@Image containergadget.png

@SeeAlso
  @@OpenGadgetList, @@CloseGadgetList, @@SetGadgetColor, @@GetGadgetColor

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = CountGadgetItems(#Gadget)

@Description
  Returns the number of items in the specified gadget. 

@Parameter "#Gadget"
  The gadget to use.

@ReturnValue
  Returns the number of items in the gadget.

@Remarks
  This is a universal function which works for all gadgets which handle several items:
@LineBreak
@LineBreak
  - @@ComboBoxGadget
@LineBreak
  - @@ListIconGadget
@LineBreak
  - @@ListViewGadget
@LineBreak
  - @@PanelGadget
@LineBreak
  - @@TreeGadget

@SeeAlso
  @@AddGadgetItem, @@RemoveGadgetItem, @@ClearGadgetItems

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = DateGadget(#Gadget, x, y, Width, Height [, Mask$ [, Date [, Flags]]])

@Description
  Creates a String gadget in the current GadgetList, in which a date can be entered.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@OptionalParameter "Mask$"
  The format in which the date can be entered. See @@FormatDate for the format of
  this mask. Only %yyyy, %mm and %dd tags are supported. No extra text characters can be set in the date format.
  If you don't specify the mask or specify an empty string, a default mask will be chosen. The mask can be modified with the @@SetGadgetText function.

@OptionalParameter "Date"
  The initial date for the gadget. Not specifying this parameter or specifying a 0 value will display
  the current date.

@OptionalParameter "Flags"
  Flags to modify the gadget behavior:
@LineBreak
@LineBreak
  By default, the gadget has a button to display a calendar in which the user can choose a date (see image below). You can change this by specifying
  @#PB_Date_UpDown in the Flags parameter. This will make the gadget display an up/down button that lets the user change the current selected part of the
  gadget. This option is only available on Windows.
@LineBreak
@LineBreak
  If you specify @#PB_Date_Checkbox in the Flags parameter, the Gadget will have a checkbox with which the user can set the
  Gadget to 'no date' (if the checkbox is unchecked). While the checkbox is unchecked, @@GetGadgetState will return 0.
  To change the state of the checkbox, use @@SetGadgetState with either 0 (=checkbox unchecked) or any valid date (=checkbox checked).

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  This gadget uses the same date format for its functions as used by the @LibraryLink "Date" "Date library". So you can use for example @@FormatDate to
  display the results you get from @@GetGadgetState in a proper format.
@LineBreak
@LineBreak
  A 'mini help' can be added to this gadget using @@GadgetToolTip.
@LineBreak
@LineBreak
  The following functions can be used for this gadget:
@LineBreak
@LineBreak
  - @@SetGadgetState: Set the currently displayed date.
@LineBreak
  - @@SetGadgetText: Change the input mask of the gadget.
@LineBreak
  - @@GetGadgetState: Get the currently displayed date.
@LineBreak
  - @@GetGadgetText: Get the current displayed date as a string, as it is displayed in the gadget.
@LineBreak
  - @@GetGadgetAttribute: With the following attributes:
@FixedFont
  @#PB_Date_Minimum: Get the minimum date that can be entered
  @#PB_Date_Maximum: Get the maximum date that can be entered
@EndFixedFont

  - @@SetGadgetAttribute: With the following attributes:
@FixedFont
  @#PB_Date_Minimum: Set the minimum date that can be entered
  @#PB_Date_Maximum: Set the maximum date that can be entered
@EndFixedFont

  The following events are supported through @@EventType:
@FixedFont
  @#PB_EventType_Change: The date has been modified by the user.
@EndFixedFont


@LineBreak
  This gadget supports the @@SetGadgetColor and @@GetGadgetColor functions with
  the following values as 'ColorType' to color the dropdown calendar (the edit area cannot be colored):
@FixedFont
  @#PB_Gadget_BackColor      : backgroundcolor
  @#PB_Gadget_FrontColor     : textcolor for displayed days
  @#PB_Gadget_TitleBackColor : backgroundcolor of the month title
  @#PB_Gadget_TitleFrontColor: textcolor of the month title
  @#PB_Gadget_GrayTextColor  : textcolor for days not of the current month
@EndFixedFont

@Example
@Code
  If OpenWindow(0, 0, 0, 200, 250, "DateGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    DateGadget(0, 10, 10, 180, 25, "%mm/%dd/%yyyy")
  EndIf
@EndCode
@LineBreak
@Image dategadget.png

@SeeAlso
  @@GetGadgetState, @@SetGadgetState, @@GetGadgetText, @@SetGadgetText, @@GetGadgetAttribute, @@SetGadgetAttribute,
  @@GetGadgetColor, @@SetGadgetColor, @@CalendarGadget, @@Date, @@FormatDate

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function DisableGadget(#Gadget, State)

@Description
  Disable or enable the gadget. 

@Parameter "#Gadget"
  The gadget to enable or disable.

@Parameter "State"
  The new state of the gadget.
  If State = 1, the gadget will be disabled, if State = 0 it will be enabled.

@NoReturnValue

@Example
@Code
  If OpenWindow(0, 0, 0, 250, 105, "Disable/enable buttons...", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    ButtonGadget(0, 10, 15, 230, 30, "Disabled Button") : DisableGadget(0, 1)
    ButtonGadget(1, 10, 60, 230, 30, "Enabled Button") : DisableGadget(1, 0)
  EndIf
@EndCode
@LineBreak
@Image disablegadget.png

@SeeAlso
  @@HideGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = EditorGadget(#Gadget, x, y, Width, Height [, Flags])

@Description
  Creates an Editor gadget in the current GadgetList.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@OptionalParameter "Flags"
  Flags to modify the gadget behavior. This can be the following value:
@FixedFont
  @#PB_Editor_ReadOnly: the user cannot edit the text in the gadget.
  @#PB_Editor_WordWrap: the lines too long to be displayed will be wrapped still displayed completely
@EndFixedFont  

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  A 'mini help' can be added to this gadget using @@GadgetToolTip.
@LineBreak
@LineBreak
  The following events are supported through @@EventType:
@FixedFont
  @#PB_EventType_Change   : the text has been modified by the user.
  @#PB_EventType_Focus    : the editor has got the focus.
  @#PB_EventType_LostFocus: the editor has lost the focus.
@EndFixedFont

  The following functions can be used to act on the editor content:
@LineBreak
@LineBreak
  - @@GetGadgetText: Get the text content of the editor gadget.
@LineBreak
  - @@SetGadgetText: Change the text content of the editor gadget.
@LineBreak
  - @@SetGadgetAttribute: With the following attribute:
@FixedFont
  @#PB_Editor_ReadOnly: set the read-only state (zero means editable, nonzero means read-only).
  @#PB_Editor_WordWrap: set the word-wrap state
@EndFixedFont
  - @@GetGadgetAttribute: With the following attribute:
@FixedFont
  @#PB_Editor_ReadOnly: get the read-only state (zero means editable, nonzero means read-only).
  @#PB_Editor_WordWrap: get the word-wrap state
@EndFixedFont

@LineBreak
  This gadget supports the @@SetGadgetColor and @@GetGadgetColor functions with
  the following values as 'ColorType':
@FixedFont
  @#PB_Gadget_BackColor      : backgroundcolor
  @#PB_Gadget_FrontColor     : textcolor
@EndFixedFont

@Example
@Code
  If OpenWindow(0, 0, 0, 322, 150, "EditorGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    EditorGadget(0, 8, 8, 306, 133)
    SetGadgetText(0, "This is a multiline text to edit" + #LF$ +
                     "in the EditorGadget()." + #LF$ +
                     "Third line")
  EndIf
@EndCode
@LineBreak
@Image editorgadget.png

@SeeAlso
  @@AddGadgetItem, @@RemoveGadgetItem, @@CountGadgetItems, @@ClearGadgetItems, @@GetGadgetText, @@SetGadgetText,
  @@GetGadgetItemText, @@SetGadgetItemText, @@GetGadgetAttribute, @@SetGadgetAttribute, 
  @@GetGadgetColor, @@SetGadgetColor, @@StringGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = FrameGadget(#Gadget, x, y, Width, Height, Text$ [, Flags])

@Description
  Creates a Frame gadget in the current GadgetList. This kind of gadget is decorative only.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget. 

@Parameter "Text$"
  A text (HTML format) to display in the frame.
  This parameter is only valid if no borders are specified, else it will be ignored.

@OptionalParameter "Flags"
  Flags to modify the gadget behavior. It can be a combination of the following values:
@FixedFont
  @#PB_Frame_Single  : Ignored.
  @#PB_Frame_Double  : Ignored.
  @#PB_Frame_Flat    : Ignored.
@EndFixedFont

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  As this Gadget is decorative only, @@GadgetToolTip cannot be used. This Gadget also receives no events.

@Example
@Code
  If OpenWindow(0, 0, 0, 320, 250, "FrameGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    FrameGadget(0, 10,  10, 300, 230, "<b>FrameGadget</b> Standard") ; Using HTML markup
  EndIf
@EndCode

@SeeAlso
  @@GetGadgetText, @@SetGadgetText, @@ContainerGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function FreeGadget(#Gadget)

@Description
  Free and remove the gadget from the display (and free its gadgetlist if the gadget was a container).

@Parameter "#Gadget"
  The gadget to free. If @#PB_All is specified, all the remaining gadgets are freed.

@NoReturnValue

@Remarks
  A gadget is freed automatically if one of the following happens:
@LineBreak
@LineBreak
  - The window that contains the gadget is @Link "Window/CloseWindow" "closed".
@LineBreak
  - The parent of the gadget (@@ContainerGadget, @@PanelGadget etc.) is freed.
@LineBreak
  - The program ends.

@SeeAlso
  @@IsGadget, @@CloseWindow

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function GadgetID = GadgetID(#Gadget)

@Description
  Returns the unique system identifier of the #Gadget.

@Parameter "#Gadget"
  The gadget to use.

@ReturnValue
  Returns the system identifier.
  This result is sometimes also known as 'Handle'. Look at the extra chapter @ReferenceLink "handles" "Handles and Numbers" for
  more information.

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function GadgetToolTip(#Gadget, Text$)

@Description
  Associate the specified Text$ with the #Gadget. A tooltip text is text which is displayed
  when the mouse cursor is over the gadget for a small amount of time (typically a yellow floating box).

@Parameter "#Gadget"
  The gadget to use.

@Parameter "Text$"
  The tooltip text (HTML format).

@NoReturnValue

@Remarks
  The following gadgets are supported:
@LineBreak
@LineBreak
  - @@ButtonGadget @LineBreak
  - @@ButtonImageGadget @LineBreak
  - @@CalendarGadget @LineBreak
  - @@CanvasGadget @LineBreak
  - @@CheckBoxGadget @LineBreak
  - @@ComboBoxGadget @LineBreak
  - @@ContainerGadget @LineBreak
  - @@DateGadget@LineBreak
  - @@EditorGadget @LineBreak
  - @@HyperLinkGadget @LineBreak
  - @@ImageGadget@LineBreak
  - @@ListIconGadget@LineBreak
  - @@ListViewGadget @LineBreak
  - @@OptionGadget @LineBreak
  - @@PanelGadget @LineBreak
  - @@ProgressBarGadget @LineBreak
  - @@SpinGadget @LineBreak
  - @@SplitterGadget @LineBreak
  - @@StringGadget @LineBreak
  - @@TrackBarGadget @LineBreak
  - @@TreeGadget

@Example
@Code
  If OpenWindow(0, 0, 0, 270, 100, "GadgetTooltip", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    ButtonGadget(0, 10, 30, 250, 30, "Button with tooltip")
    GadgetToolTip(0, "<i>Tooltip</i> for Button") : Using HTML markup
  EndIf
@EndCode
@LineBreak
@Image gadgettooltip.png

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = GadgetX(#Gadget [, Mode])

@Description
  Returns the X position of the specified gadget. 

@Parameter "#Gadget"
  The gadget to use.
  
@OptionalParameter "Mode"
  Mode can be one of the following value:
@FixedFont
  @#PB_Gadget_ContainerCoordinate: the gadget X position (in pixels) within its container, or window (default)
  @#PB_Gadget_WindowCoordinate   : the absolute gadget X position (in pixels) within the window.
  @#PB_Gadget_ScreenCoordinate   : the absolute gadget X position (in pixels) in the screen.
                                  It can be useful to display something over the gadget like a floating window or a popup menu.
@EndFixedFont

@ReturnValue
  Returns the X position relative to the gadgets parent or window (in pixels).

@SeeAlso
  @@GadgetY, @@GadgetWidth, @@GadgetHeight, @@ResizeGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = GadgetY(#Gadget [, Mode])

@Description
  Returns the Y position of the specified gadget. 

@Parameter "#Gadget"
  The gadget to use.

@OptionalParameter "Mode"
  Mode can be one of the following value:
@FixedFont
  @#PB_Gadget_ContainerCoordinate: the gadget Y position (in pixels) within its container, or window (default)
  @#PB_Gadget_WindowCoordinate   : the absolute gadget Y position (in pixels) within the window.
  @#PB_Gadget_ScreenCoordinate   : the absolute gadget Y position (in pixels) in the screen.
                                  It can be useful to display something over the gadget like a floating window or a popup menu.
@EndFixedFont

@ReturnValue
  Returns the Y position relative to the gadgets parent or window in pixels.

@SeeAlso
  @@GadgetX, @@GadgetWidth, @@GadgetHeight, @@ResizeGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = GadgetHeight(#Gadget [, Mode])

@Description
  Returns the height of the specified gadget.

@Parameter "#Gadget"
  The gadget to use.

@OptionalParameter "Mode"
  Can be one of the following value:
@FixedFont
  @#PB_Gadget_ActualSize  : returns the current height of the gadget, in pixels (default).
  @#PB_Gadget_RequiredSize: returns the height needed to fully display the gadget, in pixels.
@EndFixedFont

@ReturnValue
  Returns the height of the gadget in pixels.

@SeeAlso
  @@GadgetWidth, @@GadgetX, @@GadgetY, @@ResizeGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = GadgetType(#Gadget)

@Description
  Returns the type of gadget that is represented by the specified gadget number. It can be useful
  to write generic functions that work with more than one type of gadget.

@Parameter "#Gadget"
  The gadget to use.

@ReturnValue
  Returns one of the following values:
@FixedFont
  @#PB_GadgetType_Button        : @@ButtonGadget
  @#PB_GadgetType_ButtonImage   : @@ButtonImageGadget
  @#PB_GadgetType_Calendar      : @@CalendarGadget
  @#PB_GadgetType_Canvas        : @@CanvasGadget
  @#PB_GadgetType_CheckBox      : @@CheckBoxGadget
  @#PB_GadgetType_ComboBox      : @@ComboBoxGadget
  @#PB_GadgetType_Container     : @@ContainerGadget
  @#PB_GadgetType_Date          : @@DateGadget
  @#PB_GadgetType_Editor        : @@EditorGadget
  @#PB_GadgetType_Frame         : @@FrameGadget
  @#PB_GadgetType_HyperLink     : @@HyperLinkGadget
  @#PB_GadgetType_Image         : @@ImageGadget
  @#PB_GadgetType_ListIcon      : @@ListIconGadget
  @#PB_GadgetType_ListView      : @@ListViewGadget
  @#PB_GadgetType_Option        : @@OptionGadget
  @#PB_GadgetType_Panel         : @@PanelGadget
  @#PB_GadgetType_ProgressBar   : @@ProgressBarGadget
  @#PB_GadgetType_ScrollArea    : @@ScrollAreaGadget
  @#PB_GadgetType_Spin          : @@SpinGadget
  @#PB_GadgetType_Splitter      : @@SplitterGadget
  @#PB_GadgetType_String        : @@StringGadget
  @#PB_GadgetType_Text          : @@TextGadget
  @#PB_GadgetType_TrackBar      : @@TrackBarGadget
  @#PB_GadgetType_Tree          : @@TreeGadget
  @#PB_GadgetType_Web           : @@WebGadget
  @#PB_GadgetType_Unknown       : The type is unknown. Most likely it is not a PB gadget at all.
@EndFixedFont

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = GadgetWidth(#Gadget [, Mode])

@Description
  Returns the width of the specified gadget.

@Parameter "#Gadget"
  The gadget to use.

@OptionalParameter "Mode"
  Can be one of the following value:
@FixedFont
  @#PB_Gadget_ActualSize  : returns the current width of the gadget, in pixels (default).
  @#PB_Gadget_RequiredSize: returns the width needed to fully display the gadget, in pixels.
@EndFixedFont

@ReturnValue
  Returns the width of the gadget in pixels.

@SeeAlso
  @@GadgetHeight, @@GadgetX, @@GadgetY, @@ResizeGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = GetActiveGadget()

@Description
  Returns the gadget number of the Gadget that currently has the keyboard focus. 

@NoParameters

@ReturnValue
  Returns the #Gadget number of the Gadget with the focus.
  If no Gadget has the focus, -1 is returned.

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Value = GetGadgetAttribute(#Gadget, Attribute)

@Description
  Gets an attribute value of the specified gadget. 

@Parameter "#Gadget"
  The gadget to use.

@Parameter "Attribute"
  The attribute to get.

@ReturnValue
  Returns the value of the specified gadget attribute or 0 if the gadget does
  not support the attribute.

@Remarks
  This function is available for all gadgets which support attributes. See the individual gadget for the supported attributes:
@LineBreak
@LineBreak
  - @@ButtonImageGadget @LineBreak
  - @@CalendarGadget @LineBreak
  - @@CanvasGadget @LineBreak
  - @@DateGadget @LineBreak
  - @@EditorGadget @LineBreak
  - @@ListIconGadget @LineBreak
  - @@PanelGadget @LineBreak
  - @@ProgressBarGadget @LineBreak
  - @@ScrollAreaGadget @LineBreak
  - @@SpinGadget @LineBreak
  - @@SplitterGadget @LineBreak
  - @@StringGadget @LineBreak
  - @@TrackBarGadget @LineBreak
  - @@WebGadget

@SeeAlso
  @@SetGadgetAttribute, @@GetGadgetItemAttribute, @@SetGadgetItemAttribute

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Color = GetGadgetColor(#Gadget, ColorType)

@Description
  Returns a color setting from the specified gadget.

@Parameter "#Gadget"
  The gadget to use.

@Parameter "ColorType"
  The setting to get. This can be one of the following values:
@FixedFont
  @#PB_Gadget_FrontColor     : Gadget text
  @#PB_Gadget_BackColor      : Gadget background
  @#PB_Gadget_LineColor      : Color for gridlines
  @#PB_Gadget_TitleFrontColor: Text color in the title        (for @@CalendarGadget)
  @#PB_Gadget_TitleBackColor : Background color in the title  (for @@CalendarGadget)
  @#PB_Gadget_GrayTextColor  : Color for grayed out text      (for @@CalendarGadget)
@EndFixedFont

@ReturnValue
  Returns the current color setting. This function returns the color that was
  previously set by @@SetGadgetColor. If no custom color is set for the #Gadget and ColorType,
  the function returns -1.


@Remarks
  This function is supported by the following gadgets: (See each gadget description for the supported ColorType values.)
@LineBreak
@LineBreak
  - @@CalendarGadget
@LineBreak
  - @@ContainerGadget
@LineBreak
  - @@DateGadget
@LineBreak
  - @@EditorGadget
@LineBreak
  - @@HyperLinkGadget
@LineBreak
  - @@ListViewGadget
@LineBreak
  - @@ListIconGadget
@LineBreak
  - @@ProgressBarGadget
@LineBreak
  - @@ScrollAreaGadget
@LineBreak
  - @@SpinGadget
@LineBreak
  - @@StringGadget
@LineBreak
  - @@TextGadget
@LineBreak
  - @@TreeGadget

@SeeAlso
  @@SetGadgetColor

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = GetGadgetData(#Gadget)

@Description
  Returns the 'Data' value that has been stored for this gadget with the @@SetGadgetData function.
  This allows to associate a custom value with any gadget.

@Parameter "#Gadget"
  The gadget to use.

@ReturnValue
  Returns the current data value. If there was never a data value set for this gadget, the return-value
  will be 0.

@Remarks
  This function works with all SpiderBasic gadgets. See @@SetGadgetData for an example.

@SeeAlso
  @@SetGadgetData, @@GetGadgetItemData, @@SetGadgetItemData

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Value = GetGadgetItemAttribute(#Gadget, Item, Attribute [, Column])

@Description
  Gets an attribute value of the specified gadget item. 

@Parameter "#Gadget"
  The gadget to use.

@Parameter "Item"
  The item from which to get the attribute. The first item in the gadget has index 0.

@Parameter "Attribute"
  The attribute to get.

@OptionalParameter "Column"
  The column from which to get the attribute on gadgets that
  support multiple columns. The first column has index 0. The default is column 0.

@ReturnValue
  Returns the attribute value or zero if the item or attribute does not exist.

@Remarks
  This function is available for all gadgets which support item attributes:
@LineBreak
@LineBreak

  - @@ListIconGadget:
@FixedFont
  @#PB_ListIcon_ColumnWidth : Returns the width of the given 'Column'. The 'Item' parameter is ignored.
@EndFixedFont

  - @@TreeGadget:
@FixedFont
  @#PB_Tree_SubLevel : Returns the sublevel of the given item
@EndFixedFont
  The sublevel value of the tree item can be used to determine relations between items in the tree. For example
  the first item with a sublevel smaller than the current item, if the list is checked backwards, is the parent
  of the current item.

@SeeAlso
  @@SetGadgetItemAttribute, @@GetGadgetAttribute, @@SetGadgetAttribute

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = GetGadgetItemData(#Gadget, Item)

@Description
  Returns the value that was previously stored with this gadget item with the @@SetGadgetItemData
  function. This allows to associate a custom value with the items of a gadget. 

@Parameter "#Gadget"
  The gadget to use.

@Parameter "Item"
  The item from which the data should be read. The first item in the gadget has index 0.

@ReturnValue
  Returns the stored data. If no value has been stored with the item yet,
  the return-value will be 0.

@Remarks
  This function works with the following gadgets:
@LineBreak
  - @@ComboBoxGadget
@LineBreak
  - @@ListIconGadget
@LineBreak
  - @@ListViewGadget
@LineBreak
  - @@PanelGadget
@LineBreak
  - @@TreeGadget
@LineBreak
@LineBreak
  See @@SetGadgetItemData for an example.

@SeeAlso
  @@SetGadgetItemData, @@GetGadgetData, @@SetGadgetData

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = GetGadgetState(#Gadget)

@Description
  Returns the current state of the gadget. 

@Parameter "#Gadget"
  The gadget to use.

@ReturnValue
  Returns the state of the gadget. See below for its meaning depending on the gadget type.

@Remarks
  This is a universal function which works for almost all gadgets:
@LineBreak
@LineBreak
  - @@ButtonImageGadget: returns 1 if a #PB_Button_Toggle button is toggled, else 0.
@LineBreak
  - @@ButtonGadget: returns 1 if a #PB_Button_Toggle button is toggled, else 0.
@LineBreak
  - @@CalendarGadget: returns the currently selected date.
@LineBreak
  - @@CheckBoxGadget: Returns one of the following values:
@FixedFont
  @#PB_CheckBox_Checked  : The check mark is set.
  @#PB_CheckBox_Unchecked: The check mark is not set.
@EndFixedFont
  - @@ComboBoxGadget: returns the currently selected item index, -1 if none is selected.
@LineBreak
  - @@DateGadget: returns the currently selected date/time. IF @#PB_Date_CheckBox was used, and the checkbox is unchecked, 0 is returned.
@LineBreak
  - @@ImageGadget: returns the ImageID of the currently displayed image.
@LineBreak
  - @@ListIconGadget: returns the first selected item index, -1 if none is selected.
@LineBreak
  - @@ListViewGadget: returns the currently selected item index, -1 if none is selected.
@LineBreak
  - @@OptionGadget: returns 1 if activated, 0 otherwise.
@LineBreak
  - @@PanelGadget: returns the current panel index, -1 if no panel.
@LineBreak
  - @@ProgressBarGadget: returns the current value of the ProgressBar.
@LineBreak
  - @@SpinGadget: returns the current value of the SpinGadget.
@LineBreak
  - @@SplitterGadget: returns the current splitter position, in pixels.
@LineBreak
  - @@TrackBarGadget: returns the current position of the TrackBar (value inside the minimum - maximum range).
@LineBreak
  - @@TreeGadget: returns the currently selected item index, -1 if none is selected.

@SeeAlso
  @@SetGadgetState, @@GetGadgetItemState, @@SetGadgetItemState

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result$ = GetGadgetItemText(#Gadget, Item [, Column])

@Description
  Returns the item text of the specified gadget. 

@Parameter "#Gadget"
  The gadget to use.

@Parameter "Item"
  The item to get the text. The first item in the gadget has index 0.

@OptionalParameter "Column"
  The column to use for gadgets that support multiple columns.
  The first column has index 0. The default is column 0.

@ReturnValue
  Returns the text of the gadget item or an empty string if there is an error.

@Remarks
  This is a universal function which works for almost all gadgets which handle several items:
@LineBreak
@LineBreak
  - @@ComboBoxGadget - 'Item' is the index of the item in the ComboBox list. 'Column' will be ignored.
@LineBreak
  - @@ListIconGadget - returns the entry of the given 'Item' and 'Column'. If 'Item' = -1, the 'Column' header is returned.
@LineBreak
  - @@ListViewGadget - 'Item' is the index of the entry from which you want to receive the content. 'Column' will be ignored.
@LineBreak
  - @@PanelGadget - 'Item' is the panel from which you want to receive the header text.
@LineBreak
  - @@TreeGadget - 'Item' is the index of the entry from which you want to receive the content. 'Column' will be ignored.
@LineBreak
  - @@WebGadget - Get the html code, page title, status message or current selection.

@SeeAlso
  @@SetGadgetItemText, @@GetGadgetText, @@SetGadgetText

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = GetGadgetItemState(#Gadget, Item)

@Description
  Returns the item state of the specified gadget. 

@Parameter "#Gadget"
  The gadget to use.

@Parameter "Item"
  The item to get the state. The first item in the gadget has index 0.

@ReturnValue
  Returns the state of the gadget item or 0 if there is an error.
  See below for the meaning of this value depending on the gadget type.

@Remarks
  This is a universal function that works for almost all gadgets which handle several items:
@LineBreak
  - @@CalendarGadget: returns @#PB_Calendar_Bold when the specified date is displayed bold,
    @#PB_Calendar_Normal otherwise.
    'Item' must be a SpiderBasic @LibraryLink "Date" "date" value.
@LineBreak
  - @@ListViewGadget: returns 1 if the item is selected, 0 otherwise.
 @LineBreak
  - @@ListIconGadget: returns a combination of the following values:
@FixedFont
  @#PB_ListIcon_Selected : The item is selected.
  @#PB_ListIcon_Checked  : The item has its checkbox checked (@#PB_ListIcon_CheckBoxes flag).
@EndFixedFont
  - @@TreeGadget: returns a combination of the following values:
@FixedFont
  @#PB_Tree_Selected : The item is selected, 0 otherwise.
  @#PB_Tree_Expanded : The item is expanded (a tree branch opened).
  @#PB_Tree_Collapsed: The item is collapsed (the tree branch closed).
  @#PB_Tree_Checked  : The Checkbox of the item is checked (@#PB_Tree_CheckBoxes flag).
@EndFixedFont
  Check for these states like this:
@Code
  If Result & #PB_Tree_Checked
    ; Item is checked
  Endif
@EndCode

@Example
  Below an example with the @@ListIconGadget, how you can check
  for a combination of several results:
@Code
  If GetGadgetItemState(#Listicon, n) & #PB_ListIcon_Checked
    ; Item n is checked (no matter if selected)
  EndIf

  If GetGadgetItemState(#Listicon, n) & #PB_ListIcon_Selected
    ; Item n is selected (no matter if checked)
  EndIf

  If GetGadgetItemState(#Listicon, n) = #PB_ListIcon_Checked | #PB_ListIcon_Selected
    ; Item n is checked AND selected
  EndIf

  If GetGadgetItemState(#Listicon, n) & #PB_ListIcon_Checked | #PB_ListIcon_Selected
    ; Item n is checked OR selected OR both
  EndIf
@EndCode

@SeeAlso
  @@SetGadgetItemState, @@GetGadgetState, @@SetGadgetState

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function String$ = GetGadgetText(#Gadget)

@Description
  Returns the gadget text content of the specified gadget. 

@Parameter "#Gadget"
  The gadget to use.

@ReturnValue
  Returns the gadget text (HTML format), or an empty string if the gadget does not support text content.

@Remarks 
  This function is especially useful for:
@LineBreak
@LineBreak
  - @@ButtonGadget: return the text of the ButtonGadget.
@LineBreak
  - @@ComboBoxGadget - return the content of the current item.
@LineBreak
  - @@DateGadget - return the currently displayed date, in the form it is displayed in the gadget.
@LineBreak
  - @@EditorGadget - return the text content of the editor gadget. Please note, that several
    lines of text are normally separated with "Chr(13)+Chr(10)".
@LineBreak
  - @@HyperLinkGadget - return the text of the HyperLinkGadget.
@LineBreak
  - @@ListIconGadget - return the content of first column of the currently selected item.
@LineBreak
  - @@ListViewGadget - return the content of the current item.
@LineBreak
  - @@StringGadget - return contents of the StringGadget.
@LineBreak
  - @@TextGadget - return contents of the TextGadget.
@LineBreak
  - @@TreeGadget - return the text of the currently selected Item in the TreeGadget.
@LineBreak
  - @@WebGadget - return the URL of the displayed website.

@SeeAlso
  @@SetGadgetText, @@GetGadgetItemText, @@SetGadgetItemText

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function HideGadget(#Gadget, State)

@Description
  Hide or show a gadget.

@Parameter "#Gadget"
  The gadget to use.

@Parameter "State"
  The new state of the gadget.
  If State = 1, the gadget will be hidden, if State = 0 it will be shown.

@NoReturnValue

@Example
@Code
  Procedure HideEvent()
    Static Visible = #True
    
    If Visible = #True     ; ButtonGadget is displayed
      HideGadget(0, 1)    ; => hide it
      Visible = #False
      SetGadgetText(1, "Show Button 1")
    Else                  ; ButtonGadget is hidden
      HideGadget(0, 0)    ; => show it
      Visible = #True
      SetGadgetText(1, "Hide Button 1")
    EndIf
    
  EndProcedure
  
  If OpenWindow(0, 0, 0, 180, 120, "HideGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    ButtonGadget(0, 10, 10, 160, 50, "Button 1")       : button = #True   ; Button is displayed
    ButtonGadget(1, 10, 80, 160, 30, "Hide Button 1")
    
    BindGadgetEvent(1, @HideEvent())
  EndIf
@EndCode

@SeeAlso
  @@DisableGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = HyperLinkGadget(#Gadget, x, y, Width, Height, Text$, Color [, Flags])

@Description
  Creates an HyperLink gadget in the current GadgetList.
  A hyperlink gadget is a text area which reacts to the mouse pointer by changing its color
  and the cursor shape. 

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@Parameter "Text$"
  The text (HTML format) to display on the link.

@Parameter "Color"
  The color for the text when the mouse is over the gadget. The text color for the non-highlighted state
  can be changed with @@SetGadgetColor.

@OptionalParameter "Flags"
  Flags to modify the gadget behavior. It can be a combination of the following values:
@FixedFont
  @#PB_Hyperlink_Underline: Draw a line under the text without the need to use an underlined font.
@EndFixedFont

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  A 'mini help' can be added to this gadget using @@GadgetToolTip.
@LineBreak
@LineBreak
  This gadget supports the @@SetGadgetColor and @@GetGadgetColor functions with the
  @#PB_Gadget_FrontColor type to change the text color.
@LineBreak

@Example
@Code
  If OpenWindow(0, 0, 0, 270, 160, "HyperlinkGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    HyperLinkGadget(0, 10, 10, 250,20,"Red HyperLink", RGB(255,0,0))
    HyperLinkGadget(1, 10, 30, 250,20,"Arial Underlined Green HyperLink", RGB(0,255,0), #PB_HyperLink_Underline)
  EndIf
@EndCode
@LineBreak
@Image hyperlinkgadget.png

@SeeAlso
  @@GetGadgetText, @@SetGadgetText, @@GetGadgetColor, @@SetGadgetColor

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ImageGadget(#Gadget, x, y, Width, Height, ImageID [, Flags])

@Description
  Creates an Image gadget in the current GadgetList.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.
@LineBreak
@LineBreak
  The gadget adjusts its width and height to fit the displayed image. The specified width and height are only
  used when no image is displayed.

@Parameter "ImageID"
  The image to display. Use the @@ImageID function to get the ID from an image. If this parameter
  is 0, then no image will be displayed.

@OptionalParameter "Flags"
  Flags to modify the gadget behavior. It can be a combination of the following values:
@FixedFont
  @#PB_Image_Border: display a sunken border around the image.
  @#PB_Image_Raised: display a raised border around the image.
@EndFixedFont

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  A 'mini help' can be added to this gadget using @@GadgetToolTip.
@LineBreak
@LineBreak
  - @@SetGadgetState: Change the current Image of the gadget. A valid ImageID can be easily
  obtained with the @@ImageID function.
  If the ImageID is 0, then the image is removed from the gadget. @LineBreak
@LineBreak
  The following events are supported through @@EventType:
@FixedFont
  @#PB_EventType_LeftClick
  @#PB_EventType_RightClick
  @#PB_EventType_LeftDoubleClick
  @#PB_EventType_RightDoubleClick
@EndFixedFont
  If the support of more event types or double-buffering for regularly updated image contents
  is needed, then take a look at the @@CanvasGadget.

@Example
@Code
  If OpenWindow(0, 0, 0, 245, 105, "ImageGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    CreateImage(0, 16, 16, 32, #PB_Image_Transparent)
    If StartDrawing(ImageOutput(0))
      Circle(8, 8, 7, RGB(255, 0, 0))
      StopDrawing()
    EndIf
 
    ImageGadget(0,  10, 10, 100, 83, ImageID(0))                    ; imagegadget standard
    ImageGadget(1, 130, 10, 100, 83, ImageID(0), #PB_Image_Border)  ; imagegadget with border
  EndIf
@EndCode
@LineBreak
@Image imagegadget.png

@SeeAlso
  @@GetGadgetState, @@SetGadgetState, @@ButtonImageGadget, @@ImageID, @@CanvasGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = IsGadget(#Gadget)

@Description
  Tests if the given gadget number is a valid and correctly initialized gadget. 

@Parameter "#Gadget"
  The gadget to use.

@ReturnValue
  Returns nonzero if the input is a valid gadget and zero otherwise.

@Remarks
  This function is bulletproof and can be used with any value. This is the correct way to ensure a gadget is ready to use.

@SeeAlso
  @@FreeGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ListIconGadget(#Gadget, x, y, Width, Height, Title$, TitleWidth [, Flags])

@Description
  Creates a ListIcon gadget in the current GadgetList.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@Parameter "Title$"
  The title for the first column in the gadget. The gadget is created with one initial column.

@Parameter "TitleWidth"
  The width of the first column in the gadget.

@OptionalParameter "Flags"
  Flags to modify the gadget behavior. It can be a combination of the following values:
@FixedFont
  @#PB_ListIcon_CheckBoxes         : Display checkboxes in the first column.
  @#PB_ListIcon_MultiSelect        : Enable multiple selection.
  @#PB_ListIcon_GridLines          : Display separator lines between rows and columns.
  @#PB_ListIcon_FullRowSelect      : No effect (for PureBasic source compatibility only). 
  @#PB_ListIcon_AlwaysShowSelection: No effect (for PureBasic source compatibility only).
@EndFixedFont

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  A 'mini help' can be added to this gadget using @@GadgetToolTip.
@LineBreak
@LineBreak
  The following functions can be used to act on the list content:
@LineBreak
@LineBreak
  - @@AddGadgetColumn: Add a column to the gadget.
@LineBreak
  - @@RemoveGadgetColumn: Remove a column from the gadget.
@LineBreak
  - @@AddGadgetItem: Add an item (with an optional image in the standard 16x16 icon size).
@LineBreak
  - @@RemoveGadgetItem: Remove an item.
@LineBreak
  - @@ClearGadgetItems: Remove all the items.
@LineBreak
  - @@CountGadgetItems: Returns the number of items currently in the #Gadget.
@LineBreak
@LineBreak
  - @@GetGadgetItemData: Returns the value that was stored with item.
@LineBreak
  - @@SetGadgetItemData: Stores a value with the item.
@LineBreak
  - @@GetGadgetItemState: Returns the current state of the specified item.
@LineBreak
  - @@SetGadgetItemState: Changes the current state of the specified item.
@LineBreak
  - @@GetGadgetItemText: Returns the current text of the specified item. (or column header, if item = -1)
@LineBreak
  - @@SetGadgetItemText: Changes the current text of the specified item. (or column header, if item = -1).
                         Like with @@AddGadgetItem, it is possible to set the text for several columns at once, with the @Link "String/Chr" "Chr(10)" separator.
@LineBreak
  - @@SetGadgetItemImage: Changes the current image of the specified item.
@LineBreak
  - @@GetGadgetState: Returns the first selected item or -1 if there is no item selected.
@LineBreak
  - @@SetGadgetState: Change the selected item (all other selected items will be deselected). If -1 is specified, no more item will be selected.
@LineBreak
  - @@GetGadgetItemAttribute / @@SetGadgetItemAttribute: With the following attribute:
@FixedFont
  @#PB_ListIcon_ColumnWidth : Returns/Changes the width of the given 'Column'. The 'Item' parameter is ignored.
@EndFixedFont


  This gadget supports the @@SetGadgetColor and @@GetGadgetColor functions with
  the following values as 'ColorType':
@FixedFont
  @#PB_Gadget_FrontColor: Textcolor
  @#PB_Gadget_BackColor : Backgroundcolor
  @#PB_Gadget_LineColor : Color for the gridlines if the @#PB_ListIcon_GridLines flag is used.
@EndFixedFont

  The following events are supported through @@EventType:
@FixedFont
  @#PB_EventType_LeftClick: left click on an item, or a checkbox was checked/unchecked
  @#PB_EventType_LeftDoubleClick
  @#PB_EventType_RightClick
  @#PB_EventType_RightDoubleClick
  @#PB_EventType_Change: the current item changed
@EndFixedFont

@Example
@Code
 If OpenWindow(0, 100, 100, 300, 100, "ListIcon Example", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
   ListIconGadget(0, 5, 5, 290, 90, "Name", 100)
   AddGadgetColumn(0, 1, "Address", 250)
   AddGadgetItem(0, -1, "Harry Rannit"+Chr(10)+"12 Parliament Way, Battle Street, By the Bay")
   AddGadgetItem(0, -1, "Ginger Brokeit"+Chr(10)+"130 SpiderBasic Road, BigTown, CodeCity")
 EndIf
@EndCode

@Example
@Code
  ; Shows possible flags of ListIconGadget in action...
  If OpenWindow(0, 0, 0, 640, 450, "ListIconGadgets", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    ; left column
    TextGadget    (#PB_Any,  10,  10, 300, 20, "ListIcon Standard", #PB_Text_Center)
    ListIconGadget(0,  10,  25, 300, 120, "Column 1", 100)
    TextGadget    (#PB_Any,  10, 155, 300, 20, "ListIcon with Checkbox", #PB_Text_Center)
    ListIconGadget(1,  10, 170, 300, 120, "Column 1", 100, #PB_ListIcon_CheckBoxes)  ; ListIcon with checkbox
    TextGadget    (#PB_Any,  10, 300, 300, 20, "ListIcon with Multi-Selection", #PB_Text_Center)
    ListIconGadget(2,  10, 315, 300, 120, "Column 1", 100, #PB_ListIcon_MultiSelect) ; ListIcon with multi-selection
    ; right column
    TextGadget    (#PB_Any, 330,  10, 300, 20, "ListIcon with separator lines",#PB_Text_Center)
    ListIconGadget(3, 330,  25, 300, 120, "Column 1", 100, #PB_ListIcon_GridLines)
    For a = 0 To 3            ; add columns to each of the first 4 listicons
      For b = 2 To 4          ; add 3 more columns to each listicon
        AddGadgetColumn(a, b, "Column " + Str(b), 65)
      Next
      For b = 0 To 2          ; add 4 items to each line of the listicons
        AddGadgetItem(a, b, "Item 1"+Chr(10)+"Item 2"+Chr(10)+"Item 3"+Chr(10)+"Item 4")
      Next
    Next
  EndIf
@EndCode


@Image listicongadget.png

@SeeAlso
  @@AddGadgetColumn, @@RemoveGadgetColumn, @@AddGadgetItem, @@RemoveGadgetItem, @@ClearGadgetItems, @@CountGadgetItems,
  @@GetGadgetState, @@SetGadgetState, @@GetGadgetAttribute, @@SetGadgetAttribute, @@GetGadgetItemText, @@SetGadgetItemText, @@SetGadgetItemImage, 
  @@GetGadgetItemState, @@SetGadgetItemState, @@GetGadgetItemData, @@SetGadgetItemData, @@GetGadgetItemAttribute, @@SetGadgetItemAttribute, 
  @@GetGadgetColor, @@SetGadgetColor, @@ListViewGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ListViewGadget(#Gadget, x, y, Width, Height [, Flags])

@Description
  Creates a ListView gadget in the current GadgetList.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@OptionalParameter "Flags"
  Flags to modify the gadget behavior. It can be a combination of the following values:
@FixedFont
  @#PB_ListView_Multiselect: allows multiple items to be selected
  @#PB_ListView_ClickSelect: allows multiple items to be selected. clicking on one item selects/deselects it
@EndFixedFont

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  A 'mini help' can be added to this gadget using @@GadgetToolTip.
@LineBreak
@LineBreak
  The following functions can be used to act on the list content:
@LineBreak
@LineBreak
  - @@AddGadgetItem: Add an item.
@LineBreak
  - @@RemoveGadgetItem: Remove an item.
@LineBreak
  - @@ClearGadgetItems: Remove all the items
@LineBreak
  - @@CountGadgetItems: Returns the number of items currently in the #Gadget.
@LineBreak
@LineBreak
  - @@GetGadgetItemData: Get the value that was stored with the gadget item.
@LineBreak
  - @@GetGadgetItemState: Returns nonzero if the item is selected, zero otherwise.
@LineBreak
  - @@GetGadgetItemText: Get the content of the given item.
@LineBreak
  - @@GetGadgetState: Get the index of the selected item or -1 if there is no selected item.
@LineBreak
  - @@GetGadgetText: Get the content of the selected item.
@LineBreak
  - @@SetGadgetItemData: store a value with the given item.
@LineBreak
  - @@SetGadgetItemState: Selects or deselects the given item.
@LineBreak
  - @@SetGadgetItemText: Set the text of the given item.
@LineBreak
  - @@SetGadgetState: Change the selected item. If -1 is specified, the selection will be removed.
@LineBreak
  - @@SetGadgetText: Selects the item with the given text (the text must match exactly).

@LineBreak
@LineBreak
  This gadget supports the @@SetGadgetColor and @@GetGadgetColor functions with
  the following values as 'ColorType':
@FixedFont
  @#PB_Gadget_FrontColor: Textcolor
  @#PB_Gadget_BackColor : Backgroundcolor
@EndFixedFont

  The following events are supported through @@EventType:
@FixedFont
  @#PB_EventType_LeftClick
  @#PB_EventType_LeftDoubleClick
  @#PB_EventType_RightClick
@EndFixedFont

@Example
@Code
  If OpenWindow(0, 0, 0, 270, 140, "ListViewGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    ListViewGadget(0, 10, 10, 250, 120)
    For a = 1 To 12
      AddGadgetItem (0, -1, "Item " + Str(a) + " of the Listview") ; define listview content
    Next
    SetGadgetState(0, 4) ; set (beginning with 0) the fifth item as the active one
  EndIf
@EndCode
@LineBreak
@Image listviewgadget.png

@SeeAlso
  @@AddGadgetItem, @@RemoveGadgetItem, @@ClearGadgetItems, @@CountGadgetItems, @@GetGadgetState, @@SetGadgetState,
  @@GetGadgetText, @@SetGadgetText, @@GetGadgetItemState, @@SetGadgetItemState, @@GetGadgetItemText, @@SetGadgetItemText,
  @@GetGadgetItemData, @@SetGadgetItemData, @@GetGadgetColor, @@SetGadgetColor, @@ListIconGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function OpenGadgetList(#Gadget [, Item])

@Description
  Use the specified gadget as a GadgetList, to dynamically add new gadgets
  to it. 

@Parameter "#Gadget"
  The gadget in which new gadgets should be created.

@OptionalParameter "Item"
  For the @@PanelGadget: Specifies the panel to which the gadgets should be added. To add a new panel dynamically
  to the @@PanelGadget the 'Item' parameter must be omitted.

@NoReturnValue

@Remarks
  The following gadgets are supported by OpenGadgetList():
@LineBreak
@LineBreak
  - @@ContainerGadget
@LineBreak
  - @@PanelGadget    
@LineBreak
  - @@ScrollAreaGadget

@LineBreak
@LineBreak
  Once the all the needed changes are done, @@CloseGadgetList should be called.

@SeeAlso
  @@CloseGadgetList, @@ContainerGadget, @@PanelGadget, @@ScrollAreaGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = OptionGadget(#Gadget, x, y, Width, Height, Text$)

@Description
  Creates an OptionGadget in the current GadgetList.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@Parameter "Text$"
  The text (HTML format) to display.

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  The first time this function is called,
  a group is created and all following calls of OptionGadget() will add a gadget to
  this group. To finish the group, just create a gadget of another type. These kind of gadgets
  are very useful as only one gadget from the group can be selected at any time.
@LineBreak
@LineBreak
  A 'mini help' can be added to this gadget using @@GadgetToolTip.

@Example
@Code
  If OpenWindow(0, 0, 0, 140, 110, "OptionGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    OptionGadget(0, 30, 20, 100, 20, "Option 1")
    OptionGadget(1, 30, 45, 100, 20, "Option 2")
    OptionGadget(2, 30, 70, 100, 20, "<b>Option 3</b>") ; Using HTML markup
    SetGadgetState(1, 1)   ; set second option as active one
  EndIf
@EndCode
@LineBreak
@Image optiongadget.png

@SeeAlso
  @@GetGadgetText, @@SetGadgetText, @@GetGadgetState, @@SetGadgetState, @@CheckBoxGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = PanelGadget(#Gadget, x, y, Width, Height)

@Description
  Creates a Panel gadget in the current GadgetList.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  A 'mini help' can be added to this gadget using @@GadgetToolTip.
@LineBreak
@LineBreak
  The following functions can be used to act on the panel content:
@LineBreak
@LineBreak
  - @@AddGadgetItem: Add a panel.
@LineBreak
  - @@RemoveGadgetItem: Remove a panel.
@LineBreak
  - @@CountGadgetItems: Count the number of panels.
@LineBreak
  - @@ClearGadgetItems: Remove all panels.
@LineBreak
  - @@GetGadgetItemText: Retrieve the text (HTML format) of the specified item.
@LineBreak
  - @@SetGadgetItemText: Change the text (HTML format) of the specified item.
@LineBreak
  - @@SetGadgetItemImage: Change the image of the specified item.
@LineBreak
  - @@GetGadgetItemData: Retrieve the value associated with the specified item.
@LineBreak
  - @@SetGadgetItemData: Associate a value with the specified item.
@LineBreak
@LineBreak
  - @@SetGadgetState: Change the active panel.
@LineBreak
  - @@GetGadgetState: Get the index of the current panel.
@LineBreak
  - @@GetGadgetAttribute: With one of the following attributes: (there must be at least 1 item for this to work)
@FixedFont
  @#PB_Panel_ItemWidth : Returns the width of the inner area where the gadgets are displayed.
  @#PB_Panel_ItemHeight: Returns the height of the inner area where the gadgets are displayed.
  @#PB_Panel_TabHeight : Returns height of the panel tabs on top of the gadget.
@EndFixedFont

  The following events are supported through @@EventType:
@FixedFont
  @#PB_EventType_Change: the current displayed tab has been changed.
@EndFixedFont

  Once a Panel is created, its list of panels is empty.
  You must call @@AddGadgetItem to add a panel before you can create other
  gadgets inside the panel gadget. The next gadgets will then be created automatically in the new panel.
  This is very convenient. When the PanelGadget item has been filled with all the
  needed gadgets, @@CloseGadgetList must be called to return to the previous GadgetList.
  This means that a PanelGadget can be created inside another PanelGadget...

@Example
@Code
  ; Shows using of several panels...
  If OpenWindow(0, 0, 0, 322, 220, "PanelGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    PanelGadget     (0, 8, 8, 306, 203)
      AddGadgetItem (0, -1, "Panel 1")
        PanelGadget (1, 5, 5, 290, 166)
          AddGadgetItem(1, -1, "<i>Sub-Panel 1</i>") ; Using HTML markup
          AddGadgetItem(1, -1, "Sub-Panel 2")
          AddGadgetItem(1, -1, "Sub-Panel 3")
        CloseGadgetList()
      AddGadgetItem (0, -1,"Panel 2")
        ButtonGadget(2, 10, 15, 80, 24,"Button 1")
        ButtonGadget(3, 95, 15, 80, 24,"Button 2")
    CloseGadgetList()
  EndIf
@EndCode
@LineBreak
@Image panelgadget.png

@SeeAlso
  @@AddGadgetItem, @@RemoveGadgetItem, @@CountGadgetItems, @@ClearGadgetItems, @@GetGadgetItemText, @@SetGadgetItemText,
  @@GetGadgetState, @@SetGadgetState, @@GetGadgetAttribute, @@CloseGadgetList, @@OpenGadgetList, @@SetGadgetItemImage

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ProgressBarGadget(#Gadget, x, y, Width, Height, Minimum, Maximum [, Flags])

@Description
  Creates a ProgressBar gadget in the current GadgetList.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@Parameter "Minimum, Maximum"
  The minimum and maximum values that the progress bar can take.

@OptionalParameter "Flags"
  Flags to modify the gadget behavior. It can be a combination of the following values:
@FixedFont
  @#PB_ProgressBar_Smooth: The progress bar is smooth instead of using blocks (Windows only)
@EndFixedFont

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  A 'mini help' can be added to this gadget using @@GadgetToolTip.
@LineBreak
@LineBreak
  The following functions can be used to act on the gadget:
@LineBreak
@LineBreak
  - @@SetGadgetState: Change progress bar value.
@LineBreak
  - @@GetGadgetState: Get the current progress bar value.
@LineBreak
  - @@SetGadgetAttribute: With the following attributes:
@FixedFont
  @#PB_ProgressBar_Minimum   : Changes the minimum value.
  @#PB_ProgressBar_Maximum   : Changes the maximum value.
@EndFixedFont

  - @@GetGadgetAttribute: With the following attributes:
@FixedFont
  @#PB_ProgressBar_Minimum   : Returns the minimum value.
  @#PB_ProgressBar_Maximum   : Returns the maximum value.
@EndFixedFont

@Example
@Code
  If OpenWindow(0, 0, 0, 320, 160, "ProgressBarGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    TextGadget       (3,  10, 10, 250,  20, "ProgressBar Standard  (50/100)", #PB_Text_Center)
    ProgressBarGadget(0,  10, 30, 250,  30, 0, 100)
    SetGadgetState   (0, 50)   ;  set 1st progressbar (ID = 0) to 50 of 100
    TextGadget       (4,  10, 70, 250,  20, "ProgressBar Smooth  (50/200)", #PB_Text_Center)
    ProgressBarGadget(1,  10, 90, 250,  30, 0, 200, #PB_ProgressBar_Smooth)
    SetGadgetState   (1, 50)   ;  set 2nd progressbar (ID = 1) to 50 of 200
  EndIf
@EndCode
@LineBreak
@Image progressbargadget.png

@SeeAlso
  @@GetGadgetState, @@SetGadgetState, @@GetGadgetAttribute, @@SetGadgetAttribute, @@GetGadgetColor, @@SetGadgetColor

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function RemoveGadgetColumn(#Gadget, Column)

@Description
  Removes a column of the specified gadget. 

@Parameter "#Gadget"
  The gadget to use.

@Parameter "Column"
  The column to remove. The first column has index 0.

@NoReturnValue

@Remarks
  The gadget type can be one of the following:
@LineBreak
@LineBreak
  - @@ListIconGadget

@Example
@Code
  If OpenWindow(0, 0, 0, 320, 160, "RemoveGadgetColumn", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)

    ListIconGadget(0, 10, 10, 300, 140, "Hello", 100)
      AddGadgetColumn(0, 1, "Column 2", 70)
      AddGadgetColumn(0, 2, "Column 3", 70)

    RemoveGadgetColumn(0, 1) ; Remove the 'Column 2'

    Repeat
  EndIf
@EndCode

@SeeAlso
  @@AddGadgetColumn, @@ListIconGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function RemoveGadgetItem(#Gadget, Position)

@Description
  Removes an item of the specified gadget.

@Parameter "#Gadget"
  The gadget to use.

@Parameter "Position"
  The item to remove. The first item has the index 0.

@NoReturnValue

@Remarks
  The gadget type can be one of the following:
@LineBreak
@LineBreak
  - @@ComboBoxGadget
@LineBreak
  - @@PanelGadget
@LineBreak
  - @@ListViewGadget
@LineBreak
  - @@ListIconGadget
@LineBreak
  - @@TreeGadget - If the removed item is a node, all child-items will be removed too.

@SeeAlso
  @@AddGadgetItem, @@ClearGadgetItems, @@CountGadgetItems

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function ResizeGadget(#Gadget, x, y, Width, Height)

@Description
  Resize the specified gadget to the given position and dimensions.

@Parameter "#Gadget"
  The gadget to resize.

@Parameter "x, y, Width, Height"
  The new position and dimensions of the gadget. To ease the building of real-time resizable
  Graphical User Interfaces (GUIs), @#PB_Ignore can be passed as any parameter (x, y, Width or Height) and this
  parameter will not be changed. 

@NoReturnValue

@Example
@Code
  [...]

  ResizeGadget(0, #PB_Ignore, #PB_Ignore, 300, #PB_Ignore) ; Only change the gadget width.

  ResizeGadget(0, 150, 100, #PB_Ignore, #PB_Ignore) ; Only move the gadget to a new position.

@EndCode

@SeeAlso
  @@GadgetX, @@GadgetY, @@GadgetWidth, @@GadgetHeight

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ScrollAreaGadget(#Gadget, x, y, Width, Height, ScrollAreaWidth, ScrollAreaHeight [, ScrollStep [, Flags]])

@Description
  Creates a ScrollArea gadget in the current GadgetList. It is a container for other gadgets with a scrollable area.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@Parameter "ScrollAreaWidth, ScrollAreaHeight"
  The dimensions of the scrollable area inside the gadget. These can also be smaller than the outer dimensions, in 
  this case scrolling will be disabled.

@OptionalParameter "ScrollStep"
  The amount of pixels to scroll when the user presses the scroll bar arrows. This value is currently ignored.

@OptionalParameter "Flags"
  Flags to modify the gadget behavior. It can be a combination of the following values:
@FixedFont
  @#PB_ScrollArea_Flat       : Flat frame
  @#PB_ScrollArea_Raised     : Raised frame
  @#PB_ScrollArea_Single     : Single sunken frame
  @#PB_ScrollArea_BorderLess : Without any border
  @#PB_ScrollArea_Center     : If the inner size is smaller than the outer, the inner area is automatically centered.
@EndFixedFont

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  Once the gadget is created,
  all future created gadgets will be created inside the scroll area. When all the needed
  gadgets have been created, @@CloseGadgetList must be called to return to the
  previous GadgetList. @@OpenGadgetList can be used later to add others gadgets
  on the fly in the scroll area.
@LineBreak
@LineBreak
  The following functions can be used to act on a ScrollAreaGadget: @LineBreak
@LineBreak
  @@GetGadgetAttribute: With one of the following attribute:
@FixedFont
  @#PB_ScrollArea_InnerWidth  : Returns the width (in pixels) of the contained scrollable area.
  @#PB_ScrollArea_InnerHeight : Returns the height (in pixels) of the contained scrollable area.
  @#PB_ScrollArea_X           : Returns the current horizontal scrolling position (in pixels).
  @#PB_ScrollArea_Y           : Returns the current vertical scrolling position (in pixels).
@EndFixedFont
  @@SetGadgetAttribute: With one of the following attribute:
@FixedFont
  @#PB_ScrollArea_InnerWidth  : Changes the width (in pixels) of the contained scrollable area.
  @#PB_ScrollArea_InnerHeight : Changes the height (in pixels) of the contained scrollable area.
  @#PB_ScrollArea_X           : Changes the current horizontal scrolling position (in pixels).
  @#PB_ScrollArea_Y           : Changes the current vertical scrolling position (in pixels).
@EndFixedFont

  This gadget supports the @@SetGadgetColor and @@GetGadgetColor functions with the
  @#PB_Gadget_BackColor type to change the background color.

@Example
@Code
  Procedure GadgetEvent()
    Debug "Button " + EventGadget() + " pressed!"
  EndProcedure
  
  If OpenWindow(0, 0, 0, 305, 140, "ScrollAreaGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    ScrollAreaGadget(0, 10, 10, 290,120, 375, 155, 30)
      ButtonGadget  (1, 10, 10, 230, 30,"Button 1")
      ButtonGadget  (2, 50, 50, 230, 30,"Button 2")
      ButtonGadget  (3, 90, 90, 230, 30,"Button 3")
      TextGadget    (4,130,130, 230, 20,"This is the content of a ScrollAreaGadget!",#PB_Text_Right)
    CloseGadgetList()
    
    BindEvent(#PB_Event_Gadget, @GadgetEvent())
  EndIf
@EndCode
@LineBreak
@Image scrollareagadget.png

@SeeAlso
  @@GetGadgetAttribute, @@SetGadgetAttribute

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetActiveGadget(#Gadget)

@Description
  Activates (sets the keyboard focus on) the gadget specified by the given gadget number. Activating a gadget allows
  it to become the current object to receive messages and handle keystrokes. The gadget needs to be actually displayed,
  it won't work if the window containing the gadget is hidden.

@Parameter "#Gadget"
  The gadget to activate.

@NoReturnValue

@Example
@Code
  Procedure ActivateStringGadgetEvent()
    SetActiveGadget(0)   ; Activate StringGadget
  EndProcedure
  
  Procedure ActivateComboBoxGadgetEvent()
    SetActiveGadget(1)   ; Activate ComboBoxGadget
  EndProcedure
  
  If OpenWindow(0, 0, 0, 270, 140, "SetActiveGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    StringGadget  (0, 10, 10, 250, 20, "bla bla...")
    ComboBoxGadget(1, 10, 40, 250, 21)
    For a = 1 To 5 : AddGadgetItem(1, -1, "ComboBox item " + Str(a)) : Next
    SetGadgetState(1, 2)                ; set (beginning with 0) the third item as active one
    ButtonGadget  (2, 10,  90, 250, 20, "Activate StringGadget")
    ButtonGadget  (3, 10, 115, 250, 20, "Activate ComboBox")
    
    BindGadgetEvent(2, @ActivateStringGadgetEvent())
    BindGadgetEvent(3, @ActivateComboBoxGadgetEvent())
  EndIf
@EndCode

@SeeAlso
  @@GetActiveGadget, @@SetActiveWindow

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetGadgetAttribute(#Gadget, Attribute, Value)

@Description
  Changes an attribute value of the specified gadget. 

@Parameter "#Gadget"
  The gadget to use.

@Parameter "Attribute"
  The attribute to set. 
  See the documentation of each gadget for the supported attributes and their meaning.

@Parameter "Value"
  The value to set for the attribute.

@NoReturnValue

@Remarks
  This function is available for all gadgets which support attributes:
@LineBreak
@LineBreak
  - @@ButtonImageGadget @LineBreak
  - @@CalendarGadget @LineBreak
  - @@CanvasGadget @LineBreak
  - @@DateGadget @LineBreak
  - @@EditorGadget @LineBreak
  - @@ListIconGadget @LineBreak
  - @@ProgressBarGadget @LineBreak
  - @@ScrollAreaGadget @LineBreak
  - @@SpinGadget @LineBreak
  - @@SplitterGadget @LineBreak
  - @@StringGadget @LineBreak
  - @@TrackBarGadget @LineBreak
  - @@TreeGadget @LineBreak
  - @@WebGadget

@SeeAlso
  @@GetGadgetAttribute, @@GetGadgetItemAttribute, @@SetGadgetItemAttribute

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetGadgetColor(#Gadget, ColorType, Color)

@Description
  Changes a color attribute on the given gadget. 

@Parameter "#Gadget"
  The gadget to use.

@Parameter "ColorType"
  The kind of color attribute to change. This can be one of the following values.
  See the documentation of each gadget for the supported color attributes:
@FixedFont
  @#PB_Gadget_FrontColor     : Gadget text
  @#PB_Gadget_BackColor      : Gadget background
  @#PB_Gadget_LineColor      : Color for gridlines
  @#PB_Gadget_TitleFrontColor: Text color in the title        (for @@CalendarGadget)
  @#PB_Gadget_TitleBackColor : Background color in the title  (for @@CalendarGadget)
  @#PB_Gadget_GrayTextColor  : Color for grayed out text      (for @@CalendarGadget)
@EndFixedFont

@Parameter "Color"
  The new color for the attribute. @@RGB can be
  used to get a valid color value. To remove the custom color and go back to the default system color, set
  the 'Color' parameter to -1.

@NoReturnValue

@Remarks
  This function is supported by the following gadgets: 
@LineBreak
@LineBreak
  - @@CalendarGadget
@LineBreak
  - @@ContainerGadget
@LineBreak
  - @@DateGadget
@LineBreak
  - @@EditorGadget
@LineBreak
  - @@HyperLinkGadget
@LineBreak
  - @@ListViewGadget
@LineBreak
  - @@ListIconGadget
@LineBreak
  - @@ProgressBarGadget (Windows only)
@LineBreak
  - @@ScrollAreaGadget
@LineBreak
  - @@SpinGadget
@LineBreak
  - @@StringGadget
@LineBreak
  - @@TextGadget
@LineBreak
  - @@TreeGadget

@OS Windows
  @LineBreak
  @LineBreak
  @Bold "Note:" With activated Windows XP style the color settings will probably be ignored
  or overwritten by the style.
@EndOS

@Example
@Code
  If OpenWindow(0, 0, 0, 200, 170, "SetGadgetColor", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    StringGadget(0, 10, 10, 180, 20, "String...")
    ListViewGadget(1, 10, 40, 180, 60)
    For i = 0 To 4
      AddGadgetItem(1, -1, "Text")
    Next i
    ContainerGadget(2, 10, 110, 180, 50, #PB_Container_Raised)

    SetGadgetColor(0, #PB_Gadget_BackColor, $00FFFF)
    SetGadgetColor(1, #PB_Gadget_FrontColor, $FFFFFF)
    SetGadgetColor(1, #PB_Gadget_BackColor, $000000)
    SetGadgetColor(2, #PB_Gadget_BackColor, $0000FF)
  EndIf
@EndCode
@LineBreak
@Image setgadgetcolor.png

@SeeAlso
  @@GetGadgetColor

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetGadgetData(#Gadget, Value)

@Description
  Stores the given value with the specified gadget. This value can later be read with the @@GetGadgetData
  function. This allows to associate a custom value with any gadget.

@Parameter "#Gadget"
  The gadget to use.

@Parameter "Value"
  The value to set.

@NoReturnValue

@Example
@Code
  ; This code uses SetGadgetData to associate an index for the Messages()
  ; array with each button. This makes the event loop simpler as not every
  ; gadget needs to he handled separately.
  ;
  Global Dim Messages.s(2)
  
  Procedure GadgetEvent()
    Value = GetGadgetData(EventGadget())
    Debug "Message: " + Messages(Value)
  EndProcedure
    
  Messages(0) = "Good morning"
  Messages(1) = "Hello World"
  Messages(2) = "Nothing to say"
  If OpenWindow(0, 0, 0, 190, 100, "SetGadgetData", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    ButtonGadget(0,  10, 10, 80, 20, "Button"): SetGadgetData(0, 1)
    ButtonGadget(1,  10, 40, 80, 20, "Button"): SetGadgetData(1, 2)
    ButtonGadget(2,  10, 70, 80, 20, "Button"): SetGadgetData(2, 1)
    ButtonGadget(3, 100, 10, 80, 20, "Button"): SetGadgetData(3, 2)
    ButtonGadget(4, 100, 40, 80, 20, "Button") ; will have the value 0 because nothing was set yet
    ButtonGadget(5, 100, 70, 80, 20, "Button")
    
    BindEvent(#PB_Event_Gadget, @GadgetEvent())
  EndIf
@EndCode

@SeeAlso
  @@GetGadgetData, @@GetGadgetItemData, @@SetGadgetItemData

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetGadgetFont(#Gadget, FontID)

@Description
  Changes the font of the specified gadget.

@Parameter "#Gadget"
  The gadget to use.
  If this parameter is set to @#PB_Default, the font used by newly created
  gadgets is changed.

@Parameter "FontID"
  The font to set. 
  The @@FontID function can be used to easily obtain a valid FontID.
  If this parameter is set to @#PB_Default, then the system default font will
  be used.

@NoReturnValue

@Example
@Code
  If OpenWindow(0, 0, 0, 222, 130, "SetGadgetFont", #PB_Window_ScreenCentered)
    LoadFont(0, "Arial", 16)
    LoadFont(1, "Times", 16)
    
    ButtonGadget(0, 10, 10, 200, 30, "Arial 16")
    SetGadgetFont(0, FontID(0))
    
    ButtonGadget(1, 10, 50, 200, 30, "Times 32")
    SetGadgetFont(1, FontID(1))
    
    TextGadget(2, 10, 90, 200, 40, "Default font", #PB_Text_Center)
  EndIf
@EndCode


@SeeAlso
  @@FontID, @@LoadFont

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetGadgetItemAttribute(#Gadget, Item, Attribute, Value [, Column])

@Description
  Changes an attribute value of the specified gadget item. 

@Parameter "#Gadget"
  The gadget to use.

@Parameter "Item"
  The item to use. The first item in the gadget has index 0.

@Parameter "Attribute"
  The attribute to set. See below for the supported values.

@Parameter "Value"
  The value to set for the attribute.

@OptionalParameter "Column"
  The column to use for gadgets that support multiple columns.
  The first column has index 0. The default is column 0.

@Remarks
  This function is available for all gadgets which support item attributes:
@LineBreak
@LineBreak

  - @@ListIconGadget:
@FixedFont
  @#PB_ListIcon_ColumnWidth : Changes the width of the given 'Column'. The 'Item' parameter is ignored.
@EndFixedFont

@SeeAlso
  @@GetGadgetItemAttribute, @@GetGadgetAttribute, @@SetGadgetAttribute

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetGadgetItemData(#Gadget, Item, Value)

@Description
  Stores the given value with the specified gadget item. This value can later be read with the @@GetGadgetItemData
  function. This allows to associate a custom value with the items of a gadget. 

@Parameter "#Gadget"
  The gadget to use.

@Parameter "Item"
  The item to use. The first item in the gadget has index 0.

@Parameter "Value"
  The value to set.

@NoReturnValue

@Remarks
  The set value will remain with the item, even
  if the item changes its index (for example because other items were deleted).
@LineBreak
@LineBreak
  This function works with the following gadgets:
@LineBreak
  - @@ComboBoxGadget
@LineBreak
  - @@ListIconGadget
@LineBreak
  - @@ListViewGadget
@LineBreak
  - @@PanelGadget
@LineBreak
  - @@TreeGadget

@Example
@Code
  ; This code uses SetGadgetItemData to store the original position
  ; of each item to later know it, even if the items index changed.
  ;
  Procedure GadgetEvent()
    item = GetGadgetState(3)
    
    Select EventGadget()
      Case 0 ; Add
        AddGadgetItem(3, item, "New Item")
        If item <> -1
          SetGadgetItemData(3, item, -1)
        Else
          SetGadgetItemData(3, CountGadgetItems(3)-1, -1)
        EndIf
        
      Case 1 ; Remove
        If item <> -1
          RemoveGadgetItem(3, item)
        EndIf
        
      Case 2 ; Test
        If item <> -1
          value = GetGadgetItemData(3, item)
          If value = -1
            Debug "Its a new item"
          Else
            Debug "It was item number " + value
          EndIf
        EndIf
        
    EndSelect
  EndProcedure
  
  If OpenWindow(0, 0, 0, 280, 250, "SetGadgetItemData", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    ButtonGadget(0,  10, 10, 80, 20, "Add")
    ButtonGadget(1, 100, 10, 80, 20, "Remove")
    ButtonGadget(2, 190, 10, 80, 20, "Test")
    ListViewGadget(3, 10, 40, 260, 200)
    For i = 0 To 10
      AddGadgetItem(3, i, "Old Item "+Str(i))
      SetGadgetItemData(3, i, i)
    Next i
    
    BindEvent(#PB_Event_Gadget, @GadgetEvent())
  EndIf
@EndCode

@SeeAlso
  @@GetGadgetItemData, @@GetGadgetData, @@SetGadgetData

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetGadgetItemImage(#Gadget, Item, ImageID)

@Description
  Changes the image of the specified gadget item. 

@Parameter "#Gadget"
  The gadget to use.

@Parameter "Item"
  The item to change the image. The first item in the gadget has index 0.

@Parameter "ImageID"
  The new image to use for the gadget item.
  The used image should be in the standard 16x16 size. Use the @@ImageID command to get the ID
  for this parameter.
  
@NoReturnValue

@Remarks
  This is a universal function which works for the following gadgets:
@LineBreak
@LineBreak
  - @@ComboBoxGadget
@LineBreak
  - @@ListIconGadget
@LineBreak
  - @@PanelGadget
@LineBreak
  - @@TreeGadget

@SeeAlso
  @@AddGadgetItem

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetGadgetItemState(#Gadget, Item, State)

@Description
  Changes the item state of the specified gadget. 

@Parameter "#Gadget"
  The gadget to use.

@Parameter "Item"
  The item to use. The first item in the gadget has index 0.

@Parameter "State"
  The new state for the item. See below for the meaning of this parameter.

@NoReturnValue

@Remarks
  This is a universal function which works for almost all
  gadgets which handle several items. 'State' can take the following values:
@LineBreak
  - @@CalendarGadget: @#PB_Calendar_Bold to make a date appear bold, @#PB_Calendar_Normal otherwise.
@LineBreak
  - @@ListViewGadget: 1 if the item should be selected, 0 otherwise.
@LineBreak
  - @@ListIconGadget: Combination of the following values:
@FixedFont
  @#PB_ListIcon_Selected : The item should be selected.
  @#PB_ListIcon_Checked  : The item should have its checkbox checked (@#PB_ListIcon_CheckBoxes flag).
@EndFixedFont
  - @@TreeGadget: Combination of the following values:
@FixedFont
  @#PB_Tree_Selected : The item should be selected.
  @#PB_Tree_Expanded : The item should be expanded.
  @#PB_Tree_Collapsed: The item should be collapsed. If neither @#PB_Tree_Expanded nor @#PB_Tree_Collapsed is set, this state will not be changed.
  @#PB_Tree_Checked  : The items checkbox should be checked.
@EndFixedFont

@Code
  SetGadgetItemState(0, 1, #PB_Tree_Expanded | #PB_Tree_Selected) ; The 2nd item is selected and expanded.
@EndCode

@SeeAlso
  @@GetGadgetItemState, @@GetGadgetState, @@SetGadgetState

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetGadgetItemText(#Gadget, Item, Text$ [, Column])

@Description
  Changes the item text of the specified gadget. 

@Parameter "#Gadget"
  The gadget to use.

@Parameter "Item"
  The item to use. The first item in the gadget has index 0.

@Parameter "Text$"
  The new text to set.

@OptionalParameter "Column"
  The column to use for gadgets that support multiple columns.
  The first column has index 0. The default is column 0.

@NoReturnValue

@Remarks
  This is a universal function which works for almost all
  gadgets which handle several items:
@LineBreak
@LineBreak
  - @@ComboBoxGadget
@LineBreak
  - @@ListIconGadget: If Item = -1, the header text of the given column is changed.
@LineBreak
  - @@ListViewGadget
@LineBreak
  - @@PanelGadget
@LineBreak
  - @@TreeGadget
@LineBreak
  - @@WebGadget: Change the html code in the gadget with @#PB_Web_HtmlCode as 'Item'.
@LineBreak

@SeeAlso
  @@GetGadgetItemText, @@GetGadgetText, @@SetGadgetText

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetGadgetState(#Gadget, State)

@Description
  Change the current state of the specified gadget. 

@Parameter "#Gadget"
  The gadget to use.

@Parameter "State"
  The new state for the gadget. See below for the meaning of this value depending on the gadget type.

@NoReturnValue

@Remarks
  This is a universal function which works for almost all gadgets: 
@LineBreak
@LineBreak
  - @@ButtonImageGadget: change the current state of a #PB_Button_Toggle gadget (1 = toggled, 0 = normal).
@LineBreak
  - @@ButtonGadget: change the current state of a #PB_Button_Toggle gadget (1 = toggled, 0 = normal).
@LineBreak
  - @@CalendarGadget: set the currently selected date.
@LineBreak
  - @@CheckBoxGadget: Change the state of the checkbox. The following values are possible:
@FixedFont
  @#PB_CheckBox_Checked  : Set the check mark.
  @#PB_CheckBox_Unchecked: Remove the check mark.
@EndFixedFont
  - @@ComboBoxGadget: change the currently selected item.
@LineBreak
  - @@DateGadget: set the currently displayed date/time. If @#PB_Date_CheckBox was used, set 'State' to 0 to uncheck the checkbox.
@LineBreak
  - @@ImageGadget: change the current image of the gadget.
@LineBreak
  - @@ListIconGadget: change the currently selected item. If -1 is specified, all items will be deselected.
@LineBreak
  - @@ListViewGadget: change the currently selected item. . If -1 is specified, it will remove the selection.
@LineBreak
  - @@OptionGadget: 1 to activate it, 0 otherwise.
@LineBreak
  - @@PanelGadget: change the current panel.
@LineBreak
  - @@ProgressBarGadget: change progress bar value.
@LineBreak
  - @@SpinGadget: change the current value.
@LineBreak
  - @@SplitterGadget: change the current splitter position, in pixels.
@LineBreak
  - @@TrackBarGadget: change the current cursor position.
@LineBreak
  - @@TreeGadget: change the currently selected item, -1 selects no item.
@LineBreak
  - @@WebGadget: perform some action on the gadget. See WebGadget for further descriptions.

@SeeAlso
  @@GetGadgetState, @@GetGadgetItemState, @@SetGadgetItemState

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetGadgetText(#Gadget, Text$)

@Description
  Change the gadget text content of the specified gadget. 

@Parameter "#Gadget"
  The gadget to use.

@Parameter "Text$"
  The new text (HTML format) to set.

@NoReturnValue

@Remarks
  This function is especially useful for:
@LineBreak
@LineBreak
  - @@ButtonGadget: change the text of the ButtonGadget.
@LineBreak
  - @@ComboBoxGadget: Set the displayed text. If the ComboBoxGadget is not editable, the text must be in the dropdown list.
@LineBreak
  - @@DateGadget: change the input mask for the dates in the gadget. See @@FormatDate for the format of the Text$ parameter.
@LineBreak
  - @@EditorGadget: change the text content of the editor gadget. If you want to add several lines of text at once, separate them with "Chr(13)+Chr(10)".
@LineBreak
  - @@FrameGadget: change the title of the FrameGadget.
@LineBreak
  - @@HyperLinkGadget: change the text of the HyperLinkGadget.
@LineBreak
  - @@ListViewGadget: selects the item that exactly matches the given text.
@LineBreak
  - @@StringGadget: change the content of the StringGadget.
@LineBreak
  - @@TextGadget: change the content of the TextGadget.
@LineBreak
  - @@TreeGadget: change the text of the currently selected item.
@LineBreak
  - @@WebGadget: change the current URL.

@SeeAlso
  @@GetGadgetText, @@GetGadgetItemText, @@SetGadgetItemText

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = SpinGadget(#Gadget, x, y, Width, Height, Minimum, Maximum [, Flags])

@Description
  Creates a spin gadget in the current GadgetList.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@Parameter "Minimum, Maximum"
  The minimum and maximum values for the gadget.

@OptionalParameter "Flags"
  Flags to modify the gadget behavior. It can be a combination of the following values:
@FixedFont
  @#PB_Spin_ReadOnly : The StringGadget is not editable, the number is only changeable by the arrows
  @#PB_Spin_Numeric  : The SpinGadget will automatically update the text with value of the state, so @@SetGadgetText is not needed.
@EndFixedFont

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  A 'mini help' can be added to this gadget using @@GadgetToolTip.
@LineBreak
@LineBreak
  The following functions can be used to act on a SpinGadget:
@LineBreak
@LineBreak
  @@GetGadgetState: Get the current gadget value.
@LineBreak
  @@SetGadgetState: Change the gadget value. For displaying the new value you still must use @@SetGadgetText!
@LineBreak
  @@GetGadgetText: Get the text contained in the gadget.
@LineBreak
  @@SetGadgetText: Change the text contained in the gadget.
@LineBreak
  @@GetGadgetAttribute: With one of the following attributes:
@FixedFont
  @#PB_Spin_Minimum   : Returns the minimum value.
  @#PB_Spin_Maximum   : Returns the maximum value.
@EndFixedFont

  @@SetGadgetAttribute: With one of the following attributes:
@FixedFont
  @#PB_Spin_Minimum   : Changes the minimum value.
  @#PB_Spin_Maximum   : Changes the maximum value.
@EndFixedFont

  The following events are supported through @@EventType:
@FixedFont
  @#PB_EventType_Change: The text in the edit area has been modified by the user.
  @#PB_EventType_Up    : The 'Up' button was pressed.
  @#PB_EventType_Down  : The 'Down' button was pressed.
@EndFixedFont

  This gadget supports the @@SetGadgetColor and @@GetGadgetColor functions with
  the following values as 'ColorType':
@FixedFont
  @#PB_Gadget_FrontColor: Textcolor
  @#PB_Gadget_BackColor : Backgroundcolor
@EndFixedFont

@Example
@Code
  If OpenWindow(0, 0, 0, 140, 70, "SpinGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    SpinGadget     (0, 20, 20, 100, 25, 0, 1000)
    SetGadgetState (0, 5) : SetGadgetText(0, "5")   ; set initial value
  EndIf
@EndCode

@LineBreak
@Image spingadget.png

@SeeAlso
  @@GetGadgetState, @@SetGadgetState, @@GetGadgetText, @@SetGadgetText, @@GetGadgetAttribute, @@SetGadgetAttribute,
  @@GetGadgetColor, @@SetGadgetColor

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = SplitterGadget(#Gadget, x, y, Width, Height, #Gadget1, #Gadget2 [, Flags])

@Description
  Creates a Splitter gadget in the current GadgetList. This gadget allows two child gadgets to be
  resized by the user with a separator bar.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@Parameter "#Gadget1, #Gadget2"
  The gadgets to be placed in the splitter.

@OptionalParameter "Flags"
  Flags to modify the gadget behavior. It can be a combination of the following values:
@FixedFont
  @#PB_Splitter_Vertical    : The gadget is split vertically (instead of horizontally which is the default).
  @#PB_Splitter_Separator   : A 3D-looking separator is drawn in the splitter.
  @#PB_Splitter_FirstFixed  : When the splitter gadget is resized, the first gadget will keep its size
  @#PB_Splitter_SecondFixed : When the splitter gadget is resized, the second gadget will keep its size
@EndFixedFont

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  A 'mini help' can be added to this gadget using @@GadgetToolTip.
@LineBreak
@LineBreak
  The following functions can be used to act on a SplitterGadget:
@LineBreak
@LineBreak
  @@GetGadgetState: Get the current splitter position, in pixels.
@LineBreak
  @@SetGadgetState: Change the current splitter position, in pixels.
@LineBreak
  @@GetGadgetAttribute: With one of the following attribute:
@FixedFont
  @#PB_Splitter_FirstMinimumSize : Gets the minimum size (in pixels) than the first gadget can have.
  @#PB_Splitter_SecondMinimumSize: Gets the minimum size (in pixels) than the second gadget can have.
  @#PB_Splitter_FirstGadget      : Gets the gadget number of the first gadget.
  @#PB_Splitter_SecondGadget     : Gets the gadget number of the second gadget.
@EndFixedFont

  @@SetGadgetAttribute: With one of the following attribute:
@FixedFont
  @#PB_Splitter_FirstMinimumSize : Sets the minimum size (in pixels) than the first gadget can have.
  @#PB_Splitter_SecondMinimumSize: Sets the minimum size (in pixels) than the second gadget can have.
  @#PB_Splitter_FirstGadget      : Replaces the first gadget with a new one.
  @#PB_Splitter_SecondGadget     : Replaces the second gadget with a new one.
@EndFixedFont

  @Bold "Note:" When replacing a gadget with @@SetGadgetAttribute, the old gadget will not
  be automatically freed. It will instead be put back on the parent window of the Splitter. This allows to switch gadgets
  between splitters without the need to recreate any of them. If the old gadget should be freed, its number can first be retrieved with
  @@GetGadgetAttribute, and the gadget freed with @@FreeGadget after
  it has been replaced. Note that a gadget cannot be in two splitters at once. So to move a gadget from one splitter to
  another, it first needs to be replaced in the first splitter so it is on the main window and then it can be put into
  the second splitter.

@Example
@Code
  Enumeration
    #Button1
    #Button2
    #Splitter
  EndEnumeration
  
  If OpenWindow(0, 0, 0, 230, 180, "SplitterGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    ButtonGadget(#Button1, 0, 0, 0, 0, "Button 1") ; No need to specify size or coordinates
    ButtonGadget(#Button2, 0, 0, 0, 0, "Button 2") ; as they will be sized automatically
    SplitterGadget(#Splitter, 5, 5, 220, 120, #Button1, #Button2, #PB_Splitter_Separator)
    
    TextGadget(3, 10, 135, 210, 40, "Above GUI part shows two automatically resizing buttons inside the 220x120 SplitterGadget area.",#PB_Text_Center )
  EndIf
@EndCode
@LineBreak
@Image splittergadget.png

@SeeAlso
  @@GetGadgetState, @@SetGadgetState, @@GetGadgetAttribute, @@SetGadgetAttribute

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = StringGadget(#Gadget, x, y, Width, Height, Content$ [, Flags])

@Description
  Creates a String gadget in the current GadgetList. It allows the user to enter a single line of text.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@Parameter "Content$"
  The initial content of this StringGadget.
  This gadget accepts only one line of text. To get multi-line input, use the @@EditorGadget function.

@OptionalParameter "Flags"
  Flags to modify the gadget behavior. It can be a combination of the following values:
@FixedFont
  @#PB_String_Numeric    : Only (positive) integer numbers are accepted.
  @#PB_String_Password   : Password mode, displaying only '*' instead of normal characters.
  @#PB_String_ReadOnly   : Read-only mode. No text can be entered.
  @#PB_String_LowerCase  : All characters are converted to lower case automatically.
  @#PB_String_UpperCase  : All characters are converted to upper case automatically.
  @#PB_String_BorderLess : No borders are drawn around the gadget.
  @#PB_String_PlaceHolder: 'Content$' parameter will be used as a placeholder. A placeholder is
                          a light gray string which describe the gadget use and disappear as soon as
                          text is entered in the gadget.
@EndFixedFont

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  Later the content can be changed with @@SetGadgetText and received with @@GetGadgetText.
@LineBreak
@LineBreak
  The following events are supported through @@EventType:
@FixedFont
  @#PB_EventType_Change    : The text has been modified by the user.
  @#PB_EventType_Focus     : The StringGadget got the focus.
  @#PB_EventType_LostFocus : The StringGadget lost the focus.
@EndFixedFont

  The following functions can be used to act on this gadget:
@LineBreak
@LineBreak
  - @@SetGadgetColor and @@GetGadgetColor functions with the following values as 'ColorType':
@FixedFont
  @#PB_Gadget_FrontColor: Textcolor
  @#PB_Gadget_BackColor : Backgroundcolor
@EndFixedFont

  - @@GetGadgetAttribute with the following attribute:
@FixedFont
  @#PB_String_MaximumLength: Returns the maximum number of characters which can be entered.
@EndFixedFont

  - @@SetGadgetAttribute with the following attribute:
@FixedFont
  @#PB_String_MaximumLength: Set the maximum number of characters which can be entered.
@EndFixedFont

  A 'mini help' can be added to this gadget using @@GadgetToolTip.

@Example
@Code
  ; Shows possible flags of StringGadget in action...
  If OpenWindow(0, 0, 0, 322, 205, "StringGadget Flags", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    StringGadget(0, 8,  10, 306, 20, "Normal StringGadget...")
    StringGadget(1, 8,  35, 306, 20, "1234567", #PB_String_Numeric)
    StringGadget(2, 8,  60, 306, 20, "Read-only StringGadget", #PB_String_ReadOnly)
    StringGadget(3, 8,  85, 306, 20, "lowercase...", #PB_String_LowerCase)
    StringGadget(4, 8, 110, 306, 20, "uppercase...", #PB_String_UpperCase)
    StringGadget(5, 8, 140, 306, 20, "Borderless StringGadget", #PB_String_BorderLess)
    StringGadget(6, 8, 170, 306, 20, "Password", #PB_String_Password)
  EndIf
@EndCode
@LineBreak
@Image stringgadget.png

@SeeAlso
  @@GetGadgetText, @@SetGadgetText, @@GetGadgetColor, @@SetGadgetColor, @@EditorGadget

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = TextGadget(#Gadget, x, y, Width, Height, Text$ [, Flags])

@Description
  Creates a Text gadget in the current GadgetList. A TextGadget is a basic text area for displaying, not entering, text.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@Parameter "Text$"
  The text (HTML format) to display.

@OptionalParameter "Flags"
  Flags to modify the gadget behavior. It can be a combination of the following values:
@FixedFont
  @#PB_Text_Center        : The text is horizontally centered in the gadget.
  @#PB_Text_VerticalCenter: The text is vertically centered in the gadget.
  @#PB_Text_Right         : The text is right aligned.
  @#PB_Text_Border        : A border is drawn around the gadget.
@EndFixedFont

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  The content can be changed with the function @@SetGadgetText and can be
  obtained with @@GetGadgetText.
@LineBreak
@LineBreak
  This gadget supports the @@SetGadgetColor and @@GetGadgetColor functions with
  the following values as 'ColorType':
@FixedFont
  @#PB_Gadget_FrontColor: Textcolor
  @#PB_Gadget_BackColor : Backgroundcolor
@EndFixedFont

  Note: This Gadget doesn't receive any user events, and @@GadgetToolTip can't be used with it.

@Example
@Code
  If OpenWindow(0, 0, 0, 270, 190, "TextGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    TextGadget(0, 10,  10, 250, 20, "TextGadget Standard (Left)")
    TextGadget(1, 10,  70, 250, 20, "TextGadget Center", #PB_Text_Center)
    TextGadget(2, 10,  40, 250, 20, "TextGadget Right", #PB_Text_Right)
    TextGadget(3, 10, 100, 250, 20, "TextGadget Border", #PB_Text_Border)
    TextGadget(4, 10, 130, 250, 20, "TextGadget Center + Border", #PB_Text_Center | #PB_Text_Border)
    TextGadget(5, 10, 160, 250, 20, "<b>Bold</b> TextGadget") ; Using HTML markup
  EndIf
@EndCode
@LineBreak
@Image textgadget.png

@SeeAlso
  @@GetGadgetText, @@SetGadgetText, @@GetGadgetColor, @@SetGadgetColor

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = TrackBarGadget(#Gadget, x, y, Width, Height, Minimum, Maximum [, Flags])

@Description
  Creates a TrackBar gadget in the current GadgetList.
  It allows you to select a range of values with a slide bar, like ones found in several multimedia players.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@Parameter "Minimum, Maximum"
  The range of values used by the gadget. These values should be between 0 and 10,000 to avoid
  limitations on some operating systems.

@OptionalParameter "Flags"
  Flags to modify the gadget behavior. It can be a combination of the following values:
@FixedFont
  @#PB_TrackBar_Vertical : The trackbar is vertical (instead of horizontal which is the default).
@EndFixedFont

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  A 'mini help' can be added to this gadget using @@GadgetToolTip.
@LineBreak
@LineBreak
  The following functions can be used to act on this gadget:
@LineBreak
@LineBreak
  - @@GetGadgetState: Returns the current cursor position (value between the Minimum-Maximum range).
@LineBreak
  - @@SetGadgetState: Change the current cursor position.
@LineBreak
  - @@GetGadgetAttribute with one of the following attributes:
@FixedFont
  @#PB_TrackBar_Minimum   : Returns the minimum value.
  @#PB_TrackBar_Maximum   : Returns the maximum value.
@EndFixedFont

  - @@SetGadgetAttribute with one of the following attributes:
@FixedFont
  @#PB_TrackBar_Minimum   : Changes the minimum value.
  @#PB_TrackBar_Maximum   : Changes the maximum value.
@EndFixedFont

@Example
@Code
  If OpenWindow(0, 0, 0, 320, 200, "TrackBarGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    TextGadget    (3, 10,  20, 250, 20,"TrackBar Standard", #PB_Text_Center)
    TrackBarGadget(0, 10,  40, 250, 20, 0, 10000)
    SetGadgetState(0, 5000)
    TextGadget    (5,  90, 180, 200, 20, "TrackBar Vertical", #PB_Text_Right)
    TrackBarGadget(2, 270, 10, 20, 170, 0, 10000, #PB_TrackBar_Vertical)
    SetGadgetState(2, 8000)
  EndIf
@EndCode
@LineBreak
@Image trackbargadget.png

@SeeAlso
  @@GetGadgetState, @@SetGadgetState, @@GetGadgetAttribute, @@SetGadgetAttribute

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = TreeGadget(#Gadget, x, y, Width, Height [, Flags])

@Description
  Creates a Tree gadget in the current GadgetList.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@OptionalParameter "Flags"
  Flags to modify the gadget behavior. It can be a combination of the following values:
@FixedFont
  @#PB_Tree_AlwaysShowSelection : Even if the gadget isn't activated, the selection is still visible.
  @#PB_Tree_NoLines             : Hide the little lines between each nodes.
  @#PB_Tree_NoButtons           : Hide the '+' node buttons.
@EndFixedFont

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.

@Remarks
  Each item in the tree has a sublevel value assigned to it, that determines its relation with the item above and below it.
  Items with the same sublevel belong to the same node, items with a higher sublevel are child-items and so on. This sublevel
  value can be used to determine the relation between two items by comparing their sublevel values. The 'Flags' parameter of
  @@AddGadgetItem is always required for TreeGadget items and is used to set the sublevel at which the
  new item should be added. Note that if the function is called with a sublevel at which the item cannot be added, the
  item will be added at the sublevel where it is possible to add it.
@LineBreak
@LineBreak
  A 'mini help' can be added to this gadget using @@GadgetToolTip. @LineBreak
@LineBreak
@LineBreak

  The following functions can be used to act on the tree content: @LineBreak
@LineBreak
  - @@AddGadgetItem: Add an item (with an optional picture in the standard 16x16 icon size).
@LineBreak
  - @@RemoveGadgetItem: Remove an item (and all its child-items).
@LineBreak
  - @@ClearGadgetItems: Remove all the items.
@LineBreak
  - @@CountGadgetItems: Return the number of items currently in the #Gadget.
@LineBreak
  - @@GetGadgetItemState: Return the current state of the specified item.
@LineBreak
  - @@SetGadgetItemState: Change the current state of the specified item.
@LineBreak
  - @@GetGadgetItemText: Return the current text of the specified item.
@LineBreak
  - @@SetGadgetItemText: Change the current text of the specified item.
@LineBreak
  - @@SetGadgetItemImage: Change the current image of the specified item.
@LineBreak
  - @@GetGadgetItemData: Returns the value that was stored with item.
@LineBreak
  - @@SetGadgetItemData: Stores a value with the item.
@LineBreak
  - @@GetGadgetState: Return the current selected item.
@LineBreak
  - @@SetGadgetState: Change the currently selected item.
@LineBreak
  - @@GetGadgetText: Return the text of the currently selected item.
@LineBreak
  - @@SetGadgetText: Change the text of the currently selected item.
@LineBreak
  - @@SetGadgetAttribute: With the following attributes:
@FixedFont
  @#PB_Tree_Expanded: If the value is @#True, then the full tree is expanded. If the value
                     if #False, the full tree is collapsed.
@EndFixedFont
  - @@GetGadgetItemAttribute: With the following attribute:
@FixedFont
  @#PB_Tree_SubLevel: Returns the sublevel value of the given item.
@EndFixedFont
  This gadget supports the @@SetGadgetColor and @@GetGadgetColor functions with
  the following values as 'ColorType':
@FixedFont
  @#PB_Gadget_FrontColor: Textcolor
  @#PB_Gadget_BackColor : Backgroundcolor
@EndFixedFont

  The following events are supported through @@EventType:
@FixedFont
  @#PB_EventType_LeftClick: left click on an item, or a checkbox was checked/unchecked
  @#PB_EventType_LeftDoubleClick
  @#PB_EventType_RightClick
  @#PB_EventType_RightDoubleClick
  @#PB_EventType_Change: the current item changed
  @#PB_EventType_Focus
  @#PB_EventType_LostFocus
@EndFixedFont

@Example
@Code
  If OpenWindow(0, 0, 0, 355, 180, "TreeGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    TreeGadget(0, 10, 10, 160, 160)                                         ; TreeGadget standard
    TreeGadget(1, 180, 10, 160, 160, #PB_Tree_NoLines)
    For ID = 0 To 1
      For a = 0 To 10
        AddGadgetItem (ID, -1, "Normal Item "+Str(a), 0, 0) ; if you want to add an image, use
        AddGadgetItem (ID, -1, "Node "+Str(a), 0, 0)        ; ImageID(x) as 4th parameter
        AddGadgetItem(ID, -1, "Sub-Item 1", 0, 1)    ; These are on the 1st sublevel
        AddGadgetItem(ID, -1, "Sub-Item 2", 0, 1)
        AddGadgetItem(ID, -1, "Sub-Item 3", 0, 1)
        AddGadgetItem(ID, -1, "Sub-Item 4", 0, 1)
        AddGadgetItem (ID, -1, "File "+Str(a), 0, 0) ; sublevel 0 again
      Next
    Next
  EndIf
@EndCode
@LineBreak
@Image treegadget.png

@SeeAlso
  @@AddGadgetItem, @@RemoveGadgetItem, @@ClearGadgetItems, @@CountGadgetItems, @@GetGadgetItemState, @@SetGadgetItemState, 
  @@GetGadgetItemText, @@SetGadgetItemText, @@SetGadgetItemImage, @@GetGadgetItemData, @@SetGadgetItemData, @@GetGadgetState, @@SetGadgetState, 
  @@GetGadgetText, @@SetGadgetText, @@GetGadgetItemAttribute, @@GetGadgetColor, @@SetGadgetColor

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = UseGadgetList(WindowID)

@Description
  Select the GadgetList window to which gadgets will be added. If there is no GadgetList on this window so far it will be created.
  (because it was created with the @#PB_Window_NoGadgets flag in @@OpenWindow or because it is not a PB window)  

@Parameter "WindowID"
  The new window to add gadgets to. It can be obtained with the @@WindowID function.
  If 'WindowID' is 0, the current GadgetList window will be returned and nothing will be changed.
  
@ReturnValue
  Returns the WindowID of the previous GadgetList window, or 0 if there was none. This value can be used
  to go back to the previous GadgetList later.
  
@Example
  This example shows how to use this command to create a new window with gadgets without interrupting the
  gadget creation on the current window:
@Code
  If OpenWindow(0, 0, 0, 500, 500, "Main Window", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    ButtonGadget(0, 10, 10, 150, 25, "Button 1")
    
    ; Create Window with #PB_Window_NoGadgets to prevent automatic GadgetList creation
    If OpenWindow(1, 0, 0, 300, 200, "Child Window", #PB_Window_TitleBar | #PB_Window_WindowCentered | #PB_Window_NoGadgets, WindowID(0))     
      OldGadgetList = UseGadgetList(WindowID(1)) ; Create GadgetList and store old GadgetList
      
      ButtonGadget(10, 10, 10, 150, 25, "Child Window Button")
      
      UseGadgetList(OldGadgetList)               ; Return to previous GadgetList
    EndIf
    
    ButtonGadget(1, 10, 45, 150, 25, "Button 2") ; This will be on the main window again
  EndIf
@EndCode

@SeeAlso
  @@OpenWindow, @@WindowID
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = WebGadget(#Gadget, x, y, Width, Height, URL$)

@Description
  Creates a Web gadget in the current GadgetList. It can display html pages.

@Parameter "#Gadget"
  A number to identify the new gadget. @ReferenceLink "spiderbasic_objects" "#PB_Any" can
  be used to auto-generate this number.

@Parameter "x, y, Width, Height"
  The position and dimensions of the new gadget.

@Parameter "URL$"
  The url to load after the gadget is created.

@ReturnValue
  Returns nonzero on success and zero on failure. If @#PB_Any was used as the #Gadget parameter
  then the return-value is the auto-generated gadget number on success.
@LineBreak
@LineBreak
  The following functions can be used to act on a WebGadget:
@LineBreak
@LineBreak
  - @@SetGadgetText: Change the current URL.
@LineBreak
  - @@GetGadgetText: Get the current URL.
@LineBreak
  - @@SetGadgetState: Perform an action on the gadget. The following constants are valid:
@FixedFont
  @#PB_Web_Back   : One step back in the navigation history.
  @#PB_Web_Forward: One step forward in the navigation history.
  @#PB_Web_Stop   : Stop loading the current page.
  @#PB_Web_Refresh: Refresh the current page.
@EndFixedFont
@LineBreak

  - @@GetGadgetItemText: The following constants can be used to get information (only works on the same page domain):
@FixedFont
  @#PB_Web_HtmlCode     : Get the html code from the gadget.
  @#PB_Web_PageTitle    : Get the current title for the displayed page.
  @#PB_Web_StatusMessage: Get the current statusbar message.
  @#PB_Web_SelectedText : Get the currently selected text inside the gadget.
@EndFixedFont

@Example
@Code
  If OpenWindow(0, 0, 0, 600, 300, "WebGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    WebGadget(0, 10, 10, 580, 280, "http://www.spiderbasic.com")
  EndIf
@EndCode
@LineBreak
@Image webgadget.png

@SeeAlso
  @@GetGadgetText, @@SetGadgetText, @@GetGadgetItemText, @@SetGadgetState

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function BindGadgetEvent(#Gadget, @Callback() [, EventType])  

@Description
  Bind a gadget event to a callback. It allows to have real-time event notifications as
  the callback can be invoked as soon as the event occurs (useful for
  @@ScrollAreaGadget etc.). A gadget event can be unbinded with @@UnbindGadgetEvent.
  
@Parameter "#Gadget"
  The gadget to bind the event to.

@Parameter "@Callback()"
  The callback procedure to call when the event occurs. It has to be declared like this:
@Code
  Procedure EventHandler()
    ; Code
  EndProcedure
@EndCode
  Regular functions like @@EventGadget, @@EventWindow, @@EventMenu, @@EventType and @@EventData are
  available within the callback to get more information about the event.

@OptionalParameter "EventType"
  The event type to bind the event to. For a full list of supported types, see @@EventType.
  @#PB_All can be used to bind the event to any type.

@NoReturnValue

@Example
@Code
  Procedure ButtonHandler()
    Debug "Button click event on gadget #" + EventGadget()
  EndProcedure
  
  OpenWindow(0, 100, 100, 200, 50, "Click test", #PB_Window_SystemMenu)
    ButtonGadget(0, 10, 10, 180, 30, "Click me")
  
  BindGadgetEvent(0, @ButtonHandler())
@EndCode

@SeeAlso @@BindGadgetEvent, @@BindMenuEvent, @@UnbindEvent

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function UnbindGadgetEvent(#Gadget, @Callback() [, EventType])  

@Description
  Unbind a gadget event from a callback. If no matching event callback is found, this
  command has no effect.
  
@Parameter "#Gadget"
  The gadget to unbind the event.

@Parameter "@Callback()"
  The callback procedure to unbind.
  
@OptionalParameter "EventType"
  The event type to unbind the event from. For a full list of supported types, see @@EventType.

@NoReturnValue

@Example
@Code
  Procedure ButtonHandler()
    Debug "Button click event on gadget #" + EventGadget()
  EndProcedure
  
  OpenWindow(0, 100, 100, 200, 50, "Click test", #PB_Window_SystemMenu)
    ButtonGadget(0, 10, 10, 180, 30, "Click me")
  
  BindGadgetEvent(0, @ButtonHandler())
  UnbindGadgetEvent(0, @ButtonHandler()) ; Unbind it immediately
@EndCode

@SeeAlso @@BindEvent, @@BindGadgetEvent, @@BindMenuEvent

@SupportedOS
