;
;     TouchScreen library documentation
;
;      (c) 2014 - Fantaisie Software
;

@Library TouchScreen

@Overview

  SpiderBasic provides an easy access to the screen touches. This library is
  designed for game or fullscreen applications.

@CommandList

@ExampleFile All TouchScreen.sb

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ExamineTouchScreen()

@Description
  Updates the screen touches state on a screen previously created with @@OpenScreen or @@OpenWindowedScreen. This function has to be called successfully before using other touches commands like
  @@TouchX, @@TouchY, @@TouchDeltaX, @@TouchDeltaY
  or @@TouchScreenPushed.

@NoParameters

@ReturnValue
  Nonzero if touchscreen commands are availables (ie: the device have a touchscreen), zero otherwise.

@SeeAlso
  @@TouchX, @@TouchY, @@TouchDeltaX, @@TouchDeltaY
  @@TouchScreenPushed

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = TouchDeltaX(Finger)

@Description
  Returns the finger 'x' movement (in pixels) since the last call of this function.
  
@Parameter "Finger"
  The finger to get the value. Up to five fingers are supported at once, value can be between 0 and 4.
  @@TouchScreenPushed can be used to know which fingers are currently on the screen.

@ReturnValue
  The finger 'x' movement (in pixels) since the last call of this function. 
  It can be either a negative or positive value, depending on whether or not the finger has been moved to 
  left or right since the last call. @@ExamineTouchScreen should be called before this function 
  to update the actual finger position.

@SeeAlso
  @@ExamineTouchScreen, @@TouchDeltaY

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = TouchDeltaY(Finger)

@Description
  Returns the finger 'y' movement (in pixels) since the last call of this function.
  
@Parameter "Finger"
  The finger to get the value. Up to five fingers are supported at once, value can be between 0 and 4.
  @@TouchScreenPushed can be used to know which fingers are currently on the screen.

@ReturnValue
  The finger 'y' movement (in pixels) since the last call of this function. 
  It can be either a negative or positive value, depending on whether or not the finger has been moved to 
  top or bottom since the last call. @@ExamineTouchScreen should be called before this function 
  to update the actual finger position.

@SeeAlso
  @@ExamineTouchScreen, @@TouchDeltaX

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = TouchX(Finger)

@Description
  Returns the finger 'x' position (in pixels) on the current screen. 
  @@ExamineTouchScreen should be called before this function to update the actual finger position.

@Parameter "Finger"
  The finger to get the value. Up to five fingers are supported at once, value can be between 0 and 4.
  @@TouchScreenPushed can be used to know which fingers are currently on the screen.

@ReturnValue
  The actual finger 'x' position (in pixels) on the current screen. 
  
@SeeAlso
  @@ExamineTouchScreen, @@TouchY

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = TouchY(Finger)

@Description
  Returns the finger 'y' position (in pixels) on the current screen. 
  @@ExamineTouchScreen should be called before this function to update the actual finger position.

@Parameter "Finger"
  The finger to get the value. Up to five fingers are supported at once, value can be between 0 and 4.
  @@TouchScreenPushed can be used to know which fingers are currently on the screen.

@ReturnValue
  The finger 'y' position (in pixels) on the current screen. 
  
@SeeAlso
  @@ExamineTouchScreen, @@TouchX

@SupportedOS

;--------------------------------------------------------------------------------------------------------

;@Function Result = TouchRadiusX(Finger)
;
;@Description
;  Returns the finger 'x' radius (in pixels). 
;
;@Parameter "Finger"
;  The finger to get the value. Up to five fingers are supported at once, value can be between 0 and 4.
;  @@TouchScreenPushed can be used to know which fingers are currently on the screen.
;
;@ReturnValue
;  The finger 'x' radius (in pixels). 
; 
;@SeeAlso
;  @@ExamineTouchScreen, @@TouchRadiusY
;
;@SupportedOS

;--------------------------------------------------------------------------------------------------------

;@Function Result = TouchRadiusY(Finger)
;
;@Description
;  Returns the finger 'y' radius (in pixels). 
;
;@Parameter "Finger"
;  The finger to get the value. Up to five fingers are supported at once, value can be between 0 and 4.
;  @@TouchScreenPushed can be used to know which fingers are currently on the screen.
;
;@ReturnValue
;  The finger 'y' radius (in pixels). 
; 
;@SeeAlso
;  @@ExamineTouchScreen, @@TouchRadiusX
;
;@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = TouchScreenPushed(Finger)

@Description
  Checks if the specified finger is pressed.

@Parameter "Finger"
  The finger to get the value. Up to five fingers are supported at once, value can be between 0 and 4.
  
@ReturnValue
  Nonzero if the specified finger is pushed, zero otherwise.

@Example
@Code
  OpenScreen(800, 600, 32, "Test")
  
  Procedure RenderFrame()
    Static SpriteFinger = -1
    Static x, y
    
    ClearScreen(RGB(0, 0, 0))
    
    If ExamineTouchScreen() ; TouchScreen is detected and available
    
      For k = 0 To 4 ; Up to 5 possible fingers at once. We need to check them all, as some finger can be removed in between
      
        If TouchScreenPushed(k) And SpriteFinger = -1 ; One finger press detected, use it to move the sprite
          SpriteFinger = k
        EndIf
      Next
      
      If SpriteFinger <> -1 And TouchScreenPushed(SpriteFinger) ; Ensure the finger used to move the sprite is still pressed
        x = TouchX(SpriteFinger) - SpriteWidth(0) / 2  ; We want our finger centered in the sprite
        y = TouchY(SpriteFinger) - SpriteHeight(0) / 2
      Else
        SpriteFinger = -1
      EndIf
      
      DisplaySprite(0, x, y)
      
      FlipBuffers(); // continue the rendering
    Else
      Debug "No touchscreen device detected"
    EndIf
    
  EndProcedure 
  
  Procedure Loading(Type, Filename$, ObjectId)
    Static NbLoadedElements
    
    NbLoadedElements+1
    If NbLoadedElements = 1 ; The loading of all images and sounds is finished, we can start the rendering
      FlipBuffers(); // start the rendering
    EndIf
  EndProcedure
  
  Procedure LoadingError(Type, Filename$, ObjectId)
    Debug Filename$ + ": loading error"
  EndProcedure
  
  ; Register the loading event before calling any resource load command
  BindEvent(#PB_Event_Loading, @Loading())
  BindEvent(#PB_Event_LoadingError, @LoadingError())
  BindEvent(#PB_Event_RenderFrame, @RenderFrame())
  
  LoadSprite(0, "Data/SpiderBasicLogo.png")
@EndCode

@SeeAlso
  @@ExamineKeyboard, @@KeyboardReleased

@SupportedOS

