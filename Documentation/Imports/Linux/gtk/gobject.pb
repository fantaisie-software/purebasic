XIncludeFile "common.pbi"

CompilerIf #PB_GTK = 3
  ImportC "`pkg-config --libs gtk+-3.0` `pkg-config --libs gthread-2.0`"
  
CompilerElse ; GTK2
  ImportC "`pkg-config --libs gtk+-2.0` `pkg-config --libs gthread-2.0`"
CompilerEndIf

  ApiC(g_boxed_copy, (arg1, arg2))
  ApiC(g_boxed_free, (arg1, arg2))
  ApiC(g_boxed_type_register_static, (arg1.p-utf8, arg2, arg3))
  ApiC(g_cclosure_new_object, (arg1, arg2))
  ApiC(g_cclosure_new_object_swap, (arg1, arg2))
  ApiC(g_closure_get_type, ())
  ApiC(g_closure_new_object, (arg1, arg2))
  ApiC(g_enum_complete_type_info, (arg1, arg2, arg3))
  ApiC(g_enum_get_value, (arg1, arg2))
  ApiC(g_enum_get_value_by_name, (arg1, arg2.p-utf8))
  ApiC(g_enum_get_value_by_nick, (arg1, arg2.p-utf8))
  ApiC(g_enum_register_static, (arg1.p-utf8, arg2))
  ApiC(g_flags_complete_type_info, (arg1, arg2, arg3))
  ApiC(g_flags_get_first_value, (arg1, arg2))
  ApiC(g_flags_get_value_by_name, (arg1, arg2.p-utf8))
  ApiC(g_flags_get_value_by_nick, (arg1, arg2.p-utf8))
  ApiC(g_flags_register_static, (arg1.p-utf8, arg2))
  ApiC(g_gstring_get_type, ())
  ApiC(g_io_channel_get_type, ())
  ApiC(g_io_condition_get_type, ())
  ApiC(g_new, (arg1, arg2))
  ApiC(g_object_add_weak_pointer, (arg1, arg2))
  ApiC(g_object_class_find_property, (arg1, arg2.p-utf8))
  ApiC(g_object_class_install_property, (arg1, arg2, arg3))
  ApiC(g_object_class_list_properties, (arg1, arg2))
  ApiC(g_object_class_override_property, (arg1, arg2, arg3.p-utf8))
  ApiC(g_object_connect, (arg1, arg2.p-utf8, arg3))
  ApiC(g_object_disconnect, (arg1, arg2.p-utf8, arg3))
  ApiC(g_object_freeze_notify, (arg1))
  ApiC(g_object_get, (arg1, arg2.p-utf8, arg3))
  ApiC(g_object_get_data, (arg1, arg2.p-utf8))
  ApiC(g_object_get_property, (arg1, arg2.p-utf8, arg3))
  ApiC(g_object_get_qdata, (arg1, arg2))
  ApiC(g_object_get_valist, (arg1, arg2.p-utf8, arg3))
  ApiC(g_object_interface_find_property, (arg1, arg2.p-utf8))
  ApiC(g_object_interface_install_property, (arg1, arg2))
  ApiC(g_object_interface_list_properties, (arg1, arg2))
  ApiC(g_object_new, (arg1, arg2.p-utf8, arg3))
  ApiC(g_object_new_valist, (arg1, arg2.p-utf8, arg3))
  ApiC(g_object_newv, (arg1, arg2, arg3))
  ApiC(g_object_notify, (arg1, arg2.p-utf8))
  ApiC(g_object_notify_queue_add, (arg1, arg2, arg3))
  ApiC(g_object_notify_queue_clear, (arg1, arg2))
  ApiC(g_object_notify_queue_free, (arg1))
  ApiC(g_object_notify_queue_freeze, (arg1, arg2))
  ApiC(g_object_notify_queue_from_object, (arg1, arg2))
  ApiC(g_object_notify_queue_thaw, (arg1, arg2))
  ApiC(g_object_ref, (arg1))
  ApiC(g_object_remove_weak_pointer, (arg1, arg2))
  ApiC(g_object_run_dispose, (arg1))
  ApiC(g_object_set, (arg1, arg2.p-utf8, arg3))
  ApiC(g_object_set_data, (arg1, arg2.p-utf8, arg3))
  ApiC(g_object_set_data_full, (arg1, arg2.p-utf8, arg3, arg4))
  ApiC(g_object_set_property, (arg1, arg2.p-utf8, arg3))
  ApiC(g_object_set_qdata, (arg1, arg2, arg3))
  ApiC(g_object_set_qdata_full, (arg1, arg2, arg3, arg4))
  ApiC(g_object_set_valist, (arg1, arg2.p-utf8, arg3))
  ApiC(g_object_steal_data, (arg1, arg2.p-utf8))
  ApiC(g_object_steal_qdata, (arg1, arg2))
  ApiC(g_object_thaw_notify, (arg1))
  ApiC(g_object_unref, (arg1))
  ApiC(g_object_watch_closure, (arg1, arg2))
  ApiC(g_object_weak_ref, (arg1, arg2, arg3))
  ApiC(g_object_weak_unref, (arg1, arg2, arg3))
  ApiC(g_param_spec_boolean, (arg1.p-utf8, arg2.p-utf8, arg3.p-utf8, arg4, arg5))
  ApiC(g_param_spec_boxed, (arg1.p-utf8, arg2.p-utf8, arg3.p-utf8, arg4, arg5))
  ApiC(g_param_spec_char, (arg1.p-utf8, arg2.p-utf8, arg3.p-utf8, arg4, arg5, arg6, arg7))
  ApiC(g_param_spec_double, (arg1.p-utf8, arg2.p-utf8, arg3.p-utf8, arg4, arg5, arg6, arg7))
  ApiC(g_param_spec_enum, (arg1.p-utf8, arg2.p-utf8, arg3.p-utf8, arg4, arg5, arg6))
  ApiC(g_param_spec_flags, (arg1.p-utf8, arg2.p-utf8, arg3.p-utf8, arg4, arg5, arg6))
  ApiC(g_param_spec_float, (arg1.p-utf8, arg2.p-utf8, arg3.p-utf8, arg4, arg5, arg6, arg7))
  ApiC(g_param_spec_get_blurb, (arg1))
  ApiC(g_param_spec_get_name, (arg1))
  ApiC(g_param_spec_get_nick, (arg1))
  ApiC(g_param_spec_get_qdata, (arg1, arg2))
  ApiC(g_param_spec_get_redirect_target, (arg1))
  ApiC(g_param_spec_int, (arg1.p-utf8, arg2.p-utf8, arg3.p-utf8, arg4, arg5, arg6, arg7))
  ApiC(g_param_spec_internal, (arg1, arg2.p-utf8, arg3.p-utf8, arg4.p-utf8, arg5))
  ApiC(g_param_spec_long, (arg1.p-utf8, arg2.p-utf8, arg3.p-utf8, arg4, arg5, arg6, arg7))
  ApiC(g_param_spec_object, (arg1.p-utf8, arg2.p-utf8, arg3.p-utf8, arg4, arg5))
  ApiC(g_param_spec_override, (arg1.p-utf8, arg2))
  ApiC(g_param_spec_param, (arg1.p-utf8, arg2.p-utf8, arg3.p-utf8, arg4, arg5))
  ApiC(g_param_spec_pointer, (arg1.p-utf8, arg2.p-utf8, arg3.p-utf8, arg4))
  ApiC(g_param_spec_pool_insert, (arg1, arg2, arg3))
  ApiC(g_param_spec_pool_list, (arg1, arg2, arg3))
  ApiC(g_param_spec_pool_list_owned, (arg1, arg2))
  ApiC(g_param_spec_pool_lookup, (arg1, arg2.p-utf8, arg3, arg4))
  ApiC(g_param_spec_pool_new, (arg1))
  ApiC(g_param_spec_pool_remove, (arg1, arg2))
  ApiC(g_param_spec_ref, (arg1))
  ApiC(g_param_spec_set_qdata, (arg1, arg2, arg3))
  ApiC(g_param_spec_set_qdata_full, (arg1, arg2, arg3, arg4))
  ApiC(g_param_spec_sink, (arg1))
  ApiC(g_param_spec_steal_qdata, (arg1, arg2))
  ApiC(g_param_spec_string, (arg1.p-utf8, arg2.p-utf8, arg3.p-utf8, arg4.p-utf8, arg5))
  ApiC(g_param_spec_uchar, (arg1.p-utf8, arg2.p-utf8, arg3.p-utf8, arg4, arg5, arg6, arg7))
  ApiC(g_param_spec_uint, (arg1.p-utf8, arg2.p-utf8, arg3.p-utf8, arg4, arg5, arg6, arg7))
  ApiC(g_param_spec_ulong, (arg1.p-utf8, arg2.p-utf8, arg3.p-utf8, arg4, arg5, arg6, arg7))
  ApiC(g_param_spec_unichar, (arg1.p-utf8, arg2.p-utf8, arg3.p-utf8, arg4, arg5))
  ApiC(g_param_spec_unref, (arg1))
  ApiC(g_param_spec_value_array, (arg1.p-utf8, arg2.p-utf8, arg3.p-utf8, arg4, arg5))
  ApiC(g_param_type_register_static, (arg1.p-utf8, arg2))
  ApiC(g_param_type_register_static_constant, (arg1.p-utf8, arg2, arg3))
  ApiC(g_param_value_convert, (arg1, arg2, arg3, arg4))
  ApiC(g_param_value_defaults, (arg1, arg2))
  ApiC(g_param_value_set_default, (arg1, arg2))
  ApiC(g_param_value_validate, (arg1, arg2))
  ApiC(g_param_values_cmp, (arg1, arg2, arg3))
  ApiC(g_pointer_type_register_static, (arg1.p-utf8))
  ApiC(g_return_val_if_fail, (arg1, arg2))
  ApiC(g_signal_add_emission_hook, (arg1, arg2, arg3, arg4, arg5))
  ApiC(g_signal_chain_from_overridden, (arg1, arg2))
  ApiC(g_signal_connect_closure, (arg1, arg2.p-utf8, arg3, arg4))
  ApiC(g_signal_connect_closure_by_id, (arg1, arg2, arg3, arg4, arg5))
  ApiC(g_signal_connect_data, (arg1, arg2.p-utf8, arg3, arg4, arg5, arg6))
  ApiC(g_signal_connect_object, (arg1, arg2.p-utf8, arg3, arg4, arg5))
  ApiC(g_signal_emit, (arg1, arg2, arg3, arg4))
  ApiC(g_signal_emit_by_name, (arg1, arg2.p-utf8, arg3))
  ApiC(g_signal_emit_valist, (arg1, arg2, arg3, arg4))
  ApiC(g_signal_emitv, (arg1, arg2, arg3, arg4))
  ApiC(g_signal_get_invocation_hint, (arg1))
  ApiC(g_signal_handler_block, (arg1, arg2))
  ApiC(g_signal_handler_disconnect, (arg1, arg2))
  ApiC(g_signal_handler_find, (arg1, arg2, arg3, arg4, arg5, arg6, arg7))
  ApiC(g_signal_handler_is_connected, (arg1, arg2))
  ApiC(g_signal_handler_unblock, (arg1, arg2))
  ApiC(g_signal_handlers_block_matched, (arg1, arg2, arg3, arg4, arg5, arg6, arg7))
  ApiC(g_signal_handlers_disconnect_matched, (arg1, arg2, arg3, arg4, arg5, arg6, arg7))
  ApiC(g_signal_handlers_unblock_matched, (arg1, arg2, arg3, arg4, arg5, arg6, arg7))
  ApiC(g_signal_has_handler_pending, (arg1, arg2, arg3, arg4))
  ApiC(g_signal_list_ids, (arg1, arg2))
  ApiC(g_signal_lookup, (arg1.p-utf8, arg2))
  ApiC(g_signal_name, (arg1))
  ApiC(g_signal_new, (arg1.p-utf8, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10))
  ApiC(g_signal_new_valist, (arg1.p-utf8, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10))
  ApiC(g_signal_newv, (arg1.p-utf8, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10))
  ApiC(g_signal_override_class_closure, (arg1, arg2, arg3))
  ApiC(g_signal_parse_name, (arg1.p-utf8, arg2, arg3, arg4, arg5))
  ApiC(g_signal_query, (arg1, arg2))
  ApiC(g_signal_remove_emission_hook, (arg1, arg2))
  ApiC(g_signal_stop_emission, (arg1, arg2, arg3))
  ApiC(g_signal_stop_emission_by_name, (arg1, arg2.p-utf8))
  ApiC(g_source_set_closure, (arg1, arg2))
  ApiC(g_strdup_value_contents, (arg1))
  ApiC(g_strv_get_type, ())
  ApiC(g_type_add_interface_dynamic, (arg1, arg2, arg3))
  ApiC(g_type_add_interface_static, (arg1, arg2, arg3))
  ApiC(g_type_children, (arg1, arg2))
  ApiC(g_type_class_add_private, (arg1, arg2))
  ApiC(g_type_class_peek, (arg1))
  ApiC(g_type_class_peek_parent, (arg1))
  ApiC(g_type_class_peek_static, (arg1))
  ApiC(g_type_class_ref, (arg1))
  ApiC(g_type_class_unref, (arg1))
  ApiC(g_type_default_interface_peek, (arg1))
  ApiC(g_type_default_interface_ref, (arg1))
  ApiC(g_type_default_interface_unref, (arg1))
  ApiC(g_type_depth, (arg1))
  ApiC(g_type_from_name, (arg1.p-utf8))
  ApiC(g_type_get_qdata, (arg1, arg2))
  ApiC(g_type_init, (arg1))
  ApiC(g_type_init_with_debug_flags, (arg1))
  ApiC(g_type_instance_get_private, (arg1, arg2))
  ApiC(g_type_interface_add_prerequisite, (arg1, arg2))
  ApiC(g_type_interface_peek, (arg1, arg2))
  ApiC(g_type_interface_peek_parent, (arg1))
  ApiC(g_type_interface_prerequisites, (arg1, arg2))
  ApiC(g_type_interfaces, (arg1, arg2))
  ApiC(g_type_is_a, (arg1, arg2))
  ApiC(g_type_module_add_interface, (arg1, arg2, arg3, arg4))
  ApiC(g_type_module_get_type, ())
  ApiC(g_type_module_register_enum, (arg1, arg2.p-utf8, arg3))
  ApiC(g_type_module_register_flags, (arg1, arg2.p-utf8, arg3))
  ApiC(g_type_module_register_type, (arg1, arg2, arg3.p-utf8, arg4, arg5))
  ApiC(g_type_module_set_name, (arg1, arg2.p-utf8))
  ApiC(g_type_module_unuse, (arg1))
  ApiC(g_type_module_use, (arg1))
  ApiC(g_type_name, (arg1))
  ApiC(g_type_next_base, (arg1, arg2))
  ApiC(g_type_parent, (arg1))
  ApiC(g_type_plugin_complete_interface_info, (arg1, arg2, arg3, arg4))
  ApiC(g_type_plugin_complete_type_info, (arg1, arg2, arg3, arg4))
  ApiC(g_type_plugin_get_type, ())
  ApiC(g_type_plugin_unuse, (arg1))
  ApiC(g_type_plugin_use, (arg1))
  ApiC(g_type_qname, (arg1))
  ApiC(g_type_query, (arg1, arg2))
  ApiC(g_type_register_dynamic, (arg1, arg2.p-utf8, arg3, arg4))
  ApiC(g_type_register_fundamental, (arg1, arg2.p-utf8, arg3, arg4, arg5))
  ApiC(g_type_register_static, (arg1, arg2.p-utf8, arg3, arg4))
  ApiC(g_type_set_qdata, (arg1, arg2, arg3))
  ApiC(g_value_array_append, (arg1, arg2))
  ApiC(g_value_array_copy, (arg1))
  ApiC(g_value_array_free, (arg1))
  ApiC(g_value_array_get_nth, (arg1, arg2))
  ApiC(g_value_array_get_type, ())
  ApiC(g_value_array_insert, (arg1, arg2, arg3))
  ApiC(g_value_array_new, (arg1))
  ApiC(g_value_array_prepend, (arg1, arg2))
  ApiC(g_value_array_remove, (arg1, arg2))
  ApiC(g_value_array_sort, (arg1, arg2))
  ApiC(g_value_array_sort_with_data, (arg1, arg2, arg3))
  ApiC(g_value_copy, (arg1, arg2))
  ApiC(g_value_dup_boxed, (arg1))
  ApiC(g_value_dup_object, (arg1))
  ApiC(g_value_dup_param, (arg1))
  ApiC(g_value_dup_string, (arg1))
  ApiC(g_value_fits_pointer, (arg1))
  ApiC(g_value_get_boolean, (arg1))
  ApiC(g_value_get_boxed, (arg1))
  ApiC(g_value_get_char, (arg1))
  ApiC(g_value_get_double, (arg1))
  ApiC(g_value_get_enum, (arg1))
  ApiC(g_value_get_flags, (arg1))
  ApiC(g_value_get_float, (arg1))
  ApiC(g_value_get_int, (arg1))
  ApiC(g_value_get_long, (arg1))
  ApiC(g_value_get_object, (arg1))
  ApiC(g_value_get_param, (arg1))
  ApiC(g_value_get_pointer, (arg1))
  ApiC(g_value_get_string, (arg1))
  ApiC(g_value_get_type, ())
  ApiC(g_value_get_uchar, (arg1))
  ApiC(g_value_get_uint, (arg1))
  ApiC(g_value_get_ulong, (arg1))
  ApiC(g_value_init, (arg1, arg2))
  ApiC(g_value_peek_pointer, (arg1))
  ApiC(g_value_register_transform_func, (arg1, arg2, arg3))
  ApiC(g_value_reset, (arg1))
  ApiC(g_value_set_boolean, (arg1, arg2))
  ApiC(g_value_set_boxed, (arg1, arg2))
  ApiC(g_value_set_boxed_take_ownership, (arg1, arg2))
  ApiC(g_value_set_char, (arg1, arg2.p-utf8))
  ApiC(g_value_set_double, (arg1, arg2))
  ApiC(g_value_set_enum, (arg1, arg2))
  ApiC(g_value_set_flags, (arg1, arg2))
  ApiC(g_value_set_float, (arg1, arg2))
  ApiC(g_value_set_instance, (arg1, arg2))
  ApiC(g_value_set_int, (arg1, arg2))
  ApiC(g_value_set_long, (arg1, arg2))
  ApiC(g_value_set_object, (arg1, arg2))
  ApiC(g_value_set_object_take_ownership, (arg1, arg2))
  ApiC(g_value_set_param, (arg1, arg2))
  ApiC(g_value_set_param_take_ownership, (arg1, arg2))
  ApiC(g_value_set_pointer, (arg1, arg2))
  ApiC(g_value_set_static_boxed, (arg1, arg2))
  ApiC(g_value_set_static_string, (arg1, arg2.p-utf8))
  ApiC(g_value_set_string, (arg1, arg2.p-utf8))
  ApiC(g_value_set_string_take_ownership, (arg1, arg2.p-utf8))
  ApiC(g_value_set_uchar, (arg1, arg2.p-utf8))
  ApiC(g_value_set_uint, (arg1, arg2))
  ApiC(g_value_set_ulong, (arg1, arg2))
  ApiC(g_value_take_boxed, (arg1, arg2))
  ApiC(g_value_take_object, (arg1, arg2))
  ApiC(g_value_take_param, (arg1, arg2))
  ApiC(g_value_take_string, (arg1, arg2.p-utf8))
  ApiC(g_value_transform, (arg1, arg2))
  ApiC(g_value_type_compatible, (arg1, arg2))
  ApiC(g_value_type_transformable, (arg1, arg2))
  ApiC(g_value_unset, (arg1))
EndImport
