;
; Mouse library documentation
;
; (c) Fantaisie Software
;

@Library Mouse

@Overview

  PureBasic permet un plein accès aux souris 
  connectées à l'ordinateur. 
  Les souris standards sont supportées 
  jusqu'à trois boutons. 
  Cette bibliothèque est optimisée et 
  utilise des fonctions de très bas 
  niveau particulièrement efficaces pour 
  le développement des jeux. 
@LineBreak
@LineBreak
  N'utilisez pas cette bibliothèque pour 
  des applications classiques, dans ce cas, 
  @@WindowMouseX, @@WindowMouseY et 
  @@EventType doivent être utilisées.
  
@OS Windows
@LineBreak
@LineBreak
  Sous Windows, c'est la technologie 
  DirectX qui est utilisée. Une version récente de 
  DirectX 9  doit être installée (voir ici: 
  @InternetLink "http://www.microsoft.com/en-us/download/details.aspx?id=35" "DirectX 9 runtime installer"). 
@EndOS

@CommandList

@ExampleFile All Mouse.pb

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = InitMouse()

@Description
  Initialise l'environnement Souris. 
  
@NoParameters

@ReturnValue  
  Renvoie une valeur non nulle si une 
  souris est disponible, zéro sinon.
  
@Remarks
  Vous devez appeler cette fonction avant 
  tout usage des autres commandes de la 
  bibliothèque.
  
@OS Windows
@LineBreak
@LineBreak
  Cette commande tente d'ouvrir DirectX 
  (v3.0 pour la compatibilité NT4.0 ou 
  v7.0 ou plus sinon).
  Si la fonction échoue (Resultat = 0), cela peut 
  donc provenir de l'absence de DirectX sur votre 
  ordinateur ou d'une version de DirectX trop 
  ancienne. Sous Windows, une version récente 
  de DirectX 9 doit être installé (voir ici: 
  @InternetLink "http://www.microsoft.com/en-us/download/details.aspx?id=35" "DirectX 9 runtime installer"). 
  
@Example 
@Code
  ; Initialisation du monde 2D
  InitSprite()
  InitMouse()

  ; Ouverture de la fenêtre
  OpenWindow(0,0,0,800,600,"Souris - Cliquer et utiliser la molette...",#PB_Window_ScreenCentered|#PB_Window_SystemMenu)
  OpenWindowedScreen(WindowID(0),0,0,800,600,1,0,0)

  ;Création du curseur de la souris
  LoadSprite(0, #PB_Compiler_Home + "examples/sources/Data/PureBasic.bmp")   ; Load nice small Logo

  ; Déplacement de la souris
  MouseLocate(300,200)

  ; Gestion de la fenêtre et de l'écran
  Repeat
    Repeat      ; Gestion de la fenêtre
      Event  = WindowEvent() 
      Select Event 
        Case #PB_Event_CloseWindow 
        End  
      EndSelect 
    Until Event = 0
  
  ExamineMouse() ; Etat de la souris
  x = MouseX()   ; Position en x de la souris                     
  y = MouseY()   ; Position en y de la souris
  
  ; Affichage du curseur
  DisplaySprite(0, x-SpriteWidth(0)/2, y-SpriteHeight(0)/2)
  
  ; Molette de la souris = Rotation du curseur
  tiks = MouseWheel()
  RotateSprite(0, tiks, #PB_Relative)
  
  ; Affichage de l'état de la souris
  StartDrawing(ScreenOutput())
  DrawText(0,5, "X=" + Str(x) + "   Y=" + Str(y) + "  DeltaX " + Str(MouseDeltaX()) + "  DeltaY= " + Str(MouseDeltaY())) 
  If MouseButton(#PB_MouseButton_Left) <> 0
    DrawText(0,30, "Bouton Gauche", RGB(255,0,0),RGB(255,255,0))
  Else
    DrawText(0,30, "Bouton Gauche", RGB(255,255,255))
  EndIf
  If MouseButton(#PB_MouseButton_Middle) <> 0
    DrawText(150,30, "Bouton Central", RGB(255,0,0),RGB(255,255,0))
  Else
    DrawText(150,30, "Bouton Central", RGB(255,255,255))
  EndIf
  If MouseButton(#PB_MouseButton_Right) <> 0  
    DrawText(300,30, "Bouton Droit", RGB(255,0,0),RGB(255,255,0))
  Else
    DrawText(300,30, "Bouton Droit", RGB(255,255,255))
  EndIf  
  If tiks <> 0
    DrawText(450,30, "Molette", RGB(255,0,0),RGB(255,255,0))
  Else
    DrawText(450,30, "Molette", RGB(255,255,255))
  EndIf
  DrawText(0,60,".: Libérer la souris: Clic sur bouton gauche et droit :.")
  StopDrawing()
  
  ; Si clic sur bouton gauche ET droit alors la souris est libérée de l'écran courant
  If MouseButton(#PB_MouseButton_Left)  And MouseButton(#PB_MouseButton_Right) 
    ReleaseMouse(1)
    oui=6
    quitter=MessageRequester("Info !", "Voulez-vous quitter le programme ?",#PB_MessageRequester_YesNo)
    If quitter=oui
      End
    EndIf  
  EndIf
  
  FlipBuffers()
  ClearScreen(RGB(0,0,0)) 
  
  ForEver
  End
@EndCode

@SeeAlso
  @@ExamineMouse

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = ExamineMouse() 

@Description
  Met à jour l'état de la souris. 
  
@NoParameters

@ReturnValue  
  Renvoie une valeur non nulle si l'état de 
  la souris a changé, zéro sinon.
  
@Remarks
   Cette commande doit être utilisée avant @@MouseDeltaX, @@MouseDeltaY, @@MouseX, @@MouseY ou @@MouseButton.
@LineBreak
@LineBreak
   Le premier appel à ExamineMouse() capture la souris dans l'écran (surface accélérée) en cours, aussi bien en plein écran 
   (@Link "Screen/OpenScreen" "Screen" ) que dans un écran fenêtré (@Link "Screen/OpenWindowedScreen" "WindowedScreen").
@LineBreak
@LineBreak
   La souris est à nouveau disponible pour l’ensemble du système après avoir appelé @Link "ReleaseMouse" "ReleaseMouse(#True)" 
   ou après la fin de ce programme.
@LineBreak
@LineBreak
  En @Link "Screen/OpenScreen" "mode plein écran", la commande @@FlipBuffers doit être appelée dans la boucle d'événements pour gérer 
  correctement tous les événements.

@Example 
@Code
  ; Initialisation du monde 2D
  InitSprite()
  InitMouse()

  ; Ouverture de la fenêtre
  OpenWindow(0,0,0,800,600,"Souris - Cliquer et utiliser la molette...",#PB_Window_ScreenCentered|#PB_Window_SystemMenu)
  OpenWindowedScreen(WindowID(0),0,0,800,600,1,0,0)

  ;Création du curseur de la souris
  LoadSprite(0, #PB_Compiler_Home + "examples/sources/Data/PureBasic.bmp")   ; Load nice small Logo

  ; Déplacement de la souris
  MouseLocate(300,200)

  ; Gestion de la fenêtre et de l'écran
  Repeat
    Repeat      ; Gestion de la fenêtre
      Event  = WindowEvent() 
      Select Event 
        Case #PB_Event_CloseWindow 
        End  
      EndSelect 
    Until Event = 0
  
  ExamineMouse() ; Etat de la souris
  x = MouseX()   ; Position en x de la souris                     
  y = MouseY()   ; Position en y de la souris
  
  ; Affichage du curseur
  DisplaySprite(0, x-SpriteWidth(0)/2, y-SpriteHeight(0)/2)
  
  ; Molette de la souris = Rotation du curseur
  tiks = MouseWheel()
  RotateSprite(0, tiks, #PB_Relative)
  
  ; Affichage de l'état de la souris
  StartDrawing(ScreenOutput())
  DrawText(0,5, "X=" + Str(x) + "   Y=" + Str(y) + "  DeltaX " + Str(MouseDeltaX()) + "  DeltaY= " + Str(MouseDeltaY())) 
  If MouseButton(#PB_MouseButton_Left) <> 0
    DrawText(0,30, "Bouton Gauche", RGB(255,0,0),RGB(255,255,0))
  Else
    DrawText(0,30, "Bouton Gauche", RGB(255,255,255))
  EndIf
  If MouseButton(#PB_MouseButton_Middle) <> 0
    DrawText(150,30, "Bouton Central", RGB(255,0,0),RGB(255,255,0))
  Else
    DrawText(150,30, "Bouton Central", RGB(255,255,255))
  EndIf
  If MouseButton(#PB_MouseButton_Right) <> 0  
    DrawText(300,30, "Bouton Droit", RGB(255,0,0),RGB(255,255,0))
  Else
    DrawText(300,30, "Bouton Droit", RGB(255,255,255))
  EndIf  
  If tiks <> 0
    DrawText(450,30, "Molette", RGB(255,0,0),RGB(255,255,0))
  Else
    DrawText(450,30, "Molette", RGB(255,255,255))
  EndIf
  DrawText(0,60,".: Libérer la souris: Clic sur bouton gauche et droit :.")
  StopDrawing()
  
  ; Si clic sur bouton gauche ET droit alors la souris est libérée de l'écran courant
  If MouseButton(#PB_MouseButton_Left)  And MouseButton(#PB_MouseButton_Right) 
    ReleaseMouse(1)
    oui=6
    quitter=MessageRequester("Info !", "Voulez-vous quitter le programme ?",#PB_MessageRequester_YesNo)
    If quitter=oui
      End
    EndIf  
  EndIf
  
  FlipBuffers()
  ClearScreen(RGB(0,0,0)) 
  
  ForEver
  End
@EndCode
    
@SeeAlso
  @@InitMouse, @@MouseDeltaX, @@MouseDeltaY, 
  @@MouseX, @@MouseY, @@MouseButton

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = MouseButton(Bouton)

@Description
  Teste si un bouton est enfoncé.
  
@Parameter "Bouton"
  @FixedFont
  @#PB_MouseButton_Left  : Teste si le bouton gauche de la souris est enfoncé
  @#PB_MouseButton_Right : Teste si le bouton droit de la souris est enfoncé
  @#PB_MouseButton_Middle: Teste si le bouton du milieu de la souris est enfoncé
@EndFixedFont

@ReturnValue  
   Renvoie une valeur non nulle si le 
   bouton spécifié est appuyé, zéro sinon.
  
@Remarks
  On peut appuyer sur plusieurs boutons 
  simultanément. 
@LineBreak
@LineBreak  
  @@ExamineMouse doit être appelé avant 
  cette fonction pour mettre l'état des 
  boutons à jour.

@Example 
@Code
 ; Initialisation du monde 2D
 InitSprite()
 InitKeyboard()
 InitMouse()

  ; Ouverture de la fenêtre
  OpenWindow(0,0,0,800,600,"Souris - MouseButton",#PB_Window_ScreenCentered|#PB_Window_SystemMenu)
  OpenWindowedScreen(WindowID(0),0,0,800,600,1,0,0)

  ; Gestion de la fenêtre et de l'écran
  Repeat
   Repeat         ; Gestion de la fenêtre
     Event  = WindowEvent() 
   Until Event = 0
  
   ExamineMouse() ; Etat de la souris
  
   ; Affichage de l'état des boutons de la souris
   StartDrawing(ScreenOutput())
   DrawText(10,10, "Appuyer sur une touche du clavier pour quitter.", RGB(255,255,0))
   DrawText(200,180, "Cliquez sur le bouton gauche, milieu ou droit de la souris.", RGB(255,0,0),RGB(255,255,0))
    If MouseButton(#PB_MouseButton_Left) <> 0
     DrawText(200,230, "Bouton Gauche", RGB(255,0,0),RGB(255,255,0))
   Else
     DrawText(200,230, "Bouton Gauche", RGB(255,255,255))
   EndIf
   If MouseButton(#PB_MouseButton_Middle) <> 0
     DrawText(350,230, "Bouton Central", RGB(255,0,0),RGB(255,255,0))
   Else
     DrawText(350,230, "Bouton Central", RGB(255,255,255))
   EndIf
   If MouseButton(#PB_MouseButton_Right) <> 0  
     DrawText(500,230, "Bouton Droit", RGB(255,0,0),RGB(255,255,0))
   Else
     DrawText(500,230, "Bouton Droit", RGB(255,255,255))
   EndIf  
   StopDrawing()
   
   FlipBuffers()
   ClearScreen(RGB(0,0,0)) 
  
   ExamineKeyboard()
  Until KeyboardPushed(#PB_Key_All)
  End
@EndCode
    
@SeeAlso
  @@ExamineMouse

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = MouseDeltaX()

@Description
  Teste le déplacement horizontal de la souris.
  
@NoParameters

@ReturnValue  
  Renvoie le déplacement horizontal (en pixels) 
  de la souris depuis le dernier appel de 
  cette fonction. 
  
@Remarks
  Le résultat peut être positif ou négatif 
  selon que le déplacement s'est 
  effectué vers la droite ou vers la gauche 
  depuis le dernier appel. 
@LineBreak
@LineBreak  
  @@ExamineMouse doit être appelé avant cette 
  fonction pour mettre la position courante de 
  la souris à jour.
 
@Example 
@Code
 ; Initialisation du monde 2D
 InitSprite()
 InitKeyboard()
 InitMouse()

  ; Ouverture de la fenêtre
  OpenWindow(0,0,0,800,600,"Souris - MouseDeltaX",#PB_Window_ScreenCentered|#PB_Window_SystemMenu)
  OpenWindowedScreen(WindowID(0),0,0,800,600,1,0,0)

  ; Gestion de la fenêtre et de l'écran
  Repeat
   Repeat         ; Gestion de la fenêtre
     Event  = WindowEvent() 
   Until Event = 0
  
   ExamineMouse() ; Etat de la souris
   
   ; Affichage de l'état des boutons de la souris
   StartDrawing(ScreenOutput())
   DrawText(10,10, "Appuyer sur une touche du clavier pour quitter.", RGB(255,255,0))
   DrawText(250,180, "Bougez la souris.", RGB(255,0,0),RGB(255,255,0))
   
   DrawText(250,230, "DeltaX " + Str(MouseDeltaX()), RGB(255,255,255))
   DrawText(250,260, "DeltaY " + Str(MouseDeltaY()), RGB(255,255,255))

   StopDrawing()
   
   FlipBuffers()
   ClearScreen(RGB(0,0,0)) 
  
   ExamineKeyboard()
  Until KeyboardPushed(#PB_Key_All)
  End
@EndCode
  
@SeeAlso
  @@ExamineMouse, @@MouseDeltaY

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = MouseDeltaY()

@Description
  Teste le déplacement vertical de la souris.
  
@NoParameters

@ReturnValue  
  Renvoie le déplacement vertical (en pixels) 
  de la souris depuis le dernier appel de 
  cette fonction. 
  
@Remarks
  Le résultat peut être positif ou négatif 
  selon que le déplacement s'est effectué 
  vers le haut ou vers le bas depuis le 
  dernier appel. 
@LineBreak
@LineBreak  
  @@ExamineMouse doit être appelé avant 
  cette fonction pour mettre la position 
  courante de la souris à jour.
 
@Example 
@Code
 ; Initialisation du monde 2D
 InitSprite()
 InitKeyboard()
 InitMouse()

  ; Ouverture de la fenêtre
  OpenWindow(0,0,0,800,600,"Souris - MouseDeltaY",#PB_Window_ScreenCentered|#PB_Window_SystemMenu)
  OpenWindowedScreen(WindowID(0),0,0,800,600,1,0,0)

  ; Gestion de la fenêtre et de l'écran
  Repeat
   Repeat        ; Gestion de la fenêtre
     Event  = WindowEvent() 
   Until Event = 0
  
   ExamineMouse() ; Etat de la souris
   
   ; Affichage de l'état des boutons de la souris
   StartDrawing(ScreenOutput())
   DrawText(10,10, "Appuyer sur une touche du clavier pour quitter.", RGB(255,255,0))
   DrawText(250,180, "Bougez la souris.", RGB(255,0,0),RGB(255,255,0))
   
   DrawText(250,230, "DeltaX " + Str(MouseDeltaX()), RGB(255,255,255))
   DrawText(250,260, "DeltaY " + Str(MouseDeltaY()), RGB(255,255,255))

   StopDrawing()
   
   FlipBuffers()
   ClearScreen(RGB(0,0,0)) 
  
   ExamineKeyboard()
  Until KeyboardPushed(#PB_Key_All)
  End
@EndCode
  
@SeeAlso
  @@ExamineMouse, @@MouseDeltaX

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function MouseLocate(X, Y)

@Description
  Change la position absolue (en pixels) 
  de la souris dans l'écran courant. 
  
@Parameter "X, Y"
  La nouvelle position du curseur.
  
@NoReturnValue 

@Remarks
  Principalement utilisé avec les commandes 
  @@MouseX et @@MouseY.
 
@Example 
@Code
  ; Initialisation du monde 2D
  InitSprite()
  InitKeyboard()
  InitMouse()
 
  ; Curseur de la souris
  CreateImage(0,20,20)
  StartDrawing(ImageOutput(0))
  Circle(10, 10, 10, RGB(255, 255, 0))
  StopDrawing()
  
  ; Ouverture de la fenêtre
  OpenWindow(0,0,0,800,600,"Souris - MouseLocate",#PB_Window_ScreenCentered|#PB_Window_SystemMenu)
  OpenWindowedScreen(WindowID(0),0,0,800,600,1,0,0)

  ; Gestion de la fenêtre et de l'écran
  Repeat
   Repeat         ; Gestion de la fenêtre
     Event  = WindowEvent() 
   Until Event = 0
  
   ExamineMouse() ; Etat de la souris
   
   ; Affichage de l'état des boutons de la souris
   StartDrawing(ScreenOutput())
   DrawText(10,10, "Appuyer sur une touche du clavier pour quitter.", RGB(255,255,0))
   DrawText(100,180, "Bougez la souris puis cliquez pour remettre le curseur au centre de l'écran.", RGB(255,0,0),RGB(255,255,0))
   
   DrawText(MouseX(), MouseY(), "["+Chr(164)+"]", RGB(255,255,0))
   
   If MouseButton(#PB_MouseButton_Left)
     MouseLocate(400, 300)
     DrawText(MouseX(), MouseY(), "["+Chr(164)+"]", RGB(255,255,0))
   EndIf
   
   StopDrawing()
   
   FlipBuffers()
   ClearScreen(RGB(0,0,0)) 
  
   ExamineKeyboard()
  Until KeyboardPushed(#PB_Key_All)
  End
@EndCode
    
@SeeAlso
  @@ExamineMouse, @@MouseX, @@MouseY

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = MouseWheel()

@Description
  Teste la molette centrale de la souris.
  
@NoParameters

@ReturnValue  
  Renvoie le nombre de "ticks" (unité pas-à-pas 
  du système) réalisé par la molette de la 
  souris depuis le dernier appel de cette fonction.
  
@Remarks
  La valeur est positive si la molette a été 
  déplacée vers l'avant et négative si la molette 
  a été déplacée vers l'arrière. 
@LineBreak
@LineBreak
  @@ExamineMouse doit être appelé avant cette 
  fonction pour mettre les informations sur la 
  souris à jour.
 
@Example 
@Code
 ; Initialisation du monde 2D
 InitSprite()
 InitKeyboard()
 InitMouse()

  ; Ouverture de la fenêtre
  OpenWindow(0,0,0,800,600,"Souris - Utiliser la molette",#PB_Window_ScreenCentered|#PB_Window_SystemMenu)
  OpenWindowedScreen(WindowID(0),0,0,800,600,1,0,0)

  ; Gestion de la fenêtre et de l'écran
  Repeat
   Repeat         ; Gestion de la fenêtre
     Event  = WindowEvent() 
   Until Event = 0
  
   ExamineMouse() ; Etat de la souris
   
  ; Molette de la souris = Rotation du curseur
   tiks = MouseWheel()
   ; Affichage de l'état des boutons de la souris
   StartDrawing(ScreenOutput())
   DrawText(10,10, "Appuyer sur une touche du clavier pour quitter.", RGB(255,255,0))
   DrawText(250,180, "Utilisez la molette centrale de la souris.", RGB(255,0,0),RGB(255,255,0))
    If tiks > 0
     DrawText(250,230, "Molette vers le haut" , RGB(255,0,0), RGB(255,255,0))
     Delay(100)
   ElseIf tiks < 0
     DrawText(450,230, "Molette vers le bas"  , RGB(255,0,0), RGB(255,255,0))
     Delay(100)
   Else
     DrawText(350,230, "Molette au repos" , RGB(255,255,255))
   EndIf

   StopDrawing()
   
   FlipBuffers()
   ClearScreen(RGB(0,0,0)) 
  
   ExamineKeyboard()
  Until KeyboardPushed(#PB_Key_All)
  End
@EndCode
  
@SeeAlso
  @@ExamineMouse

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = MouseX()

@Description
  Renvoie la position horizontale de la souris.
  
@NoParameters

@ReturnValue  
  Renvoie la position horizontale actuelle 
  (en pixels) de la souris sur l'écran actif. 
  
@Remarks
  @@ExamineMouse doit être appelé avant cette 
  fonction pour mettre la position courante de 
  la souris à jour.

@SeeAlso
  @@ExamineMouse, @@MouseY, @@MouseLocate
 
@Example 
@Code
  ; Initialisation du monde 2D
  InitSprite()
  InitKeyboard()
  InitMouse()
  
  ; Ouverture de la fenêtre
  OpenWindow(0,0,0,800,600,"Souris - MouseX",#PB_Window_ScreenCentered|#PB_Window_SystemMenu)
  OpenWindowedScreen(WindowID(0),0,0,800,600,1,0,0)

  ; Gestion de la fenêtre et de l'écran
  Repeat
   Repeat         ; Gestion de la fenêtre
     Event  = WindowEvent() 
   Until Event = 0
  
   ExamineMouse() ; Etat de la souris
   
   ; Affichage de l'état des boutons de la souris
   StartDrawing(ScreenOutput())
   DrawText(10,10, "Appuyer sur une touche du clavier pour quitter.", RGB(255,255,0))
   DrawText(300,180, "Bougez la souris.", RGB(255,0,0),RGB(255,255,0))
   
   DrawText(MouseX(), MouseY(), "["+Chr(164)+"]", RGB(255,255,0))
   
   DrawText(250,230, "X= " + Str(MouseX()) , RGB(255,255,255))
   DrawText(450,230, "Y="  + Str(MouseY()) , RGB(255,255,255))
   
   StopDrawing()
   
   FlipBuffers()
   ClearScreen(RGB(0,0,0)) 
  
   ExamineKeyboard()
  Until KeyboardPushed(#PB_Key_All)
  End
@EndCode
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = MouseY()

@Description
  Renvoie la position verticale de la souris.
  
@NoParameters

@ReturnValue  
  Renvoie la position verticale actuelle 
  (en pixels) de la souris sur l'écran actif. 
  
@Remarks
  @@ExamineMouse doit être appelé avant cette 
  fonction pour mettre la position courante de 
  la souris à jour.
 
@Example 
@Code
  ; Initialisation du monde 2D
  InitSprite()
  InitKeyboard()
  InitMouse()
  
  ; Ouverture de la fenêtre
  OpenWindow(0,0,0,800,600,"Souris - MouseY",#PB_Window_ScreenCentered|#PB_Window_SystemMenu)
  OpenWindowedScreen(WindowID(0),0,0,800,600,1,0,0)

  ; Gestion de la fenêtre et de l'écran
  Repeat
   Repeat         ; Gestion de la fenêtre
     Event  = WindowEvent() 
   Until Event = 0
  
   ExamineMouse() ; Etat de la souris
   
   ; Affichage de l'état des boutons de la souris
   StartDrawing(ScreenOutput())
   DrawText(10,10, "Appuyer sur une touche du clavier pour quitter.", RGB(255,255,0))
   DrawText(300,180, "Bougez la souris.", RGB(255,0,0),RGB(255,255,0))
   
   DrawText(MouseX(), MouseY(), "["+Chr(164)+"]", RGB(255,255,0))
   
   DrawText(250,230, "X= " + Str(MouseX()) , RGB(255,255,255))
   DrawText(450,230, "Y="  + Str(MouseY()) , RGB(255,255,255))
   
   StopDrawing()
   
   FlipBuffers()
   ClearScreen(RGB(0,0,0)) 
  
   ExamineKeyboard()
  Until KeyboardPushed(#PB_Key_All)
  End
@EndCode
  
@SeeAlso
  @@ExamineMouse, @@MouseX, @@MouseLocate

@SupportedOS


;--------------------------------------------------------------------------------------------------------

@Function ReleaseMouse(Etat)

@Description
  Capture ou libère la souris pour rendre son 
  usage possible dans le système d'exploitation. 
  
@Parameter "Etat"
@FixedFont
  @#True  : La souris est libérée de l'écran
  @#False : La souris est capturée dans l'écran.
@EndFixedFont

@NoReturnValue  
  
@Remarks
  On utilise typiquement cette fonction après 
  avoir vérifié le résultat de la 
  commande @@IsScreenActive.
 
@Example 
@Code

  ; Quelques variables
  MargeG = 20 
  MargeH = 20 
  LargeurEcran = 440 
  HauteurEcran = 440 

  ; Initialisation du monde 2D
  InitSprite()
  InitMouse() 
  
  ; Ouverture de la fenêtre et de l'écran
  OpenWindow(0,0,0,650,480,"Capture/Libération de la souris",#PB_Window_ScreenCentered|#PB_Window_SystemMenu) 
  ButtonGadget(1,500,440,120,24,"Cliquez !") 
  OpenWindowedScreen(WindowID(0),20,20,LargeurEcran,HauteurEcran,0,0,0) 

  ; Gestion de la fenêtre et de l'écran
  Repeat
    
    Repeat ; Gestion de la fenêtre
      Event  = WindowEvent()  
      Select Event 
        Case #PB_Event_Gadget 
          If EventGadget() = 1     ; Si Clic sur le Bouton "Cliquez !"
            MessageRequester("Attention","Bouton cliqué !") 
          EndIf 
        Case #PB_Event_CloseWindow ; Si fermeture de la fenêtre
          End
      EndSelect
      
      ; Affichage de la position de la souris dans la fenêtre
      SetWindowTitle(0, "Capture/Libération de la souris X= " + Str(mx) + " Y= "+ Str(my))
    Until Event =  0 
    
    ; Gestion de la capture de la souris dans l'écran noir
      If inScreen = #True       ; Si la souris est dans l'écran noir...
        If MouseX() > LargeurEcran-2 Or MouseY() > HauteurEcran-2 Or MouseX() < 1 Or MouseY() <1 
              ReleaseMouse(#True)   ; ...et si elle s'approche des bords de l'écran alors on libère la souris
              inScreen = #False 
          EndIf  
      Else                      
        mx = WindowMouseX(0)      ; Sinon, si la souris entre dans l'écran noir...
        my = WindowMouseY(0)
        If mx < LargeurEcran + MargeG And mx > MargeG And my > MargeH And my < MargeH + HauteurEcran                         
          ReleaseMouse(#False)    ; ... alors on capture la souris 
            MouseLocate(mx-MargeG,my-MargeH) 
            inScreen = #True 
        EndIf 
    EndIf 
    
    ; Affichage de l'écran noir
    ClearScreen(0) 
    StartDrawing(ScreenOutput()) 
        DrawText(150,200,"Souris relachée") 
        DrawText(180,230,"X= ")
        DrawText(180,260,"Y= ")
    StopDrawing()  
    If inScreen  ; Si la souris est dans l'écran noir... 
        ExamineMouse() 
        StartDrawing(ScreenOutput())
        FrontColor(RGB(255,255,0))
        DrawText(150,200,"Souris capturée" ) 
        DrawText(180,230,"X= "+ Str(MouseX())) 
        DrawText(180,260,"Y= "+ Str(MouseY()))
        DrawText(MouseX(), MouseY(), "["+Chr(164)+"]")
        StopDrawing() 
    EndIf 
    FlipBuffers() 
 ForEver
@EndCode
    
@SeeAlso
  @@ExamineMouse, @@IsScreenActive

@SupportedOS
