;
; Http library documentation
;
; (c) Fantaisie Software
;

@Library Http

@Overview
  Http est le nom du protocole utilisé 
  par les navigateurs Web pour accéder 
  aux sites distants, comme par exemple 
  une page Web. Chaque donnée distante 
  a son adresse unique: l'URL (Uniform 
  Resource Locator). Cette bibliothèque 
  permet de manipuler facilement les 
  URLs et de télécharger des fichiers 
  distants.
@LineBreak
@LineBreak  
 Sous Linux, 'libcurl' doit être installé pour 
 que certaines commandes HTTP fonctionnent (déjà installé 
 dans la plupart des distributions Linux).
  
@CommandList

@ExampleFile All Http.pb

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function AbortHTTP(ConnexionHttp)

@Description
  Annule la progression du téléchargement asynchrone spécifié, commencé soit avec 
  @@ReceiveHTTPFile soit avec @@ReceiveHTTPMemory.

@Parameter "ConnexionHttp"
  La connexion Http à interrompre.

@NoReturnValue

@Remarks
  La valeur @#PB_HTTP_Aborted sera envoyée par la fonction @@HTTPProgress.
@LineBreak
@LineBreak
  @@FinishHTTP doit être appelée une fois le téléchargement interrompu.
@LineBreak
@LineBreak
  Cette fonction peut être utilisée aussi avec @@HTTPRequest ou @@HTTPRequestMemory 
  (l'option @#PB_HTTP_Asynchronous doit être appliquée).
 
@SeeAlso
  @@HTTPProgress, @@FinishHTTP

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = FinishHTTP(ConnexionHttp)

@Description
  Libère les ressources associées au téléchargement asynchrone spécifié, commencé soit avec @@ReceiveHTTPFile soit avec 
  @@ReceiveHTTPMemory.

@Parameter "ConnexionHttp"
  La connexion Http à libérer.

@ReturnValue
  Selon la commande de réception utilisée pour démarrer le téléchargement, 
  FinishHTTP() renvoie l'un des résultats suivants:
  @LineBreak
  Depuis @@ReceiveHTTPFile, la quantité d'octets reçus (taille du fichier stocké) est renvoyée.
  @LineBreak
  Depuis @@ReceiveHTTPMemory avec l'option @#PB_HTTP_Asynchronous, l'adresse de la 
  zone de mémoire où les données reçues ont été stockées, est renvoyée. @@MemorySize 
  permet de connaitre la quantité de données reçues peut alors être déterminée.

@Remarks
  La valeur @#PB_HTTP_Aborted sera envoyée par la fonction @@HTTPProgress.
@LineBreak
@LineBreak
  Il doit toujours être appelé après un appel réussi de @@ReceiveHTTPFile ou @@ReceiveHTTPMemory.

@SeeAlso
  @@HTTPProgress, @@AbortHTTP

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat$ = GetURLPart(URL$, Parametre$)

@Description
  Renvoie une partie d'une URL. 
  
@Parameter "URL$"
  L'URL à utiliser.
@LineBreak
@LineBreak
  Une URL peut contenir des 
  paramètres.@LineBreak 
  C'est utile quand un langage 
  de script est utilisé sur le 
  serveur Web (comme PHP). @LineBreak 
  La syntaxe est la suivante: 
  http://www.purebasic.com/index.php?test=1.
  @LineBreak  
  Ici le paramètre se nomme "test" 
  et sa valeur associée est "1". 
  
@Parameter "Parametre$"  
  La valeur à envoyer. 
@LineBreak
@LineBreak
  Les paramètres ne sont pas 
  sensibles à la casse.
@LineBreak
@LineBreak  
  De plus, il peut prendre l'une 
  des valeurs prédéfinies 
  suivantes pour accéder facilement 
  à une partie standard de l'URL:
@FixedFont
  @#PB_URL_Protocol  : Pour renvoyer le protocole
  @#PB_URL_Site      : Pour renvoyer le site
  @#PB_URL_Port      : Pour renvoyer le port (s'il existe)
  @#PB_URL_Parameters: Pour renvoyer tous les paramètres
  @#PB_URL_Path      : Pour renvoyer le chemin
  @#PB_URL_User      : Pour renvoyer le nom d'utilisateur (s'il existe)
  @#PB_URL_Password  : Pour renvoyer le mot de passe (s'il existe)
@EndFixedFont

@ReturnValue  
  Renvoie la valeur du paramètre 
  ou une autre partie de l'URL.
  
@Example
@Code
  URL$ = "http://user:pass@www.purebasic.com:80/index.php?test=1&ok=2"
  
  Debug GetURLPart(URL$, #PB_URL_Protocol)   ; Affiche "http"
  Debug GetURLPart(URL$, #PB_URL_Site)       ; Affiche "www.purebasic.com"
  Debug GetURLPart(URL$, #PB_URL_Port)       ; Affiche "80"
  Debug GetURLPart(URL$, #PB_URL_Parameters) ; Affiche "test=1&ok=2"
  Debug GetURLPart(URL$, #PB_URL_Path)       ; Affiche "index.php"
  Debug GetURLPart(URL$, #PB_URL_User)       ; Affiche "user"
  Debug GetURLPart(URL$, #PB_URL_Password)   ; Affiche "pass"
  Debug GetURLPart(URL$, "test")             ; Affiche "1"
  Debug GetURLPart(URL$, "ok")               ; Affiche "2"
@EndCode

@SeeAlso
  @@SetURLPart, @@URLDecoder

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = HTTPProgress(ConnexionHttp)

@Description
  Renvoie la progression du 
  téléchargement asynchrone 
  spécifié, commencé soit avec 
  @@ReceiveHTTPFile soit avec 
  @@ReceiveHTTPMemory.

@Parameter "ConnexionHttp"
  La connexion HTTP à utiliser.

@ReturnValue
  Le nombre d'octets reçu ou 
  une des valeurs suivantes:
@FixedFont
  @#PB_Http_Success    : Le téléchargement s'est terminé avec succès.
  @#PB_Http_Failed     : Le téléchargement a échoué.
  @#PB_Http_Aborted    : Le téléchargement a été interrompu avec @@AbortHTTP.
@EndFixedFont

@Example
@Code
  Telechargement = ReceiveHTTPMemory("http://www.purebasic.com/download/OgreAssimpConverter.zip", #PB_HTTP_Asynchronous)
  If Telechargement
    Repeat
      Progression = HTTPProgress(Telechargement)
      Select Progression
        Case #PB_Http_Success
          *Memoire = FinishHTTP(Telechargement)
          Debug "Téléchargement terminé (Taille: " + MemorySize(*Memoire) + ")"
          FreeMemory(*Memoire)
          End

        Case #PB_Http_Failed
          Debug "Le téléchargement a échoué"
          FinishHTTP(Telechargement)
          End

        Case #PB_Http_Aborted
          Debug "Le téléchargement a été interrompu"
          FinishHTTP(Telechargement)
          End
          
        Default
          Debug "Téléchargement en cours: " + Progression + "octets reçus"
       
      EndSelect
      
      Delay(500) ; Libérer le CPU
    ForEver
  Else
    Debug "Erreur de téléchargement"
  EndIf

@EndCode

@SeeAlso
  @@ReceiveHTTPFile, @@ReceiveHTTPMemory

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat$ = HTTPInfo(RequeteHttp, Type [, Options])

@Description
  Renvoie des informations sur une requête HTTP créée avec @@HTTPRequest ou
  @@HTTPRequestMemory.

@Parameter "RequeteHttp"
 La requête HTTP.
  
@Parameter "Type"
  L'information spécifique à obtenir. Cela peut être l'une des valeurs suivantes:
@FixedFont
  @#PB_Http_StatusCode  : Le code de l'état du serveur (200: OK, 404: Page non trouvée, etc).
  @#PB_Http_Response    : La réponse du serveur, sous forme de texte. Pour obtenir la réponse brute (raw) , utilisez @@HTTPMemory.
  @#PB_Http_Headers     : Les en-têtes de requête.
  @#PB_Http_ErrorMessage: Le message d'erreur (principalement à des fins de débogage).
@EndFixedFont

@OptionalParameter "Options"
  Format de la réponse HTTP ou de l'encodage d'en-tête. 
  Il peut s'agir de l'une des valeurs suivantes:
@FixedFont
  @#PB_UTF8  (par défaut)
  @#PB_Ascii
@EndFixedFont  

@ReturnValue
  Une chaîne de caractères dépendant du paramètre 'Type'.

@Example
@Code
  HttpRequest = HTTPRequest(#PB_HTTP_Get, "https://www.google.com")
  If HttpRequest
    Debug "Réponse: " + HTTPInfo(HTTPRequest, #PB_HTTP_Response)
    Debug "Status : " + HTTPInfo(HTTPRequest, #PB_HTTP_StatusCode)
    
    FinishHTTP(HTTPRequest)
  Else
    Debug "La requête a échoué"
  EndIf
@EndCode

@SeeAlso
  @@HTTPRequest, @@HTTPRequestMemory

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function *Resultat = HTTPMemory(RequeteHttp)

@Description
  Renvoie l'adresse d'une zone mémoire (tampon) contenant la réponse complète d'une 
  requête HTTP créée avec @@HTTPRequest ou @@HTTPRequestMemory.

@Parameter "RequeteHttp"
  La requête HTTP.
  
@ReturnValue
  L'adresse mémoire du tampon contenant la réponse complète (raw) d'une requête HTTP.
  
@Remarks
  Le tampon doit être libéré avec@@FreeMemory.@LineBreak
  Si l'option @#PB_HTTP_Asynchronous a été utilisé lors de l'appel de @@HTTPRequest ou de @@HTTPRequestMemory 
  alors cette commande n'est valide que si la requête a abouti.
  
@Example
@Code
  RequeteHTTP = HTTPRequest(#PB_HTTP_Get, "https://www.google.com")
  If RequeteHTTP
    Debug "Réponse: " + HTTPInfo(RequeteHTTP, #PB_HTTP_Response)
    
    *Reponse = HTTPMemory(RequeteHTTP)
    
    FinishHTTP(RequeteHTTP)
    
    Debug "Taille de la réponse: " + MemorySize(*Reponse)
    FreeMemory(*Reponse)
    
  Else
    Debug "La requête a échoué"
  EndIf
@EndCode

@SeeAlso
  @@HTTPRequest, @@HTTPRequestMemory

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function HTTPProxy(URL$ [, Utilisateur$, MotdePasse$])

@Description
  Spécifie un proxy à utiliser pour les commandes HTTP suivantes: @@ReceiveHTTPFile 
  @@ReceiveHTTPMemory, @@HTTPRequest et @@HTTPRequestMemory.

@Parameter "URL$"
  L'URL à utiliser pour le proxy.@LineBreak 
  Par défaut c'est un proxy HTTP si aucun préfixe n'est spécifié.@LineBreak 
  Pour les autres types de proxy, voici les préfixes disponibles:
@FixedFont
  http://    - Proxy HTTP(par défaut)
  socks4://  - Proxy SOCKS4
  socks4a:// - Proxy SOCKS4 avec le support de nom de domaine plutôt que l'adresse IP
  socks5://  - Proxy SOCKS5 
  socks5h:// - Proxy SOCKS5 et demande au proxy de faire la résolution du nom d'hôte
@EndFixedFont  

@OptionalParameter " Utilisateur$, MotdePasse$"
 L'utilisateur et le mot de passe à utiliser pour se connecter au proxy (le cas échéant).

@NoReturnValue

@Remarks
  Sur Linux, 'libcurl' doit être installé pour que cette commande fonctionne 
  (déjà installées sur la plupart des distributions Linux).
  
@Example
@Code
  HTTPProxy("socks4://127.0.0.1")

  Fichier$ = SaveFileRequester("Enregistrer le fichier index.php ?", "", "", 0)

  If ReceiveHTTPFile("http://www.purebasic.com/index.php", Fichier$)
    Debug "Succès"
  Else
    Debug "Echèc"
  EndIf
@EndCode

@SeeAlso
  @@ReceiveHTTPFile, @@ReceiveHTTPMemory, @@HTTPRequest, @@HTTPRequestMemory

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function HTTPTimeout(DelaideConnexion [, DelaiGlobal])

@Description
  Spécifie le délai d'attente à utiliser pour les commandes HTTP suivantes: @@ReceiveHTTPFile,
  @@ReceiveHTTPMemory, @@HTTPRequest et @@HTTPRequestMemory.

@Parameter "DelaideConnexion"
  Le délai d'attente, en millisecondes, avant d'abandonner la requête HTTP si l'hôte distant ne se connecte pas.@LineBreak
  Le délai d'attente par défaut est défini sur 30 secondes.@LineBreak
  @#PB_Default peut être utilisé pour revenir à la valeur de délai d'attente par défaut (30 secondes).

@OptionalParameter "DelaiGlobal"
  Délai d'attente global, en millisecondes, avant d'abandonner la requête HTTP.@LineBreak
  Il n'y a pas de délai d'attente par défaut.@LineBreak
  @#PB_Default peut être utilisé pour revenir au comportement par défaut (pas de délai d'attente (timeout)).@LineBreak
  Note : Si une connexion est lente, elle peut abandonner une requête valide en cours.

@NoReturnValue

@Remarks
  Si "Créer un exécutable thread-safe" est activé dans les @ReferenceLink "ide_compiler" "options du compilateur" alors
  chaque thread a ses propres délais d'attente, ce qui signifie que deux threads peuvent avoir des délais d'attente différents en même temps.
@LineBreak
@LineBreak
  Sous Linux, "libcurl" doit être installé pour que cette commande fonctionne ce qui est déjà le cas de 
  la plupart des distributions Linux.
  
  
@Example
@Code
  HTTPTimeout(5000) ;Laisse 5 secondes pour se connecter au serveur

  HttpRequest = HTTPRequest(#PB_HTTP_Get, "https://www.google.com")
  If HttpRequest
    Debug "Code d'état : " + HTTPInfo(HTTPRequest, #PB_HTTP_StatusCode)
    Debug "Réponse : " + HTTPInfo(HTTPRequest, #PB_HTTP_Response)
    
    FinishHTTP(HTTPRequest)
  Else
    Debug "La création de la demande a échoué"
  EndIf
@EndCode

@SeeAlso
  @@ReceiveHTTPFile, @@ReceiveHTTPMemory, @@HTTPRequest, @@HTTPRequestMemory

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = ReceiveHTTPFile(URL$, NomFichier$ [, Options [, AgentUtilisateur$]])

@Description
  Télécharge un fichier sur le disque à partir d'une URL. 
  
@Parameter "URL$"  
  L'URL de téléchargement.
  
@Parameter "NomFichier$"  
  Le nom du fichier qui sera enregistré sur le disque.
@LineBreak
@LineBreak 
  Si le nom de fichier ne contient 
  pas de chemin complet, il sera 
  enregistré dans le 
  @Link "FileSystem/GetCurrentDirectory" "répertoire courant".
  @LineBreak
  Si le fichier existe, il sera écrasé.

@OptionalParameter "Options"
  Peut être une combinaison des 
  valeurs suivantes:
@FixedFont
  @#PB_HTTP_Asynchronous: Démarre le téléchargement asynchrone.
  @#PB_HTTP_NoRedirect  : Ne pas suivre les redirections automatiques.
@EndFixedFont

@OptionalParameter "AgentUtilisateur$"
  Change l'agent utilisateur (UserAgent) pour la requête HTTP.@LineBreak  
  L'agent utilisateur par défaut est défini sur "Mozilla / 5.0 Gecko / 41.0 
  Firefox / 41.0" pour une compatibilité maximale.  
  
@ReturnValue  
  Renvoie une valeur non nulle 
  en cas de succès, zéro sinon.
  @LineBreak
  Si @#PB_HTTP_Asynchronous a été 
  spécifié, la fonction renvoie la 
  valeur 'ConnexionHttp' nécessaire
  pour @@HTTPProgress, @@AbortHTTP 
  et @@FinishHTTP.
  @LineBreak
  Si #PB_HTTP_Asynchronous est utilisé alors @@FinishHTTP doit être appelé, que le 
  téléchargement ait été effectué avec succès ou non.

@Remarks
  Sous Linux, 'libcurl' doit être installé pour que cette commande fonctionne (déjà installé dans la plupart des distributions Linux).
 @LineBreak
@LineBreak
  Si le fichier distant n'a pas été trouvé, le fichier créé contiendra l'erreur du serveur Web.

@Example 
@Code
  NomDeFichier$ = SaveFileRequester("Enregistrer index.php ?", "", "", 0)

  If ReceiveHTTPFile("https://www.purebasic.com/index.php", NomDeFichier$)
    Debug "Fichier reçu et écrit sur le disque. Si le fichier distant n'a pas été trouvé, il contiendra l'erreur du serveur Web."
  Else
    Debug "Aucun fichier reçu (erreur réseau)."
  EndIf
@EndCode

@SeeAlso
  @@URLEncoder

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function *Resultat = ReceiveHTTPMemory(URL$ [, Options [, AgentUtilisateur$]])

@Description
  Télécharge (Download) un fichier 
  dans un tampon mémoire. 

@Parameter "URL$"
  L'URL (l'adresse) du fichier 
  à utiliser.

@OptionalParameter "Options"
  Peut être une combinaison des 
  valeurs suivantes:
@FixedFont
  @#PB_HTTP_Asynchronous: Démarre le téléchargement asynchrone.
  @#PB_HTTP_NoRedirect  : Ne pas suivre les redirections automatiques.
@EndFixedFont

@OptionalParameter "AgentUtilisateur$"
  Change l'agent utilisateur (UserAgent) pour la requête HTTP.@LineBreak  
  L'agent utilisateur par défaut est défini sur "Mozilla / 5.0 Gecko / 41.0 
  Firefox / 41.0" pour une compatibilité maximale.  
 
@ReturnValue
  Renvoie l'adresse du tampon 
  mémoire en cas de succès, 
  zéro sinon.
@LineBreak
@LineBreak
  @@MemorySize peut être utilisé 
  pour obtenir la taille de 
  l'élément téléchargé. Le tampon 
  de mémoire doit être libéré 
  avec @@FreeMemory une fois 
  fini.@LineBreak
  Si @#PB_HTTP_Asynchronous a 
  été spécifié, la fonction
  renvoie la valeur 'ConnexionHttp' 
  nécessaire pour @@HTTPProgress, 
  @@AbortHTTP et @@FinishHTTP.
  @LineBreak
  Avec #PB_HTTP_Asynchronous, @@FinishHTTP doit être appelé que le téléchargement s'est 
  terminé avec succès ou non.

@Remarks
  Lors d'un téléchargement 
  asynchrone, il est possible 
  d'obtenir l'adresse du tampon 
  mémoire avec @@FinishHTTP.
@LineBreak
@LineBreak  
  Sous Linux, 'libcurl' doit être installé pour 
  que cette commande fonctionne (déjà installé 
  dans la plupart des distributions Linux).
  
@Example
@Code
  *Buffer = ReceiveHTTPMemory("http://www.purebasic.com/index.php")
  If *Buffer
    Taille = MemorySize(*Buffer)
    Debug "Contenu: " + PeekS(*Buffer, Taille, #PB_UTF8|#PB_ByteLength)
    FreeMemory(*Buffer)
  Else
    Debug "Le téléchargement a échoué"
  EndIf
@EndCode

@SeeAlso
  @@URLEncoder

@SupportedOS

;--------------------------------------------------------------------------------------------------------
@Function Resultat = HTTPRequest(Type, URL$ [, Data$ [, Options [, EnTetes()]]])

@Description
  Envoie une requête HTTP avec des données textuelles optionnelles.

@Parameter "Type"
  Le type de la requête. Peut être l'une des valeurs suivantes:
@FixedFont
  @#PB_HTTP_Get    : Requête GET    (le paramètre 'Data$' sera ignoré)
  @#PB_HTTP_Post   : Requête POST   (le paramètre 'Data$' sera envoyé si spécifié)
  @#PB_HTTP_Put    : Requête PUT    (le paramètre 'Data$' sera envoyé si spécifié)
  @#PB_HTTP_Patch  : Requête PATCH  (le paramètre 'Data$' sera envoyé si spécifié)
  @#PB_HTTP_Delete : Requête DELETE (le paramètre 'Data$' sera envoyé si spécifié)
@EndFixedFont

@Parameter "URL$"
  L'URL à interroger.

@OptionalParameter "Data$"
  Les données textuelles à envoyer (envoyées au format UTF-8).

@OptionalParameter "Options"
  Ce peut être une combinaison des valeurs suivantes:
@FixedFont
  @#PB_HTTP_Asynchronous: Téléchargement de manière asynchrone.
  @#PB_HTTP_NoRedirect  : Ne pas suivre les redirections automatiques.
  @#PB_HTTP_NoSSLCheck  : Ne pas vérifier si le certificat SSL est valide (peut être utile à des fins de test).
  @#PB_HTTP_HeadersOnly : Affiche les en-têtes seuls.
  @#PB_HTTP_WeakSSL     : Support des serveurs anciens.
  @#PB_HTTP_Debug       : Imprimer des informations dans la console de debogage.
@EndFixedFont

@OptionalParameter "EnTetes()"
  Une map d'en-têtes supplémentaires, sous forme de chaînes de caractères.@LineBreak 
  Exemple:
@Code
  NewMap Header$()
  Header$("Content-Type") = "text/plain"
  Header$("User-Agent") = "Firefox 54.0"
  Header$("NoParamHeader") = ""  
@EndCode

@ReturnValue
  Renvoie l'identifiant de la requête HTTP si l'appel a été initialisé avec succès, 
  zéro sinon . 

@Remarks
  Sous Linux, vous devez installer 'libcurl' pour que cette commande fonctionne 
  (la plupart des distributions Linux l'ont déjà).
@LineBreak
@LineBreak
   Si des données binaires doivent être envoyées, vous pouvez utiliser @@HTTPRequestMemory().
@LineBreak
@LineBreak
   Cette commande est conçue pour gérer facilement REST comme une API Web.
@LineBreak
@LineBreak
  @@HTTPInfo peut être utilisé pour obtenir des informations sur la requête.@LineBreak 
  Si @#PB_HTTP_Asynchronous a été spécifié, @@HTTPProgress peut être utilisé et @@AbortHTTP 
  doit être utilisé.@LineBreak
  @@HTTPMemory peut être utilisé pour obtenir le résultat sous forme de tampon brut 
  (le tampon brut doit être libéré avec @@FreeMemory).
@LineBreak
@LineBreak
  @@FinishHTTP doit toujours être appelé pour terminer une demande HTTP initialisée 
  avec succès, même si l'appel était synchrone.@LineBreak
   
@Example
@Code
  HttpRequest = HTTPRequest(#PB_HTTP_Get, "https://www.google.com")
  If HttpRequest
    Debug "Status: " + HTTPInfo(HTTPRequest, #PB_HTTP_StatusCode)
    Debug "Réponse: " + HTTPInfo(HTTPRequest, #PB_HTTP_Response)
    
    FinishHTTP(HTTPRequest)
  Else
    Debug "La requête a échoué"
  EndIf
@EndCode

@Example Avec en-têtes
@Code
  NewMap Header$()
  Header$("Content-Type") = "plaintext"
  Header$("User-Agent") = "Firefox 54.0"
  
  HttpRequest = HTTPRequest(#PB_HTTP_Get, "https://www.google.com", "", 0, Header$())
  If HttpRequest
    Debug "Status: " + HTTPInfo(HTTPRequest, #PB_HTTP_StatusCode)
    Debug "Réponse: " + HTTPInfo(HTTPRequest, #PB_HTTP_Response)
    
    FinishHTTP(HTTPRequest)
  Else
    Debug "La requête a échoué"
  EndIf
@EndCode

@Example Requête asynchrone
@Code
  HttpRequest = HTTPRequest(#PB_HTTP_Get, "https://www.purebasic.com/download/PureBasic_Demo.zip", "", #PB_HTTP_Asynchronous)
  If HttpRequest
    Debug "Status: " + HTTPInfo(HTTPRequest, #PB_HTTP_StatusCode)
    
    Repeat
      Progress = HTTPProgress(HttpRequest)
      Select Progress
        Case #PB_HTTP_Success
          Debug "Téléchargement terminé"
          *Buffer = HTTPMemory(HTTPRequest)
          If *Buffer
            Debug "Taille de la mémoire tampon: " + MemorySize(*buffer) ; Ici, le tampon peut être écrit sur le disque ou dans le répertoire
            FreeMemory(*Buffer)
          EndIf
          FinishHTTP(HTTPRequest) ; Appelez toujours FinishHTTP() lorsque la requête est terminée
          Break
          
        Case #PB_HTTP_Failed
          Debug "Échec du téléchargement"
          FinishHTTP(HTTPRequest) ; Appelez toujours FinishHTTP() lorsque la requête est terminée
          Break
          
        Case #PB_HTTP_Aborted
          Debug "Téléchargement interrompu"
          FinishHTTP(HTTPRequest) ; Appelez toujours FinishHTTP() lorsque la requête est terminée
          
        Default
          Debug "Téléchargement en cours: " + Progression ; La progression actuelle du téléchargement, en octets
          Delay(100)
      EndSelect
    ForEver
  Else
    Debug "La création de la requête a échoué"
  EndIf
@EndCode


@SeeAlso
  @@URLEncoder, @@AbortHTTP

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat = HTTPRequestMemory(Type, URL$ [, *Data, TailleData [, Options [, EnTetes()]]])

@Description
  Envoie une requête HTTP avec des données binaires optionnelles. 
   
@Parameter "Type"
  Le type de la requête. Peut être l'une des valeurs suivantes:
@FixedFont
  @#PB_HTTP_Get   : GET request (le paramètre '*Data' sera ignoré)
  @#PB_HTTP_Post  : POST request (le paramètre '*Data' sera envoyé si spécifié)
  @#PB_HTTP_Put   : PUT request (le paramètre '*Data' sera envoyé si spécifié)
  @#PB_HTTP_Patch : PATCH request (le paramètre '*Data' sera envoyé si spécifié)
  @#PB_HTTP_Delete: DELETE request (le paramètre '*Data' sera envoyé si spécifié)
@EndFixedFont

@Parameter "URL$"
  L'URL à interroger.

@OptionalParameter "*Data"
  Adresse mémoire du tampon (buffer) contenant les données à envoyer.

@OptionalParameter "TailleData"
  Taille en octets du tampon.

@OptionalParameter "Options"
  Ce peut être une combinaison des valeurs suivantes:
@FixedFont
  @#PB_HTTP_Asynchronous: Téléchargement de manière asynchrone.
  @#PB_HTTP_NoRedirect  : Ne pas suivre les redirections automatiques.
  @#PB_Http_NoSSLCheck  : Ne pas vérifier si le certificat SSL est valide (peut être utile à des fins de test).
  @#PB_HTTP_HeadersOnly : Ne télécharge que les en-têtes.
  @#PB_HTTP_WeakSSL     : Support des vieux serveurs.
  @#PB_HTTP_Debug       : Affiche les informations de débogage.

@EndFixedFont

@OptionalParameter "EnTetes()"
  Une map d'en-têtes supplémentaires, sous forme de chaînes de caractères. @LineBreak
  Exemple:
@Code
  NewMap Header$()
  Header$("Content-Type") = "octectstream"
  Header$("User-Agent") = "Firefox 54.0"
  Header$("NoParamHeader") = ""  
@EndCode

@ReturnValue
  Renvoie l'identifiant de la requête HTTP si l'appel a été initialisé avec succès, 
  zéro sinon . 

@Remarks
  Sous Linux, vous devez installer 'libcurl' pour que cette commande fonctionne 
  (la plupart des distributions Linux l'ont déjà).
@LineBreak
@LineBreak
   Si des données binaires doivent être envoyées, vous pouvez utiliser @@HTTPRequestMemory().
@LineBreak
@LineBreak
   Cette commande est conçue pour gérer  facilement REST comme une API Web.
@LineBreak
@LineBreak
  @@HTTPInfo peut être utilisé pour obtenir des informations sur la requête.@LineBreak 
  Si @#PB_HTTP_Asynchronous a été spécifié, @@HTTPProgress et @@AbortHTTP peuvent être 
  utilisés.@LineBreak
  @@HTTPMemory peut être utilisé pour obtenir le résultat sous forme de tampon brut 
  (le tampon brut doit être libéré avec @@FreeMemory).
@LineBreak
@LineBreak
  @@FinishHTTP doit toujours être appelé pour terminer une demande HTTP initialisée 
  avec succès, même si l'appel était synchrone.@LineBreak

@Example
@Code
  HttpRequest = HTTPRequestMemory(#PB_HTTP_Get, "https://www.google.com")
  If HttpRequest
    Debug "Status: " + HTTPInfo(HTTPRequest, #PB_HTTP_StatusCode)
    Debug "Réponse: " + HTTPInfo(HTTPRequest, #PB_HTTP_Response)
    
    FinishHTTP(HTTPRequest)
  Else
    Debug "La requête a échoué"
  EndIf
@EndCode

@SeeAlso
  @@HTTPRequest, @@URLEncoder, @@AbortHTTP

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat$ = URLDecoder(URL$ [, Format])

@Description
  Renvoie une URL décodée qui 
  avait été encodée au format 
  HTTP.

@Parameter "URL$"
  L'URL à décoder. 

@OptionalParameter "Format"
  Le format d'encodage de 
  l'URL. @LineBreak
  Peut être une des valeurs 
  suivantes:
@FixedFont
  @#PB_UTF8  (par défaut)
  @#PB_Ascii
@EndFixedFont  

@ReturnValue  
  Renvoie l'URL décodée.
  
@Remarks  
  Une URL ne peut pas contenir 
  certains caractères (comme 
  la tabulation, l'espace, les 
  lettres accentuées etc.) donc 
  il est nécessaire de les encoder, 
  principalement en utilisant le 
  caractère d'échappement "%" 
  suivi d'un chiffre. Si l'URL$ 
  n'était pas encodée, cette 
  fonction n'a aucun effet et 
  renverra l'URL originale.
@LineBreak
@LineBreak
  Voir @InternetLink "http://www.w3schools.com/tags/ref_urlencode.asp" "ici".
  
@Example  
@Code
  Debug URLDecoder("http://www.purebasic.com/test%20with%20space.php")
  ; Affichera "http://www.purebasic.com/test with space.php"
@EndCode

@SeeAlso
  @@URLEncoder
 
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat$ = URLEncoder(URL$ [, Format])

@Description
  Renvoie une URL encodée au format HTTP. 

@Parameter "URL$"
  L'URL à encoder.

@OptionalParameter "Format"
  Le format de l'URL avant encodage. Peut être une des valeurs suivantes:
@FixedFont
  @#PB_UTF8  (par défaut)
  @#PB_Ascii
@EndFixedFont  
  
@ReturnValue  
  Renvoie l'URL encodée.

@Remarks
  Une URL ne peut pas contenir 
  certains caractères (comme la 
  tabulation, l'espace, les lettres 
  accentuées etc.) donc il est 
  nécessaire de les encoder, 
  principalement en utilisant 
  le caractère d'échappement "%" 
  suivi d'un chiffre. Si l'URL$ 
  n'était pas encodée, cette 
  fonction n'a aucun effet et 
  renverra l'URL originale.
@LineBreak
@LineBreak
  Notez que cette fonction suit le standard RFC 3986 et donc certains caractères ne seront 
  pas encodés, car ces caractères doivent rester en clair dans certaines URLs.
  Il s'agit des caractères suivants (liste non exhaustive):
@FixedFont
  "-" | "_" | "." | "!" | "~" | "*" | "'" | "(" | ")" | 
  ";" | "/" | "?" | ":" | "@" | "&" | "=" | "+" | "$" |
  "," | """ | "#" | "%" | 
@EndFixedFont  

  Toutefois, si vous avez besoin de les coder, il vous faudra utiliser le tableau suivant:
  https://www.w3schools.com/tags/ref_urlencode.asp @InternetLink "https://www.w3schools.com/tags/ref_urlencode.asp" "ici".
@LineBreak
@LineBreak
  Par exemple en UTF8:
@FixedFont
   "-" -> %2D | "_" -> %5F | "." -> %2E | "!" -> %21 | "~" -> %7E | 
   
   "*" -> %2A | "'" -> %27 | "(" -> %28 | ")" -> %29 | ";" -> %3B | 
   
   "/" -> %2F | "?" -> %3F | ":" -> %3A | "@" -> %40 | "&" -> %26 | 
   
   "=" -> %3D | "+" -> %2B | "$" -> %24 | "," -> %2C | """ -> %22 | 
   
   "#" -> %23 | "%" -> %25 |  
@EndFixedFont

  
@Example
@Code
  Debug URLEncoder("http://www.purebasic.com/test with space.php")
  ; Affichera "http://www.purebasic.com/test%20with%20space.php"
  
  Debug URLEncoder("http://www.ok.com value=zzz ?yyy/")
  ; Affichera "http://www.ok.com%20value=zzz%20?yyy/"
@EndCode

@SeeAlso
  @@URLDecoder
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Resultat$ = SetURLPart(URL$, Parametre$, Valeur$)

@Description
  Change une partie d'une URL. 
  
@Parameter "URL$"  
  L'URL à modifier.
@LineBreak
@LineBreak
  Une URL$ peut contenir 
  des paramètres. 
  @LineBreak
  C'est utile quand un langage 
  de script est utilisé sur 
  le serveur Web (comme PHP). 
  @LineBreak
  La syntaxe est la suivante: 
  http://www.purebasic.com/index.php3?test=1.
  @LineBreak 
  Ici le paramètre se nomme 
  "test" et sa valeur associée 
  est "1". 
@LineBreak
@LineBreak  
  Les informations fournies 
  dans "URL$" doivent (au 
  minimum), avoir la forme suivante: 
  "http://www.purebasic.com"
  
@Parameter "Parametre$"
  La valeur à modifier. 
@LineBreak
@LineBreak
  Les paramètres ne sont pas 
  sensibles à la casse.
@LineBreak
@LineBreak  
  De plus, il peut prendre l'une 
  des valeurs prédéfinies suivantes 
  pour accéder facilement à une 
  partie standard de l'URL:
@FixedFont
  @#PB_URL_Protocol  : Modifie le protocole de l'URL$
  @#PB_URL_Site      : Modifie le site de l'URL$
  @#PB_URL_Port      : Modifie le port de l'URL$ (s'il existe)
  @#PB_URL_Parameters: Modifie tous les paramètres de l'URL$
  @#PB_URL_Path      : Modifie le chemin de l'URL$
  @#PB_URL_User      : Modifie le nom d'utilisateur de l'URL$ (s'il existe)
  @#PB_URL_Password  : Modifie le mot de passe de l'URL$ 
                      (s'il existe et si un utilisateur' existe aussi)
@EndFixedFont

@Parameter "Valeur$"
  La valeur à affecter au paramètre 
  donné, ou une partie d'une URL.
  
@ReturnValue  
  Renvoie l'URL modifiée.

@Example  
@Code
  URL$ = "http://www.test.com/hello.php"
  
  URL$ = SetURLPart(URL$, #PB_URL_Protocol, "ftp")
  URL$ = SetURLPart(URL$, #PB_URL_Site, "www.purebasic.com")
  URL$ = SetURLPart(URL$, #PB_URL_Port, "80")
  URL$ = SetURLPart(URL$, #PB_URL_Path, "english/index.php")
  URL$ = SetURLPart(URL$, #PB_URL_User, "user")
  URL$ = SetURLPart(URL$, #PB_URL_Password, "pass")
  URL$ = SetURLPart(URL$, "test", "1")
  URL$ = SetURLPart(URL$, "ok", "2")
  
  Debug URL$ ; Affichera "ftp://user:pass@www.purebasic.com:80/english/index.php?test=1&ok=2"
@EndCode

@SeeAlso
  @@GetURLPart, @@URLEncoder
  
@SupportedOS
