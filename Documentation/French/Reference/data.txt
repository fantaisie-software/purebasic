@Title Data

@FormatIf HTML
  <p>&nbsp;</p>
  <center> 
  <table WIDTH="96%"  border="1" cellspacing="0" bordercolordark="white" bordercolorlight="black">
  <caption> <b>Résumé des fonctions:</b> </caption>
  <tr>
    <td align="center" vAlign="center" nowrap><a href="#DataSection"><u>DataSection</u></a></td>
    <td align="center" vAlign="center" nowrap><a href="#EndDataSection"><u>EndDataSection</u></a></td>
    <td align="center" vAlign="center" nowrap><a href="#Data"><u>Data</u></a></td>
  </tr>
    <tr>
    <td align="center" vAlign="center" nowrap><a href="#Restore"><u>Restore</u></a></td>
    <td align="center" vAlign="center" nowrap><a href="#Read"><u>Read</u></a></td>
    <td align="center" vAlign="center" nowrap><u>...</u></td>
  </tr>
    </table>
  </center>
  <p>&nbsp;</p>
@FormatEndIf

@Section Introduction
  PureBasic autorise l'utilisation de données pour stocker des blocs d'informations 
  prédéfinies dans votre programme. Ceci est utile pour disposer de valeurs par 
  défaut (messages textuels par exemple) ou dans un jeu pour définir le cheminement 
  prédéfini d'un sprite.
  @LineBreak
  @LineBreak
  @Keyword "DataSection" doit être placé en tête du bloc de données. Tous les labels 
  et composants data sont stockés dans cette partie data dont l'accès est plus rapide 
  que la zone de code. @Keyword "Data" est utilisé pour entrer des données. 
  @Keyword "EndDataSection" doit être spécifié si du code à exécuter est situé après.
  Il est intéressant de pouvoir placer plusieurs zones de données à différents 
  endroits du code source. Les données peuvent être chargées à l'aide des commandes 
  @Keyword "Restore" et @Keyword "Read". 
  @LineBreak
  @LineBreak
  Ces fonctions ne doivent pas être utilisées dans un thread.
  
; -------------------------------------------------------------------------------------------------
@FormatIf HTML
<br>
<br>
<hr>
<a name="DataSection"></a>
@FormatEndIf
@Syntax
  @Keyword DataSection

@Description
  Début d'une zone de données. 
  
@Example
@Code
  DataSection
    DonneesNumeriques:    
      Data.i 100, 200, -250, -452, 145
      
    DonneesTexte:
      Data.s "Bonjour", "Qu'est-ce", "que ", "c'est ?"
  EndDataSection
@EndCode 

; -------------------------------------------------------------------------------------------------
@FormatIf HTML
<br>
<br>
<hr>
<a name="EndDataSection"></a>
@FormatEndIf  
@Syntax
  @Keyword EndDataSection

@Description
  Fin d'une zone de données. 
  
@Example
@Code
  DataSection
    DonneesNumeriques:    
      Data.l 100, 200, -250, -452, 145
      
    DonneesTexte:
      Data.s "Bonjour", "Qu'est-ce", "que ", "c'est ?"
  EndDataSection
@EndCode 
; -------------------------------------------------------------------------------------------------
@FormatIf HTML
<br>
<br>
<hr>
<a name="Data"></a>
@FormatEndIf
@Syntax
  @Keyword Data.NomType

@Description
  Définit les données. Le type peut être choisi 
  parmi les @ReferenceLink "variables" "types natifs" 
  (integer, long, word, byte, ascii, unicode, 
  float, double, quad, character, string). 
  Un nombre quelconque de données peut être 
  placé sur une même ligne, chacune étant 
  séparée par une virgule. 
  
@Example
@Code
  DataSection 
    Divers:
  Data.l 100, 200, -250, -452, 145
  Data.s "Bonjour", "Qu'est", "ce que ", "c'est ?"
  EndDataSection
@EndCode

  Pour les programmeurs chevronnés: il est aussi 
  possible de mettre l'@ReferenceLink "memory" "adresse" 
  d'une @ReferenceLink "procedures" "procédure"
  ou d'un @ReferenceLink "memory" "label" avec 
  @Keyword "Data" si le type 'entier' (integer .i) 
  est utilisé. 
  Sur un système 32 bits les adresses seront stockées 
  sur 4 octets et sur 8 octets sur un système 64 bits.
  @LineBreak
  Par exemple, des tables de fonctions virtuelles 
  peuvent être créées facilement.

@Example
@Code
  Procedure Max(Nombre, Nombre2)
  EndProcedure
  
  Etiquette:
    
  DataSection
    Divers:
    Data.i ?Etiquette, @Max()
  EndDataSection
@EndCode


@Example
@Code
  Interface MonObjet
     FaireCeci()
     FaireCela()
  EndInterface

  Procedure Ceci(*Self)
     MessageRequester("MonObjet", "Ceci")
  EndProcedure

  Procedure Cela(*Self)
     MessageRequester("MonObjet", "Cela")
  EndProcedure

  m.MonObjet = ?VTable

  m\FaireCeci()
  m\FaireCela()


  DataSection
     VTable:
        Data.i ?Procedures
     Procedures:
        Data.i @Ceci(), @Cela()
  EndDataSection
@EndCode

; -------------------------------------------------------------------------------------------------
@FormatIf HTML
<br>
<br>
<hr>
<a name="Restore"></a>
@FormatEndIf
@Syntax
  @Keyword Restore label

@Description
  Ce mot clef permet de placer un indicateur 
  de début de zone pour la commande 
  @Keyword "Read". Le label utilisé
  par cette commande doit être déclaré dans 
  le bloc @Keyword "DataSection", car il sera 
  déplacé lors de la création de l'exécutable.
   
@Example
@Code
  Restore DonneesTexte
  Read.s MonPremierTexte$
  Read.s MonSecondTexte$
  
  Restore DonneesNumeriques
  Read.l a
  Read.l b
  
  Debug MonPremierTexte$
  Debug a
  
  End  

  DataSection
  
    DonneesNumeriques:    
      Data.l 100, 200, -250, -452, 145
      
    DonneesTexte:
      Data.s "Bonjour", "Qu'est-ce", "que ", "c'est ?"
  EndDataSection
@EndCode      
      
; -------------------------------------------------------------------------------------------------
@FormatIf HTML
<br>
<br>
<hr>
<a name="Read"></a>
@FormatEndIf
@Syntax
    @Keyword Read[.<type>] <variable>

@Description
  Lit la donnée suivante et par défaut, la donnée suivante est la première donnée 
  déclarée. @LineBreak
  Le pointeur peut être modifié en utilisant la commande @Keyword "Restore". @LineBreak  
  <type> est le type de données à lire et s'il n'est pas spécifié 
  le @ReferenceLink "define" "type par défaut" qui est 'Integer' sera utilisé.
  Il est toutefois conseillé d'utiliser le type ad-hoc afin d'éviter le message 
  d'erreur qui apparaîtra quand vous lirez des datas de type 'String' et pour éviter 
  une confusion de type 'Integer' qui est un type 'Long' pour les compilateurs 
  32 bits et qui est un type 'Quad' pour les compilateurs 64 bits.
  
@Example
@Code
  Restore DonneesTexte
  Read.s MonPremierTexte$
  
  Restore DonneesNumeriques
  Read a   ; Attention, le compilateur lira un 'Integer' (Un 'Long' en 32 bits ou un 'Quad' en 64 bits)
  Read.q b
  Read c   ; Attention, le compilateur lira un 'Quad' si c'est un compilateur 64 bits même si les données sont 'Long' !
  Read.l d
  
  Debug MonPremierTexte$; Affiche Hello
  Debug a  ; Affiche 100
  Debug b  ; Affiche 111111111111111111
  Debug c  ; Attention, l'affichage dépend du compilateur !  : 200 en 32 bits ou 1288490189000 en 64 bits
  Debug d  ; Idem : 300  en 32 bits ou 400 en 64 bits
  
  End  

  DataSection
  
    DonneesNumeriques:    
      Data.i 100
      Data.q 111111111111111111
      Data.l 200, 300, 400

    DonneesTexte:
      Data.s "Bonjour", "Qu'est-ce", "que ", "c'est ?"
  EndDataSection
@EndCode 

; -------------------------------------------------------------------------------------------------
@FormatIf HTML
<br><hr><br>
@FormatEndIf
