;
;     Console library documentation
;
;      (c) 2020 - Fantaisie Software
;

@Library Console

@Overview
  Diese Bibliothek ermöglicht dem Programmierer das Schreiben von Applikationen im Konsolen-Modus.
  Dieser wird benutzt, um kleine Programme zu erstellen, die keine (grafische) Benutzer-Schnittstelle
  benötigen oder über die Eingabeaufforderung (Befehlszeile, ggf. in einem Skript) benutzt werden sollen. 
  Die Konsolen-Befehle helfen dem
  Programmierer auch beim Debuggen eines Programms, indem einige Informationen auf der Konsole
  ausgegeben werden können, ohne den Programmablauf anzuhalten.
@LineBreak
@LineBreak
  Wenn Ihre Applikation eine echte Konsolen-Anwendung ist (und nicht eine GUI-Applikation, welche
  manchmal eine Konsole öffnet), dann denken Sie daran, das Executable-Format vor dem Kompilieren
  auf 'Console' einzustellen.
@LineBreak
@LineBreak
  Sie sollten mit dem @@OpenConsole Befehl beginnen, da Sie diesen Befehl zum
  Öffnen einer Konsole (Charakter-Modus) benutzen müssen, bevor Sie andere Befehle dieser Bibliothek
  verwenden.

@OS Windows
  @LineBreak
  @LineBreak
  Bitte beachten Sie bei der Erstellung von Konsolenprogrammen mit PureBasic, dass Sie dafür trotzdem
  Windows 95 oder neuer benötigen. Die Programme dürfen nur von der Windows-Eingabeaufforderung aus
  gestartet werden. Sie sind keine wirklichen MSDOS-Programme!

@CommandList

@ExampleFile All Console.pb

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function ClearConsole()

@Description
  Löscht den gesamten Konsolen-Inhalt mittels der aktuellen Hintergrundfarbe. Die Hintergrundfarbe
  wird mit dem Befehl @@ConsoleColor festgelegt.
@LineBreak
@LineBreak
  Die Konsole muss sich im Grafik-Modus befinden, siehe hierzu @@EnableGraphicalConsole.

@NoParameters
@NoReturnValue

@Example
@Code
  If OpenConsole()
    EnableGraphicalConsole(1)

    PrintN("Diesen Text werden Sie nie sehen.")
    ClearConsole()

    PrintN("Drücken Sie Return zum Beenden.")
    Input()
  EndIf
@EndCode

@SeeAlso
  @@EnableGraphicalConsole, @@ConsoleColor

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function CloseConsole()

@Description
  Schließt die zuvor mittels @@OpenConsole geöffnete Konsole. 
@LineBreak
@LineBreak
  Sobald die Konsole geschlossen wurde, können keine Funktionen aus dieser Bibliothek mehr benutzt 
  werden, außer Sie öffnen erneut eine Konsole. Die Konsole wird automatisch geschlossen, wenn
  das Programm endet.
@LineBreak
  Ohne Effekt auf Linux und MacOS.
  
@NoParameters
@NoReturnValue

@Example
@Code
  For i = 0 To 4
    If OpenConsole()
      PrintN("Dies ist Konsole #"+Str(i))
      PrintN("Druecken Sie Return zum Schliessen der Konsole.")
      Input()
      CloseConsole()
    EndIf
  Next
@EndCode

@SeeAlso
  @@OpenConsole

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function ConsoleError(Nachricht$)

@Description
  Schreibt die (Fehler-) Nachricht (plus einen Zeilenumbruch) auf die Standard-Fehlerausgabe des Programms.
  Diese Ausgabe kann zum Beispiel mit dem @@ReadProgramError Befehl der
  @LibraryLink "process" "Process" Bibliothek gelesen werden.

@Parameter "Nachricht$"
  Der auszugebende String.

@NoReturnValue

@SeeAlso
  @@Print, @@PrintN

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function ConsoleTitle(Titel$)

@Description
  Ändert den Konsolentitel auf den angegebenen 'Titel$'. Der Konsolentitel wird
  typischerweise in der Titelzeile des Konsolen-Fensters angezeigt (wenn Sie die Konsole
  in einer grafischen Umgebung wie Ihrem Desktop sehen).

@OS Windows
@LineBreak
@LineBreak
  Unter Windows ist der Konsolentitel auch der Text, welcher in der Startleiste und
  im Taskmanager für Ihre Konsolen-Anwendung angezeigt wird.
@EndOS

@Parameter "Titel$"
  Der neue Titel für die Konsole.

@NoReturnValue

@Example
@Code
  If OpenConsole()
    ConsoleTitle("Das ConsoleTitle Beispielprogramm")
    PrintN("Druecken Sie Return zum Beenden.")
    Input()
  EndIf
@EndCode

@SeeAlso
  @@EnableGraphicalConsole

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function ConsoleColor(Zeichenfarbe, Hintergrundfarbe)

@Description
  Ändert die von der Textanzeige benutzten Farben. Alle nach diesem Befehl ausgegebenen
  Zeichen benutzen die neu eingestellten Farben.

@Parameter "Zeichenfarbe"
  Die für die Zeichen zu verwendende Farbe. Die Farbwerte reichen von 0 bis 15, welche
  die im Konsolen-Modus verfügbaren 16 Farben darstellen.
@FixedFont
  0 - Schwarz (Standard-Hintergrund)
  1 - Blau
  2 - Grün
  3 - Türkis
  4 - Rot
  5 - Magenta
  6 - Braun
  7 - Hellgrau (Standard-Vordergrund)
  8 - Dunkelgrau
  9 - Hellblau
  10 - Hellgrün
  11 - Helles türkis
  12 - Hellrot
  13 - Helles Magenta
  14 - Gelb
  15 - Weiß
@EndFixedFont

@Parameter "Hintergrundfarbe"
  Die Farbe für den Zeichen-Hintergrund. Die Werte sind die gleichen wie für die Zeichenfarbe.

@NoReturnValue
    
@Example
@Code
  If OpenConsole()
    For Foreground = 0 To 15
      For Background = 0 To 15
        ConsoleColor(Foreground, Background)
        Print(Right(Hex(Background), 1))
      Next
        
      PrintN("")
    Next
    
    ConsoleColor(7, 0)
    PrintN("Druecken Sie Return zum Beenden.")
    Input()
  EndIf
@EndCode
@Image consolecolor.png

@SeeAlso
  @@EnableGraphicalConsole

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function EnableGraphicalConsole(Status)

@Description
  Ändert die Art und Weise, wie die Zeichen auf der Konsole dargestellt werden, zwischen einem Grafik-
  und einem reinen Text-Modus.

@Parameter "Status"
  Ist 'Status' gleich 1, dann wird die Konsole in den Grafikmodus umgeschalten. Wird für 
  'Status' dagegen 0 angegeben, dann wird die Konsole zurück in den Textmodus umgeschalten.

@NoReturnValue

@Remarks
  Der Standardmodus der Konsole ist der Textmodus. Dies bedeutet, dass der Text nirgends in
  der Konsole positioniert werden kann, aber Umleitungen ("Redirection" über Pipes) korrekt
  arbeiten.
@LineBreak
@LineBreak
  Wenn der Grafikmodus aktiv ist, dann sind Befehle wie @@ClearConsole oder
  @@ConsoleLocate verfügbar und der Text kann überall im Konsolenfenster 
  positioniert werden. Dies ermöglicht Konsolenspiele oder "text-only" (nur Text) Anwendungen, 
  was für Remote-Anwendungen (aus der Ferne gesteuert) über Telnet oder SSH nützlich sein kann.
@LineBreak
@LineBreak
  Die Umleitung ("Redirection" über Pipes) arbeitet nicht korrekt, wenn der Grafikmodus aktiv
  ist.

@Example
@Code
  If OpenConsole()
    EnableGraphicalConsole(1)
    ConsoleLocate(7, 8)
    PrintN("Druecken Sie Return zum Beenden.")
    Input()
  EndIf
@EndCode

@SeeAlso
  @@ConsoleLocate, @@ConsoleColor, @@ClearConsole

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function String$ = Inkey()

@Description
  Gibt einen "ein Zeichen"-String zurück, wenn eine Taste während dem Aufruf von Inkey()
  gedrückt wurde. Der Programmablauf wird dabei nicht unterbrochen (angehalten). 
@LineBreak
@LineBreak
  Wenn Sonderzeichen (nicht-ASCII, wie z.B. Cursortasten etc.) abgefragt werden sollen,
  dann sollte @@RawKey nach dem Inkey() aufgerufen werden.

@NoParameters

@ReturnValue
  Gibt einen String mit dem gedrückten Zeichen zurück, wenn es keine spezielle Taste war,
  andernfalls einen leeren String.

@Example
@Code
  If OpenConsole()
    PrintN("Druecken Sie Escape zum Beenden.")
  
    Repeat
      KeyPressed$ = Inkey()
      
      If KeyPressed$ <> ""
        
        PrintN("Sie drueckten: " + KeyPressed$)
        PrintN("Diese hat einen Roh-Code von: "+Str(RawKey()))
        
      ElseIf RawKey()
      
        PrintN("Sie haben eine Nicht-Ascii Taste gedrueckt.")
        PrintN("Diese hat einen Roh-Code von: "+Str(RawKey()))
        
      Else
        Delay(20) ; Wir verbrauchen nicht die gesamte CPU-Leistung, da wir uns auf einem Multitasking-OS befinden
      EndIf
    
    Until KeyPressed$ = Chr(27) ; Wartet, bis Escape gedrückt wird
  EndIf
@EndCode

@Remarks
  Die in dieser Beschreibung aufgeführten ASCII-Codes und numerischen werte können sich -
  je nach der von Ihnen beim Booten für die Tastatureingabe eingestellten "Code-Page" - 
  unterscheiden. Jedoch sollte das Konzept das Gleiche sein, und Sie können das oben
  genannte Beispiel verwenden, um die wirklichen Werte für Ihr System zu ermitteln.
@LineBreak
@LineBreak
  Eine Tabelle mit ASCII-Codes finden Sie @ReferenceLink "ascii" "hier".

@SeeAlso
  @@RawKey, @@Input

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function String$ = Input()

@Description
  Ermöglicht dem Programm, eine ganze Zeichenkette zu erfassen. Dieser Befehl hält die
  Programmausführung an und wartet bis der Benutzer die Return-Taste drückt. 

@NoParameters

@ReturnValue
  Gibt den String zurück, welchen der Anwender vor dem Drücken der Return-Taste eingegeben hat.

@Remarks
  Wenn die Konsole sich im Grafikmodus befindet (siehe @@EnableGraphicalConsole), 
  kann die Eingabezeile (Zeichenkette) nicht länger als die Konsolen-Breite sein (es werden keine weiteren
  Zeichen akzeptiert, wenn die Zeile zu lang wird).
@LineBreak
@LineBreak
  Im nicht-grafischen Modus (Text-Modus) wird ein spezieller Rückgabewert @#PB_Input_Eof 
  (entspricht Chr(4)) empfangen, wenn der Anwender ein einfaches Strg+D in der Konsole eingibt oder wenn
  das Ende einer in die Eingabe des Programms umgeleiteten Datei erreicht wurde.
@Os Windows
  Zwecks Kompatibilität mit anderen Konsolen-Anwendungen unter Windows wird @#PB_Input_Eof 
  auch empfangen, wenn Strg+Z in der Konsole eingegeben wurde.
@EndOs

@LineBreak
@LineBreak
  Wenn keine zeilenbasierte oder eine "rohe" Eingabe benötigt wird, dann kann @@ReadConsoleData 
  im nicht-grafischen Modus verwendet werden.

@Example
@Code
  If OpenConsole()
    Print("Geben Sie Ihren Namen ein und druecken Sie Return: ")
    Name$ = Input()

    PrintN("Hallo " + Name$ + ", nett Sie zu treffen.")
    PrintN("Druecken Sie Return zum Beenden.")
    Input()
  EndIf
@EndCode

@SeeAlso
  @@Inkey, @@RawKey

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function ConsoleLocate(x, y)

@Description
  Bewegt den Cursor an die angegebene Position, in Zeichen-Koordinaten. Jeder von
  Ihnen nach diesem Befehl ausgegebene Text beginnt an den angegebenen Koordinaten.

@Parameter "x"
  Die horizontale Position in der Konsole (beginnend bei 0), zu der der Cursor bewegt werden soll.

@Parameter "y"
  Die vertikale Position in der Konsole (beginnend bei 0), zu der der Cursor bewegt werden soll.

@NoReturnValue

@Remarks
  Die Konsole muss sich im Grafikmodus befinden, siehe @@EnableGraphicalConsole.

@Example
@Code
  If OpenConsole()
    EnableGraphicalConsole(1)
    
    For i = 0 To 200
      ConsoleLocate(Random(79), Random(24))
      Print("*")
    Next
    
    ConsoleLocate(30, 10)
    PrintN("Druecken Sie Return zum Beenden.")
    Input()
  EndIf
@EndCode

@SeeAlso
  @@EnableGraphicalConsole

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function ConsoleCursor(Höhe)

@Description
  Ändert die Anzeige des Cursors, welcher ein Indikator dafür ist, wo das nächste darzustellende
  Zeichen ausgegeben wird. Dieser Befehl ermöglicht Ihnen, die Höhe des Cursors zu ändern.

@Parameter "Höhe"
  Die neue Höhe des Cursors. Dieser Wert kann Null (für einen unsichtbaren Cursor) oder
  ein Bereich von 1 bis 10 für die Höhe des Cursors sein. Aktuell sind drei Werte verfügbar:

@FixedFont
  1  : Cursor als Unterstrich (Standard)
  5  : Cursor mittlerer Höhe
  10 : Cursor voller Höhe
@EndFixedFont

@NoReturnValue

@Remarks
@OS Windows
  Standardmäßig ist der Cursor in Konsolen unter dem Windows OS ein blinkender Unterstrich.
  Beachten Sie, dass Sie möglicherweise das Konsolenfenster auf volle Bildschirmgröße bringen
  müssen, um die tatsächliche Wirkung dieses Befehls zu sehen.
  @LineBreak
  @LineBreak
@EndOS
  Die Konsole muss sich im Grafikmodus befinden, siehe @@EnableGraphicalConsole.

@Example
@Code
  If OpenConsole()
    EnableGraphicalConsole(1)

    For CursorHeight = 0 To 10
      ConsoleCursor(CursorHeight)
      PrintN("Druecken Sie Return zum Vergroessern der Cursors")
      Input()
    Next
    
    PrintN("Druecken Sie Return zum Beenden")
    Input()
  EndIf
@EndCode

@SeeAlso
  @@EnableGraphicalConsole

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Print(Text$)

@Description
  Zeigt den angegebenen String 'Text$' in der Konsole an.

@Parameter "Text$"
  Der anzuzeigende Text. Im @Link "EnableGraphicalConsole" "Grafikmodus" 
  darf die Länge des Strings die Breite der Konsole nicht überschreiten, andernfalls wird das Ende des 
  Strings abgeschnitten. 

@NoReturnValue

@Remarks
  Im @Link "EnableGraphicalConsole" "Grafikmodus" ist es möglich, die aktuelle Cursor-Position mit dem 
  Befehl @@ConsoleLocate zu ändern. Um das Aussehen des Strings bei der Ausgabe 
  zu ändern, sollte der Befehl @@ConsoleColor verwendet werden.
@LineBreak
@LineBreak
  Der Cursor wird auf das nächste Zeichen nach dem Ende des ausgegebenen Strings bewegt.
  Bei der nächsten Anwendung von Print() beginnt die Ausgabe also unmittelbar hinter dem zuletzt 
  ausgegebenen String. Um den Cursor nach der Ausgabe automatisch auf die nächste Zeile springen zu lassen, 
  verwenden Sie den Befehl @@PrintN. 
@LineBreak
@LineBreak
  Wenn Sie Text über den rechten Rand des Konsolenfensters hinaus ausgeben, wird dieser automatisch umgebrochen
  und am linken Rand der nächsten Zeile fortgesetzt. Wenn Ihre Textausgabe über den unteren Rand
  des Konsolenfensters hinausgeht, wird das Konsolenfenster seinen Inhalt automatisch nach oben
  scrollen.
@LineBreak
@LineBreak
  Um Roh-Daten auf einer nicht-grafischen Konsole (für Pipe-Kommunikation) auszugeben, kann
  @@WriteConsoleData verwendet werden.
@LineBreak
@LineBreak
  Hinweis: Im Konsolenfenster werden im ASCII-Modus, ohne weitere Maßnahmen (z.B. Nutzung des WinAPI-Befehls CharToOem_()),
  deutsche Umlaute oder Sonderzeichen (z.B. ä, ö, ü, ß) nicht korrekt dargestellt.

@Example
@Code
  If OpenConsole()
    Print("Dies ist tatsaechlich ein langer String.")
    Print("Sie sehen, dass dieser String an das Ende des vorherigen anschliesst?")
    Print("Dies liegt daran, dass der Cursor an das Ende des Strings bewegt wird und nicht auf eine neue Zeile.")
    Print("Hoffentlich wird der Text jetzt auch korrekt umgebrochen.")

    PrintN("")
    PrintN("")
    PrintN("Druecken Sie Return zum Beenden.")
    Input()
  EndIf
@EndCode

@SeeAlso
  @@PrintN, @@Input

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function PrintN(Text$)

@Description
  Zeigt den angegebenen 'Text$' in der Konsole an und fügt einen Zeilenumbruch hinzu.

@Parameter "Text$"
  Der vor dem Zeilenumbruch darzustellende Text.
  Im @Link "EnableGraphicalConsole" "Grafikmodus" darf die Länge des Strings die Breite der 
  Konsole nicht überschreiten, andernfalls wird das Ende des Strings abgeschnitten. 

@NoReturnValue

@Remarks
  Im @Link "EnableGraphicalConsole" "Grafikmodus" ist es möglich, die aktuelle Cursor-Position mit dem 
  Befehl @@ConsoleLocate zu ändern. Um das Aussehen des Strings bei der Ausgabe 
  zu ändern, sollte der Befehl @@ConsoleColor verwendet werden.
@LineBreak
@LineBreak
  Der Cursor wird nach dem Ende des Strings auf den Anfang der nächsten Zeile bewegt.
  Wenn Sie Text über den rechten Rand des Konsolenfensters hinaus ausgeben, wird dieser
  automatisch umgebrochen und am linken Rand der nächsten Zeile fortgesetzt. Wenn Ihre
  Textausgabe über den unteren Rand des Konsolenfensters hinausgeht, wird das
  Konsolenfenster seinen Inhalt automatisch nach oben scrollen.
  Möchten Sie den automatischen Zeilenvorschub vermeiden und die Ausgabe direkt nach
  dem letzten Zeichen fortsetzen, dann verwenden Sie den Befehl @@Print.
@LineBreak
@LineBreak
  Um Roh-Daten auf einer nicht-grafischen Konsole (für Pipe Kommunikation) auszugeben, kann
  @@WriteConsoleData verwendet werden.
@LineBreak
@LineBreak
  Hinweis: Im Konsolenfenster werden im ASCII-Modus, ohne weitere Maßnahmen (z.B. Nutzung des WinAPI-Befehls CharToOem_()),
  deutsche Umlaute oder Sonderzeichen (z.B. ä, ö, ü, ß) nicht korrekt dargestellt.

@Example
@Code
  If OpenConsole()
    PrintN("Dies ist tatsaechlich ein langer String.")
    PrintN("Sie sehen, dass dieser String nicht an das Ende des vorherigen anschliesst?")
    PrintN("Dies liegt daran, dass der Cursor nach dem Ende des Strings an den Anfang der naechsten Zeile bewegt wird.")

    PrintN("Druecken Sie Return zum Beenden.")
    Input()
  EndIf
@EndCode

@SeeAlso
  @@Print, @@Input

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = OpenConsole([Titel$] [, Modus]])

@Description
  Öffnet ein Konsolen-Fenster. Diese Funktion muss vor den anderen Befehlen aus dieser Bibliothek
  aufgerufen werden. Nur eine Konsole kann zur gleichen Zeit in einem PureBasic Programm geöffnet
  werden. 

@OptionalParameter "Titel$"
  Der Titel für das neue Konsolen-Fenster. Auf Windows ermöglicht das Angeben eines Titels das
  Speichern benutzerdefinierter Konsolen-Parameter, wie Zeichensatz, Farbe, etc. Dies hat keinen
  Effekt auf anderen OS.
  
@OptionalParameter "Modus"
  Der für die Konsolen-Ausgabe zu verwendende Modus. Dies kann einer der folgenden Werte sein:
@FixedFont
  @#PB_UTF8: Strings verwenden das UTF-8 Format, wenn sie auf der Konsole ausgegeben werden (Standard).
  @#PB_Ascii: Strings verwenden das ASCII-Format, wenn sie auf der Konsole ausgegeben werden.
  @#PB_Unicode: Strings verwenden das UTF-16 Format, wenn sie auf der Konsole ausgegeben werden.
               Dies kann auf Windows nützlich sein, wenn String-Umleitung verwendet wird, und das
               Zielprogramm einen UTF-16-Eingang erwartet. Hat keine Auswirkungen auf Linux oder
               OS X (verwenden UTF-8).
@EndFixedFont

@ReturnValue
  Ist das Ergebnis gleich 0, ist das Öffnen fehlgeschlagen und alle weiteren Aufrufe von 
  Console-Befehlen müssen deaktiviert werden.

@Remarks
  Die Konsole kann mittels dem @@CloseConsole Befehl geschlossen werden.
@LineBreak
@LineBreak
  Mit @@EnableGraphicalConsole kann die Konsole zwischen 
  Text- und Grafikmodus umgeschalten werden.
@LineBreak
@LineBreak
  Unter Microsoft Windows gibt es zwei verschiedene "Executable" Formate (von ausführbaren
  Programmen): Win32 und Console. Wenn Sie eine Standard-Konsolen-Applikation, wie 'Dir', 'Del'
  etc. erstellen möchten, müssen Sie das Executable im Format "Console" (Menüeintrag
  @ReferenceLink "ide_compiler" "Compiler-Optionen" im PureBasic-Editor) erstellen.
@LineBreak
@LineBreak
  Auf Linux und OS X gibt es kein spezielles Konsolen-Format, jedoch wird das Einstellen
  der Compiler-Option auf 'Console' automatisch ein Terminal-Fenster öffnen, wenn Sie Ihr
  Programm aus der IDE heraus starten.

@Example
@Code
  OpenConsole()
  PrintN("Warte 5 Sekunden vor dem Beenden...")
  Delay(5000)
@EndCode

@SeeAlso
  @@CloseConsole, @@EnableGraphicalConsole  

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = ReadConsoleData(*Puffer, Größe)

@Description
  Liest "Roh-Eingaben" aus der Konsole. Dieser Befehl wird nur im nicht-grafischen Modus unterstützt.
  Er kann zum Einlesen von nicht zeilenbasierten Daten verwendet werden, oder zum Einlesen von
  text-ähnlichen Dateien, welche über eine Pipe an das Programm umgeleitet wurden.

@Parameter "*Puffer"
  Der Speicherpuffer, in welchen die Daten gelesen werden sollen.

@Parameter "Größe"
  Der maximalen Umfang (in Bytes) an zu lesenden Daten.

@Returnvalue
  Gibt die Anzahl an Bytes zurück, welche gerade von der Eingabe eingelesen wurden.
  Wenn Null zurückgegeben wird, bedeutet dies, dass keine weiteren Eingaben zu lesen
  sind (ein 'EOF' - Ende der Datei wurde empfangen).

@Remarks
  Dieser Befehl wartet, bis es einige zu lesende Eingaben gab. Er kehrt nur ohne gelesene Daten
  zurück, wenn ein Fehler oder eine EOF ("End of file" - Ende der Datei) Bedingung auftrat.

@Example
@Code
  ; Dies liest ein übergebenes Bild von der Konsole und stellt dieses in einem Fenster dar.
  ; Kompilieren Sie diesen Code in ein Executable und starten dieses wie folgt "myexe < image.bmp"
  ;
  ; (setzen Sie "Executable-Format" auf "Console" in the Compiler-Optionen!)
  ; (funktioniert nur mit Bitmaps und Icons, außer Sie nutzen einen Image Decoder)
  ;
  OpenConsole()
  TotalSize = 0
  BufferFree = 10000
  *Buffer = AllocateMemory(BufferFree)
  
  Repeat
    ReadSize = ReadConsoleData(*Buffer+TotalSize, BufferFree) ; liest einen Block an Daten
    TotalSize + ReadSize
    BufferFree - ReadSize
    If BufferFree < 100  ; verändert die Buffergröße, wenn diese nicht groß genug ist
      BufferFree = 10000
      *Buffer = ReAllocateMemory(*Buffer, TotalSize+10000)
    EndIf
  Until ReadSize = 0 ; sobald 0 zurückgegeben wird, gibt es nichts weiter zum einlesen
  
  If TotalSize > 0 ; das Bild darstellen, wenn vorher erfolgreich
    If CatchImage(0, *Buffer, TotalSize)
      If OpenWindow(0, 0, 0, ImageWidth(0), ImageHeight(0), "Image", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
        ImageGadget(0, 0, 0, ImageWidth(0), ImageHeight(0), ImageID(0))
        Repeat
        Until WaitWindowEvent() = #PB_Event_CloseWindow
        End
      EndIf
    EndIf
  EndIf
  MessageRequester("Fehler", "Kein gültiges Bild.")
@EndCode

@SeeAlso
  @@WriteConsoleData, @@AllocateMemory
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = RawKey()

@Description
  Gibt den Roh-Code ("Raw key") des letzten Aufrufs von @@Inkey zurück.
  Dies ist nützlich für erweiterte (nicht-ASCII) Tasten (zum Beispiel Funktionstasten,
  Cursortasten, etc.).

@NoParameters

@ReturnValue
  Gibt den Roh-Code der letzten gedrückten Taste zurück.

@Remarks
  Es sind nicht nur die alpha-numerischen Tasten, welche einen ASCII-Wert haben. Die
  Escape-Taste (27), die Return-Taste (13), die Tabulator-Taste (9) und die
  Backspace-Taste (8) sind nur vier Beispiele.
@LineBreak
  Eine Tabelle mit ASCII-Codes finden Sie @ReferenceLink "ascii" "hier".

@Example
@Code
  If OpenConsole()
    PrintN("Druecken Sie Escape zum Beenden")
  
    Repeat
      KeyPressed$ = Inkey()
      
      If KeyPressed$ <> ""
        
        PrintN("Sie drueckten die Taste: " + KeyPressed$)
        PrintN("Diese hat einen Roh-Code von: "+Str(RawKey()))
        
      ElseIf RawKey()
      
        PrintN("Sie haben eine nicht-ASCII Taste gedrueckt.")
        PrintN("Diese hat einen Roh-Code von: "+Str(RawKey()))
        
      Else
        Delay(20) ; Wir verwenden nicht die gesamte CPU-Zeit, da wir uns auf einem Multitaskting-OS befinden
      EndIf
    
    Until KeyPressed$ = Chr(27) ; Warten, bis Escape gedrückt wird
  EndIf
@EndCode

@SeeAlso
  @@Inkey, @@Input

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = WriteConsoleData(*Puffer, Größe)

@Description
  Schreibt Roh-Daten in die Konsolenausgabe. Dieser Befehl wird nur im nicht-grafischen Modus unterstützt.
  Er kann zum Ausgeben von anderen Daten als Text auf die Konsole verwendet werden, welche dann auf eine
  Datei oder ein anderes Programm umgeleitet werden können.

@Parameter "*Puffer"
  Der Speicherpuffer, von welchem die Daten gelesen werden.

@Parameter "Größe"
  Der Umfang (in Bytes) an zu schreibenden Daten.

@Returnvalue
  Gibt die Anzahl aktuell (bisher) in die Ausgabe geschriebener Bytes zurück.

@Remarks
  Der Speicherbereich muss zuvor mit den Befehlen der 
  @LibraryLink "Memory" "Memory"-Bibliothek reserviert und gefüllt worden sein.

@SeeAlso
  @@ReadConsoleData

@SupportedOS

;--------------------------------------------------------------------------------------------------------
