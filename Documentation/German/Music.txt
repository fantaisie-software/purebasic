;
;     Music library documentation
;
;      (c) 2024 - Fantaisie Software
;

@Library Music

@Overview
  PureBasic kann Standard Musik-Module abspielen, um während eines Spiels oder einer
  Applikation eine schöne Hintergrundmusik zu haben. Die Module sind wohlbekannt von
  den Demo-Makern, da sie eine rationelle Möglichkeit darstellen, Musik auf dem Computer
  zu erstellen. Die zum Erstellen der Module benutzten Werkzeuge werden 'Tracker'
  (ProTracker, FastTracker, ImpulseTracker...) genannt.
  @LineBreak
  Der Vorteil von Musik-Modulen
  gegenüber .wav/mp3 Dateien sind ihre sehr geringe Größe, eine prinzipiell endlose
  Länge, die sehr schnellen Abspielroutinen, der mögliche Sprung zu einem bestimmten
  Musikabschnitt - passend zur gerade laufenden Action auf dem Bildschirm, etc...
  @LineBreak
  Es ist natürlich möglich, @LibraryLink "sound" "Standard-Sound" und Modul-Sound zu mischen, um beide
  gleichzeitig abspielen zu können.
@LineBreak
@LineBreak
  Die @InternetLink "http://modplug-xmms.sourceforge.net/" "ModPlug" Library wird verwendet,
  um eine sehr hohe Abspielqualität für die Musik-Module und Unterstützung für mehrere Tracker 
  zu haben.
@LineBreak
@LineBreak
  Der Befehl @@InitSound muss erfolgreich aufgerufen worden sein,
  bevor eine der zur Music-Biblithek gehörenden Funktionen verwendet werden kann.


@CommandList

@ExampleFile All Music.pb

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = CatchMusic(#Musik, *Puffer, Größe)

@Description
  Lädt das angegebene Musik-Modul vom angegebenen Speicherbereich.
  @PlayMusic kann verwendet werden, um das Abspielen der Musik zu starten.
  @LineBreak
  @InternetLink "http://modplug-xmms.sourceforge.net/" "ModPlug" unterstützt eine Menge an
  Musik-Formaten, zu diesen gehören: Protracker (4 Kanäle), FastTracker (bis zu 32 Kanäle, 
  16 Bit-Qualität), Impulse Tracker, etc.

@Parameter "#Musik"
  Eine Nummer zum Identifizieren des neuen Musik-Moduls.
  @ReferenceLink "purebasic_objects" "#PB_Any" kann verwendet werden, um diese Nummer automatisch zu generieren.

@Parameter "*Puffer"
  Der Speicherpuffer, aus dem das Musikmodul geladen werden soll.

@Parameter "Größe"
  Die Puffergröße.

@ReturnValue
  Ungleich Null, wenn das Musikmodul erfolgreich geladen wurde, andernfalls Null.

@Remarks
  Diese Funktion ist nützlich bei Verwendung des '@ReferenceLink "includes" "IncludeBinary"' PureBasic Schlüsselworts.
  Damit können Musik-Module mit in das Executable gepackt werden. Verwenden Sie diese Option
  trotzdem mit Bedacht, da mehr Speicher als beim Speichern des Musik-Moduls in einer externen Datei
  benötigt wird (das Modul befindet sich sowohl im Speicher des Executable und wird auch
  in den physikalischen Speicher geladen).

@Example
@Code
  CatchMusic(0, ?Music, ?MusicEnd-?Music)
  End

  DataSection
    Music:
      IncludeBinary "Music.xm"
    MusicEnd:
  EndDataSection
@EndCode

@SeeAlso
  @@LoadMusic, @@PlayMusic

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function FreeMusic(#Musik)

@Description
  Hält das angegebene Musik-Modul, welches zuvor mittels dem @@LoadMusic Befehl geladen
  wurde, an und entfernt es aus dem Speicher. Sobald ein Musik-Modul freigegeben
  wurde, kann es nicht mehr abgespielt werden.

@Parameter "#Musik"
  Das freizugebende Musik-Modul. Wenn @#PB_All angegeben wird, werden alle verbliebenen Module freigegeben.

@NoReturnValue

@Remarks
  Alle verbleibenden Musik-Module werden automatisch freigegeben, wenn das Programm endet.

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Position = GetMusicPosition(#Musik)

@Description
  Gibt die aktuelle Pattern-Position des laufenden Musik-Moduls zurück.

@Parameter "#Musik"
  Das zu verwendende Musik-Modul.

@ReturnValue
  Die aktuelle Pattern-Position des abgespielten Musikmoduls. Die erste Patternposition ist Null.

@SeeAlso
  @@SetMusicPosition
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Reihe = GetMusicRow(#Musik)

@Description
  Gibt die aktuelle Reihen-Position im Pattern des abgespielten Musik-Moduls zurück.

@Parameter "#Musik"
  Das zu verwendende Musik-Modul.

@ReturnValue
  Die aktuelle Reihen-Position im Pattern des abgespielten Musik-Moduls. Die erste
  Reihe-Position ("Row") ist 0.

@SeeAlso
  @@SetMusicPosition
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = IsMusic(#Musik)

@Description
  Testet, ob das angegebene Musikmodul gültig und korrekt initialisiert ist.

@Parameter "#Musik"
  Das zu überprüfende Musikmodul.

@ReturnValue
  Ungleich Null, wenn das Musikmodul gültig ist, andernfalls Null.

@Remarks
  Diese Funktion ist "kugelsicher" und kann mit jedem Wert verwendet werden. Dies ist der
  richtige Weg, um sicherzustellen, dass ein Musikmodul bereit zur Verwendung ist.

@SeeAlso
  @@LoadMusic, @@CatchMusic
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = LoadMusic(#Musik, Dateiname$)

@Description
  Lädt das angegebene Musik-Modul. @PlayMusic kann verwendet werden, um das Abspielen der Musik zu starten.
  @LineBreak
  @InternetLink "http://modplug-xmms.sourceforge.net/" "ModPlug" unterstützt eine Menge an
  Musik-Formaten, zu diesen gehören: Protracker (4 Kanäle), FastTracker (bis zu 32 Kanäle, 
  16 Bit-Qualität), Impulse Tracker, etc.

@Parameter "#Musik"
  Eine Nummer zum Identifizieren des neuen Musik-Moduls.
  @ReferenceLink "purebasic_objects" "#PB_Any" kann verwendet werden, um diese Nummer automatisch zu generieren.

@Parameter "Dateiname$"
  Der Dateiname des zu ladenden Musikmoduls.

@ReturnValue
  Ungleich Null, wenn das Musikmodul erfolgreich geladen wurde, andernfalls Null.

@SeeAlso
  @@CatchMusic, @@PlayMusic
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function MusicVolume(#Musik, Lautstärke.f)

@Description
  Ändert die Gesamtlautstärke ("Master-Volume") der angegebenen Musik, in Echtzeit.

@Parameter "#Musik"
  Das zu verwendende Musik-Modul.

@Parameter "Lautstärke.f"
  Die neue Lautstärke, die für die Musik eingestellt werden soll. Die Lautstärkewerte können
  zwischen 0 und 100 liegen. Dies kann beim Ein-/Ausblenden ("Fade-in/Fade-out") hilfreich sein.

@NoReturnValue

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function PlayMusic(#Musik)

@Description
  Startet die Wiedergabe der angegebenen Musik, die zuvor mit der @@LoadMusic Funktion geladen wurde.

@Parameter "#Musik"
  Das abzuspielende Musikmodul.

@NoReturnValue

@SeeAlso
  @@LoadMusic, @@CatchMusic, @@StopMusic
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetMusicPosition(#Musik, Position)

@Description
  Ändert die aktuelle Pattern-Position der abgespielten Musik auf die neu angegebene Position.

@Parameter "#Musik"
  Das zu verwendende Musik-Modul.

@Parameter "Position"
  Die neue Pattern-Position des Musikmoduls. Die erste Pattern-Position beginnt bei 0.

@NoReturnValue

@SeeAlso
  @@GetMusicPosition
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function StopMusic(#Musik)

@Description
  Stoppt die Musik (sofern sie gerade abgespielt wird). 

@Parameter "#Musik"
  Das zu stoppende Musikmodul. Wenn auf @#PB_All gesetzt, werden alle aktuell abgespielten
  Musik-Module gestoppt.

@NoReturnValue

@SeeAlso
  @@PlayMusic
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------
