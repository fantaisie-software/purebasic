;
;     List library documentation
;
;      (c) 2023 - Fantaisie Software
;

@Library List

@Overview
  Verknüpfte Listen (oder auch "verkettete Listen", in Englisch "linked lists") sind
  Strukturen zum Speichern von Daten, welche dynamisch
  entsprechend Ihrem Bedarf reserviert werden. Sie sind eine Liste von Elementen (die Daten, welche
  Sie speichern möchten), wobei jedes Element vollkommen unabhängig von den anderen ist. Sie können
  so viele Elemente hinzufügen wie Sie wollen (bzw. so viele, wie in den Speicher Ihres Computers
  passen), Elemente an der von Ihnen gewünschten Stelle einfügen, einige andere löschen und vieles
  mehr. Diese Art des Datenmanagements ist sehr nützlich, da sie eine der besten Möglichkeiten zum
  Umgang mit Daten darstellt, wenn Sie vorher nicht wissen, wie viele Elemente Sie speichern müssen
  oder Sie oft die Anzahl der gespeicherten Elemente verändern.
@LineBreak
@LineBreak
  Bevor Sie mit verknüpften Listen arbeiten können, müssen Sie diese erst deklarieren. Dies geschieht mit
  dem Schlüsselwort @ReferenceLink "newlist" "NewList". Zum Speichern von Inhalten
  kommen oftmals auch @ReferenceLink "structures" "Strukturen" zum Einsatz.
@LineBreak
@LineBreak
  Verknüpfte Listen können mit Hilfe von @@SortList bzw. @@SortStructuredList sortiert werden, und
  können mittels @@RandomizeList auch in einer zufälligen Reihenfolge neu angeordnet werden.
@LineBreak
@LineBreak
  Um die Inhalte einer verknüpften Liste gezielt durchsuchen zu können, empfiehlt sich der Einsatz von
  Schleifen: @ReferenceLink "for_next" "For : Next", @ReferenceLink "foreach_next" "ForEach : Next", 
  @ReferenceLink "repeat_until" "Repeat : Until" oder @ReferenceLink "while_wend" "While : Wend".
@LineBreak
@LineBreak
  Das erste Element befindet sich an Position 0, das nächste an 1, usw.
@LineBreak
@LineBreak
  Andere Möglichkeiten zum Speichern von Daten bestehen in der Verwendung von @LibraryLink "array" "Arrays"
  und @LibraryLink "map" "Maps".
@LineBreak
@LineBreak
  Bei Verwendung von @LibraryLink "thread" "Threads" kann nicht in verschiedenen Threads gleichzeitig auf
  dieselbe Liste zugegriffen oder diese geändert werden. Mutexe können verwendet werden, um sicherzustellen,
  dass die Liste nur von einem Thread verwendet wird.    

@CommandList

@ExampleFile All List.pb

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function *Ergebnis = AddElement(Liste())

@Description
  Fügt ein neues, leeres Listenelement nach dem aktuellen Element ein oder als erstes Element,
  wenn die Liste noch keine Elemente enthält. Dieses neue Element wird zum aktuellen Element
  der Liste. 

@Parameter "Liste()"
  Der Variablenname der verknüpften Liste, welche mit dem @ReferenceLink "newlist" "NewList" Befehl erstellt
  wurde. Sie müssen die Klammern nach dem Listennamen immer angeben.

@ReturnValue
  Gibt einen Wert ungleich Null zurück, wenn das neue Element erstellt wurde, andernfalls Null.
  Der zurückgegebene Wert ist ein @ReferenceLink "memory" "Zeiger" auf die Daten des neuen Elements.

@Example
@Code
  ; Der einfachste Weg zur Benutzung von AddElement
  NewList simple.w() 
  AddElement(simple())    ; Erstellt das erste neue Element innerhalb der Liste
  simple() = 23 
    
  AddElement(simple())    ; Aktuelle Position ist das erste Element, wir fügen
  simple() = 45           ; daher ein neues an der zweiten Position ein


  ; Das nachfolgende Beispiel zeigt die Benutzung des Rückgabewerts von AddElement
  NewList advanced.l() 
  If AddElement(advanced()) <> 0 
    advanced() = 12345 
  Else 
    MessageRequester("Fehler!", "Kein Speicherplatz zum Reservieren des neuen Elements", #PB_MessageRequester_OK)
  EndIf 


  ; Eine kleine Struktur, um die Verwendung des Zeigers auf das neue Element zu demonstrieren
  Structure Programmer
    Name.s
    Strength.b
  EndStructure

  NewList Programmers.Programmer()  ; Die Liste zum Speichern der Elemente

  *Element.Programmer = AddElement(Programmers())
  If *Element<>0
    *Element\Name = "Dave"
    *Element\Strength = 3   ; Wow, super-strong geek! ;)
  Else
    MessageRequester("Fehler!", "Kein Speicherplatz zum Reservieren des neuen Elements", #PB_MessageRequester_OK)
  EndIf 
@EndCode

@SeeAlso
  @@InsertElement, @@DeleteElement, @@ClearList

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function ChangeCurrentElement(Liste(), *NeuesElement)

@Description
  Ändert das aktuelle Element der angegebenen Liste auf das angegebene neue Element '*NeuesElement'.
  Diese Funktion ist sehr nützlich, wenn Sie sich ein Element "merken" wollen und es nach
  der Verarbeitung anderer Prozesse wiederherstellen wollen.

@Parameter "Liste()"
  Der Variablenname der verknüpften Liste, welche mit dem @ReferenceLink "newlist" "NewList" Befehl erstellt
  wurde. Sie müssen die Klammern nach dem Listennamen immer angeben.

@Parameter "*NeuesElement"
  Das neue Element, was als aktuelles Element der Liste gesetzt werden soll. 
  Das neue Element muss ein @ReferenceLink "memory" "Zeiger" (Pointer) auf ein anderes in der Liste
  existierendes Element sein.
  Sie sollten dessen Adresse durch Verwendung des @ Operators auf den Listennamen und nicht durch
  irgendeine andere Methode ermitteln.
  
@NoReturnValue

@Example Vereinfacht
@Code
  *Old_Element = @mylist()   ; Ermittelt die Adresse des aktuellen Elements
  
  ResetList(mylist())        ; Durchführen einer Suchschleife nach allen
  While NextElement(mylist())   ; Elementen mit Name "John" und Änderung dieser in "J" 
    If mylist()\name = "John"
      mylist()\name = "J"     
    EndIf 
  Wend     
  
  ChangeCurrentElement(mylist(), *Old_Element) ; Wiederherstellen des letzten aktuellen Elements (von vor der Suche)
@EndCode

@Example Komplett
@Code
  NewList myList()
  
  AddElement(myList())
  myList() = 100
  
  AddElement(myList())
  myList() = 200
  *element = @myList()
  
  AddElement(myList())
  myList() = 300
  
  Debug myList()                             ; Zeigt 300 an (letztes Element)
  ChangeCurrentElement(myList(), *element)   ; Wiederherstellen der Listen-Position
  Debug myList()                             ; Zeigt 200 an
  
  ForEach myList()
    If @myList() = *element
      Debug "element: " + myList()           ; Zeigt "element: 200" an
    EndIf
  Next
@EndCode

@SeeAlso
  @@SelectElement, @@PushListPosition, @@PopListPosition

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function ClearList(Liste()) 

@Description
  Löscht alle Elemente in dieser Liste und gibt deren Speicherplatz frei. Nach diesem Aufruf ist
  die Liste noch benutzbar, sie ist jedoch leer (d.h. es befinden sich keine Elemente mehr in ihr).

@Parameter "Liste()"
  Der Variablenname der verknüpften Liste, welche mit dem @ReferenceLink "newlist" "NewList" Befehl erstellt
  wurde. Sie müssen die Klammern nach dem Listennamen immer angeben.

@NoReturnValue

@Remarks
  PureBasic gibt lediglich den Speicher der Elemente frei. Wenn Sie die verknüpfte Liste z.B. dafür
  benutzt haben, die "Handles" von Objekten - die Sie direkt mit dem OS erstellt haben - zu speichern,
  dann gibt es keine Möglichkeit, dass PureBasic (oder auch jede andere Programmiersprache) wissen
  kann, was diese darstellen. In einem solchen Fall, sollten Sie die Elemente der Liste durchgehen und
  die Objekte selbst freigeben.

@Example
@Code
  NewList Numbers.w() 

  ; Eine kleine Schleife, um viele Einträge zur Liste hinzufügen
  For i=1 To 100 
    AddElement(Numbers()) 
    Numbers() = i 
  Next 
    
  ; Prüfen, dass auch Einträge zur Liste hinzugefügt wurden
  MessageRequester("Information", "Es sind "+Str(ListSize(Numbers()))+" Elemente in der Liste", #PB_MessageRequester_OK) 
     
  ; Löschen des Listeninhalts und Anzeigen, dass die Liste wirklich leer ist
  ClearList(Numbers()) 
  MessageRequester("Information", "Es sind "+Str(ListSize(Numbers()))+" Elemente in der Liste", #PB_MessageRequester_OK) 
@EndCode

@SeeAlso
  @@DeleteElement, @@FreeList

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = CopyList(QuellListe(), ZielListe())

@Description
  Kopiert den Inhalt von einer Liste in die andere Liste.
  Nach einem erfolgreichen Kopiervorgang sind beide Listen identisch.

@Parameter "QuellListe()"
  Die Liste, aus der die Elemente kopiert werden.

@Parameter "ZielListe()"
  Die Liste, in welche die Elemente kopiert werden. Die sich vor dem Kopieren in dieser Liste
  befindlichen Elemente werden gelöscht. Wenn diese Liste nicht den gleichen Typ (nativ oder
  strukturiert) wie die QuellListe() hat, dann wird das Kopieren fehlschlagen.

@ReturnValue
  Gibt einen Wert ungleich Null zurück, wenn das Kopieren erfolgreich war, andernfalls Null.

@Example
@Code
  NewList Friends$()
  NewList FriendsCopy$()
  
  AddElement(Friends$())
  Friends$() = "John"
  
  AddElement(Friends$())
  Friends$() = "Elise"

  CopyList(Friends$(), FriendsCopy$())
  
  ForEach FriendsCopy$()
    Debug FriendsCopy$()
  Next
@EndCode

@SeeAlso
  @@CopyArray, @@CopyMap

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function FreeList(Liste())

@Description
  Gibt die angegebene Liste und den gesamten ihr zugewiesenen Speicher frei.
  Um auf diese Liste später erneut zuzugreifen, muss dafür @ReferenceLink "newlist" "NewList" aufgerufen werden.
  
@Parameter "Liste()"
  Der Name der freizugebenden Liste.

@NoReturnValue

@SeeAlso
  @@ClearList

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = ListSize(Liste()) 

@Description
  Gibt die Anzahl der Elemente in der verknüpften Liste zurück. Es ändert
  nicht das aktuelle Listenelement. Dieser Befehl ist sehr schnell (er durchläuft
  nicht die gesamte Liste, sondern verwendet ein zwischengespeichertes Ergebnis)
  und kann bedenkenlos zum Ermitteln, ob eine Liste leer ist oder nicht, benutzt 
  werden.  

@Parameter "Liste()"
  Der Variablenname der verknüpften Liste, welche mit dem @ReferenceLink "newlist" "NewList" Befehl erstellt
  wurde. Sie müssen die Klammern nach dem Listennamen immer angeben.

@ReturnValue
  Die Gesamtzahl der Elemente in der verknüpften Liste.

@Example
@Code
  NewList countme.w() 
    
  ; Eine kleine Schleife, um einige Elemente zur Liste hinzuzufügen.
  For i=0 To 10 
    AddElement(countme()) 
    countme() = i * 23 
  Next 

  ; Zeigt an, wie viele Elemente es in der Liste gibt. Ich hoffe, Sie
  ; gehen von der gleichen Anzahl wie dieses Beispiel aus ;)
  MessageRequester("Information", "Es gibt "+Str(ListSize(countme()))+" Elemente in der Liste", #PB_MessageRequester_OK) 
@EndCode

@SeeAlso
  @@ListIndex

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Ergebnis = CountList(Liste())

@Description
@Deprecated

  Diese Funktion wurde durch @@ListSize ersetzt. Verwenden Sie diese stattdessen.

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function *Ergebnis = DeleteElement(Liste() [, Flags])

@Description
  Entfernt das aktuelle Element aus der Liste. Nach dem Aufruf dieser Funktion
  wird das vorherige Element (dasjenige vor dem gelöschten Element) neues
  aktuelles Element. Wenn dieses Element nicht existiert (mit anderen Worten:
  Sie haben das erste Element in der Liste gelöscht), dann gibt es kein aktuelles 
  Element mehr, da es sich vor dem ersten Element befindet, wie nach einem
  @@ResetList.

@Parameter "Liste()"
  Der Variablenname der verknüpften Liste, welche mit dem @ReferenceLink "newlist" "NewList" Befehl erstellt
  wurde. Sie müssen die Klammern nach dem Listennamen immer angeben.

@OptionalParameter "Flags"
  Wenn dieser Parameter auf 1 gesetzt wird und dann
  das erste Element gelöscht wird, wird das zweite Element (dasjenige nach dem 
  gelöschten Element) das neue aktuelle Element sein. Dieses Flag stellt sicher, 
  dass nach dem Löschen immer ein gültiges aktuelles Element vorhanden ist,
  solange es noch Elemente in der Liste gibt.

@ReturnValue
  Gibt die Speicheradresse des neuen aktuellen Elements in der Liste zurück.
  Falls die Liste nach der Löschung kein aktuelles Element hat, ist das Ergebnis gleich 0.

@Example
@Code
  NewList people.s()

  AddElement(people()) : people() = "Tom"
  AddElement(people()) : people() = "Dick"
  AddElement(people()) : people() = "Harry"
  AddElement(people()) : people() = "Bob"

  FirstElement(people())     ; Bewegt sich zu "Tom"
  DeleteElement(people(), 1) ; Löscht "Tom". Da sich kein weiteres Element davor befand, wird "Dick" neues aktuelles Element.
  MessageRequester("Information", "Erste Person in der Liste ist "+people(), #PB_MessageRequester_Ok) 

  LastElement(people())      ; Bewegt sich zu "Bob"
  PreviousElement(people())  ; Bewegt sich zu "Harry"
  DeleteElement(people())    ; und löscht ihn. Es gibt ein Element vor Harry, daher wird dies das aktuelle.
  MessageRequester("Information", "Aktuelle Person in der Liste ist "+people(), #PB_MessageRequester_Ok)
@EndCode

@SeeAlso
  @@AddElement, @@InsertElement, @@ClearList

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function *Ergebnis = FirstElement(Liste())  

@Description
  Ändert das aktuelle Listenelement auf das erste Listenelement.

@Parameter "Liste()"
  Der Variablenname der verknüpften Liste, welche mit dem @ReferenceLink "newlist" "NewList" Befehl erstellt
  wurde. Sie müssen die Klammern nach dem Listennamen immer angeben.

@ReturnValue
  Gibt bei Erfolg die @ReferenceLink "memory" "Adresse" (Zeiger) auf die Daten des ersten Elements
  zurück, und Null wenn es keine Elemente in der Liste gibt.

@Example
@Code
  ; Ein Beispiel der einfachen Benutzung
  NewList Numbers.w() 

  AddElement(Numbers())
  Numbers() = 5
  AddElement(Numbers())
  Numbers() = 8

  FirstElement(Numbers())
  MessageRequester("Information", "Der Wert des ersten Elements ist "+Str(Numbers()), #PB_MessageRequester_OK)


  ; Ein Beispiel, welches den Rückgabewert verwendet
  NewList Numbers.w()

  If FirstElement(Numbers()) <> 0
    MessageRequester("Information", "Der Wert des ersten Elements ist "+Str(Numbers()), #PB_MessageRequester_OK)
  Else
    MessageRequester("Information", "Die Liste ist leer", #PB_MessageRequester_OK)
  EndIf
    
  AddElement(Numbers())
  Numbers() = 5
  AddElement(Numbers())
  Numbers() = 8
    
  If FirstElement(Numbers()) <> 0
    MessageRequester("Information", "Der Wert des ersten Elements ist "+Str(Numbers()), #PB_MessageRequester_OK)
  Else
    MessageRequester("Information", "Die Liste ist leer", #PB_MessageRequester_OK)
  EndIf


  ; Ein Beispiel für fortgeschrittene Anwender
  NewList Numbers.w()

  AddElement(Numbers())
  Numbers() = 5
  AddElement(Numbers())
  Numbers() = 8

  *Element.Word = FirstElement(Numbers())
  If *Element
    MessageRequester("Information", "Der Wert des ersten Elements ist "+Str(*Element\w), #PB_MessageRequester_OK)
  Else
    MessageRequester("Information", "Die Liste ist leer", #PB_MessageRequester_OK)
  EndIf
@EndCode

@SeeAlso
  @@LastElement, @@PreviousElement, @@NextElement, 
  @@SelectElement, @@ListIndex

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function *Result = InsertElement(Liste()) 

@Description
  Fügt ein neues Element vor dem aktuellen Element ein, oder am Anfang der Liste - wenn die Liste leer
  ist (d.h. keine Elemente beinhaltet). Dieses neue Element wird das aktuelle Element der Liste.
  
@Parameter "Liste()"
  Der Variablenname der verknüpften Liste, welche mit dem @ReferenceLink "newlist" "NewList" Befehl erstellt
  wurde. Sie müssen die Klammern nach dem Listennamen immer angeben.

@ReturnValue
  Gibt einen Wert ungleich Null zurück, wenn das neue Element erstellt wurde, andernfalls Null.
  Der zurückgegebene Wert ist ein @ReferenceLink "memory" "Zeiger" auf die Daten des neuen Elements.

@Example
@Code
  ; Der einfachste Weg zur Benutzung von InsertElement
  NewList simple.w()
  InsertElement(simple())    ; Erstellt das erste neue Element in der Liste
  simple() = 23

  InsertElement(simple())    ; Aktuelle Position ist das erste Element, daher fügen wir das neue Element am Anfang der  Liste ein.
  simple() = 45              ; Das alte erste Element wird jetzt zum zweiten Element in der Liste.


  ; Dies zeigt, wie der Rückgabewert von InsertElement benutzt wird
  NewList advanced.l()
  If InsertElement(advanced()) <> 0
    advanced() = 12345
  Else
    MessageRequester("Fehler!", "Kein Speicherplatz zum Reservieren des neuen Elements", #PB_MessageRequester_OK)
  EndIf


  ; Eine kleine Struktur, um die Verwendung des Zeigers auf das neue Element zu demonstrieren
  Structure Programmer
    Name.s
    Strength.b
  EndStructure

  NewList Programmers.Programmer()  ; Die Liste zum Speichern der Elemente

  *Element.Programmer = InsertElement(Programmers())
  If *Element<>0
    *Element\Name = "Dave"
    *Element\Strength = 3   ; Wow, super-strong geek! ;)
  Else
    MessageRequester("Fehler!", "Kein Speicherplatz zum Reservieren des neuen Elements", #PB_MessageRequester_OK)
  EndIf
@EndCode

@SeeAlso
  @@AddElement, @@DeleteElement, @@ClearList

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function *Ergebnis = LastElement(Liste())

@Description
  Ändert das aktuelle Listenelement auf das letzte Listenelement.

@Parameter "Liste()"
  Der Variablenname der verknüpften Liste, welche mit dem @ReferenceLink "newlist" "NewList" Befehl erstellt
  wurde. Sie müssen die Klammern nach dem Listennamen immer angeben.

@ReturnValue
  Gibt bei Erfolg die @ReferenceLink "memory" "Adresse" (Zeiger) auf die Daten des letzten Elements
  zurück, und Null wenn es keine Elemente in der Liste gibt.

@Example
@Code
  ; Ein Beispiel der einfachen Benutzung
  NewList Numbers.w() 

  AddElement(Numbers())
  Numbers() = 5
  AddElement(Numbers())
  Numbers() = 8

  LastElement(Numbers())
  MessageRequester("Information", "Der Wert des letzten Elements ist "+Str(Numbers()), #PB_MessageRequester_OK)


  ; Ein Beispiel, welches den Rückgabewert verwendet
  NewList Numbers.w()

  If LastElement(Numbers()) <> 0
    MessageRequester("Information", "Der Wert des letzten Elements ist "+Str(Numbers()), #PB_MessageRequester_OK)
  Else
    MessageRequester("Information", "Die Liste ist leer", #PB_MessageRequester_OK)
  EndIf
    
  AddElement(Numbers())
  Numbers() = 5
  AddElement(Numbers())
  Numbers() = 8
    
  If LastElement(Numbers()) <> 0
    MessageRequester("Information", "Der Wert des letzten Elements ist "+Str(Numbers()), #PB_MessageRequester_OK)
  Else
    MessageRequester("Information", "Die Liste ist leer", #PB_MessageRequester_OK)
  EndIf


  ; Ein Beispiel nur für fortgeschrittene Anwender
  NewList Numbers.w()

  AddElement(Numbers())
  Numbers() = 5
  AddElement(Numbers())
  Numbers() = 8

  *Element.Word = LastElement(Numbers())
  If *Element
    MessageRequester("Information", "Der Wert des letzten Elements ist "+Str(*Element\w)), #PB_MessageRequester_OK)
  Else
    MessageRequester("Information", "Die Liste ist leer", #PB_MessageRequester_OK)
  EndIf
@EndCode

@SeeAlso
  @@FirstElement, @@PreviousElement, @@NextElement, 
  @@SelectElement, @@ListIndex

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Index = ListIndex(Liste()) 

@Description
  Findet die Position des aktuellen Listenelements heraus - dabei wird davon ausgegangen,
  dass sich das erste Element an Position 0 befindet. Diese Funktion ist sehr schnell
  und kann ohne Performanzverlust auch häufig verwendet werden (sie durchläuft nicht
  jedes Mal die gesamte Liste, sondern nutzt einen zwischengespeicherten Wert).
  
@Parameter "Liste()"
  Der Variablenname der verknüpften Liste, welche mit dem @ReferenceLink "newlist" "NewList" Befehl erstellt
  wurde. Sie müssen die Klammern nach dem Listennamen immer angeben.

@ReturnValue
  Ein Wert, welcher die Position des aktuellen Elements in der Liste beinhaltet.
  Das erste Element befindet sich dabei an Position 0, das nächste an 1 und so weiter.
  Ein Wert von -1 bedeutet, dass es kein aktuelles Element gibt (entweder ist die Liste leer
  oder @@ResetList wurde benutzt).

@Example
@Code
  NewList fruit.s()

  AddElement(fruit()) : fruit() = "oranges"
  AddElement(fruit()) : fruit() = "bananas"
  AddElement(fruit()) : fruit() = "apples"
  AddElement(fruit()) : fruit() = "pears"

  FirstElement(fruit())
  MessageRequester("Fruit: "+fruit(), "Jetzt an Position "+Str(ListIndex(fruit())),  #PB_MessageRequester_OK)

  NextElement(fruit())
  MessageRequester("Fruit: "+fruit(), "Jetzt an Position "+Str(ListIndex(fruit())),  #PB_MessageRequester_OK)

  NextElement(fruit())
  MessageRequester("Fruit: "+fruit(), "Jetzt an Position "+Str(ListIndex(fruit())),  #PB_MessageRequester_OK)

  NextElement(fruit())
  MessageRequester("Fruit: "+fruit(), "Jetzt an Position "+Str(ListIndex(fruit())),  #PB_MessageRequester_OK)
@EndCode

@SeeAlso
  @@SelectElement, @@ListSize

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function *Ergebnis = NextElement(Liste())  

@Description
  Wechselt vom aktuellen Element auf das nächste Element in der Liste - oder auf das
  erste Element, wenn Sie zuvor @@ResetList aufgerufen haben.

@Parameter "Liste()"
  Der Variablenname der verknüpften Liste, welche mit dem @ReferenceLink "newlist" "NewList" Befehl erstellt
  wurde. Sie müssen die Klammern nach dem Listennamen immer angeben.

@ReturnValue
  Gibt bei Erfolg die @ReferenceLink "memory" "Adresse" (Zeiger) auf die Daten des nächsten Elements
  zurück, und Null wenn es keine Elemente in der Liste gibt.

@Example
@Code
  NewList Scores.w()

  For i=1 To 10
    AddElement(Scores())
    Scores() = 100 - i
  Next

  ResetList(Scores())
  While NextElement(Scores())
    ; Dies ist OK, da der erste Aufruf von NextElement() das erste Element in der Liste zum aktuellen Element macht
    MessageRequester("Score", Str(Scores()), #PB_MessageRequester_OK)
  Wend
@EndCode

@SeeAlso
  @@ResetList, @@PreviousElement, 
  @@FirstElement, @@LastElement, 
  @@SelectElement, @@ListIndex

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function *Ergebnis = PreviousElement(Liste()) 

@Description
  Wechselt vom aktuellen Element auf das vorhergehende Element in der Liste.

@Parameter "Liste()"
  Der Variablenname der verknüpften Liste, welche mit dem @ReferenceLink "newlist" "NewList" Befehl erstellt
  wurde. Sie müssen die Klammern nach dem Listennamen immer angeben.

@ReturnValue
  Gibt bei Erfolg die @ReferenceLink "memory" "Adresse" (Zeiger) auf die Daten des vorhergehenden Elements
  zurück, und Null wenn es keine Elemente in der Liste gibt.

@Example
@Code
  NewList Numbers.w()

  For i=1 To 10
    AddElement(Numbers())
    Numbers() = i
  Next

  Repeat
    MessageRequester("Number", Str(Numbers()), #PB_MessageRequester_OK)
  Until PreviousElement(Numbers()) = 0
@EndCode

@SeeAlso
  @@NextElement,
  @@FirstElement, @@LastElement, 
  @@SelectElement, @@ListIndex

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function ResetList(Liste()) 

@Description
  Setzt das aktuelle Listenelement vor das erste Element zurück.
  Das bedeutet, dass kein Element mehr gültig ist. Dies ist sehr nützlich, 
  um anschließend alle Elemente mittels @@NextElement abzuarbeiten.

@Parameter "Liste()"
  Der Variablenname der verknüpften Liste, welche mit dem @ReferenceLink "newlist" "NewList" Befehl erstellt
  wurde. Sie müssen die Klammern nach dem Listennamen immer angeben.

@NoReturnValue

@Example
@Code
  NewList Friends.s()
  
  AddElement(Friends())
  Friends() = "Arnaud"
  
  AddElement(Friends())
  Friends() = "Seb"

  ResetList(Friends())
  While NextElement(Friends())
    Debug Friends()  ; Alle Listenelemente ausgeben
  Wend
@EndCode

@SeeAlso
  @@NextElement, @@ListIndex

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function *Ergebnis = SelectElement(Liste(), Position)

@Description
  Ändert das aktuelle Listenelement auf das Element an der angegebenen Position.
  Dies ist sehr nützlich, wenn Sie an eine bestimmte Position innerhalb der Liste
  springen wollen, ohne dafür eine eigene Schleife zu verwenden.

@Parameter "Liste()"
  Der Variablenname der verknüpften Liste, welche mit dem @ReferenceLink "newlist" "NewList" Befehl erstellt
  wurde. Sie müssen die Klammern nach dem Listennamen immer angeben.

@Parameter "Position"
  Die Position, zu der in der Liste gesprungen werden soll. Dabei wird davon ausgegangen, dass sich
  das erste Element in der Liste an Position 0 befindet, das nächste an 1 und so weiter. Sie
  müssen sicherstellen, dass Sie keine Position angeben, die außerhalb der Anzahl an Elementen
  in der Liste liegt!

@ReturnValue
  Gibt im Erfolgsfall die Daten-Adresse des ausgewählten Elements zurück -
  oder Null, wenn die Position außerhalb des gültigen Bereichs liegt.

@Remarks
  Da verknüpfte Listen intern keinen Index verwenden, springt diese Funktion zwangsläufig zu jedem
  Element in der Liste, bis die Zielposition erreicht ist, was bei einer großen Liste Zeit benötigt.
  Wird eine schnellere Methode benötigt, sollte @@ChangeCurrentElement genutzt werden.

@Example
@Code
  NewList mylist.l()

  AddElement(mylist()) : mylist() = 23
  AddElement(mylist()) : mylist() = 56
  AddElement(mylist()) : mylist() = 12
  AddElement(mylist()) : mylist() = 73

  SelectElement(mylist(), 0)
  MessageRequester("Position", "An Position 0, der Wert lautet "+Str(mylist()),0)

  SelectElement(mylist(), 2)
  MessageRequester("Position", "An Position 2, der Wert lautet "+Str(mylist()),0)

  SelectElement(mylist(), 1)
  MessageRequester("Position", "An Position 1, der Wert lautet "+Str(mylist()),0)

  SelectElement(mylist(), 3)
  MessageRequester("Position", "An Position 3, der Wert lautet "+Str(mylist()),0)
@EndCode

@SeeAlso 
  @@ChangeCurrentElement

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SwapElements(Liste(), *ErstesElement, *ZweitesElement)

@Description
  Vertauscht ("swap't") die Position von zwei Elementen in der angegebenen Liste. 
  Diese Funktion ist eine schnelle Möglichkeit, um eine Liste schnell zu reorganisieren,
  da sie nicht die Element-Daten selbst verschiebt.

@Parameter "Liste()"
  Der Variablenname der verknüpften Liste, welche mit dem @ReferenceLink "newlist" "NewList" Befehl erstellt
  wurde. Sie müssen die Klammern nach dem Listennamen immer angeben.

@Parameter "*ErstesElement"
  Adresse des ersten zu tauschenden Elements. Sie können diese Adresse durch Verwendung des @ Operators 
  auf den Listennamen erhalten.

@Parameter "*ZweitesElement"
  Adresse des zweiten zu tauschenden Elements. Sie können diese Adresse durch Verwendung des @ Operators
  auf den Listennamen erhalten.

@NoReturnValue

@Example
@Code
  NewList Numbers()
  
  For k=0 To 10
    AddElement(Numbers())
    Numbers() = k
  Next
    
  SelectElement(Numbers(), 3) ; Auswählen des vierten Elements (beachte: es gibt auch ein 0-tes Element)
  *FirstElement = @Numbers()
  
  SelectElement(Numbers(), 9) ; Auswählen des zehnten Elements (beachte: es gibt auch ein 0-tes Element)
  *SecondElement = @Numbers()
  
  ; Tausche die 3 mit der 9
  ;
  SwapElements(Numbers(), *FirstElement, *SecondElement)
    
  ; Überprüfen des Ganzen
  ;
  ForEach Numbers()
    Debug Numbers()
  Next
@EndCode

@SeeAlso
  @@MoveElement

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function MoveElement(Liste(), Lokation [, *RelativesElement])

@Description
  Verschiebt das aktuelle Element der angegebenen Liste an eine andere Position in der Liste.
  Das verschobene Element bleibt das aktuelle Element in der Liste. Dies ist eine schnelle
  Operation, da die Element-Daten selbst nicht verschoben werden, um die Position in der Liste
  zu ändern.

@Parameter "Liste()"
  Der Variablenname der verknüpften Liste, welche mit dem @ReferenceLink "newlist" "NewList" Befehl erstellt
  wurde. Sie müssen die Klammern nach dem Listennamen immer angeben.

@Parameter "Lokation"
  Position, wohin das aktuelle Element verschoben werden soll. Dies kann einer der folgenden Werte sein:
@FixedFont
  @#PB_List_First : Verschiebe das Element an den Anfang der Liste
  @#PB_List_Last  : Verschiebe das Element an das Ende der Liste
  @#PB_List_Before: Verschiebe das Element vor das *RelativesElement
  @#PB_List_After : Verschiebe das Element nach das *RelativesElement
@EndFixedFont

@OptionalParameter "*RelativesElement"
  Die Adresse eines anderen Elements, wohin das aktuelle Element verschoben werden soll.
  Dieser Parameter wird benötigt, wenn der Parameter 'Lokation' @#PB_List_Before
  oder @#PB_List_After lautet. Sie können diese Adresse durch Verwendung des
  @ Operators auf den Listennamen erhalten.

@NoReturnValue

@Example
@Code
  NewList Numbers()
  
  For k=0 To 10
    AddElement(Numbers())
    Numbers() = k
  Next
  
  SelectElement(Numbers(), 5) 
  *Relative = @Numbers()                             ; ermittle die Adresse von Element 5
  
  SelectElement(Numbers(), 0)
  MoveElement(Numbers(), #PB_List_After, *Relative)  ; verschiebe an die Stelle nach dem ELement 5
    
  SelectElement(Numbers(), 10)
  MoveElement(Numbers(), #PB_List_First)             ; verschiebe an den Anfang
    
  ; Ergebnis
  ;
  ForEach Numbers()
    Debug Numbers()
  Next
@EndCode

@SeeAlso
  @@SwapElements

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function PushListPosition(Liste())

@Description
  Merkt sich das aktuelle Element (sofern eines vorhanden) der Liste, wodurch es später
  mittels @@PopListPosition wieder hergestellt werden kann.
  Die Position wird in einer "Stack-Struktur" gespeichert, dadurch sind mehrere Aufrufe
  dieser Funktion möglich.

@Parameter "Liste()"
  Der Variablenname der verknüpften Liste, welche mit dem @ReferenceLink "newlist" "NewList" Befehl erstellt
  wurde. Sie müssen die Klammern nach dem Listennamen immer angeben.

@NoReturnValue

@Remarks
  Diese Funktion kann verwendet werden, um sich das aktuelle Element zu merken. Damit kann mit Hilfe
  von @@NextElement oder @ReferenceLink "foreach_next" "ForEach" ein Listen-Durchlauf gemacht werden,
  und das aktuelle Element kann nach dem Durchlauf mittels @@PopListPosition wieder hergestellt werden.
  Mehrere Aufrufe dieser Funktion können erfolgen, solange jeder davon später mit einem
  korrespondierenden @@PopListPosition Aufruf ausgeglichen wird.
@LineBreak
@LineBreak
  Hinweis: Es ist nicht erlaubt, mit Hilfe der @@DeleteElement oder @@ClearList Funktionen ein gemerktes
  aktuelles Element zu löschen. Dies kann in einen Absturz resultieren, wenn @@PopListPosition aufgerufen
  wird, da der Elemente-Speicher nicht länger gültig ist.

@Example
@Code
  NewList Numbers()
  AddElement(Numbers()): Numbers() = 1
  AddElement(Numbers()): Numbers() = 2
  AddElement(Numbers()): Numbers() = 5
  AddElement(Numbers()): Numbers() = 3
  AddElement(Numbers()): Numbers() = 5
  AddElement(Numbers()): Numbers() = 2
  
  ; Eine einfache doppelte Löschung mit Hilfe eines verschachtelten Durchlaufs
  ;
  ForEach Numbers()
    Value = Numbers()
    PushListPosition(Numbers())
    While NextElement(Numbers())
      If Numbers() = Value 
        DeleteElement(Numbers())
      EndIf
    Wend
    PopListPosition(Numbers())
  Next
  
  ForEach Numbers()
    Debug Numbers()
  Next
@EndCode

@SeeAlso
  @@PopListPosition, @@SelectElement, @@ChangeCurrentElement, @@NextElement, @@PreviousElement, 
  @ReferenceLink "foreach_next" "ForEach"

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function PopListPosition(Liste())

@Description
  Stellt das aktuelle Element der Liste wieder her, was vorher mit @@PushListPosition vorgemerkt
  wurde.

@Parameter "Liste()"
  Der Variablenname der verknüpften Liste, welche mit dem @ReferenceLink "newlist" "NewList" Befehl erstellt
  wurde. Sie müssen die Klammern nach dem Listennamen immer angeben.

@NoReturnValue

@Remarks
  Der Status der Liste wird der gleiche sein, wie beim zugehörigen Aufruf von @@PushListPosition. 
  Wenn es kein aktuelles Element gab, als @@PushListPosition aufgerufen wurde, dann wird es auch
  nach diesem Aufruf kein aktuelles Element geben.
@LineBreak
@LineBreak
  Siehe die @@PushListPosition Funktion für ein Beispiel.

@SeeAlso
  @@PushListPosition, @@SelectElement, @@ChangeCurrentElement, @@NextElement, @@PreviousElement, 
  @ReferenceLink "foreach_next" "ForEach"

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function MergeLists(QuellListe(), ZielListe() [, Lokation])

@Description
  Verschiebt alle Elemente von der QuellListe() zur ZielListe(). Dies ist eine schnelle Operation,
  da die Element-Daten selber nicht verschoben werden, um die zwei Listen zusammenzuführen (englisch
  "to merge").

@Parameter "QuellListe()"
  Die Liste, aus der die Elemente genommen werden. Diese Liste wird leer sein, nachdem
  diese Funktion abgeschlossen ist.

@Parameter "ZielListe()"
  Die Liste, wohin die Elemente verschoben werden. Diese Liste wird die Elemente beider
  Listen beinhalten, nachdem diese Funktion abgeschlossen ist.

@OptionalParameter "Lokation"
  Position, wo die Elemente in der ZielListe() eingefügt werden. Dies kann einer der folgenden
  Werte sein:
@FixedFont
  @#PB_List_Last  : Hängt die Elemente am Ende der ZielListe() an  (Standard)
  @#PB_List_First : Fügt die Elemente am Anfang der ZielListe() ein
  @#PB_List_Before: Fügt die Elemente vor dem aktuellen Element der ZielListe() ein
  @#PB_List_After : Fügt die Elemente nach dem aktuellen Element der ZielListe() ein
@EndFixedFont

@NoReturnValue

@Example
@Code
  NewList A.s()
  AddElement(A()): A() = "a0"
  AddElement(A()): A() = "a1"
  AddElement(A()): A() = "a2"
  AddElement(A()): A() = "a3"
  
  NewList B.s()
  AddElement(B()): B() = "b0"
  AddElement(B()): B() = "b1"
  AddElement(B()): B() = "b2"
  AddElement(B()): B() = "b3"
    
  ; Fügt die Elemente von A() vor dem "b1" Element in B() ein
  SelectElement(B(), 1)
  MergeLists(A(), B(), #PB_List_Before)
  
  ForEach B()
    Debug B()
  Next
@EndCode

@SeeAlso
  @@SplitList

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SplitList(QuellListe(), ZielListe() [, ErhalteAktuelles])

@Description
  Verschiebt die Elemente der QuellListe() vom aktuellen Element an vorwärts zur ZielListe().
  Dies ist eine schnelle Operation, da die Element-Daten selber nicht verschoben werden, um
  die Listen zu teilen (englisch "to split").

@Parameter "QuellListe()"
  Die Liste, aus der die Elemente abgeteilt ("gesplittet") werden. Das aktuelle Element
  dieser Liste gibt an, wo die Liste geteilt werden soll. Gibt es kein aktuelles Element,
  verbleiben alle Elemente in der QuellListe().

@Parameter "ZielListe()"
  Die Liste, wohin die Elemente verschoben werden. Alle in dieser Liste existierenden
  Elemente werden gelöscht, bevor die neuen Elemente hinzugefügt werden.

@OptionalParameter "ErhalteAktuelles" (englisch "KeepCurrent")
  Gibt an, ob der aktuelle Eintrag der QuellListe() in der QuellListe() verbleibt, oder
  in die ZielListe() verschoben wird. Ist dieser Parameter gleich @#True, dann
  verbleibt das aktuelle Element in der QuellListe().
  Lautet er @#False (Standard), dann wird das aktuelle Element in die
  ZielListe() verschoben.

@NoReturnValue

@Remarks
  Wenn 'ErhalteAktuelles' ("KeepCurrent") auf @#True gesetzt wird, dann wird das
  vorherige Element das neue aktuelle Element in der QuellListe(). Gibt es kein vorheriges
  Element, dann wird die Liste nach Abschluss dieser Funktion kein aktuelles Element mehr haben.
  Die ZielListe() hat kein aktuelles Element.

@Example
@Code
  NewList A()
  NewList B()
  
  For i = 0 To 10
    AddElement(A())
    A() = i
  Next i
  
  ; teilt A() am Element 5 und verschiebt die verbleibenden Elemente nach B()
  SelectElement(A(), 5)
  SplitList(A(), B())
  
  
  Debug " -- A() -- "
  ForEach A()
    Debug A()
  Next
  
  Debug " -- B() -- "
  ForEach B()
    Debug B()
  Next
@EndCode

@SeeAlso
  @@MergeLists

@SupportedOS

;--------------------------------------------------------------------------------------------------------
