;
;     Database library documentation
;
;       (c) Fantaisie Software
;

@Library Database

@Overview
  The database library is an easy set of functions to access SQLite, PostgreSQL, MySQL, DBMaria or any database type (Oracle, MySQL, Access, etc)
  via ODBC. Accessing and updating data is done using SQL queries, therefore it
  is necessary to have an understanding of SQL syntax.
@LineBreak
@LineBreak
  Here are some links about SQL syntax:
@LineBreak
  @InternetLink "http://www.w3schools.com/sql/default.asp" "W3Schools SQL Tutorial"
@LineBreak
  @InternetLink "http://www.hwaci.com/sw/sqlite/lang.html" "SQLite SQL functions"
@LineBreak
  @InternetLink "http://www.postgresql.org/docs/8.4/interactive/index.html" "PostgreSQL manual"
@LineBreak
@LineBreak
  Database programming starts by initializing the database environment using @@UseODBCDatabase, 
  @@UseSQLiteDatabase, @@UseMySQLDatabase and @@UsePostgreSQLDatabase.

@OS Windows
@LineBreak
@LineBreak
  Note: Under Windows, prior to using an ODBC database, it is necessary to establish an ODBC "User Data Source"
  which makes your database available via ODBC and useable with this Database library. For more information,
  refer to Windows's ODBC help document. 

@OS Linux
@LineBreak
@LineBreak
  Note: The iODBC package (including the 'dev' one) must be installed on Linux to be able 
  to use this library. Check out @InternetLink "http://www.iodbc.org" "http://www.iodbc.org"
  in the download section for more information.

@CommandList

@ExampleFile All Database.pb

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = AffectedDatabaseRows(#Database)

@Description
  Returns the number of rows affected by the last @@DatabaseUpdate operation.

@Parameter "#Database"
  The database to use.

@ReturnValue
  Returns the number of rows affected by the last @@DatabaseUpdate operation.

@SeeAlso
  @@DatabaseUpdate
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function CloseDatabase(#Database)

@Description
  Close the specified #Database (and connections/transactions if any). No further operations
  are allowed on this database. 

@Parameter "#Database"
  The database to close. If @#PB_All is specified, all remaining databases are closed.

@NoReturnValue

@Remarks
  All remaining opened databases are automatically closed when the program ends.

@SeeAlso
  @@OpenDatabase, @@OpenDatabaseRequester  
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = DatabaseColumns(#Database)

@Description
  Returns the numbers of columns (fields) from the last executed database query with @@DatabaseQuery.

@Parameter "#Database"
  The database to use.

@ReturnValue
  Returns the number of columns from the last database query.

@SeeAlso
  @@DatabaseColumnName, @@DatabaseColumnType, @@DatabaseColumnSize
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = DatabaseColumnIndex(#Database, ColumnName$)

@Description
  Returns the index of the column after executing a query with @@DatabaseQuery in the opened #Database.
  This can be useful for use with commands like @@GetDatabaseLong which require a column index.

@Parameter "#Database"
  The database to use.

@Parameter "#ColumnName$"
  The name of the column to get the index of.

@ReturnValue
  Returns the index of the specified column, -1 if #ColumnName$ is invalid. This is only valid after having executed a query with @@DatabaseQuery.

@SeeAlso
  @@DatabaseQuery, @@GetDatabaseBlob, @@GetDatabaseDouble, @@GetDatabaseFloat, @@GetDatabaseString, @@GetDatabaseQuad
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Text$ = DatabaseColumnName(#Database, Column)  

@Description
  Return the name of the specified column in the #Database.

@Parameter "#Database"
  The database to use.

@Parameter "Column"
  The column to use.

@ReturnValue
  Returns the name of the column.

@SeeAlso
  @@DatabaseColumns, @@DatabaseColumnType, @@DatabaseColumnSize
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = DatabaseColumnSize(#Database, Column)  

@Description
  Return the size of the specified column in the #Database. It is especially useful when the size
  of the column can change depending of the records, like a blob or string column.

@Parameter "#Database"
  The database to use.

@Parameter "Column"
  The column to use.

@ReturnValue
  Returns the size of the column in bytes.

@SeeAlso
  @@DatabaseColumns, @@DatabaseColumnType, @@DatabaseColumnName

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = DatabaseColumnType(#Database, Column)  

@Description
  Return the type of the specified column in the #Database. 

@Parameter "#Database"
  The database to use.

@Parameter "Column"
  The column to use.

@ReturnValue
  Returns the type of the given column.
  If Result is 0, the type is undefined or the function has failed (e.g. it was not possible to determine the data type).
@LineBreak
@LineBreak
  Type values can be:
@FixedFont
  @#PB_Database_Long  : Numeric format (a Long (.l) in PureBasic)
  @#PB_Database_String: String format (a String (.s) in PureBasic)
  @#PB_Database_Float : Numeric float format (a Float (.f) in PureBasic)
  @#PB_Database_Double: Numeric double format (a Double (.d) in PureBasic)
  @#PB_Database_Quad  : Numeric quad format (a Quad (.q) in PureBasic)
  @#PB_Database_Blob  : Blob format
@EndFixedFont  

@SeeAlso
  @@DatabaseColumns, @@DatabaseColumnName, @@DatabaseColumnSize
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Text$ = DatabaseDriverDescription() 

@Description
  Returns the description of the current database driver. Drivers are listed using the
  @@ExamineDatabaseDrivers and @@NextDatabaseDriver functions.

@NoParameters

@ReturnValue
  Returns the description string.

@Remarks
  This is an @Link "UseODBCDatabase" "ODBC database" specific command.

@SeeAlso
  @@ExamineDatabaseDrivers, @@NextDatabaseDriver, @@DatabaseDriverName
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Text$ = DatabaseDriverName() 

@Description
  Return the name of the current database driver. Drivers are listed using the
  @@ExamineDatabaseDrivers and @@NextDatabaseDriver functions.

@NoParameters

@ReturnValue
  Returns the name of the driver.

@Remarks
  This is an @Link "UseODBCDatabase" "ODBC database" specific command.

@SeeAlso
  @@ExamineDatabaseDrivers, @@NextDatabaseDriver, @@DatabaseDriverDescription

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Error$ = DatabaseError()

@Description
  Returns a description of the last database error in text format. This is especially useful with the following 
  functions: @@OpenDatabase, @@DatabaseQuery and @@DatabaseUpdate.

@NoParameters

@ReturnValue
  Returns the error description.

@Example  
@Code
  ; First, connect to a database with an employee table
  ;
  If DatabaseQuery(#Database, "SELECT * FROM employee") ; Get all the records in the 'employee' table
    ; ...
    FinishDatabaseQuery(#Database)
  Else
    MessageRequester("Error", "Can't execute the query: "+DatabaseError())
  EndIf
@EndCode

@SeeAlso
  @@DatabaseQuery, @@DatabaseUpdate

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function DatabaseID = DatabaseID(#Database)

@Description
  Returns the unique ID which identifies the given '#Database' in the operating system. This 
  function is useful when another library needs a database reference.

@Parameter "#Database"
  The database to use.

@ReturnValue
  Returns the ID for this database connection.

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = DatabaseQuery(#Database, Request$ [, Flags])

@Description
  Executes a SQL query on the given database. Only queries which doesn't change the database
  records are accepted ('SELECT' like queries). To performs database modification, use @@DatabaseUpdate.

@Parameter "#Database"
  The database to use.

@Parameter "Request$"
  The SQL query to execute.

@OptionalParameter "Flags"
  The flags to use. It can be one of the following value:
@FixedFont
  @#PB_Database_StaticCursor : performs the query to access the result in a sequential manner. It's not possible to rewind 
                              with @@PreviousDatabaseRow or @@FirstDatabaseRow on some drivers, but it is the faster way to get the data (default).
  @#PB_Database_DynamicCursor: performs the query to access the result in a random manner using @@PreviousDatabaseRow or @@FirstDatabaseRow. 
                              It can be slower, or even unsupported on some drivers.
@EndFixedFont  

@ReturnValue
  Returns nonzero if the query was successful or zero if it failed (due to a SQL error or a badly-formatted query).

@Remarks
  If the query has succeeded then @@NextDatabaseRow can be used to list returned records
  (see the example below). In the event of an error, the error text can be retrieved with
  @@DatabaseError. It is safe to use @@NextDatabaseRow even if the request
  doesn't return any records. To get the number of columns returned by the query, use @@DatabaseColumns.
@LineBreak
@LineBreak
  Once the query results aren't needed anymore, @@FinishDatabaseQuery has to be called
  to release all the query resources.
@LineBreak
@LineBreak
  The query can contain place holders for bind variables. Such variables must be set before
  calling the function using @@SetDatabaseString, @@SetDatabaseLong etc. After executing the query, 
  the bound variables are cleared and have to be set again for future calls. The syntax for specifying
  bind variables in SQL is dependent on the database. The example below demonstrate the syntax.

@Example  
@Code
  ; First, connect to a database with an employee table
  ;
  If DatabaseQuery(#Database, "SELECT * FROM employee") ; Get all the records in the 'employee' table
  
    While NextDatabaseRow(#Database) ; Loop for each records
      Debug GetDatabaseString(#Database, 0) ; Display the content of the first field      
    Wend
  
    FinishDatabaseQuery(#Database)
  EndIf
@EndCode

@Example Bind variables with SQLite, MySQL and ODBC
@Code
  ; SQLite, MySQL and ODBC shares the same syntax for bind variables. It is indicated by the '?' character
  ;
  SetDatabaseString(#Database, 0, "test")  
  If DatabaseQuery(#Database, "SELECT * FROM employee WHERE id=?")    
    ; ...
  EndIf
@EndCode

@Example PostgreSQL
@Code
  ; PostgreSQL uses another syntax: $1, $2.. into the statement to indicate the undefined parameter
  ;
  SetDatabaseString(#Database, 0, "test")  
  If DatabaseQuery(#Database, "SELECT * FROM employee WHERE id=$1")    
    ; ...
  EndIf
@EndCode

@SeeAlso
  @@DatabaseUpdate, @@NextDatabaseRow
  @@SetDatabaseString, @@SetDatabaseLong, @@SetDatabaseQuad, @@SetDatabaseFloat, @@SetDatabaseDouble
  @@SetDatabaseBlob, @@SetDatabaseNull

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = DatabaseUpdate(#Database, Request$)

@Description
  Executes a modification query on the given database. This command doesn't return
  any record. To perform a 'SELECT' like query, use @@DatabaseQuery.

@Parameter "#Database"
  The database to use.

@Parameter "Request$"
  The query to execute.

@ReturnValue
  Returns nonzero if the query was successful or zero if it failed (due to a SQL error or a badly-formatted query).

@Remarks
  This function is similar to @@DatabaseQuery but is independent from the
  @@NextDatabaseRow function. Therefore it's not possible to do a 'SELECT' like query
  with this function. This function is useful for updating records in the database.
  In the event of an error, the error text can be retrieved with @@DatabaseError.
@LineBreak
@LineBreak
  The update request can contain place holders for bind variables. Such variables must be set before
  calling the function using @@SetDatabaseString, @@SetDatabaseLong etc. After executing the update, 
  the bound variables are cleared and have to be set again for future calls. The syntax for specifying
  bind variables in SQL is dependent on the database. The example below demonstrate the syntax.

@Example
@Code
  ; First, connect to a database with an employee table
  ;
  If DatabaseQuery(#Database, "SELECT * FROM employee") ; Get all the records in the 'employee' table
  
    While NextDatabaseRow(#Database) ; Loop for each records
      
      ; Update the 'checked' field for each records, assuming the 'id' field is 
      ; the first one in the 'employee' table
      ;
      DatabaseUpdate(#Database, "UPDATE employee SET checked=1 WHERE id="+GetDatabaseString(#Database, 0)) 
    Wend
    
    FinishDatabaseQuery(#Database)
  EndIf
@EndCode

@Example Bind variables with SQLite, MySQL and ODBC
@Code
  ; SQLite, MySQL and ODBC shares the same syntax for bind variables. It is indicated by the '?' character
  ;
  SetDatabaseLong(0, 0, 1)
  SetDatabaseString(0, 1, "test")
  DatabaseUpdate(0, "UPDATE employee SET checked=? WHERE id=?")
@EndCode

@Example PostgreSQL
@Code
  ; PostgreSQL uses another syntax: $1, $2.. into the statement to indicate the undefined parameter
  ;
  SetDatabaseLong(0, 0, 1)
  SetDatabaseString(0, 1, "test")
  DatabaseUpdate(0, "UPDATE employee SET checked=$1 WHERE id=$2")
@EndCode

@SeeAlso
  @@DatabaseQuery
  @@SetDatabaseString, @@SetDatabaseLong, @@SetDatabaseQuad, @@SetDatabaseFloat, @@SetDatabaseDouble
  @@SetDatabaseBlob, @@SetDatabaseNull  
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ExamineDatabaseDrivers()

@Description
  Examines the database drivers available on the system.

@NoParameters

@ReturnValue
  If ODBC isn't installed or no drivers
  are available, it returns 0, otherwise @@NextDatabaseDriver can be used to list all the drivers.

@Remarks
  This is an @Link "UseODBCDatabase" "ODBC database" specific command.

@SeeAlso
  @@NextDatabaseDriver, @@DatabaseDriverName, @@DatabaseDriverDescription
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function FinishDatabaseQuery(#Database)

@Description
  Finish the current database SQL query and release its associated resources. Query related functions like
  @@FirstDatabaseRow or @@NextDatabaseRow can't be used anymore.

@Parameter "#Database"
  The database to use.

@NoReturnValue

@Example  
@Code
  ; First, connect to a database with an employee table
  ;
  If DatabaseQuery(#Database, "SELECT * FROM employee") ; Get all the records in the 'employee' table
  
    While NextDatabaseRow(#Database) ; Loop for each records
      Debug GetDatabaseString(#Database, 0) ; Display the content of the first field      
    Wend
    
    FinishDatabaseQuery(#Database)
  EndIf
@EndCode

@SeeAlso
  @@DatabaseQuery

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = FirstDatabaseRow(#Database)

@Description
  Retrieves information about the first #Database row. The flag @#PB_Database_DynamicCursor has to be
  specified to @@DatabaseQuery to have this command working.

@Parameter "#Database"
  The database to use.

@ReturnValue
  If Result is zero, then no row is available

@Remarks
  To access fields within a row, @@GetDatabaseLong, @@GetDatabaseFloat, @@GetDatabaseString can be used.

@SeeAlso
  @@NextDatabaseRow, @@PreviousDatabaseRow, @@GetDatabaseLong

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = GetDatabaseBlob(#Database, Column, *Buffer, BufferLength)

@Description
  Returns the content of the specified database column in the specified buffer as a pointer to the blob memory. This command
  is only valid after a successful @@FirstDatabaseRow, @@PreviousDatabaseRow or @@NextDatabaseRow.

@Parameter "#Database"
  The database to use.

@Parameter "Column"
  The column to use. @@DatabaseColumnIndex is available to get the index of a named column.

@Parameter "*Buffer"
  The address of the blob data.

@Parameter "BufferLength"
  The size of the blob data in bytes.

@ReturnValue
  If 'Result' is 0, then the blob can't be retrieved or its content is empty.

@Remarks
  To determine the type of a column, @@DatabaseColumnType can be used.
  To determine the size of the blob, @@DatabaseColumnSize can be used.
@LineBreak
@LineBreak
  Note: This function can be called only once for each column. Therefore if this value needs
  to be used more than once, the data has to be stored in a variable, since all subsequent
  calls will return the wrong value. This is an ODBC limitation.

@SeeAlso
  @@GetDatabaseDouble, @@GetDatabaseFloat, @@GetDatabaseLong, @@GetDatabaseString, @@GetDatabaseQuad
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result.d = GetDatabaseDouble(#Database, Column)

@Description
  Returns the content of the specified database column as a double precision floating-point number. This command
  is only valid after a successful @@FirstDatabaseRow, @@PreviousDatabaseRow or @@NextDatabaseRow.

@Parameter "#Database"
  The database to use.

@Parameter "Column"
  The column to use. @@DatabaseColumnIndex is available to get the index of a named column.

@ReturnValue
  Returns a double precision floating-point value.

@Remarks
  To determine the type of a column, @@DatabaseColumnType can be used. 
@LineBreak
@LineBreak
  Note: This function can be called only once for each column. Therefore if this value needs
  to be used more than once, the data has to be stored in a variable, since all subsequent
  calls will return the wrong value. This is an ODBC limitation.

@SeeAlso
  @@GetDatabaseBlob, @@GetDatabaseFloat, @@GetDatabaseLong, @@GetDatabaseString, @@GetDatabaseQuad
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result.f = GetDatabaseFloat(#Database, Column)

@Description
  Returns the content of the specified database column as a floating-point number. This command
  is only valid after a successful @@FirstDatabaseRow, @@PreviousDatabaseRow or @@NextDatabaseRow. 

@Parameter "#Database"
  The database to use.

@Parameter "Column"
  The column to use. @@DatabaseColumnIndex is available to get the index of a named column.

@ReturnValue
  Returns a single precision floating-point value.

@Remarks
  To determine the type of a column, @@DatabaseColumnType can be used. 
@LineBreak
@LineBreak
  Note: This function can be called only once for each column. Therefore if this value needs
  to be used more than once, the data has to be stored in a variable, since all subsequent
  calls will return the wrong value. This is an ODBC limitation.
  
@SeeAlso
  @@GetDatabaseBlob, @@GetDatabaseDouble, @@GetDatabaseLong, @@GetDatabaseString, @@GetDatabaseQuad

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = GetDatabaseLong(#Database, Column)

@Description
  Returns the content of the specified #Database column as an integer number. This command
  is only valid after a successful @@FirstDatabaseRow, @@PreviousDatabaseRow or @@NextDatabaseRow.

@Parameter "#Database"
  The database to use.

@Parameter "Column"
  The column to use. @@DatabaseColumnIndex is available to get the index of a named column.

@ReturnValue
  Returns the content of the column as an integer value.

@Remarks
  To determine the type of a column, @@DatabaseColumnType can be used. 
@LineBreak
@LineBreak
  Note: This function can be called only once for each column. Therefore if this value needs
  to be used more than once, the data has to be stored in a variable, since all subsequent
  calls will return the wrong value. This is an ODBC limitation.

@SeeAlso
  @@GetDatabaseBlob, @@GetDatabaseDouble, @@GetDatabaseFloat, @@GetDatabaseString, @@GetDatabaseQuad
    
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result.q = GetDatabaseQuad(#Database, Column)

@Description
  Returns the content of the specified #Database column as a quad number. This command
  is only valid after a successful @@FirstDatabaseRow, @@PreviousDatabaseRow or @@NextDatabaseRow.

@Parameter "#Database"
  The database to use.

@Parameter "Column"
  The column to use. @@DatabaseColumnIndex is available to get the index of a named column.

@ReturnValue
  Returns the content of the column as a quad value.

@Remarks
  To determine the type of a column, @@DatabaseColumnType can be used. 
@LineBreak
@LineBreak
  Note: This function can be called only once for each column. Therefore if this value needs
  to be used more than once, the data has to be stored in a variable, since all subsequent
  calls will return the wrong value. This is an ODBC limitation.

@SeeAlso
  @@GetDatabaseBlob,
  @@GetDatabaseDouble,
  @@GetDatabaseFloat,
  @@GetDatabaseString,
  @@GetDatabaseLong
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Text$ = GetDatabaseString(#Database, Column)

@Description
  Returns the content of the specified #Database column as a string. This command
  is only valid after a successful @@FirstDatabaseRow, @@PreviousDatabaseRow or @@NextDatabaseRow.

@Parameter "#Database"
  The database to use.

@Parameter "Column"
  The column to use. @@DatabaseColumnIndex is available to get the index of a named column.

@ReturnValue
  Returns the content of the column as a string.

@Remarks
  To determine the type of a column, @@DatabaseColumnType can be used. 
@LineBreak
@LineBreak
  Note: This function can be called only once for each column. Therefore if this value needs
  to be used more than once, the data has to be stored in a variable, since all subsequent
  calls will return the wrong value. This is an ODBC limitation.

@SeeAlso
  @@GetDatabaseBlob,
  @@GetDatabaseDouble,
  @@GetDatabaseFloat,
  @@GetDatabaseLong,
  @@GetDatabaseQuad
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = CheckDatabaseNull(#Database, Column)

@Description
  Checks if the content of the specified database column is null. This command
  is only valid after a successful @@FirstDatabaseRow, @@PreviousDatabaseRow or @@NextDatabaseRow.

@Parameter "#Database"
  The database to use.

@Parameter "Column"
  The column to use. @@DatabaseColumnIndex is available to get the index of a named column.

@ReturnValue
  Returns @#True is the data is null, @#False otherwise.

@Remarks
  To determine the type of a column, @@DatabaseColumnType can be used. 
@LineBreak
@LineBreak
  Note: This function can be called only once for each column. Therefore if this value needs
  to be used more than once, the data has to be stored in a variable, since all subsequent
  calls will return the wrong value. This is an ODBC limitation.

@SeeAlso
  @@GetDatabaseBlob,
  @@GetDatabaseDouble,
  @@GetDatabaseFloat,
  @@GetDatabaseLong,
  @@GetDatabaseQuad
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = IsDatabase(#Database)

@Description
  This function evaluates if the given #Database number is a valid and correctly-initialized database.

@Parameter "#Database"
  The database to use.

@ReturnValue
  Returns nonzero if #Database is a valid database connection and zero otherwise.

@Remarks  
  This function is bulletproof and can be used with any value. If Result is not zero then the object is valid and
  initialized, otherwise it returns zero. This is a good way to check that a database is ready to use.

@SeeAlso
  @@OpenDatabase, @@OpenDatabaseRequester
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = NextDatabaseDriver()

@Description
  Retrieves information about the next available database driver. 
  This function must be called after @@ExamineDatabaseDrivers. To get information
  about the current driver, @@DatabaseDriverName and 
  @@DatabaseDriverDescription can be used.

@NoParameters

@ReturnValue
  If Result is 0, no more drivers are available.
  
@Remarks
  This is an @Link "UseODBCDatabase" "ODBC database" specific command.

@SeeAlso
  @@ExamineDatabaseDrivers, @@DatabaseDriverName, @@DatabaseDriverDescription

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = NextDatabaseRow(#Database)

@Description
  Retrieves information about the next database row in the #Database.
  To access fields within a row, @@GetDatabaseLong,
  @@GetDatabaseFloat, @@GetDatabaseString can be used.

@Parameter "#Database"
  The database to use.

@ReturnValue
  If Result is 0, then no more rows are available (i.e. reached the end of the table). 

@SeeAlso
  @@GetDatabaseBlob, @@GetDatabaseDouble, @@GetDatabaseFloat, @@GetDatabaseLong, @@GetDatabaseQuad, @@GetDatabaseString

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = OpenDatabase(#Database, DatabaseName$, User$, Password$ [, Plugin]) 

@Description
  Opens a new database connection.

@Parameter "#Database"
  A number to identify the new database.
  @ReferenceLink "purebasic_objects" "#PB_Any" can be used to auto-generate this number.

@Parameter "DatabaseName$"
  The name of the database to open.  

@Parameter "User$"
  The user name for the connection.

@Parameter "Password$"
  The password for the connection. This can be an empty string if no password is required.

@OptionalParameter "Plugin"
  Specifies the database plug-in to use. It can be one of the following value:
@FixedFont
  @#PB_Database_ODBC      : The database will use ODBC backend (@@UseODBCDatabase has to be called).
  @#PB_Database_SQLite    : The database will use SQLite backend (@@UseSQLiteDatabase has to be called).
  @#PB_Database_PostgreSQL: The database will use PostgreSQL backend (@@UsePostgreSQLDatabase has to be called).
  @#PB_Database_MySQL     : The database will use MySQL backend (@@UseMySQLDatabase has to be called).
@EndFixedFont
  If 'Plugin' isn't specified, then the first registered database plug-in will be used.

@ReturnValue
  Returns nonzero if the database connection was established successfully and zero if not. Error information
  can be received with the @@DatabaseError command.
  If @#PB_Any was used for the #Database parameter, then the generated number is returned.

@SeeAlso
  @@OpenDatabaseRequester, @@CloseDatabase,
  @@UseODBCDatabase, @@UseSQLiteDatabase, @@UsePostgreSQLDatabase, @@UseMySQLDatabase

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = OpenDatabaseRequester(#Database [, Plugin]) 

@Description
  Open the standard ODBC requester to choose which database to open. 

@Parameter "#Database"
  A number to identify the new database.
  @ReferenceLink "purebasic_objects" "#PB_Any" can be used to auto-generate this number.

@OptionalParameter "Plugin"
  Specifies the database plug-in to use. It can be one of the following value:
@FixedFont
  @#PB_Database_ODBC      : The database will use ODBC backend (@@UseODBCDatabase has to be called).
@EndFixedFont
  If 'Plugin' isn't specified, then the first registered database plug-in will be used.

@ReturnValue
  Returns nonzero if the database connection was established successfully and zero if not. Error information
  can be received with the @@DatabaseError command.
  If @#PB_Any was used for the #Database parameter, then the generated number is returned.

@Remarks
  This is an @Link "UseODBCDatabase" "ODBC database" specific command.
@LineBreak
@LineBreak
  Note: This command is not supported on Linux and MacOS X and will return 0.

@SeeAlso
  @@OpenDatabase, @@CloseDatabase

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = PreviousDatabaseRow(#Database)

@Description
  Retrieves information about the previous database row in the #Database. 
  The flag @#PB_Database_DynamicCursor has to be specified to @@DatabaseQuery to have this command working.
  To access to fields inside a row, @@GetDatabaseLong,
  @@GetDatabaseFloat, @@GetDatabaseString can be used.

@Parameter "#Database"
  The database to use.

@ReturnValue
  If Result is 0, then no more rows are available
  (i.e. reached the start of the table).

@Remarks
  If this function returns zero despite additional rows being available before the current one, then the ODBC driver
  does not support data retrieval in a backwards direction. It is not mandatory for an ODBC driver to support this function
  (unlike @@NextDatabaseRow). Of course, if this function works, it will work on every computer using the same driver.
@LineBreak
@LineBreak
  @Link "UseSQLiteDatabase" "SQLite databases" don't support this command.

@SeeAlso
  @@GetDatabaseBlob, @@GetDatabaseDouble, @@GetDatabaseFloat, @@GetDatabaseLong, @@GetDatabaseQuad, @@GetDatabaseString

@SupportedOS


;--------------------------------------------------------------------------------------------------------

@Function SetDatabaseBlob(#Database, StatementIndex, *Buffer, BufferLength)

@Description
  Set the blob for future use with @@DatabaseUpdate.

@Parameter "#Database"
  The database to use.

@Parameter "StatementIndex"
  Undefined query parameter index the blob should be inserted for.
  The first undefined parameter index starts from zero.
  The SQL syntax to specify undefined parameter is database manager dependent. 
  See the following examples to see how to proceed.

@Parameter "*Buffer"
  The address of the blob data.

@Parameter "BufferLength"
  The size of the blob data in bytes.

@NoReturnValue
  
@Example SQLite, MySQL and ODBC

@Code
  ; SQLite, MySQL and ODBC shares the same syntax to insert blob. It is indicated by the '?' character
  ;
  ; The database should be opened and a table PHOTOS with 3 column (BLOB, VARCHAR(255), BLOB)
  ;
  SetDatabaseBlob(0, 0, ?Picture, PictureLength)
  SetDatabaseBlob(0, 1, ?SmallPicture, SmallPictureLength)
  DatabaseUpdate(0, "INSERT INTO PHOTOS (picture, name, small_picture) values (?, 'my description', ?);")
@EndCode


@Example PostgreSQL

@Code
  ; PostgreSQL uses another syntax: $1, $2.. into the statement to indicate the undefined parameter
  ;
  ; The database should be opened and a table PHOTOS with 3 column (BYTEA, VARCHAR(255), BYTEA)
  ;
  SetDatabaseBlob(0, 0, ?Picture, PictureLength)
  SetDatabaseBlob(0, 1, ?SmallPicture, SmallPictureLength)
  DatabaseUpdate(0, "INSERT INTO PHOTOS (picture, name, small_picture) values ($1, 'my description', $2);")
@EndCode
  @Bold "Note:" PostgreSQL uses BYTEA to store large objects. The escaping needed to store binary data into 
  such a column make it often bigger than expected. A good way to store binary data is to encode it
  with @@Base64Encoder before submitting to the database manager.

@SeeAlso
  @@DatabaseUpdate, @@GetDatabaseBlob
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function UseMySQLDatabase([LibraryName$])

@Description
  Initialize the MySQL and MariaDB database environment for future use. 

@OptionalParameter "LibraryName$"
Filename (and path if needed) of the dynamic library to use. As most Linux distribution ship with packaged libmysql.so, 
it can be set to the correct name, so the libmaria.so doesn't have to be package with the executable. If this parameter is not specified,
'libmariadb.dll' (Windows), 'libmariadb.so' (Linux) or 'libmariadb.dylib' (OSX) will be used.

@NoReturnValue

@Remarks
  MySQL and MariaDB (an opensource fork of MySQL) are powerful, server based database
  managers which support very large database and high concurrency. PureBasic uses opensource
  MariaDB library to connect MySQL and MariaDB databases seemlessly, which can be used in commercial
  application without additional licenses. When shipping your PureBasic program, you will need to add 
  'libmariadb.dll' (Windows), 'libmariadb.so' (Linux) or 'libmariadb.dylib' (OSX) found in the
  'PureBasic/Compilers' directory to your package.
@LineBreak
@LineBreak
  There is no additional driver to install, all is ready to connect a MySQL or MariaDB server. For more information 
  about MariaDB: @InternetLink "https://mariadb.org/" "https://mariadb.org/".
@LineBreak
@LineBreak
  A MySQL or MariaDB database has to be connected using @@OpenDatabase before using any other database functions.
  MySQL specific parameters have to be passed in the 'DatabaseName$' parameter of @@OpenDatabase:
@FixedFont
  - host: Name of host or IP address to connect to.
  - port: Port number to connect to at the server host.
  - dbname: The database name. The name can be surrounded with single quotes if it contains spaces: dbname='movies and musics'.

@EndFixedFont
  
@Example
@Code
  UseMySQLDatabase()

  ; You should have a server running on localhost
  ;
  If OpenDatabase(0, "host=localhost port=3306 dbname='test'", "user", "password")
    Debug "Connected to MySQL"
  Else
    Debug "Connection failed: "+DatabaseError()
  EndIf
@EndCode

@SeeAlso
  @@OpenDatabase, @@UseSQLiteDatabase, @@UseODBCDatabase, @@UsePostgreSQLDatabase

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function UsePostgreSQLDatabase()

@Description
  Initialize the PostgreSQL database environment for future use. 

@NoParameters
@NoReturnValue

@Remarks
  PostgreSQL is a powerful, server based database
  manager which support very large database and high concurrency. It is free to use
  in commercial projects, unlike MySQL which requires a licence to use it in a non-GPL program.
  There is no additional driver to install, all is ready to connect a PostgreSQL server. For more information 
  about PostgreSQL: @InternetLink "http://www.postgresql.org" "http://www.postgresql.org".
@LineBreak
@LineBreak
  A PostgreSQL database has to be connected using @@OpenDatabase before using any other database functions.
  PostgresSQL specific parameters can be passed in the 'DatabaseName$' parameter of @@OpenDatabase:
@FixedFont
  - host: Name of host to connect to.
  - hostaddr: Numeric IP address of host to connect to.
  - port: Port number to connect to at the server host.
  - dbname: The database name. Defaults to be the same as the user name. 
  - connect_timeout: Maximum wait for connection, in seconds (write as a decimal integer string). 
                     Zero or not specified means wait indefinitely. 
                     It is not recommended to use a timeout of less than 2 seconds.
@EndFixedFont
  
@Example
@Code
  UsePostgreSQLDatabase()

  ; You should have a server running on localhost
  ;
  If OpenDatabase(0, "host=localhost port=5432", "user", "password")
    Debug "Connected to PostgreSQL"
  Else
    Debug "Connection failed: "+DatabaseError()
  EndIf
@EndCode

@SeeAlso
  @@OpenDatabase, @@UseSQLiteDatabase, @@UseODBCDatabase, @@UseMySQLDatabase

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function UseSQLiteDatabase([LibraryName$])

@Description
  Initialize the SQLite database environment for future use. 

@OptionalParameter "LibraryName$"
  Filename (and path if needed) of the dynamic library to use.
  @LineBreak
  You will be able to use the latest version of the 'dll' file (so, dylib)
  without waiting for a PB update.
  @LineBreak
   Without this file, the static library will be used as usual and the executable will be larger.
  @LineBreak
  It won't rise any error message if the file is not found.
  
@NoReturnValue

@Remarks
  SQLite is a file based, serverless database
  manager. There is no driver or additional files to install, all is ready to use. SQLite is widely
  spread across the industry and is considered to be one of the best embedded database manager
  available. For more information about SQLite: @InternetLink "http://www.sqlite.org" "http://www.sqlite.org".
@LineBreak
@LineBreak
  To create a new empty database, create a new file with @@CreateFile. Database
  commands can now be used to create tables and add records.
@LineBreak
@LineBreak
  A SQLite database has to be opened using @@OpenDatabase before using any other database functions.

@Example  
@Code
  UseSQLiteDatabase()

  Filename$ = OpenFileRequester("Choose a file name", "PureBasic.sqlite", "*.sqlite|*.sqlite", 0)

  If CreateFile(0, Filename$)
    Debug "Database file created"
    CloseFile(0)
  EndIf
  
  If OpenDatabase(0, Filename$, "", "")
    Debug "Connected to PureBasic.sqlite"
    If DatabaseUpdate(0, "CREATE TABLE info (test VARCHAR(255));")
      Debug "Table created"
    EndIf
  EndIf
@EndCode

@SeeAlso
  @@OpenDatabase, @@UsePostgreSQLDatabase, @@UseODBCDatabase, @@UseMySQLDatabase

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = UseODBCDatabase()

@Description
  Initialize the ODBC database environment for future use. It attempts to load the ODBC driver 
  and allocate the required resources. 

@NoParameters

@ReturnValue
  If Result is 0, then the ODBC driver is not available or is 
  too old (ODBC 3.0 or higher is needed) and the Database functions should not be used.

@Remarks
  After calling UseODBCDatabase(), a database has to be opened using @@OpenDatabase using
  a registered ODBC database name as database or @@OpenDatabaseRequester before using any other Database functions.
@LineBreak
@LineBreak
  It is possible to obtain a list of available drivers by calling the function @@ExamineDatabaseDrivers.

@Example  
@Code
  UseODBCDatabase()

  If OpenDatabase(0, "MySQL-ODBC", "user", "password")
    Debug "Connected to MySQL"
  Else
    Debug "Connection failed: "+DatabaseError()
  EndIf
@EndCode

@SeeAlso
  @@OpenDatabase, @@UseSQLiteDatabase, @@UsePostgreSQLDatabase, @@UseMySQLDatabase

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetDatabaseString(#Database, StatementIndex, Value$)

@Description
  Set a string as a bind variable for the next call to @@DatabaseQuery or @@DatabaseUpdate.

@Parameter "#Database"
  The database to use.
  
@Parameter "StatementIndex"
  The index of the bind variable within the statement. The first variable has index 0.

@Parameter "Value$"
  The value to use for the bind variable.

@NoReturnValue

@Remarks
  Bind variables make constructing statements with variable data easier, because there is no
  need to add the data into the string. The statement string can contain the placeholders and
  the data is bound before executing the statement. This method also avoids vulnerabilities
  due to possible SQL injection which can be done if data (such as strings) is directly
  inserted in the statement text. Since the statement only contains the placeholder, there
  is no danger.
@LineBreak
@LineBreak
  See @@DatabaseQuery and @@DatabaseUpdate for examples how to specify bind variables in an
  SQL statement.
  
@SeeAlso
  @@SetDatabaseLong, @@SetDatabaseQuad, @@SetDatabaseFloat, @@SetDatabaseDouble
  @@SetDatabaseBlob, @@SetDatabaseNull, @@DatabaseQuery, @@DatabaseUpdate

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetDatabaseLong(#Database, StatementIndex, Value)

@Description
  Set a long value as a bind variable for the next call to @@DatabaseQuery or @@DatabaseUpdate.

@Parameter "#Database"
  The database to use.
  
@Parameter "StatementIndex"
  The index of the bind variable within the statement. The first variable has index 0.

@Parameter "Value"
  The value to use for the bind variable.

@NoReturnValue

@Remarks
  Bind variables make constructing statements with variable data easier, because there is no
  need to add the data into the string. The statement string can contain the placeholders and
  the data is bound before executing the statement. This method also avoids vulnerabilities
  due to possible SQL injection which can be done if data (such as strings) is directly
  inserted in the statement text. Since the statement only contains the placeholder, there
  is no danger.
@LineBreak
@LineBreak
  See @@DatabaseQuery and @@DatabaseUpdate for examples how to specify bind variables in an
  SQL statement.
  
@SeeAlso
  @@SetDatabaseString, @@SetDatabaseQuad, @@SetDatabaseFloat, @@SetDatabaseDouble
  @@SetDatabaseBlob, @@SetDatabaseNull, @@DatabaseQuery, @@DatabaseUpdate

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetDatabaseQuad(#Database, StatementIndex, Value.q)

@Description
  Set a quad value as a bind variable for the next call to @@DatabaseQuery or @@DatabaseUpdate.

@Parameter "#Database"
  The database to use.
  
@Parameter "StatementIndex"
  The index of the bind variable within the statement. The first variable has index 0.

@Parameter "Value.q"
  The value to use for the bind variable.

@NoReturnValue

@Remarks
  Bind variables make constructing statements with variable data easier, because there is no
  need to add the data into the string. The statement string can contain the placeholders and
  the data is bound before executing the statement. This method also avoids vulnerabilities
  due to possible SQL injection which can be done if data (such as strings) is directly
  inserted in the statement text. Since the statement only contains the placeholder, there
  is no danger.
@LineBreak
@LineBreak
  See @@DatabaseQuery and @@DatabaseUpdate for examples how to specify bind variables in an
  SQL statement.
  
@SeeAlso
  @@SetDatabaseString, @@SetDatabaseLong, @@SetDatabaseFloat, @@SetDatabaseDouble
  @@SetDatabaseBlob, @@SetDatabaseNull, @@DatabaseQuery, @@DatabaseUpdate

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetDatabaseFloat(#Database, StatementIndex, Value.f)

@Description
  Set a float as a bind variable for the next call to @@DatabaseQuery or @@DatabaseUpdate.

@Parameter "#Database"
  The database to use.
  
@Parameter "StatementIndex"
  The index of the bind variable within the statement. The first variable has index 0.

@Parameter "Value.f"
  The value to use for the bind variable.

@NoReturnValue

@Remarks
  Bind variables make constructing statements with variable data easier, because there is no
  need to add the data into the string. The statement string can contain the placeholders and
  the data is bound before executing the statement. This method also avoids vulnerabilities
  due to possible SQL injection which can be done if data (such as strings) is directly
  inserted in the statement text. Since the statement only contains the placeholder, there
  is no danger.
@LineBreak
@LineBreak
  See @@DatabaseQuery and @@DatabaseUpdate for examples how to specify bind variables in an
  SQL statement.
  
@SeeAlso
  @@SetDatabaseString, @@SetDatabaseLong, @@SetDatabaseQuad, @@SetDatabaseDouble
  @@SetDatabaseBlob, @@SetDatabaseNull, @@DatabaseQuery, @@DatabaseUpdate

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetDatabaseDouble(#Database, StatementIndex, Value.d)

@Description
  Set a double value as a bind variable for the next call to @@DatabaseQuery or @@DatabaseUpdate.

@Parameter "#Database"
  The database to use.
  
@Parameter "StatementIndex"
  The index of the bind variable within the statement. The first variable has index 0.

@Parameter "Value.d"
  The value to use for the bind variable.

@NoReturnValue

@Remarks
  Bind variables make constructing statements with variable data easier, because there is no
  need to add the data into the string. The statement string can contain the placeholders and
  the data is bound before executing the statement. This method also avoids vulnerabilities
  due to possible SQL injection which can be done if data (such as strings) is directly
  inserted in the statement text. Since the statement only contains the placeholder, there
  is no danger.
@LineBreak
@LineBreak
  See @@DatabaseQuery and @@DatabaseUpdate for examples how to specify bind variables in an
  SQL statement.
  
@SeeAlso
  @@SetDatabaseString, @@SetDatabaseLong, @@SetDatabaseQuad, @@SetDatabaseFloat
  @@SetDatabaseBlob, @@SetDatabaseNull, @@DatabaseQuery, @@DatabaseUpdate

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetDatabaseNull(#Database, StatementIndex)

@Description
  Set a bind variable to a NULL value for the next call to @@DatabaseQuery or @@DatabaseUpdate.

@Parameter "#Database"
  The database to use.
  
@Parameter "StatementIndex"
  The index of the bind variable within the statement. The first variable has index 0.

@NoReturnValue

@Remarks
  See @@DatabaseQuery and @@DatabaseUpdate for examples how to specify bind variables in an
  SQL statement.
  
@SeeAlso
  @@SetDatabaseString, @@SetDatabaseLong, @@SetDatabaseQuad, @@SetDatabaseFloat, @@SetDatabaseDouble
  @@SetDatabaseBlob, @@DatabaseQuery, @@DatabaseUpdate

@SupportedOS

;--------------------------------------------------------------------------------------------------------

