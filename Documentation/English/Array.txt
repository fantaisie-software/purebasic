;
;     Array library documentation
;
;      (c) 2024 - Fantaisie Software
;

@Library Array

@Overview

  Arrays are structures to store indexed elements. Unlike 
  a @LibraryLink "List" "list" or a @LibraryLink "Map" "map", the
  elements are allocated in a contiguous manner in memory. Therefore, it's
  not possible to easily insert or remove an element. On other hand,
  it provides a very fast direct access to a random element.
@LineBreak
@LineBreak
  To work with Arrays, they have to be declared first. This could be
  done with the keyword @ReferenceLink "dim" "Dim" and can be resized with 
  @ReferenceLink "dim" "ReDim".  
@LineBreak
@LineBreak
  Arrays can be sorted using @@SortArray or @@SortStructuredArray, and can also
  be randomized using @@RandomizeArray.
@LineBreak
@LineBreak
  Note: These arrays are called dynamic because they can change size. However, there are
  also so-called static arrays, which can not be resized and are only used in structures. These arrays
  are written with square brackets. For example: ArrayStatic[2]. See @ReferenceLink "structures" "here". 
  The functions of this Array library can not be used with this type of array.
  
@CommandList

@Section Sort & misc.
  @@sortArray @LineBreak
  @@SortStructuredArray @LineBreak
  @@RandomizeArray @LineBreak

@ExampleFile All Array.pb

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ArraySize(Array() [, Dimension])

@Description
  Returns the size of the array, as specified with @Keyword Dim or @Keyword ReDim.

@Parameter "Array()"
  The array to get the size from.

@OptionalParameter "Dimension"
  For multidimensional arrays, this parameter can be specified to get a specific dimension size. 
  The first dimension starts from 1. 

@ReturnValue
  Returns the size of the array dimension.
  If the array is not initialized, it returns -1 (for example after @FastLink "FreeArray()" or if its initialization has failed).
  
@Remarks
  As specified with @ReferenceLink "dim" "Dim", the number of elements is equal to the size + 1.
  For example: Dim a(2) contains 3 elements from a(0) to a(2) for a size of 2.
  @LineBreak
  @LineBreak
  Does not work with static arrays declared in @ReferenceLink "structures" "Structures". 
  Use @ReferenceLink "compilerfunctions" "SizeOf" instead.
   
@Example 
@Code
  Dim MyArray.l(10)
  Debug ArraySize(MyArray()) ; will print '10'

  Dim MultiArray.l(10, 20, 30)
  Debug ArraySize(MultiArray(), 2) ; will print '20'
  
  Dim MultiArray2.l(2,2,2)
  For n = 0 To ArraySize(MultiArray2(),2)
    MultiArray2(0,n,0) = n+1
  Next n
  Debug MultiArray2(0,0,0) ; will print '1'
  Debug MultiArray2(0,1,0) ; will print '2'
  Debug MultiArray2(0,2,0) ; will print '3'
  Debug ArraySize(MultiArray2(),2) ; will print '2'
@EndCode

@Example 
@Code
  Dim Test.q(99999999999999999)
  
  If ArraySize(Test()) <> -1
    Test(12345) = 123  ; everything fine
  Else
    Debug "Array 'Test()' couldn't be initialized."
  EndIf
@EndCode

@Example 
@Code
Structure MyStructure
  ArrayStatic.l[3]        ; Static array, only in structures
  Array ArrayDynamic.l(4) ; Dynamic array
EndStructure

Debug SizeOf(MyStructure\ArrayStatic)  ; Display 12
Debug SizeOf(MyStructure\ArrayDynamic) ; Display 8

Ex.MyStructure
Debug ArraySize(Ex\ArrayDynamic()); Display 4
@EndCode

@SeeAlso
  @@ListSize, @@MapSize

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = CompareArray(Array1(), Array2() [, Flags])

@Description
  Compare each elements of the two arrays for equality. Recursively compares
  also contents of structured arrays with dynamic elements (such as embedded arrays, lists or maps).
  The two arrays are considered the equal if they have the same type and dimensions and if each
  pair of elements is equal.

@Parameter "Array1(), Array2()"
  The arrays to compare.
  
@OptionalParameter "Flags"
  Can be a combination of the following values:
@FixedFont
  @#PB_String_CaseSensitive : String comparison is case sensitive (a=a). (default)
  @#PB_String_NoCase        : String comparison is case insensitive(a=A).
  @#PB_Memory_FollowPointers: If a structure element is a pointer that is not 0, recursively compare the pointer target. 
                              The default is to compare only the pointer value itself. See remarks below for details.
@EndFixedFont

@ReturnValue
  Returns nonzero if both arrays are the same or zero if they differ.
  
@Remarks
  The @#PB_Memory_FollowPointers option is for advanced users and requires special care to avoid crashes.
  If this option is used then all pointer values must point to valid and initialized memory or have the value 0.
  It is also not allowed to have loops in the pointed elements (a chain of pointers that refers back to itself).

@Example
@Code
  Dim A(4)
  A(0) = 10
  A(1) = 20
  A(2) = 30
  A(3) = 40

  Dim B(4)
  B(0) = 10
  B(1) = 20
  B(2) = 50 ; Not equal to A(2)
  B(3) = 40

  Debug CompareArray(A(), B()) ; Not equal
@EndCode

@SeeAlso
  @@CompareList, @@CompareMap

@SupportedOS


;--------------------------------------------------------------------------------------------------------

@Function Result = CopyArray(SourceArray(), DestinationArray())

@Description
  Copy every elements of 'SourceArray()' into 'DestinationArray()'. 
  After a successful copy, the two arrays are identical. The arrays must have the
  same number of dimensions.

@Parameter "SourceArray()"
  The array to copy from.

@Parameter "DestinationArray()"
  The array to copy to. Every element previously found in this array will be deleted.
  This array must be of the same type (native or structured) and the same
  number of dimensions of the source array.

@ReturnValue
  Returns nonzero if the copy succeeded or zero if it failed.

@Example 

@Code
  Dim Numbers(5)
  Dim NumbersCopy(10)
  
  Numbers(0) = 128
  Numbers(5) = 256
  
  Debug "Array size before copy: "+Str(ArraySize(NumbersCopy())) ; will print 10
  
  CopyArray(Numbers(), NumbersCopy())
  
  Debug "Array size after copy: "+Str(ArraySize(NumbersCopy())) ; will print 5
  Debug NumbersCopy(0)
  Debug NumbersCopy(5)
@EndCode

@SeeAlso
  @@CopyList, @@CopyMap


@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function FreeArray(Array())

@Description
  Free the specified 'Array()' and release all its associated memory. To access it again
  @ReferenceLink "dim" "Dim" has to be called.

@Parameter "Array()"
  The array to free.

@NoReturnValue

@SeeAlso
  @@FreeList, @@FreeMap

@SupportedOS
