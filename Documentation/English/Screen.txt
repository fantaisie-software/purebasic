;
;     Screen library documentation
;
;      (c) 2023 - Fantaisie Software
;

@Library Screen

@Overview

A screen is a surface used to display game accelerated content like @LibraryLink "Sprite" "sprites", 
or @LibraryLink "Engine3D" "3D worlds". A screen can be created either in a regular @LibraryLink "window" "window",
or using the whole display (fullscreen mode).
@LineBreak
@LineBreak
@Bold "Windows": DirectX 9 is used for screen creation which your programs to use hardware acceleration if available. 
Two additional @ReferenceLink "ide_compiler" "Subsystems" are also available, depending of the needs: "OpenGL" and "DirectX11" which
respectively leverage OpenGL and DirectX11 to handle screen creation.
@LineBreak
@LineBreak
@Bold "Linux": OpenGL is used to manage the screen which allows to use hardware acceleration.
@LineBreak
@LineBreak
@Bold "MacOS X": OpenGL is used to manage the screen which allows to use hardware acceleration.

@CommandList

@ExampleFile All Sprite.pb
@ExampleFile Linux Sprite.pb
@ExampleFile All WindowedScreen.pb

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function ChangeGamma(RedIntensity, GreenIntensity, BlueIntensity)

@Description
  Changes the Gamma for the current screen. This only works in full screen mode (not in windowed mode). Red,
  Green and Blue channels intensity can be changed individually. This function can be used to do full screen fade-in/fade-out, 
  color splashing etc. If it does not do anything, then the hardware does not support it (no emulation is
  provided, due to the high number of operations required to perform it in software).
  
@Parameter "RedIntensity, GreenIntensity, BlueIntensity"
  The new intensity to apply. Valid values for each channel are from 0 to 255.

@NoReturnValue  

@Example
@Code
  ChangeGamma(255, 255, 0)   ; Will remove completely the blue channel from the screen
@EndCode

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function ClearScreen(Color)

@Description
  Clear the whole screen with the specified color. 
  
@Parameter "Color"
  The color to use to clear the screen. @@RGB can be used to get a valid color value.
  A table with common colors is available @ReferenceLink "colortable" "here".

@NoReturnValue

@Remarks
  ClearScreen() has to be always called outside a @@StartDrawing : @@StopDrawing block.

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function CloseScreen()

@Description
  Close the current screen (either windowed or full screen mode). After closing a screen, all the sprites
  must be reloaded as the screen format has been lost and the video memory released. An application or game
  can switch from full screen to windowed mode on the fly without any problem.
      
@NoParameters

@NoReturnValue

@SeeAlso
  @@OpenScreen, @@OpenWindowedScreen

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function FlipBuffers()

@Description
  Flip the back and front buffers of the current screen. The invisible area is now visible and vice versa,
  which allowss to do a 'double-buffering' effect (flicker free graphical displays).
  A screen must have been opened with @@OpenScreen or @@OpenWindowedScreen. The way the buffer are flipped 
  (with or without synchronization) is set by @@OpenScreen or @@OpenWindowedScreen.

@NoParameters

@NoReturnValue

@Remarks
  FlipBuffers() has to be called outside a @@StartDrawing : ... : @@StopDrawing program block.
  @LineBreak
  @LineBreak
  FlipBuffers() must be called in each event loop on a @Link "Screen/OpenScreen" "fullscreen" to handle
  events for @Link "Joystick/ExamineJoystick" "joystick" / @Link "Keyboard/ExamineKeyboard" "keyboard"" /
  @Link "Mouse/ExamineMouse" "mouse" properly.
  
@SeeAlso
  @@OpenScreen, @@OpenWindowedScreen

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = IsScreenActive()

@Description
  Games and full screen applications using PureBasic functions run under a multitasking environment.
  This means that the user can switch back from full screen to the normal
  desktop. This change can be detected with this function and appropriate actions should be taken,
  such as @@ReleaseMouse, pause the game, stop the sounds etc. This function must be called after @@FlipBuffers,
  as the events are handled inside @@FlipBuffers.
  
@NoParameters

@ReturnValue
  Nonzero if the screen is still active, zero otherwise.

@SeeAlso
  @@OpenScreen, @@OpenWindowedScreen, @@ReleaseMouse, @@FlipBuffers
        
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ScreenID()

@Description
  Returns the OS ScreenID.

@NoParameters

@ReturnValue
  The OS ScreenID.

@OS Windows
  On Windows this is a normal WindowID so any function which needs such an ID can use it, like 
  @@PlayMovie for example.
      
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ScreenWidth()

@Description
  Returns the current screen width, previously opened with @@OpenScreen or @@OpenWindowedScreen.
  
@NoParameters

@ReturnValue
  The current screen width, or zero if no screen is opened.
  
@SeeAlso
  @@OpenScreen, @@OpenWindowedScreen, @@ScreenHeight, @@ScreenDepth

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ScreenHeight()

@Description
  Returns the current screen height, previously opened with @@OpenScreen or @@OpenWindowedScreen.
  
@NoParameters

@ReturnValue
  The current screen height, or zero if no screen is opened.
  
@SeeAlso
  @@OpenScreen, @@OpenWindowedScreen, @@ScreenWidth, @@ScreenDepth

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ScreenDepth()

@Description
  Returns the current screen depth, previously opened with @@OpenScreen or @@OpenWindowedScreen.
  
@NoParameters
  
@ReturnValue
  The current screen depth, or zero if no screen is opened. Depth is a value between 8 and 32.
  
@SeeAlso
  @@OpenScreen, @@OpenWindowedScreen, @@ScreenWidth, @@ScreenHeight

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function SetFrameRate(FrameRate)

@Description
  Set the frame rate (in frames per second) for the current screen. This is especially useful
  for windowed screen mode where there is no refresh rate for the screen. This function
  sets the maximum number of times per second that the @@FlipBuffers function is called.

@Parameter "FrameRate"
  The new framerate to set.
  
@NoReturnValue
      
@SeeAlso
  @@OpenScreen, @@OpenWindowedScreen, @@FlipBuffers

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = OpenScreen(Width, Height, Depth, Title$ [, FlipMode [, RefreshRate]])

@Description
  Opens a new screen according to the specified 'Width', 'Height' and 'Depth'. 
  @@InitSprite has to be called successfully before using this command. The 
  opened screen is created with 2 video buffers to allow double 
  buffering, especially useful for games. The buffers can be manipulated with 
  the @@FlipBuffers function.

@Parameter "Width, Height"
  The screen resolution, in pixels. The specified resolution has to be supported
  or the screen won't be created. @@ExamineScreenModes can be used to get a full list of supported resolution.

@Parameter "Depth"
  It can be one the following values:
@FixedFont
  16: 65000 colors, fixed palette
  24: 16 Mo colors, fixed palette
  32: 16 Mo colors, faster than 24-bit mode, allows alpha blending
@EndFixedFont

@Parameter "Title$"
  The title for the application which will be displayed when switching back to the desktop. 
  (Windows only). It will be displayed in the taskbar, so it's recommended to use a title 
  related to the application name.

@OptionalParameter "FlipMode"
  Sets the screen synchronization methods used when flipping buffers (also known as 'Vertical blank synchronization').
  It can have one of the following values:
@FixedFont
   @#PB_Screen_NoSynchronization   : disable synchronization 
   @#PB_Screen_WaitSynchronization : enable synchronization (default value)
   @#PB_Screen_SmartSynchronization: enable synchronization, with a CPU saver routine when the program doesn't consume
                                    all the CPU time (full screen mode only)
@EndFixedFont
  Waiting for the screen synchronization allows the flip to be perfect (no 'tearing'
  or other visible artifacts) because the flip is performed when the screen has been fully drawn (and when the
  screen spot is outside of visible screen area). This also link the flip frequence to the actual screen refresh, ie: for 60Hz screen it
  could have at most 60 flip per seconds, etc.

@OptionalParameter "RefreshRate"
  Set the refresh rate (in Hz) for the new screen. If it can't be handled, then OpenScreen() will fail. 
  @@ExamineScreenModes can be used to get a full list of supported refresh rates.
@LineBreak
  Note: on Windows, the refresh rate could be locked or forced by the video card drivers, so it could be inaccurate.  

@ReturnValue
  Nonzero if the screen has been successfully opened, zero otherwise.

@Remarks
  The @LibraryLink "Requester" "Requester" functions cannot be used on screens
  created with OpenScreen.
@LineBreak
@LineBreak  
  To open a screen area on a regular window, see @@OpenWindowedScreen.

@SeeAlso
  @@OpenWindowedScreen, @@FlipBuffers

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = OpenWindowedScreen(WindowID, x, y, Width, Height [, AutoStretch, RightOffset, BottomOffset [, FlipMode]])

@Description
  Open a new screen area according to given parameters on the given Window, which must be
  opened before using @@OpenWindow. @@InitSprite has to be called successfully before using this command.
  The "windowed screen" is able to use the hardware acceleration the same way than 
  full-size @@OpenScreen function. As a window is opened, the window events have to be processed with @@WindowEvent
  to have the correct behaviour. All the events needs to be processed before flipping the buffers (see the examples
  below).

@Parameter "WindowID"
  The window to use to create the screen. @@WindowID can be used to get a valid window identifier.

@Parameter "x, y"
  The screen position in the specified window, in pixels.

@Parameter "Width, Height"
  The screen resolution, in pixels.

@OptionalParameter "AutoStretch"
  If set to @#True, then the screen area will automatically resize (and its contents will be zoomed
  to new screen size) when the window size changes.

@OptionalParameter "RightOffset, BottomOffset"
  Define the margin on the right and bottom of the window, in pixels (for @Link "StatusBar/CreateStatusBar" "statusbar" for example). 

@OptionalParameter "FlipMode"
  Sets the screen synchronization methods used when flipping buffers (also known as 'Vertical blank synchronization').
  It can have one of the following values:
@FixedFont
   @#PB_Screen_NoSynchronization   : disable synchronization 
   @#PB_Screen_WaitSynchronization : enable synchronization (default value)
   @#PB_Screen_SmartSynchronization: enable synchronization, with a CPU saver routine when the program doesn't consume
       all the CPU time (full screen mode only)
@EndFixedFont
  Waiting for the screen synchronization allows the flip to be perfect (no 'tearing'
  or other visible artifacts) because the flip is performed when the screen has been fully drawn (and when the
  screen spot is outside of visible screen area). This also link the flip frequence to the actual screen refresh, ie: for 60Hz screen it
  could have at most 60 flip per seconds, etc.
@Linebreak  
@Linebreak
  The opened screen is created with 2 video buffers to allow you to do double buffering, especially useful for games. 
  The buffers can be manipulated with the @@FlipBuffers function. 

@ReturnValue
  Nonzero if the screen has been successfully opened, zero otherwise.

@Remarks
  Only one windowed screen can be opened at one time. The screen dimension can't be greater than the window size or artefacts can occurs.

@Example Fixed screen size with gadgets
@Code
  If InitSprite() = 0
    MessageRequester("Error", "Can't open screen & sprite environment!", 0)
    End
  EndIf
  
  If OpenWindow(0, 0, 0, 220, 160, "A screen in a window...", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
    ButtonGadget(0, 170, 135, 45, 20, "Quit")

    If OpenWindowedScreen(WindowID(0), 0, 0, 160, 160)
      CreateSprite(0, 20, 20)
      If StartDrawing(SpriteOutput(0))
        Box(0, 0, 20, 20, RGB(255, 0, 155))
        Box(5, 5, 10, 10, RGB(155, 0, 255))
        StopDrawing()
      EndIf
    Else
      MessageRequester("Error", "Can't open windowed screen!", 0)
      End
    EndIf
  EndIf
  
  direction = 2
  Repeat
    ; It's very important to process all the events remaining in the queue at each frame
    ;
    Repeat
      Event = WindowEvent()
      
      Select Event 
        Case #PB_Event_Gadget
          If EventGadget() = 0
            End
          EndIf
        
        Case #PB_Event_CloseWindow
          End 
      EndSelect
    Until Event = 0
  
    FlipBuffers() 
    ClearScreen(RGB(0, 0, 0))
    DisplaySprite(0, x, x)
    x + direction
    If x > 140 : direction = -2 : EndIf
    If x < 0   : direction =  2 : EndIf
    Delay(1)
  ForEver
@EndCode
@Image openwindowedscreen.png

@Example Screen with enabled auto-stretch and bottom-offset feature
@Code
  If InitSprite() = 0
    MessageRequester("Error", "Can't open screen & sprite environment!", 0)
    End
  EndIf
  
  If OpenWindow(0, 0, 0, 420, 200, "A screen in a window...", #PB_Window_SystemMenu | #PB_Window_SizeGadget | #PB_Window_ScreenCentered)
    CreateStatusBar(0, WindowID(0))
      AddStatusBarField(420)
      
    StatusBarText(0, 0, "Automatically zoomed screen area when changing window size...")
    
    If OpenWindowedScreen(WindowID(0), 0, 0, 420, 200, #True, 0, 20)
  
      CreateSprite(0, 50, 50) ; Create an empty sprite, will be whole black
        
      Repeat
        ; It's very important to process all the events remaining in the queue at each frame
        ;
        Repeat
          Event = WaitWindowEvent(10)
          
          If Event = #PB_Event_CloseWindow
            End
          EndIf
        Until Event = 0
        
        FlipBuffers()
        ClearScreen(RGB(0, 0, 200)) ; A blue background
        
        DisplaySprite(0, 10, 10)  ; Display our black box at the left-top corner
        DisplaySprite(0, 260, 10) ; Display our black box at the right-top corner
      ForEver
      
    Else
      MessageRequester("Error", "Can't open windowed screen!", 0)
    EndIf
  EndIf
@EndCode
@Image openwindowedscreen2.png
@Linebreak
  For a more detailed example look at @ExampleFile All WindowedScreen.pb

@SeeAlso
  @@OpenScreen

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function OutputID = ScreenOutput()

@Description
  Returns the OutputID of the currently used screen to perform 2D rendering operations on it. It will use
  the PureBasic @LibraryLink "2ddrawing" "2DDrawing library" and can only be used within a @@StartDrawing / 
  @@StopDrawing block. The memory allocated in ScreenOutput() is released on StopDrawing().

@NoParameters

@ReturnValue
  The OutputID of the currently used screen to perform 2D rendering operations on it.

@Remarks
  On Linux and OS X, ScreenOutput() copies the whole screen buffer back to main memory to do 2D drawing operations 
  (OpenGL doesn't allow direct buffer access). Therefore drawing on a screen is very slow and should be avoided.
  ScreenOutput() has to be called in the same thread where @@OpenScreen was called.

@Example
@Code
  StartDrawing(ScreenOutput())
    ; do some drawing stuff here...
  StopDrawing()
@EndCode

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ExamineScreenModes()

@Description
  Starts to examine the available screen modes on the local computer. The screen modes list can be
  retrieved with the help of the @@NextScreenMode function.
   
@NoParameters

@ReturnValue
  Nonzero if the screen modes has been successfully listed, zero otherwise.

@SeeAlso
  @@NextScreenMode

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = NextScreenMode()

@Description
  This function should be called after @@ExamineScreenModes. It will go step-by-step into
  the screen modes list. The current screen mode information can be retieved with the following
  functions: @@ScreenModeWidth, @@ScreenModeHeight, @@ScreenModeDepth and @@ScreenModeRefreshRate.

@NoParameters
  
@ReturnValue
  Nonzero if there is another screenmode to be listed, zero otherwise.

@Example
@Code
  InitSprite()

  If ExamineScreenModes()
    While NextScreenMode()
      Debug Str(ScreenModeWidth())+"x"+Str(ScreenModeHeight())+"x"+Str(ScreenModeDepth())+"@"+Str(ScreenModeRefreshRate())+"Hz"
    Wend
  EndIf
@EndCode

@SeeAlso
  @@ExamineScreenModes, @@ScreenModeWidth, @@ScreenModeHeight, @@ScreenModeDepth, @@ScreenModeRefreshRate

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Depth = ScreenModeDepth()

@Description
  Returns the depth of the current screenmode listed with @@ExamineScreenModes and
  @@NextScreenMode functions. 

@NoParameters
  
@ReturnValue
  The depth of the current listed screenmode. Depth can be either 8, 15, 16, 24 or 32-bit depending
  on the graphic card.

@SeeAlso
  @@ExamineScreenModes, @@NextScreenMode, @@ScreenModeWidth, @@ScreenModeHeight, @@ScreenModeRefreshRate
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Height = ScreenModeHeight()

@Description
  Returns the height of the current screenmode listed with @@ExamineScreenModes and
  @@NextScreenMode functions.
  
@NoParameters
  
@ReturnValue
  The height (in pixels) of the current listed screenmode.

@SeeAlso
  @@ExamineScreenModes, @@NextScreenMode, @@ScreenModeWidth, @@ScreenModeDepth, @@ScreenModeRefreshRate
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function RefreshRate = ScreenModeRefreshRate()

@Description
  Returns the refresh-rate  of the current screenmode listed with @@ExamineScreenModes and
  @@NextScreenMode functions.
  
@NoParameters
  
@ReturnValue
  The refresh-rate (in hertz) of the current listed screenmode.

@Remarks
  On OS X, many notebook and monitors returns 0.

@SeeAlso
  @@ExamineScreenModes, @@NextScreenMode, @@ScreenModeWidth, @@ScreenModeHeight, @@ScreenModeDepth
  
@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Width = ScreenModeWidth()

@Description
  Returns the width of the current screenmode listed with @@ExamineScreenModes and
  @@NextScreenMode functions.
  
@NoParameters
  
@ReturnValue
  The width (in pixels) of the current listed screenmode.

@SeeAlso
  @@ExamineScreenModes, @@NextScreenMode, @@ScreenModeHeight, @@ScreenModeDepth, @@ScreenModeRefreshRate
  
@SupportedOS
