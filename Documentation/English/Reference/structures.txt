@Title Structures

@Syntax

  @Keyword Structure <name> [@Keyword Extends <name>] [Align <numeric constant expression>]
    ...
  @Keyword EndStructure 

@Description

  @Keyword Structure is useful to define user type, and access some OS memory areas. Structures can be used 
  to enable faster and easier handling of data files. It is very useful as you can group into the same 
  object the information which are common. Structures fields are accessed with the @Keyword "\" option. Structures 
  can be nested. Statics arrays are supported inside structures. @LineBreak
  @LineBreak
  
  Structure fields must have an explicit type among all @ReferenceLink "variables" "Basic Types" supported 
  by PureBasic, i.e. Byte (.b), Ascii (.a), Character (.c), Word (.w) , Unicode (.u), Long (.l), 
  Integer (.i), Float (.f ), Quad (.q), Double (.d)), String (.s) and Fixed String (.s{ Length}).
  @LineBreak
  Dynamic objects like arrays, lists and maps are also supported inside structure and are automatically initialized
  when the object using the structure is created. To declare such field, use the following keywords:
  @Keyword "Array", @Keyword "List" and @Keyword "Map". @LineBreak
  @LineBreak
  
  Generally, structures are used in association with a variable, an
  @LibraryLink "array" "array", a @LibraryLink "list" "list", or a 
  @LibraryLink "map" "map". However, advanced users will be able to allocate a 
  memory structure with @@AllocateStructure and free it with @@FreeStructure. 
  It is also possible to initialize a structure in memory with 
  @ReferenceLink "compilerfunctions" "InitializeStructure()", to copy it with 
  @ReferenceLink "compilerfunctions" "CopyStructure()", reset it to zero with 
  @ReferenceLink "compilerfunctions" "ClearStructure()" and reinitialize it with 
  @ReferenceLink "compilerfunctions" "ResetStructure()"
  @LineBreak
  @LineBreak
  It's possible to perform a full structure copy by using the equal affectation between two structure element of the same type.
  @LineBreak
  @LineBreak
  
  The optional @Keyword Extends parameter allows to extends another structure with new fields. All fields 
  found in the extended structure will be available in the new structure and will be placed before 
  the new fields. This is useful to do basic inheritance of structures. @LineBreak
  @LineBreak
  
  For advanced users only. The optional @Keyword Align parameter allows to adjust alignment between every structure field. The default alignment
  is 1, meaning no alignment. For example, if the alignment is set to 4, every field offset will be on a 4 byte boundary.
  It can help to get more performance while accessing structure fields, but it can use more memory, as some space
  between each fields will be wasted. The special value @#PB_Structure_AlignC can be used to align the structure
  as it would be done in language C, useful when @ReferenceLink "import_endimport" "importing" C structures to use with API functions.
  @LineBreak
  @LineBreak
  
  @ReferenceLink "compilerfunctions" "SizeOf" can be used with structures to get the size of the structure and @ReferenceLink "compilerfunctions" "OffsetOf" can be used to retrieve 
  the index of the specified field. @LineBreak 
  @LineBreak
  
  Please note, that in structures a @Bold "static array[]" doesn't behave like the normal BASIC array (defined using @ReferenceLink "Dim" Dim)
  to be conform to the C/C++ structure format (to allow direct API structure porting). This means that a@Bold "["2@Bold "]" will 
  allocate an array from 0 to 1 where Dim a@Bold "("2@Bold ")" will allocate an array from 0 to 2. And library functions 
  @LibraryLink "Array" "Array" don't work with them.
  @LineBreak
  @LineBreak
  
  When using @ReferenceLink "memory" "pointers" in structures, the '*' has to be omitted when using the field, once more to ease API code porting. It can be
  seen as an oddity (and to be honest, it is) but it's like that since the very start of PureBasic and many, many sources rely
  on that so it won't be changed.
  @LineBreak
  @LineBreak
  
  When using a lot of structure fields you can use the @ReferenceLink "with_endwith" "With" : @ReferenceLink "with_endwith" "EndWith" 
  keywords to reduce the amount of code to type and ease its readability.

@Example 

@Code
  Structure Person
    Name.s
    ForName.s 
    Age.w 
  EndStructure

  Dim MyFriends.Person(100)

  ; Here the position '0' of the array MyFriend()
  ; will contain one person and it's own information

  MyFriends(0)\Name = "Andersson"
  MyFriends(0)\Forname = "Richard" 
  MyFriends(0)\Age = 32
@EndCode

@Example A more complex structure (Nested and static array)

@Code
  Structure Window
    *NextWindow.Window  ; Points to another window object
    x.w 
    y.w
    Name.s[10]  ; 10 Names available (from 0 to 9)
  EndStructure
@EndCode

@Example Extended structure 

@Code
  Structure MyPoint
    x.l 
    y.l
  EndStructure

  Structure MyColoredPoint Extends MyPoint
    color.l 
  EndStructure

  ColoredPoint.MyColoredPoint\x = 10
  ColoredPoint.MyColoredPoint\y = 20
  ColoredPoint.MyColoredPoint\color = RGB(255, 0, 0)
@EndCode


@Example Structure copy

@Code
  Structure MyPoint
    x.l 
    y.l
  EndStructure

  LeftPoint.MyPoint\x = 10
  LeftPoint\y = 20
  
  RightPoint.MyPoint = LeftPoint
  
  Debug RightPoint\x
  Debug RightPoint\y
@EndCode

@Example Dynamic object

@Code
  Structure Person
    Name$
    Age.l
    List Friends$()
  EndStructure

  John.Person
  John\Name$ = "John"
  John\Age   = 23
  
  ; Now, add some friends to John
  ;
  AddElement(John\Friends$())
  John\Friends$() = "Jim"

  AddElement(John\Friends$())
  John\Friends$() = "Monica"
  
  ForEach John\Friends$()
    Debug John\Friends$()
  Next
@EndCode


@Example Static, dynamic array and passing a structure to a procedure
@Code
  Structure Whatever
    a.l
    b.l[2]          ; Static array (Standard C) with 2 values b[0] and b[1], not resizable
    Array c.l(3,3)  ; Dynamic array with 16 values c(0,0) to c(3,3), resizable with ReDim()
  EndStructure

  MyVar.Whatever

  Procedure MyProcedure(*blahblah.Whatever)
    *blahblah\a = 5
    *blahblah\b[0] = 1
    *blahblah\b[1] = 2
    *blahblah\c(3,3) = 33
  EndProcedure

  MyProcedure(@MyVar)
  Debug MyVar\a
  Debug MyVar\b[0]
  Debug MyVar\b[1]
  Debug MyVar\c(3,3)
  
  ;Debug MyVar\c(0,10) ; Out-of-bounds index error
  ReDim MyVar\c(3,10)  ; Beware, only the last dimension can be resized!
  Debug  MyVar\c(0,10) ; Cool, the array is bigger now!
@EndCode


@Example Nested structure(s)
@Code
  Structure pointF 
    x.f 
    y.f 
  EndStructure 
   
  Structure Field 
    Field1.q 
    Field2.s{6}
    Field3.s
    Array Tab.pointF(3)  
  EndStructure 
 
  Define MyVar.Field 
 
  MyVar\Tab(3)\x = 34.67
@EndCode


@Example Alignment

@Code
  Structure Type Align 4
    Byte.b
    Word.w
    Long.l
    Float.f
  EndStructure
  
  Debug OffsetOf(Type\Byte)   ; will print 0
  Debug OffsetOf(Type\Word)   ; will print 4
  Debug OffsetOf(Type\Long)   ; will print 8
  Debug OffsetOf(Type\Float)  ; will print 12
@EndCode


@Example Pointers

@Code
  Structure Person
    *Next.Person ; Here the '*' is mandatory to declare a pointer
    Name$
    Age.b
  EndStructure

  Timo.Person\Name$ = "Timo"
  Timo\Age = 25
  
  Fred.Person\Name$ = "Fred"
  Fred\Age = 25
  
  Timo\Next = @Fred ; When using the pointer, the '*' is omitted
  
  Debug Timo\Next\Name$ ; Will print 'Fred'
@EndCode

@LineBreak
@LineBreak 

; -------------------------------------------------------------------------------------------------
@FormatIf HTML
<br><hr><br>
@FormatEndIf

@Syntax 

  @Keyword StructureUnion
    Field1.Type
    Field2.Type
    ...
  @Keyword EndStructureUnion

@Description 

  Structure union are only useful for advanced programmers who want to save some memory 
  by sharing some fields inside the same structure. It's like the 'union' keyword in C/C++. 
  @LineBreak
  @LineBreak
  Note: Each field in the @Keyword "StructureUnion" declaration can be of a different
  @ReferenceLink "variables" "type".

@Example

@Code
  Structure Type
    Name$
    StructureUnion
      Long.l      ; Each field (Long, Float and Byte) resides at the same address in memory.
      Float.f     ; 
      Byte.b      ;
    EndStructureUnion
  EndStructure
@EndCode

    @Example Example RGB

@Code
  Structure StrColor
    Red.a
    Green.a
    Blue.a
    Alpha.a
  EndStructure

  Structure StrColorU
    StructureUnion
      Component.StrColor
      Color.l
      Byte.a[4]
    EndStructureUnion
  EndStructure

  Define Color1.StrColorU

  Color1\Color = RGBA($10,$20,$30,$FF)
  Debug "hex = " + Hex(Color1\Color, #PB_Long)  ;hex = FF302010 (little-endian cpu)
  Debug "r = " + Hex(Color1\Component\Red)      ;r = 10
  Debug "g = " + Hex(Color1\Component\Green)    ;g = 20
  Debug "b = " + Hex(Color1\Component\Blue)     ;b = 30
  Debug "a = " + Hex(Color1\Component\Alpha)    ;a = FF

  Debug "by0 = " + Hex(Color1\Byte[0])          ;by0 = 10
  Debug "by1 = " + Hex(Color1\Byte[1])          ;by1 = 20
  Debug "by2 = " + Hex(Color1\Byte[2])          ;by2 = 30
  Debug "by3 = " + Hex(Color1\Byte[3])          ;by3 = FF
@EndCode

  @Example Example date handling

@Code
  Structure date ; jj.mm.yyyy
    day.s{2}
    dot.s{1}
    month.s{2}
    dot.s{1}
    year.s{4}
  EndStructure
  
  Structure dateU
    StructureUnion
      s.s{10}
      d.date
    EndStructureUnion
  EndStructure
  
  Dim d1.dateU(365)
 
  ;An array 
  d1(0)\s = "05.04.2028"

  Debug d1(0)\d\day
  Debug d1(0)\d\month
  Debug d1(0)\d\year

  ;A variable
  d2.date2\s = "15.11.2030"
  
  Debug d2\d\day
  Debug d2\d\month
  Debug d2\d\year
@EndCode

@LineBreak
@LineBreak 
 
; -------------------------------------------------------------------------------------------------
@FormatIf HTML
<br><hr><br>
@FormatEndIf

