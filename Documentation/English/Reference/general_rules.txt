@Title General Syntax Rules


PureBasic has established rules which never change. These are:

@Section Comments
@FormatIf HTML
<!-- There is a bug somewhere, and i had to do this work around. Mesa -->
<blockquote>
  Comments are marked by the semicolon character <b><font color="#006666">';'</font></b>.
  All text entered after the semicolon, and up to the end of the line, is ignored by the compiler.
</blockquote>
@FormatEndIf

  @Example
  
@Code
  If a = 10 ; This is a comment to indicate something.
@EndCode

@FormatIf HTML
<br><hr><br>
@FormatEndIf

@Section Keywords

  All @Bold "keywords" are used for general things inside PureBasic, like creating arrays (Dim) or lists (NewList),
  or controlling the program flow (If : Else : EndIf). They are not followed by the brackets '()', which are
  typically used for PureBasic @Bold "functions".

  @Example
  
@Code  
    If a = 1      ; If, Else and EndIf are keywords; while 'a = 1'
      ...         ; is a variable used inside an expression.
    Else
      ...
    EndIf
@EndCode  

  @Bold "Keywords" are regularly described in the chapters on the left side of
  the index page in the reference manual.
  @LineBreak
  
@FormatIf HTML
<br><hr><br>
@FormatEndIf

@Section Functions

  Every @Bold "function" must be followed by an opening round bracket '(' character, otherwise it will not be considered a function (this applies also to functions without parameters).

  @Example
  
@Code  
    EventWindow() ; it is a function.
    EventWindow   ; it is a variable.
@EndCode  

  @Bold "Functions" are regularly included in the PureBasic "Command libraries", described on the right side of
  the index page in the reference manual.
  @LineBreak
  
@FormatIf HTML
<br><hr><br>
@FormatEndIf

@Section Constants

  All constants are preceded by the hash @Keyword "#" character.
  They can only be declared once in the source and always keep their predefined values. 
  (The compiler replaces all constant names with their corresponding values when compiling the executable.)

  @Example
  
@Code  
  #Hello = 10 ; it is a constant.
  Hello  = 10 ; it is a variable.
@EndCode

@FormatIf HTML
<br><hr><br>
@FormatEndIf

@Section Literal strings

  Literal strings are declared using the " character.
  Escape sequences are supported by prepending the ~ character to the literal string.
  The supported escape sequences are:
@FixedFont
  \a: alarm           @Keyword Chr(7)
  \b: backspace       @Keyword Chr(8)
  \f: formfeed        @Keyword Chr(12)
  \n: newline         @Keyword Chr(10)
  \r: carriage return @Keyword Chr(13)
  \t: horizontal tab  @Keyword Chr(9)
  \v: vertical tab    @Keyword Chr(11)
  \": double quote    @Keyword Chr(34)
  \\: backslash       @Keyword Chr(92)
@EndFixedFont
  There are two special constants for strings:
@FixedFont
  @#Empty$: represents an empty string (exactly the same as "")
  @#Null$ : represents an null string. This can be used for API
           functions requiring a null pointer to a string, or to really free a string.
@EndFixedFont
  Warning: On Windows, \t does not work with the graphical functions of the 2DDrawing and VectorDrawing libraries.

  @Example
@Code  
  a$ =  "Hello world"  ; standard string
  b$ = ~"Escape\nMe !" ; string with escape sequences
@EndCode

@FormatIf HTML
<br><hr><br>
@FormatEndIf

@Section Labels

  All labels must be followed by a colon @Keyword ":" character.
  Label names may not contain any operators (+,-,...) or special characters (ß,ä,ö,ü,...).
  Labels defined inside a @ReferenceLink "procedures" "procedure" will be available only in that procedure.

  @Example
  
@Code  
  I_am_a_label:
@EndCode  

@FormatIf HTML
<br><hr><br>
@FormatEndIf

@Section Modules

  @ReferenceLink "module" "Modules" use a :: (double colon) when referencing a module name.
  Be careful not to confuse these with the single colon used by labels.

  @Example
  
@Code
  Debug CarModule::NbCars
@EndCode

@FormatIf HTML
<br><hr><br>
@FormatEndIf

@Section Expressions

  An expression is something which can be evaluated.
  An expression can mix any variables, constants, or functions, of the same type.
  When using numbers in an expression, you can prefix them with the @Keyword "$" symbol
  to indicate a hexadecimal number, or with the @Keyword "%" symbol to indicate a binary number. 
  Without either of those, the number will be treated as decimal.
  Strings must be enclosed within straight double quotes.

  @Example
  
@Code  
  a = a + 1 + (12 * 3)

  a = a + WindowHeight(#Window) + b/2 + #MyConstant

  If a <> 12 + 2
    b + 2 >= c + 3
  EndIf

  a$ = b$ + "this is a string value" + c$

  Foo = Foo + $69 / %1001  ; Hexadecimal and binary number usage
@EndCode      

@FormatIf HTML
<br><hr><br>
@FormatEndIf

@Section Concatenation of commands

  Any number of commands can be added to the same line by using the @Keyword : option.

  @Example

@Code  
  If IsCrazy = 0 : MessageRequester("Info", "Not Crazy") : Else : MessageRequester("Info", "Crazy") : EndIf
@EndCode  

@FormatIf HTML
<br><hr><br>
@FormatEndIf

@Section Line continuation

  Long expressions can be split across several lines.
  A split line has to end with one of the following operators: plus (+), comma (,), or (|), And, Or, Xor.

  @Example

@Code  
  Text$ = "Very very very very long text" + #LF$ +
          "another long text" + #LF$ +
          " and the end of the long text"

  MessageRequester("Hello this is a very long title",
                   "And a very long message, so we can use the multiline" + #LF$ + Text$,
                   #PB_MessageRequester_Ok)
@EndCode  

@FormatIf HTML
<br><hr><br>
@FormatEndIf

@Section Typical words in this manual

  Words used in this manual:

  @Indent
    <variable> : a basic variable. @LineBreak
    <expression> : an expression as explained above. @LineBreak
    <constant> : a numeric constant. @LineBreak
    <label> : a program label. @LineBreak
    <type> : any type, (standard or structured). @LineBreak
  @EndIndent

@FormatIf HTML
<br><hr><br>
@FormatEndIf

@Section Others

  - In this guide, all topics are listed in alphabetical order to decrease any search time.
  @LineBreak
  @LineBreak
  - @Bold "Return values" of commands are always @ReferenceLink "variables" "Integer" if no other type
    is specified in the Syntax line of the command description.
  @LineBreak
  - In the PureBasic documentation, the terms "commands" and "functions" are used interchangeably, regardless of whether the function returns a value or not.
    To learn whether value is returned by a specific command or function, consult the description provided in the command's documentation.
  @LineBreak

@FormatIf HTML
<br><hr><br>
@FormatEndIf
